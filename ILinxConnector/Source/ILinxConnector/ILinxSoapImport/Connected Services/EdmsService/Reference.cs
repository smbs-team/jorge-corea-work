//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ILinxSoapImport.EdmsService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/ImageSource.ILINX.ContentStore.Domain")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private ILinxSoapImport.EdmsService.DataAction DataActionField;
        
        private string DescriptionField;
        
        private string EmailAddressField;
        
        private string FullNameField;
        
        private System.DateTime LastLoginField;
        
        private string SecurityTokenField;
        
        private ILinxSoapImport.EdmsService.UserGroup[] UserGroupsField;
        
        private int UserIdField;
        
        private ILinxSoapImport.EdmsService.UserType UserTypeField;
        
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ILinxSoapImport.EdmsService.DataAction DataAction {
            get {
                return this.DataActionField;
            }
            set {
                if ((this.DataActionField.Equals(value) != true)) {
                    this.DataActionField = value;
                    this.RaisePropertyChanged("DataAction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string EmailAddress {
            get {
                return this.EmailAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailAddressField, value) != true)) {
                    this.EmailAddressField = value;
                    this.RaisePropertyChanged("EmailAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string FullName {
            get {
                return this.FullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FullNameField, value) != true)) {
                    this.FullNameField = value;
                    this.RaisePropertyChanged("FullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime LastLogin {
            get {
                return this.LastLoginField;
            }
            set {
                if ((this.LastLoginField.Equals(value) != true)) {
                    this.LastLoginField = value;
                    this.RaisePropertyChanged("LastLogin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string SecurityToken {
            get {
                return this.SecurityTokenField;
            }
            set {
                if ((object.ReferenceEquals(this.SecurityTokenField, value) != true)) {
                    this.SecurityTokenField = value;
                    this.RaisePropertyChanged("SecurityToken");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ILinxSoapImport.EdmsService.UserGroup[] UserGroups {
            get {
                return this.UserGroupsField;
            }
            set {
                if ((object.ReferenceEquals(this.UserGroupsField, value) != true)) {
                    this.UserGroupsField = value;
                    this.RaisePropertyChanged("UserGroups");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ILinxSoapImport.EdmsService.UserType UserType {
            get {
                return this.UserTypeField;
            }
            set {
                if ((this.UserTypeField.Equals(value) != true)) {
                    this.UserTypeField = value;
                    this.RaisePropertyChanged("UserType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataAction", Namespace="http://schemas.datacontract.org/2004/07/ImageSource.ILINX.ContentStore.Domain")]
    public enum DataAction : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoAction = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Add = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Modify = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Delete = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserGroup", Namespace="http://schemas.datacontract.org/2004/07/ImageSource.ILINX.ContentStore.Domain")]
    [System.SerializableAttribute()]
    public partial class UserGroup : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private ILinxSoapImport.EdmsService.DataAction DataActionField;
        
        private string DescriptionField;
        
        private ILinxSoapImport.EdmsService.GroupType GroupTypeField;
        
        private bool IsAdminField;
        
        private int UserGroupIdField;
        
        private string UserGroupNameField;
        
        private ILinxSoapImport.EdmsService.User[] UsersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ILinxSoapImport.EdmsService.DataAction DataAction {
            get {
                return this.DataActionField;
            }
            set {
                if ((this.DataActionField.Equals(value) != true)) {
                    this.DataActionField = value;
                    this.RaisePropertyChanged("DataAction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ILinxSoapImport.EdmsService.GroupType GroupType {
            get {
                return this.GroupTypeField;
            }
            set {
                if ((this.GroupTypeField.Equals(value) != true)) {
                    this.GroupTypeField = value;
                    this.RaisePropertyChanged("GroupType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool IsAdmin {
            get {
                return this.IsAdminField;
            }
            set {
                if ((this.IsAdminField.Equals(value) != true)) {
                    this.IsAdminField = value;
                    this.RaisePropertyChanged("IsAdmin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int UserGroupId {
            get {
                return this.UserGroupIdField;
            }
            set {
                if ((this.UserGroupIdField.Equals(value) != true)) {
                    this.UserGroupIdField = value;
                    this.RaisePropertyChanged("UserGroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string UserGroupName {
            get {
                return this.UserGroupNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserGroupNameField, value) != true)) {
                    this.UserGroupNameField = value;
                    this.RaisePropertyChanged("UserGroupName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ILinxSoapImport.EdmsService.User[] Users {
            get {
                return this.UsersField;
            }
            set {
                if ((object.ReferenceEquals(this.UsersField, value) != true)) {
                    this.UsersField = value;
                    this.RaisePropertyChanged("Users");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserType", Namespace="http://schemas.datacontract.org/2004/07/ImageSource.ILINX.ContentStore.Domain")]
    public enum UserType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BuiltIn = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ActiveDirectory = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupType", Namespace="http://schemas.datacontract.org/2004/07/ImageSource.ILINX.ContentStore.Domain")]
    public enum GroupType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BuiltIn = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ActiveDirectory = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FavoriteSearch", Namespace="http://schemas.datacontract.org/2004/07/ImageSource.ILINX.CommonILINX.CaptureDoma" +
        "in")]
    [System.SerializableAttribute()]
    public partial class FavoriteSearch : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ILinxSoapImport.EdmsService.FavoriteSearchConditionItem[] ConditionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OwnerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RepositoryIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ILinxSoapImport.EdmsService.FavoriteSearchConditionItem[] Conditions {
            get {
                return this.ConditionsField;
            }
            set {
                if ((object.ReferenceEquals(this.ConditionsField, value) != true)) {
                    this.ConditionsField = value;
                    this.RaisePropertyChanged("Conditions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Owner {
            get {
                return this.OwnerField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerField, value) != true)) {
                    this.OwnerField = value;
                    this.RaisePropertyChanged("Owner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RepositoryId {
            get {
                return this.RepositoryIdField;
            }
            set {
                if ((this.RepositoryIdField.Equals(value) != true)) {
                    this.RepositoryIdField = value;
                    this.RaisePropertyChanged("RepositoryId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FavoriteSearchConditionItem", Namespace="http://schemas.datacontract.org/2004/07/ImageSource.ILINX.CommonILINX.CaptureDoma" +
        "in")]
    [System.SerializableAttribute()]
    public partial class FavoriteSearchConditionItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConjunctionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IndexNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Operand1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Operand2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperatorField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Conjunction {
            get {
                return this.ConjunctionField;
            }
            set {
                if ((object.ReferenceEquals(this.ConjunctionField, value) != true)) {
                    this.ConjunctionField = value;
                    this.RaisePropertyChanged("Conjunction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IndexName {
            get {
                return this.IndexNameField;
            }
            set {
                if ((object.ReferenceEquals(this.IndexNameField, value) != true)) {
                    this.IndexNameField = value;
                    this.RaisePropertyChanged("IndexName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Operand1 {
            get {
                return this.Operand1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Operand1Field, value) != true)) {
                    this.Operand1Field = value;
                    this.RaisePropertyChanged("Operand1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Operand2 {
            get {
                return this.Operand2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Operand2Field, value) != true)) {
                    this.Operand2Field = value;
                    this.RaisePropertyChanged("Operand2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Operator {
            get {
                return this.OperatorField;
            }
            set {
                if ((object.ReferenceEquals(this.OperatorField, value) != true)) {
                    this.OperatorField = value;
                    this.RaisePropertyChanged("Operator");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Repository", Namespace="http://schemas.datacontract.org/2004/07/ImageSource.ILINX.ContentStore.Domain")]
    [System.SerializableAttribute()]
    public partial class Repository : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string[] AssociatedRepositoryNamesField;
        
        private System.DateTime DateCreatedField;
        
        private ILinxSoapImport.EdmsService.FullTextSearchType FullTextSearchField;
        
        private string InUseByUserNameField;
        
        private System.Collections.Generic.Dictionary<string, ILinxSoapImport.EdmsService.IndexField> IndexFieldsField;
        
        private string LastModifiedByUserNameField;
        
        private System.DateTime LastModifiedDateField;
        
        private string LinkedServerQueryField;
        
        private int RepositoryIdField;
        
        private string RepositoryNameField;
        
        private ILinxSoapImport.EdmsService.SearchDatum[][] SearchRestrictionsField;
        
        private string SettingsXmlField;
        
        private ILinxSoapImport.EdmsService.UserGroupPermission UgPermissionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string[] AssociatedRepositoryNames {
            get {
                return this.AssociatedRepositoryNamesField;
            }
            set {
                if ((object.ReferenceEquals(this.AssociatedRepositoryNamesField, value) != true)) {
                    this.AssociatedRepositoryNamesField = value;
                    this.RaisePropertyChanged("AssociatedRepositoryNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime DateCreated {
            get {
                return this.DateCreatedField;
            }
            set {
                if ((this.DateCreatedField.Equals(value) != true)) {
                    this.DateCreatedField = value;
                    this.RaisePropertyChanged("DateCreated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ILinxSoapImport.EdmsService.FullTextSearchType FullTextSearch {
            get {
                return this.FullTextSearchField;
            }
            set {
                if ((this.FullTextSearchField.Equals(value) != true)) {
                    this.FullTextSearchField = value;
                    this.RaisePropertyChanged("FullTextSearch");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string InUseByUserName {
            get {
                return this.InUseByUserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.InUseByUserNameField, value) != true)) {
                    this.InUseByUserNameField = value;
                    this.RaisePropertyChanged("InUseByUserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Collections.Generic.Dictionary<string, ILinxSoapImport.EdmsService.IndexField> IndexFields {
            get {
                return this.IndexFieldsField;
            }
            set {
                if ((object.ReferenceEquals(this.IndexFieldsField, value) != true)) {
                    this.IndexFieldsField = value;
                    this.RaisePropertyChanged("IndexFields");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string LastModifiedByUserName {
            get {
                return this.LastModifiedByUserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastModifiedByUserNameField, value) != true)) {
                    this.LastModifiedByUserNameField = value;
                    this.RaisePropertyChanged("LastModifiedByUserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime LastModifiedDate {
            get {
                return this.LastModifiedDateField;
            }
            set {
                if ((this.LastModifiedDateField.Equals(value) != true)) {
                    this.LastModifiedDateField = value;
                    this.RaisePropertyChanged("LastModifiedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string LinkedServerQuery {
            get {
                return this.LinkedServerQueryField;
            }
            set {
                if ((object.ReferenceEquals(this.LinkedServerQueryField, value) != true)) {
                    this.LinkedServerQueryField = value;
                    this.RaisePropertyChanged("LinkedServerQuery");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int RepositoryId {
            get {
                return this.RepositoryIdField;
            }
            set {
                if ((this.RepositoryIdField.Equals(value) != true)) {
                    this.RepositoryIdField = value;
                    this.RaisePropertyChanged("RepositoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string RepositoryName {
            get {
                return this.RepositoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RepositoryNameField, value) != true)) {
                    this.RepositoryNameField = value;
                    this.RaisePropertyChanged("RepositoryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ILinxSoapImport.EdmsService.SearchDatum[][] SearchRestrictions {
            get {
                return this.SearchRestrictionsField;
            }
            set {
                if ((object.ReferenceEquals(this.SearchRestrictionsField, value) != true)) {
                    this.SearchRestrictionsField = value;
                    this.RaisePropertyChanged("SearchRestrictions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string SettingsXml {
            get {
                return this.SettingsXmlField;
            }
            set {
                if ((object.ReferenceEquals(this.SettingsXmlField, value) != true)) {
                    this.SettingsXmlField = value;
                    this.RaisePropertyChanged("SettingsXml");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ILinxSoapImport.EdmsService.UserGroupPermission UgPermission {
            get {
                return this.UgPermissionField;
            }
            set {
                if ((object.ReferenceEquals(this.UgPermissionField, value) != true)) {
                    this.UgPermissionField = value;
                    this.RaisePropertyChanged("UgPermission");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserGroupPermission", Namespace="http://schemas.datacontract.org/2004/07/ImageSource.ILINX.ContentStore.Domain")]
    [System.SerializableAttribute()]
    public partial class UserGroupPermission : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool CanAccessField;
        
        private bool CanAccessOfflineField;
        
        private bool CanAddOrReorderPagesField;
        
        private bool CanAddToDiscussionThreadField;
        
        private bool CanAssignPermissionsField;
        
        private bool CanCaptureDocumentsField;
        
        private bool CanCaptureIndexLaterField;
        
        private bool CanChangeScannerSettingsField;
        
        private bool CanDeleteOrReplaceDocumentField;
        
        private bool CanEmailDocumentField;
        
        private bool CanExportIndexFieldsField;
        
        private bool CanHideAllNonRedactionAnnotationsField;
        
        private bool CanModifyRepositoryField;
        
        private bool CanPrintDocumentField;
        
        private bool CanRotateImagesField;
        
        private bool CanSearchForDocumentsField;
        
        private bool CanSeeAdminTabField;
        
        private bool CanSeeAllVersionsField;
        
        private bool CanSeeDiscussionThreadField;
        
        private bool CanSeeReportTabField;
        
        private bool CanSeeRestrictedField;
        
        private bool CanUnlockDocumentField;
        
        private bool CanUpdateIndexValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanAccess {
            get {
                return this.CanAccessField;
            }
            set {
                if ((this.CanAccessField.Equals(value) != true)) {
                    this.CanAccessField = value;
                    this.RaisePropertyChanged("CanAccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanAccessOffline {
            get {
                return this.CanAccessOfflineField;
            }
            set {
                if ((this.CanAccessOfflineField.Equals(value) != true)) {
                    this.CanAccessOfflineField = value;
                    this.RaisePropertyChanged("CanAccessOffline");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanAddOrReorderPages {
            get {
                return this.CanAddOrReorderPagesField;
            }
            set {
                if ((this.CanAddOrReorderPagesField.Equals(value) != true)) {
                    this.CanAddOrReorderPagesField = value;
                    this.RaisePropertyChanged("CanAddOrReorderPages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanAddToDiscussionThread {
            get {
                return this.CanAddToDiscussionThreadField;
            }
            set {
                if ((this.CanAddToDiscussionThreadField.Equals(value) != true)) {
                    this.CanAddToDiscussionThreadField = value;
                    this.RaisePropertyChanged("CanAddToDiscussionThread");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanAssignPermissions {
            get {
                return this.CanAssignPermissionsField;
            }
            set {
                if ((this.CanAssignPermissionsField.Equals(value) != true)) {
                    this.CanAssignPermissionsField = value;
                    this.RaisePropertyChanged("CanAssignPermissions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanCaptureDocuments {
            get {
                return this.CanCaptureDocumentsField;
            }
            set {
                if ((this.CanCaptureDocumentsField.Equals(value) != true)) {
                    this.CanCaptureDocumentsField = value;
                    this.RaisePropertyChanged("CanCaptureDocuments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanCaptureIndexLater {
            get {
                return this.CanCaptureIndexLaterField;
            }
            set {
                if ((this.CanCaptureIndexLaterField.Equals(value) != true)) {
                    this.CanCaptureIndexLaterField = value;
                    this.RaisePropertyChanged("CanCaptureIndexLater");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanChangeScannerSettings {
            get {
                return this.CanChangeScannerSettingsField;
            }
            set {
                if ((this.CanChangeScannerSettingsField.Equals(value) != true)) {
                    this.CanChangeScannerSettingsField = value;
                    this.RaisePropertyChanged("CanChangeScannerSettings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanDeleteOrReplaceDocument {
            get {
                return this.CanDeleteOrReplaceDocumentField;
            }
            set {
                if ((this.CanDeleteOrReplaceDocumentField.Equals(value) != true)) {
                    this.CanDeleteOrReplaceDocumentField = value;
                    this.RaisePropertyChanged("CanDeleteOrReplaceDocument");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanEmailDocument {
            get {
                return this.CanEmailDocumentField;
            }
            set {
                if ((this.CanEmailDocumentField.Equals(value) != true)) {
                    this.CanEmailDocumentField = value;
                    this.RaisePropertyChanged("CanEmailDocument");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanExportIndexFields {
            get {
                return this.CanExportIndexFieldsField;
            }
            set {
                if ((this.CanExportIndexFieldsField.Equals(value) != true)) {
                    this.CanExportIndexFieldsField = value;
                    this.RaisePropertyChanged("CanExportIndexFields");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanHideAllNonRedactionAnnotations {
            get {
                return this.CanHideAllNonRedactionAnnotationsField;
            }
            set {
                if ((this.CanHideAllNonRedactionAnnotationsField.Equals(value) != true)) {
                    this.CanHideAllNonRedactionAnnotationsField = value;
                    this.RaisePropertyChanged("CanHideAllNonRedactionAnnotations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanModifyRepository {
            get {
                return this.CanModifyRepositoryField;
            }
            set {
                if ((this.CanModifyRepositoryField.Equals(value) != true)) {
                    this.CanModifyRepositoryField = value;
                    this.RaisePropertyChanged("CanModifyRepository");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanPrintDocument {
            get {
                return this.CanPrintDocumentField;
            }
            set {
                if ((this.CanPrintDocumentField.Equals(value) != true)) {
                    this.CanPrintDocumentField = value;
                    this.RaisePropertyChanged("CanPrintDocument");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanRotateImages {
            get {
                return this.CanRotateImagesField;
            }
            set {
                if ((this.CanRotateImagesField.Equals(value) != true)) {
                    this.CanRotateImagesField = value;
                    this.RaisePropertyChanged("CanRotateImages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanSearchForDocuments {
            get {
                return this.CanSearchForDocumentsField;
            }
            set {
                if ((this.CanSearchForDocumentsField.Equals(value) != true)) {
                    this.CanSearchForDocumentsField = value;
                    this.RaisePropertyChanged("CanSearchForDocuments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanSeeAdminTab {
            get {
                return this.CanSeeAdminTabField;
            }
            set {
                if ((this.CanSeeAdminTabField.Equals(value) != true)) {
                    this.CanSeeAdminTabField = value;
                    this.RaisePropertyChanged("CanSeeAdminTab");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanSeeAllVersions {
            get {
                return this.CanSeeAllVersionsField;
            }
            set {
                if ((this.CanSeeAllVersionsField.Equals(value) != true)) {
                    this.CanSeeAllVersionsField = value;
                    this.RaisePropertyChanged("CanSeeAllVersions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanSeeDiscussionThread {
            get {
                return this.CanSeeDiscussionThreadField;
            }
            set {
                if ((this.CanSeeDiscussionThreadField.Equals(value) != true)) {
                    this.CanSeeDiscussionThreadField = value;
                    this.RaisePropertyChanged("CanSeeDiscussionThread");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanSeeReportTab {
            get {
                return this.CanSeeReportTabField;
            }
            set {
                if ((this.CanSeeReportTabField.Equals(value) != true)) {
                    this.CanSeeReportTabField = value;
                    this.RaisePropertyChanged("CanSeeReportTab");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanSeeRestricted {
            get {
                return this.CanSeeRestrictedField;
            }
            set {
                if ((this.CanSeeRestrictedField.Equals(value) != true)) {
                    this.CanSeeRestrictedField = value;
                    this.RaisePropertyChanged("CanSeeRestricted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanUnlockDocument {
            get {
                return this.CanUnlockDocumentField;
            }
            set {
                if ((this.CanUnlockDocumentField.Equals(value) != true)) {
                    this.CanUnlockDocumentField = value;
                    this.RaisePropertyChanged("CanUnlockDocument");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanUpdateIndexValue {
            get {
                return this.CanUpdateIndexValueField;
            }
            set {
                if ((this.CanUpdateIndexValueField.Equals(value) != true)) {
                    this.CanUpdateIndexValueField = value;
                    this.RaisePropertyChanged("CanUpdateIndexValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FullTextSearchType", Namespace="http://schemas.datacontract.org/2004/07/ImageSource.ILINX.ContentStore.Domain")]
    public enum FullTextSearchType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Disabled = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IndexOnly = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IndexAndBinary = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IndexField", Namespace="http://schemas.datacontract.org/2004/07/ImageSource.ILINX.ContentStore.Domain")]
    [System.SerializableAttribute()]
    public partial class IndexField : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private ILinxSoapImport.EdmsService.SearchOperator[] AvailableSearchOperatorsField;
        
        private ILinxSoapImport.EdmsService.DataAction DataActionField;
        
        private int DecimalPrecisionField;
        
        private int DecimalScaleField;
        
        private string DefaultValueField;
        
        private string DisplayNameField;
        
        private string FieldNameField;
        
        private ILinxSoapImport.EdmsService.IndexFieldType FieldTypeField;
        
        private string FieldValueField;
        
        private bool HasLookupField;
        
        private bool HiddenField;
        
        private bool IsLinkedField;
        
        private bool IsRestrictedField;
        
        private bool IsSystemFieldField;
        
        private string LinkedTableAliasField;
        
        private string LookupInfoXmlField;
        
        private int MaxFieldLengthField;
        
        private int MaxLinesField;
        
        private string[] PickListFieldValuesField;
        
        private bool ReadonlyField;
        
        private bool RequiredField;
        
        private ILinxSoapImport.EdmsService.SearchOperator SearchOperatorField;
        
        private string TablePrefixField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ILinxSoapImport.EdmsService.SearchOperator[] AvailableSearchOperators {
            get {
                return this.AvailableSearchOperatorsField;
            }
            set {
                if ((object.ReferenceEquals(this.AvailableSearchOperatorsField, value) != true)) {
                    this.AvailableSearchOperatorsField = value;
                    this.RaisePropertyChanged("AvailableSearchOperators");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ILinxSoapImport.EdmsService.DataAction DataAction {
            get {
                return this.DataActionField;
            }
            set {
                if ((this.DataActionField.Equals(value) != true)) {
                    this.DataActionField = value;
                    this.RaisePropertyChanged("DataAction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int DecimalPrecision {
            get {
                return this.DecimalPrecisionField;
            }
            set {
                if ((this.DecimalPrecisionField.Equals(value) != true)) {
                    this.DecimalPrecisionField = value;
                    this.RaisePropertyChanged("DecimalPrecision");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int DecimalScale {
            get {
                return this.DecimalScaleField;
            }
            set {
                if ((this.DecimalScaleField.Equals(value) != true)) {
                    this.DecimalScaleField = value;
                    this.RaisePropertyChanged("DecimalScale");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string DefaultValue {
            get {
                return this.DefaultValueField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultValueField, value) != true)) {
                    this.DefaultValueField = value;
                    this.RaisePropertyChanged("DefaultValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string FieldName {
            get {
                return this.FieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldNameField, value) != true)) {
                    this.FieldNameField = value;
                    this.RaisePropertyChanged("FieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ILinxSoapImport.EdmsService.IndexFieldType FieldType {
            get {
                return this.FieldTypeField;
            }
            set {
                if ((this.FieldTypeField.Equals(value) != true)) {
                    this.FieldTypeField = value;
                    this.RaisePropertyChanged("FieldType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string FieldValue {
            get {
                return this.FieldValueField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldValueField, value) != true)) {
                    this.FieldValueField = value;
                    this.RaisePropertyChanged("FieldValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool HasLookup {
            get {
                return this.HasLookupField;
            }
            set {
                if ((this.HasLookupField.Equals(value) != true)) {
                    this.HasLookupField = value;
                    this.RaisePropertyChanged("HasLookup");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool Hidden {
            get {
                return this.HiddenField;
            }
            set {
                if ((this.HiddenField.Equals(value) != true)) {
                    this.HiddenField = value;
                    this.RaisePropertyChanged("Hidden");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool IsLinked {
            get {
                return this.IsLinkedField;
            }
            set {
                if ((this.IsLinkedField.Equals(value) != true)) {
                    this.IsLinkedField = value;
                    this.RaisePropertyChanged("IsLinked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool IsRestricted {
            get {
                return this.IsRestrictedField;
            }
            set {
                if ((this.IsRestrictedField.Equals(value) != true)) {
                    this.IsRestrictedField = value;
                    this.RaisePropertyChanged("IsRestricted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool IsSystemField {
            get {
                return this.IsSystemFieldField;
            }
            set {
                if ((this.IsSystemFieldField.Equals(value) != true)) {
                    this.IsSystemFieldField = value;
                    this.RaisePropertyChanged("IsSystemField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string LinkedTableAlias {
            get {
                return this.LinkedTableAliasField;
            }
            set {
                if ((object.ReferenceEquals(this.LinkedTableAliasField, value) != true)) {
                    this.LinkedTableAliasField = value;
                    this.RaisePropertyChanged("LinkedTableAlias");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string LookupInfoXml {
            get {
                return this.LookupInfoXmlField;
            }
            set {
                if ((object.ReferenceEquals(this.LookupInfoXmlField, value) != true)) {
                    this.LookupInfoXmlField = value;
                    this.RaisePropertyChanged("LookupInfoXml");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int MaxFieldLength {
            get {
                return this.MaxFieldLengthField;
            }
            set {
                if ((this.MaxFieldLengthField.Equals(value) != true)) {
                    this.MaxFieldLengthField = value;
                    this.RaisePropertyChanged("MaxFieldLength");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int MaxLines {
            get {
                return this.MaxLinesField;
            }
            set {
                if ((this.MaxLinesField.Equals(value) != true)) {
                    this.MaxLinesField = value;
                    this.RaisePropertyChanged("MaxLines");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string[] PickListFieldValues {
            get {
                return this.PickListFieldValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.PickListFieldValuesField, value) != true)) {
                    this.PickListFieldValuesField = value;
                    this.RaisePropertyChanged("PickListFieldValues");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool Readonly {
            get {
                return this.ReadonlyField;
            }
            set {
                if ((this.ReadonlyField.Equals(value) != true)) {
                    this.ReadonlyField = value;
                    this.RaisePropertyChanged("Readonly");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool Required {
            get {
                return this.RequiredField;
            }
            set {
                if ((this.RequiredField.Equals(value) != true)) {
                    this.RequiredField = value;
                    this.RaisePropertyChanged("Required");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ILinxSoapImport.EdmsService.SearchOperator SearchOperator {
            get {
                return this.SearchOperatorField;
            }
            set {
                if ((this.SearchOperatorField.Equals(value) != true)) {
                    this.SearchOperatorField = value;
                    this.RaisePropertyChanged("SearchOperator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string TablePrefix {
            get {
                return this.TablePrefixField;
            }
            set {
                if ((object.ReferenceEquals(this.TablePrefixField, value) != true)) {
                    this.TablePrefixField = value;
                    this.RaisePropertyChanged("TablePrefix");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SearchDatum", Namespace="http://schemas.datacontract.org/2004/07/ImageSource.ILINX.ContentStore.Domain")]
    [System.SerializableAttribute()]
    public partial class SearchDatum : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string BottomField;
        
        private ILinxSoapImport.EdmsService.SearchConjunction ConjunctionField;
        
        private string FieldNameField;
        
        private ILinxSoapImport.EdmsService.SearchOperator SearchOperatorField;
        
        private string TopField;
        
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Bottom {
            get {
                return this.BottomField;
            }
            set {
                if ((object.ReferenceEquals(this.BottomField, value) != true)) {
                    this.BottomField = value;
                    this.RaisePropertyChanged("Bottom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ILinxSoapImport.EdmsService.SearchConjunction Conjunction {
            get {
                return this.ConjunctionField;
            }
            set {
                if ((this.ConjunctionField.Equals(value) != true)) {
                    this.ConjunctionField = value;
                    this.RaisePropertyChanged("Conjunction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string FieldName {
            get {
                return this.FieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldNameField, value) != true)) {
                    this.FieldNameField = value;
                    this.RaisePropertyChanged("FieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ILinxSoapImport.EdmsService.SearchOperator SearchOperator {
            get {
                return this.SearchOperatorField;
            }
            set {
                if ((this.SearchOperatorField.Equals(value) != true)) {
                    this.SearchOperatorField = value;
                    this.RaisePropertyChanged("SearchOperator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Top {
            get {
                return this.TopField;
            }
            set {
                if ((object.ReferenceEquals(this.TopField, value) != true)) {
                    this.TopField = value;
                    this.RaisePropertyChanged("Top");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SearchOperator", Namespace="http://schemas.datacontract.org/2004/07/ImageSource.ILINX.ContentStore.Domain")]
    public enum SearchOperator : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Equal = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GreaterThan = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GreaterThanOrEqualTo = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LessThan = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LessThanOrEqualTo = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InBetween = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Contains = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotContains = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotEqual = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StartsWith = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EndsWith = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ContainsFullText = 11,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IndexFieldType", Namespace="http://schemas.datacontract.org/2004/07/ImageSource.ILINX.ContentStore.Domain")]
    public enum IndexFieldType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        _int = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        _decimal = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        _string = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        _date = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        _bigint = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        _bool = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        _picklist = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        _table = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        _saveToFile = 8,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SearchConjunction", Namespace="http://schemas.datacontract.org/2004/07/ImageSource.ILINX.ContentStore.Domain")]
    public enum SearchConjunction : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        And = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Or = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AnnotationPermission", Namespace="http://schemas.datacontract.org/2004/07/ImageSource.ILINX.ContentStore.Domain")]
    [System.SerializableAttribute()]
    public partial class AnnotationPermission : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool CanCreateHighlightsField;
        
        private bool CanCreateLineAnnotationField;
        
        private bool CanCreateRedactionsField;
        
        private bool CanCreateTextNotesField;
        
        private bool CanDeleteHighlightsField;
        
        private bool CanDeleteLineAnnotationField;
        
        private bool CanDeleteRedactionsField;
        
        private bool CanDeleteTextNotesField;
        
        private bool CanHideRedactionsField;
        
        private bool CanSeeHighlightsField;
        
        private bool CanSeeLineAnnotationField;
        
        private bool CanSeeTextNotesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanCreateHighlights {
            get {
                return this.CanCreateHighlightsField;
            }
            set {
                if ((this.CanCreateHighlightsField.Equals(value) != true)) {
                    this.CanCreateHighlightsField = value;
                    this.RaisePropertyChanged("CanCreateHighlights");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanCreateLineAnnotation {
            get {
                return this.CanCreateLineAnnotationField;
            }
            set {
                if ((this.CanCreateLineAnnotationField.Equals(value) != true)) {
                    this.CanCreateLineAnnotationField = value;
                    this.RaisePropertyChanged("CanCreateLineAnnotation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanCreateRedactions {
            get {
                return this.CanCreateRedactionsField;
            }
            set {
                if ((this.CanCreateRedactionsField.Equals(value) != true)) {
                    this.CanCreateRedactionsField = value;
                    this.RaisePropertyChanged("CanCreateRedactions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanCreateTextNotes {
            get {
                return this.CanCreateTextNotesField;
            }
            set {
                if ((this.CanCreateTextNotesField.Equals(value) != true)) {
                    this.CanCreateTextNotesField = value;
                    this.RaisePropertyChanged("CanCreateTextNotes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanDeleteHighlights {
            get {
                return this.CanDeleteHighlightsField;
            }
            set {
                if ((this.CanDeleteHighlightsField.Equals(value) != true)) {
                    this.CanDeleteHighlightsField = value;
                    this.RaisePropertyChanged("CanDeleteHighlights");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanDeleteLineAnnotation {
            get {
                return this.CanDeleteLineAnnotationField;
            }
            set {
                if ((this.CanDeleteLineAnnotationField.Equals(value) != true)) {
                    this.CanDeleteLineAnnotationField = value;
                    this.RaisePropertyChanged("CanDeleteLineAnnotation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanDeleteRedactions {
            get {
                return this.CanDeleteRedactionsField;
            }
            set {
                if ((this.CanDeleteRedactionsField.Equals(value) != true)) {
                    this.CanDeleteRedactionsField = value;
                    this.RaisePropertyChanged("CanDeleteRedactions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanDeleteTextNotes {
            get {
                return this.CanDeleteTextNotesField;
            }
            set {
                if ((this.CanDeleteTextNotesField.Equals(value) != true)) {
                    this.CanDeleteTextNotesField = value;
                    this.RaisePropertyChanged("CanDeleteTextNotes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanHideRedactions {
            get {
                return this.CanHideRedactionsField;
            }
            set {
                if ((this.CanHideRedactionsField.Equals(value) != true)) {
                    this.CanHideRedactionsField = value;
                    this.RaisePropertyChanged("CanHideRedactions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanSeeHighlights {
            get {
                return this.CanSeeHighlightsField;
            }
            set {
                if ((this.CanSeeHighlightsField.Equals(value) != true)) {
                    this.CanSeeHighlightsField = value;
                    this.RaisePropertyChanged("CanSeeHighlights");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanSeeLineAnnotation {
            get {
                return this.CanSeeLineAnnotationField;
            }
            set {
                if ((this.CanSeeLineAnnotationField.Equals(value) != true)) {
                    this.CanSeeLineAnnotationField = value;
                    this.RaisePropertyChanged("CanSeeLineAnnotation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanSeeTextNotes {
            get {
                return this.CanSeeTextNotesField;
            }
            set {
                if ((this.CanSeeTextNotesField.Equals(value) != true)) {
                    this.CanSeeTextNotesField = value;
                    this.RaisePropertyChanged("CanSeeTextNotes");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContentStoreDocument", Namespace="http://schemas.datacontract.org/2004/07/ImageSource.ILINX.ContentStore.Domain")]
    [System.SerializableAttribute()]
    public partial class ContentStoreDocument : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string AnnotationsField;
        
        private int DiscussionThreadCountField;
        
        private System.Guid DocumentIDField;
        
        private ILinxSoapImport.EdmsService.ContentStoreFile[] FilesField;
        
        private ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[] MetaDataField;
        
        private string RepositoryNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Annotations {
            get {
                return this.AnnotationsField;
            }
            set {
                if ((object.ReferenceEquals(this.AnnotationsField, value) != true)) {
                    this.AnnotationsField = value;
                    this.RaisePropertyChanged("Annotations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int DiscussionThreadCount {
            get {
                return this.DiscussionThreadCountField;
            }
            set {
                if ((this.DiscussionThreadCountField.Equals(value) != true)) {
                    this.DiscussionThreadCountField = value;
                    this.RaisePropertyChanged("DiscussionThreadCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid DocumentID {
            get {
                return this.DocumentIDField;
            }
            set {
                if ((this.DocumentIDField.Equals(value) != true)) {
                    this.DocumentIDField = value;
                    this.RaisePropertyChanged("DocumentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ILinxSoapImport.EdmsService.ContentStoreFile[] Files {
            get {
                return this.FilesField;
            }
            set {
                if ((object.ReferenceEquals(this.FilesField, value) != true)) {
                    this.FilesField = value;
                    this.RaisePropertyChanged("Files");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[] MetaData {
            get {
                return this.MetaDataField;
            }
            set {
                if ((object.ReferenceEquals(this.MetaDataField, value) != true)) {
                    this.MetaDataField = value;
                    this.RaisePropertyChanged("MetaData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string RepositoryName {
            get {
                return this.RepositoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RepositoryNameField, value) != true)) {
                    this.RepositoryNameField = value;
                    this.RaisePropertyChanged("RepositoryName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContentStoreFile", Namespace="http://schemas.datacontract.org/2004/07/ImageSource.ILINX.ContentStore.Domain")]
    [System.SerializableAttribute()]
    public partial class ContentStoreFile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool ContainsLargeFileField;
        
        private System.Guid DocumentIDField;
        
        private byte[] FileBitsField;
        
        private string FileExtensionField;
        
        private string FileHashField;
        
        private System.Guid FileIDField;
        
        private long FileSizeInBytesField;
        
        private bool IsRejectedField;
        
        private string LargeFileNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool ContainsLargeFile {
            get {
                return this.ContainsLargeFileField;
            }
            set {
                if ((this.ContainsLargeFileField.Equals(value) != true)) {
                    this.ContainsLargeFileField = value;
                    this.RaisePropertyChanged("ContainsLargeFile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid DocumentID {
            get {
                return this.DocumentIDField;
            }
            set {
                if ((this.DocumentIDField.Equals(value) != true)) {
                    this.DocumentIDField = value;
                    this.RaisePropertyChanged("DocumentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public byte[] FileBits {
            get {
                return this.FileBitsField;
            }
            set {
                if ((object.ReferenceEquals(this.FileBitsField, value) != true)) {
                    this.FileBitsField = value;
                    this.RaisePropertyChanged("FileBits");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string FileExtension {
            get {
                return this.FileExtensionField;
            }
            set {
                if ((object.ReferenceEquals(this.FileExtensionField, value) != true)) {
                    this.FileExtensionField = value;
                    this.RaisePropertyChanged("FileExtension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string FileHash {
            get {
                return this.FileHashField;
            }
            set {
                if ((object.ReferenceEquals(this.FileHashField, value) != true)) {
                    this.FileHashField = value;
                    this.RaisePropertyChanged("FileHash");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid FileID {
            get {
                return this.FileIDField;
            }
            set {
                if ((this.FileIDField.Equals(value) != true)) {
                    this.FileIDField = value;
                    this.RaisePropertyChanged("FileID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long FileSizeInBytes {
            get {
                return this.FileSizeInBytesField;
            }
            set {
                if ((this.FileSizeInBytesField.Equals(value) != true)) {
                    this.FileSizeInBytesField = value;
                    this.RaisePropertyChanged("FileSizeInBytes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool IsRejected {
            get {
                return this.IsRejectedField;
            }
            set {
                if ((this.IsRejectedField.Equals(value) != true)) {
                    this.IsRejectedField = value;
                    this.RaisePropertyChanged("IsRejected");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string LargeFileName {
            get {
                return this.LargeFileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LargeFileNameField, value) != true)) {
                    this.LargeFileNameField = value;
                    this.RaisePropertyChanged("LargeFileName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContentStoreDocumentMetaData", Namespace="http://schemas.datacontract.org/2004/07/ImageSource.ILINX.ContentStore.Domain")]
    [System.SerializableAttribute()]
    public partial class ContentStoreDocumentMetaData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string CheckedOutByUserNameField;
        
        private System.DateTime CheckedOutDateField;
        
        private string CreatedByUserNameField;
        
        private int DiscussionThreadCountField;
        
        private System.Guid DocumentIDField;
        
        private System.DateTime EnteredDateField;
        
        private System.Guid FileIDField;
        
        private System.Collections.Generic.Dictionary<string, ILinxSoapImport.EdmsService.IndexField> IndexInfoField;
        
        private bool IsInWorkflowField;
        
        private System.DateTime ModifiedDateField;
        
        private string RepositoryNameField;
        
        private int RowIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string CheckedOutByUserName {
            get {
                return this.CheckedOutByUserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CheckedOutByUserNameField, value) != true)) {
                    this.CheckedOutByUserNameField = value;
                    this.RaisePropertyChanged("CheckedOutByUserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime CheckedOutDate {
            get {
                return this.CheckedOutDateField;
            }
            set {
                if ((this.CheckedOutDateField.Equals(value) != true)) {
                    this.CheckedOutDateField = value;
                    this.RaisePropertyChanged("CheckedOutDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string CreatedByUserName {
            get {
                return this.CreatedByUserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatedByUserNameField, value) != true)) {
                    this.CreatedByUserNameField = value;
                    this.RaisePropertyChanged("CreatedByUserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int DiscussionThreadCount {
            get {
                return this.DiscussionThreadCountField;
            }
            set {
                if ((this.DiscussionThreadCountField.Equals(value) != true)) {
                    this.DiscussionThreadCountField = value;
                    this.RaisePropertyChanged("DiscussionThreadCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid DocumentID {
            get {
                return this.DocumentIDField;
            }
            set {
                if ((this.DocumentIDField.Equals(value) != true)) {
                    this.DocumentIDField = value;
                    this.RaisePropertyChanged("DocumentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime EnteredDate {
            get {
                return this.EnteredDateField;
            }
            set {
                if ((this.EnteredDateField.Equals(value) != true)) {
                    this.EnteredDateField = value;
                    this.RaisePropertyChanged("EnteredDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid FileID {
            get {
                return this.FileIDField;
            }
            set {
                if ((this.FileIDField.Equals(value) != true)) {
                    this.FileIDField = value;
                    this.RaisePropertyChanged("FileID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Collections.Generic.Dictionary<string, ILinxSoapImport.EdmsService.IndexField> IndexInfo {
            get {
                return this.IndexInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.IndexInfoField, value) != true)) {
                    this.IndexInfoField = value;
                    this.RaisePropertyChanged("IndexInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool IsInWorkflow {
            get {
                return this.IsInWorkflowField;
            }
            set {
                if ((this.IsInWorkflowField.Equals(value) != true)) {
                    this.IsInWorkflowField = value;
                    this.RaisePropertyChanged("IsInWorkflow");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime ModifiedDate {
            get {
                return this.ModifiedDateField;
            }
            set {
                if ((this.ModifiedDateField.Equals(value) != true)) {
                    this.ModifiedDateField = value;
                    this.RaisePropertyChanged("ModifiedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string RepositoryName {
            get {
                return this.RepositoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RepositoryNameField, value) != true)) {
                    this.RepositoryNameField = value;
                    this.RaisePropertyChanged("RepositoryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int RowID {
            get {
                return this.RowIDField;
            }
            set {
                if ((this.RowIDField.Equals(value) != true)) {
                    this.RowIDField = value;
                    this.RaisePropertyChanged("RowID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DiscussionMessage", Namespace="http://schemas.datacontract.org/2004/07/ImageSource.ILINX.ContentStore.Domain")]
    [System.SerializableAttribute()]
    public partial class DiscussionMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTime DateCreatedField;
        
        private System.Guid DocumentIDField;
        
        private int IdField;
        
        private string MessageField;
        
        private bool OverrideDataField;
        
        private int RepositoryIdField;
        
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime DateCreated {
            get {
                return this.DateCreatedField;
            }
            set {
                if ((this.DateCreatedField.Equals(value) != true)) {
                    this.DateCreatedField = value;
                    this.RaisePropertyChanged("DateCreated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid DocumentID {
            get {
                return this.DocumentIDField;
            }
            set {
                if ((this.DocumentIDField.Equals(value) != true)) {
                    this.DocumentIDField = value;
                    this.RaisePropertyChanged("DocumentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool OverrideData {
            get {
                return this.OverrideDataField;
            }
            set {
                if ((this.OverrideDataField.Equals(value) != true)) {
                    this.OverrideDataField = value;
                    this.RaisePropertyChanged("OverrideData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int RepositoryId {
            get {
                return this.RepositoryIdField;
            }
            set {
                if ((this.RepositoryIdField.Equals(value) != true)) {
                    this.RepositoryIdField = value;
                    this.RaisePropertyChanged("RepositoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BarcodeConfiguration", Namespace="http://schemas.datacontract.org/2004/07/ImageSource.ILINX.CommonILINX.BarcodeLib")]
    [System.SerializableAttribute()]
    public partial class BarcodeConfiguration : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ILinxSoapImport.EdmsService.BarcodeAction[] BarcodeActionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocTypeNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ILinxSoapImport.EdmsService.BarcodeAction[] BarcodeActions {
            get {
                return this.BarcodeActionsField;
            }
            set {
                if ((object.ReferenceEquals(this.BarcodeActionsField, value) != true)) {
                    this.BarcodeActionsField = value;
                    this.RaisePropertyChanged("BarcodeActions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocTypeName {
            get {
                return this.DocTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DocTypeNameField, value) != true)) {
                    this.DocTypeNameField = value;
                    this.RaisePropertyChanged("DocTypeName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BarcodeAction", Namespace="http://schemas.datacontract.org/2004/07/ImageSource.ILINX.CommonILINX.BarcodeLib")]
    [System.SerializableAttribute()]
    public partial class BarcodeAction : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BarcodePositionInDocField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BarcodeStartsWithField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ILinxSoapImport.EdmsService.BarcodeType BarcodeTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CopyValueToIndexNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasDoLookupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDocumentSeparatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RemoveDocumentSeparatorField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BarcodePositionInDoc {
            get {
                return this.BarcodePositionInDocField;
            }
            set {
                if ((this.BarcodePositionInDocField.Equals(value) != true)) {
                    this.BarcodePositionInDocField = value;
                    this.RaisePropertyChanged("BarcodePositionInDoc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BarcodeStartsWith {
            get {
                return this.BarcodeStartsWithField;
            }
            set {
                if ((object.ReferenceEquals(this.BarcodeStartsWithField, value) != true)) {
                    this.BarcodeStartsWithField = value;
                    this.RaisePropertyChanged("BarcodeStartsWith");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ILinxSoapImport.EdmsService.BarcodeType BarcodeType {
            get {
                return this.BarcodeTypeField;
            }
            set {
                if ((this.BarcodeTypeField.Equals(value) != true)) {
                    this.BarcodeTypeField = value;
                    this.RaisePropertyChanged("BarcodeType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CopyValueToIndexName {
            get {
                return this.CopyValueToIndexNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CopyValueToIndexNameField, value) != true)) {
                    this.CopyValueToIndexNameField = value;
                    this.RaisePropertyChanged("CopyValueToIndexName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasDoLookup {
            get {
                return this.HasDoLookupField;
            }
            set {
                if ((this.HasDoLookupField.Equals(value) != true)) {
                    this.HasDoLookupField = value;
                    this.RaisePropertyChanged("HasDoLookup");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDocumentSeparator {
            get {
                return this.IsDocumentSeparatorField;
            }
            set {
                if ((this.IsDocumentSeparatorField.Equals(value) != true)) {
                    this.IsDocumentSeparatorField = value;
                    this.RaisePropertyChanged("IsDocumentSeparator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RemoveDocumentSeparator {
            get {
                return this.RemoveDocumentSeparatorField;
            }
            set {
                if ((this.RemoveDocumentSeparatorField.Equals(value) != true)) {
                    this.RemoveDocumentSeparatorField = value;
                    this.RaisePropertyChanged("RemoveDocumentSeparator");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BarcodeType", Namespace="http://schemas.datacontract.org/2004/07/ImageSource.ILINX.CommonILINX.CaptureDoma" +
        "in.Barcode")]
    public enum BarcodeType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CODABAR = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CODE128 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CODE25 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CODE39 = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CODE93 = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DATABAR = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EAN8 = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DATAMATRIX = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EAN13 = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PATCH = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PDF417 = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        QRCODE = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UPCA = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UPCE = 13,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContentStoreDocumentVersionEntry", Namespace="http://schemas.datacontract.org/2004/07/ImageSource.ILINX.ContentStore.Domain")]
    [System.SerializableAttribute()]
    public partial class ContentStoreDocumentVersionEntry : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string CommentsField;
        
        private System.Guid DocumentIDField;
        
        private string ModifiedByUserNameField;
        
        private System.DateTime ModifiedDateField;
        
        private System.Version VersionNumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Comments {
            get {
                return this.CommentsField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentsField, value) != true)) {
                    this.CommentsField = value;
                    this.RaisePropertyChanged("Comments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid DocumentID {
            get {
                return this.DocumentIDField;
            }
            set {
                if ((this.DocumentIDField.Equals(value) != true)) {
                    this.DocumentIDField = value;
                    this.RaisePropertyChanged("DocumentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ModifiedByUserName {
            get {
                return this.ModifiedByUserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ModifiedByUserNameField, value) != true)) {
                    this.ModifiedByUserNameField = value;
                    this.RaisePropertyChanged("ModifiedByUserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime ModifiedDate {
            get {
                return this.ModifiedDateField;
            }
            set {
                if ((this.ModifiedDateField.Equals(value) != true)) {
                    this.ModifiedDateField = value;
                    this.RaisePropertyChanged("ModifiedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Version VersionNumber {
            get {
                return this.VersionNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionNumberField, value) != true)) {
                    this.VersionNumberField = value;
                    this.RaisePropertyChanged("VersionNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PicklistSortingType", Namespace="http://schemas.datacontract.org/2004/07/ImageSource.ILINX.ContentStore.Domain")]
    public enum PicklistSortingType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ascending = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Descending = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RepositoryAssociation", Namespace="http://schemas.datacontract.org/2004/07/ImageSource.ILINX.ContentStore.Domain")]
    [System.SerializableAttribute()]
    public partial class RepositoryAssociation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string SourceFieldNameField;
        
        private long SourceRepositoryIDField;
        
        private string SourceRepositoryNameField;
        
        private string TargetFieldNameField;
        
        private long TargetRepositoryIDField;
        
        private string TargetRepositoryNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string SourceFieldName {
            get {
                return this.SourceFieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceFieldNameField, value) != true)) {
                    this.SourceFieldNameField = value;
                    this.RaisePropertyChanged("SourceFieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long SourceRepositoryID {
            get {
                return this.SourceRepositoryIDField;
            }
            set {
                if ((this.SourceRepositoryIDField.Equals(value) != true)) {
                    this.SourceRepositoryIDField = value;
                    this.RaisePropertyChanged("SourceRepositoryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string SourceRepositoryName {
            get {
                return this.SourceRepositoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceRepositoryNameField, value) != true)) {
                    this.SourceRepositoryNameField = value;
                    this.RaisePropertyChanged("SourceRepositoryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string TargetFieldName {
            get {
                return this.TargetFieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetFieldNameField, value) != true)) {
                    this.TargetFieldNameField = value;
                    this.RaisePropertyChanged("TargetFieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long TargetRepositoryID {
            get {
                return this.TargetRepositoryIDField;
            }
            set {
                if ((this.TargetRepositoryIDField.Equals(value) != true)) {
                    this.TargetRepositoryIDField = value;
                    this.RaisePropertyChanged("TargetRepositoryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string TargetRepositoryName {
            get {
                return this.TargetRepositoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetRepositoryNameField, value) != true)) {
                    this.TargetRepositoryNameField = value;
                    this.RaisePropertyChanged("TargetRepositoryName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkedServerTableSettings", Namespace="http://schemas.datacontract.org/2004/07/ImageSource.ILINX.ContentStore.Domain")]
    [System.SerializableAttribute()]
    public partial class LinkedServerTableSettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private ILinxSoapImport.EdmsService.IndexField[] LinkedIndexFieldsField;
        
        private string LinkedServerDatabaseNameField;
        
        private ILinxSoapImport.EdmsService.LinkedServerFieldSettings[] LinkedServerFieldSettingsField;
        
        private ILinxSoapImport.EdmsService.JoinTableType LinkedServerJoinTypeField;
        
        private string LinkedServerNameField;
        
        private string LinkedServerTableNameField;
        
        private string LinkedServerTablePrefixField;
        
        private string LinkedServerTableSchemaField;
        
        private int RepositoryIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ILinxSoapImport.EdmsService.IndexField[] LinkedIndexFields {
            get {
                return this.LinkedIndexFieldsField;
            }
            set {
                if ((object.ReferenceEquals(this.LinkedIndexFieldsField, value) != true)) {
                    this.LinkedIndexFieldsField = value;
                    this.RaisePropertyChanged("LinkedIndexFields");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string LinkedServerDatabaseName {
            get {
                return this.LinkedServerDatabaseNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LinkedServerDatabaseNameField, value) != true)) {
                    this.LinkedServerDatabaseNameField = value;
                    this.RaisePropertyChanged("LinkedServerDatabaseName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ILinxSoapImport.EdmsService.LinkedServerFieldSettings[] LinkedServerFieldSettings {
            get {
                return this.LinkedServerFieldSettingsField;
            }
            set {
                if ((object.ReferenceEquals(this.LinkedServerFieldSettingsField, value) != true)) {
                    this.LinkedServerFieldSettingsField = value;
                    this.RaisePropertyChanged("LinkedServerFieldSettings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ILinxSoapImport.EdmsService.JoinTableType LinkedServerJoinType {
            get {
                return this.LinkedServerJoinTypeField;
            }
            set {
                if ((this.LinkedServerJoinTypeField.Equals(value) != true)) {
                    this.LinkedServerJoinTypeField = value;
                    this.RaisePropertyChanged("LinkedServerJoinType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string LinkedServerName {
            get {
                return this.LinkedServerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LinkedServerNameField, value) != true)) {
                    this.LinkedServerNameField = value;
                    this.RaisePropertyChanged("LinkedServerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string LinkedServerTableName {
            get {
                return this.LinkedServerTableNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LinkedServerTableNameField, value) != true)) {
                    this.LinkedServerTableNameField = value;
                    this.RaisePropertyChanged("LinkedServerTableName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string LinkedServerTablePrefix {
            get {
                return this.LinkedServerTablePrefixField;
            }
            set {
                if ((object.ReferenceEquals(this.LinkedServerTablePrefixField, value) != true)) {
                    this.LinkedServerTablePrefixField = value;
                    this.RaisePropertyChanged("LinkedServerTablePrefix");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string LinkedServerTableSchema {
            get {
                return this.LinkedServerTableSchemaField;
            }
            set {
                if ((object.ReferenceEquals(this.LinkedServerTableSchemaField, value) != true)) {
                    this.LinkedServerTableSchemaField = value;
                    this.RaisePropertyChanged("LinkedServerTableSchema");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int RepositoryID {
            get {
                return this.RepositoryIDField;
            }
            set {
                if ((this.RepositoryIDField.Equals(value) != true)) {
                    this.RepositoryIDField = value;
                    this.RaisePropertyChanged("RepositoryID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkedServerFieldSettings", Namespace="http://schemas.datacontract.org/2004/07/ImageSource.ILINX.ContentStore.Domain")]
    [System.SerializableAttribute()]
    public partial class LinkedServerFieldSettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string LinkedServerFieldNameField;
        
        private string RepositoryIndexFieldNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string LinkedServerFieldName {
            get {
                return this.LinkedServerFieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LinkedServerFieldNameField, value) != true)) {
                    this.LinkedServerFieldNameField = value;
                    this.RaisePropertyChanged("LinkedServerFieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string RepositoryIndexFieldName {
            get {
                return this.RepositoryIndexFieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RepositoryIndexFieldNameField, value) != true)) {
                    this.RepositoryIndexFieldNameField = value;
                    this.RaisePropertyChanged("RepositoryIndexFieldName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JoinTableType", Namespace="http://schemas.datacontract.org/2004/07/ImageSource.ILINX.ContentStore.Domain")]
    public enum JoinTableType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InnerJoin = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LeftJoin = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RightJoin = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FullOuterJoin = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="View", Namespace="http://schemas.datacontract.org/2004/07/ImageSource.ILINX.ContentStore.Domain")]
    [System.SerializableAttribute()]
    public partial class View : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string CreatedByUserNameField;
        
        private System.DateTime DateCreatedField;
        
        private bool IsICSViewField;
        
        private string LastModifiedByUserNameField;
        
        private System.DateTime LastModifiedDateField;
        
        private string SearchQueryField;
        
        private int[] SearchQueryRepositoryIDsField;
        
        private ILinxSoapImport.EdmsService.ViewAttibutes ViewAttibutesField;
        
        private string ViewDescriptionField;
        
        private long ViewIDField;
        
        private string ViewNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string CreatedByUserName {
            get {
                return this.CreatedByUserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatedByUserNameField, value) != true)) {
                    this.CreatedByUserNameField = value;
                    this.RaisePropertyChanged("CreatedByUserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime DateCreated {
            get {
                return this.DateCreatedField;
            }
            set {
                if ((this.DateCreatedField.Equals(value) != true)) {
                    this.DateCreatedField = value;
                    this.RaisePropertyChanged("DateCreated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool IsICSView {
            get {
                return this.IsICSViewField;
            }
            set {
                if ((this.IsICSViewField.Equals(value) != true)) {
                    this.IsICSViewField = value;
                    this.RaisePropertyChanged("IsICSView");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string LastModifiedByUserName {
            get {
                return this.LastModifiedByUserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastModifiedByUserNameField, value) != true)) {
                    this.LastModifiedByUserNameField = value;
                    this.RaisePropertyChanged("LastModifiedByUserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime LastModifiedDate {
            get {
                return this.LastModifiedDateField;
            }
            set {
                if ((this.LastModifiedDateField.Equals(value) != true)) {
                    this.LastModifiedDateField = value;
                    this.RaisePropertyChanged("LastModifiedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string SearchQuery {
            get {
                return this.SearchQueryField;
            }
            set {
                if ((object.ReferenceEquals(this.SearchQueryField, value) != true)) {
                    this.SearchQueryField = value;
                    this.RaisePropertyChanged("SearchQuery");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int[] SearchQueryRepositoryIDs {
            get {
                return this.SearchQueryRepositoryIDsField;
            }
            set {
                if ((object.ReferenceEquals(this.SearchQueryRepositoryIDsField, value) != true)) {
                    this.SearchQueryRepositoryIDsField = value;
                    this.RaisePropertyChanged("SearchQueryRepositoryIDs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ILinxSoapImport.EdmsService.ViewAttibutes ViewAttibutes {
            get {
                return this.ViewAttibutesField;
            }
            set {
                if ((object.ReferenceEquals(this.ViewAttibutesField, value) != true)) {
                    this.ViewAttibutesField = value;
                    this.RaisePropertyChanged("ViewAttibutes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ViewDescription {
            get {
                return this.ViewDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ViewDescriptionField, value) != true)) {
                    this.ViewDescriptionField = value;
                    this.RaisePropertyChanged("ViewDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long ViewID {
            get {
                return this.ViewIDField;
            }
            set {
                if ((this.ViewIDField.Equals(value) != true)) {
                    this.ViewIDField = value;
                    this.RaisePropertyChanged("ViewID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ViewName {
            get {
                return this.ViewNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ViewNameField, value) != true)) {
                    this.ViewNameField = value;
                    this.RaisePropertyChanged("ViewName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ViewAttibutes", Namespace="http://schemas.datacontract.org/2004/07/ImageSource.ILINX.ContentStore.Domain")]
    [System.SerializableAttribute()]
    public partial class ViewAttibutes : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool LockItemFirstField;
        
        private bool SearchInProcessField;
        
        private bool SearchOutOfProcessField;
        
        private bool SearchUnlockedItemsOnlyField;
        
        private bool ShowAllItemsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool LockItemFirst {
            get {
                return this.LockItemFirstField;
            }
            set {
                if ((this.LockItemFirstField.Equals(value) != true)) {
                    this.LockItemFirstField = value;
                    this.RaisePropertyChanged("LockItemFirst");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool SearchInProcess {
            get {
                return this.SearchInProcessField;
            }
            set {
                if ((this.SearchInProcessField.Equals(value) != true)) {
                    this.SearchInProcessField = value;
                    this.RaisePropertyChanged("SearchInProcess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool SearchOutOfProcess {
            get {
                return this.SearchOutOfProcessField;
            }
            set {
                if ((this.SearchOutOfProcessField.Equals(value) != true)) {
                    this.SearchOutOfProcessField = value;
                    this.RaisePropertyChanged("SearchOutOfProcess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool SearchUnlockedItemsOnly {
            get {
                return this.SearchUnlockedItemsOnlyField;
            }
            set {
                if ((this.SearchUnlockedItemsOnlyField.Equals(value) != true)) {
                    this.SearchUnlockedItemsOnlyField = value;
                    this.RaisePropertyChanged("SearchUnlockedItemsOnly");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool ShowAllItems {
            get {
                return this.ShowAllItemsField;
            }
            set {
                if ((this.ShowAllItemsField.Equals(value) != true)) {
                    this.ShowAllItemsField = value;
                    this.RaisePropertyChanged("ShowAllItems");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ViewPermission", Namespace="http://schemas.datacontract.org/2004/07/ImageSource.ILINX.ContentStore.Domain")]
    [System.SerializableAttribute()]
    public partial class ViewPermission : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool AutoOpenFirstItemAfterSearchingField;
        
        private bool AutoPromptBeforeSearchingField;
        
        private bool CanAccessField;
        
        private bool CanMaintainCheckedOutStatusField;
        
        private bool CanRestartCompletedWorkflowItemField;
        
        private bool CanSeeInProcessItemsField;
        
        private bool CanUnlockInUseItemsField;
        
        private bool CanViewOnlyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool AutoOpenFirstItemAfterSearching {
            get {
                return this.AutoOpenFirstItemAfterSearchingField;
            }
            set {
                if ((this.AutoOpenFirstItemAfterSearchingField.Equals(value) != true)) {
                    this.AutoOpenFirstItemAfterSearchingField = value;
                    this.RaisePropertyChanged("AutoOpenFirstItemAfterSearching");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool AutoPromptBeforeSearching {
            get {
                return this.AutoPromptBeforeSearchingField;
            }
            set {
                if ((this.AutoPromptBeforeSearchingField.Equals(value) != true)) {
                    this.AutoPromptBeforeSearchingField = value;
                    this.RaisePropertyChanged("AutoPromptBeforeSearching");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanAccess {
            get {
                return this.CanAccessField;
            }
            set {
                if ((this.CanAccessField.Equals(value) != true)) {
                    this.CanAccessField = value;
                    this.RaisePropertyChanged("CanAccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanMaintainCheckedOutStatus {
            get {
                return this.CanMaintainCheckedOutStatusField;
            }
            set {
                if ((this.CanMaintainCheckedOutStatusField.Equals(value) != true)) {
                    this.CanMaintainCheckedOutStatusField = value;
                    this.RaisePropertyChanged("CanMaintainCheckedOutStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanRestartCompletedWorkflowItem {
            get {
                return this.CanRestartCompletedWorkflowItemField;
            }
            set {
                if ((this.CanRestartCompletedWorkflowItemField.Equals(value) != true)) {
                    this.CanRestartCompletedWorkflowItemField = value;
                    this.RaisePropertyChanged("CanRestartCompletedWorkflowItem");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanSeeInProcessItems {
            get {
                return this.CanSeeInProcessItemsField;
            }
            set {
                if ((this.CanSeeInProcessItemsField.Equals(value) != true)) {
                    this.CanSeeInProcessItemsField = value;
                    this.RaisePropertyChanged("CanSeeInProcessItems");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanUnlockInUseItems {
            get {
                return this.CanUnlockInUseItemsField;
            }
            set {
                if ((this.CanUnlockInUseItemsField.Equals(value) != true)) {
                    this.CanUnlockInUseItemsField = value;
                    this.RaisePropertyChanged("CanUnlockInUseItems");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool CanViewOnly {
            get {
                return this.CanViewOnlyField;
            }
            set {
                if ((this.CanViewOnlyField.Equals(value) != true)) {
                    this.CanViewOnlyField = value;
                    this.RaisePropertyChanged("CanViewOnly");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://imagesourceinc.com/", ConfigurationName="EdmsService.IContentStoreContract")]
    public interface IContentStoreContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserManagerContract/GetAllUsers", ReplyAction="http://imagesourceinc.com/IUserManagerContract/GetAllUsersResponse")]
        ILinxSoapImport.EdmsService.User[] GetAllUsers(string userName, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserManagerContract/GetAllUsers", ReplyAction="http://imagesourceinc.com/IUserManagerContract/GetAllUsersResponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.User[]> GetAllUsersAsync(string userName, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserManagerContract/GetUsers", ReplyAction="http://imagesourceinc.com/IUserManagerContract/GetUsersResponse")]
        ILinxSoapImport.EdmsService.User[] GetUsers(string userName, string securityToken, int groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserManagerContract/GetUsers", ReplyAction="http://imagesourceinc.com/IUserManagerContract/GetUsersResponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.User[]> GetUsersAsync(string userName, string securityToken, int groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserManagerContract/AddNewUser", ReplyAction="http://imagesourceinc.com/IUserManagerContract/AddNewUserResponse")]
        int AddNewUser(string userName, string securityToken, ILinxSoapImport.EdmsService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserManagerContract/AddNewUser", ReplyAction="http://imagesourceinc.com/IUserManagerContract/AddNewUserResponse")]
        System.Threading.Tasks.Task<int> AddNewUserAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserManagerContract/UpdateUser", ReplyAction="http://imagesourceinc.com/IUserManagerContract/UpdateUserResponse")]
        void UpdateUser(string userName, string securityToken, ILinxSoapImport.EdmsService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserManagerContract/UpdateUser", ReplyAction="http://imagesourceinc.com/IUserManagerContract/UpdateUserResponse")]
        System.Threading.Tasks.Task UpdateUserAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserManagerContract/DeleteUser", ReplyAction="http://imagesourceinc.com/IUserManagerContract/DeleteUserResponse")]
        void DeleteUser(string userName, string securityToken, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserManagerContract/DeleteUser", ReplyAction="http://imagesourceinc.com/IUserManagerContract/DeleteUserResponse")]
        System.Threading.Tasks.Task DeleteUserAsync(string userName, string securityToken, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserManagerContract/Login", ReplyAction="http://imagesourceinc.com/IUserManagerContract/LoginResponse")]
        ILinxSoapImport.EdmsService.User Login(string userName, string encryptedPassword, string hostName, string ipAddress, bool rememberMe);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserManagerContract/Login", ReplyAction="http://imagesourceinc.com/IUserManagerContract/LoginResponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.User> LoginAsync(string userName, string encryptedPassword, string hostName, string ipAddress, bool rememberMe);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserManagerContract/Login2", ReplyAction="http://imagesourceinc.com/IUserManagerContract/Login2Response")]
        ILinxSoapImport.EdmsService.User Login2(string userName, string password, string activationID, string callingAppName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserManagerContract/Login2", ReplyAction="http://imagesourceinc.com/IUserManagerContract/Login2Response")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.User> Login2Async(string userName, string password, string activationID, string callingAppName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserManagerContract/Login3", ReplyAction="http://imagesourceinc.com/IUserManagerContract/Login3Response")]
        ILinxSoapImport.EdmsService.User Login3(string ADAccountSid, string[] ADGroupSids, string activationID, string callingAppName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserManagerContract/Login3", ReplyAction="http://imagesourceinc.com/IUserManagerContract/Login3Response")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.User> Login3Async(string ADAccountSid, string[] ADGroupSids, string activationID, string callingAppName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserManagerContract/Logout", ReplyAction="http://imagesourceinc.com/IUserManagerContract/LogoutResponse")]
        void Logout(string userName, string hostName, System.DateTime lastLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserManagerContract/Logout", ReplyAction="http://imagesourceinc.com/IUserManagerContract/LogoutResponse")]
        System.Threading.Tasks.Task LogoutAsync(string userName, string hostName, System.DateTime lastLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserManagerContract/ChangePassword", ReplyAction="http://imagesourceinc.com/IUserManagerContract/ChangePasswordResponse")]
        ILinxSoapImport.EdmsService.User ChangePassword(string userName, string securityToken, string oldEncryptedPassword, string newEncryptedPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserManagerContract/ChangePassword", ReplyAction="http://imagesourceinc.com/IUserManagerContract/ChangePasswordResponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.User> ChangePasswordAsync(string userName, string securityToken, string oldEncryptedPassword, string newEncryptedPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserManagerContract/ResetUserPassword", ReplyAction="http://imagesourceinc.com/IUserManagerContract/ResetUserPasswordResponse")]
        string ResetUserPassword(string userName, string securityToken, string newEncryptedPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserManagerContract/ResetUserPassword", ReplyAction="http://imagesourceinc.com/IUserManagerContract/ResetUserPasswordResponse")]
        System.Threading.Tasks.Task<string> ResetUserPasswordAsync(string userName, string securityToken, string newEncryptedPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserManagerContract/SearchADUserStartWith", ReplyAction="http://imagesourceinc.com/IUserManagerContract/SearchADUserStartWithResponse")]
        ILinxSoapImport.EdmsService.User[] SearchADUserStartWith(string userName, string textSearch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserManagerContract/SearchADUserStartWith", ReplyAction="http://imagesourceinc.com/IUserManagerContract/SearchADUserStartWithResponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.User[]> SearchADUserStartWithAsync(string userName, string textSearch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserManagerContract/IsADEnabled", ReplyAction="http://imagesourceinc.com/IUserManagerContract/IsADEnabledResponse")]
        bool IsADEnabled(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserManagerContract/IsADEnabled", ReplyAction="http://imagesourceinc.com/IUserManagerContract/IsADEnabledResponse")]
        System.Threading.Tasks.Task<bool> IsADEnabledAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserManagerContract/StoreFavoriteSearches", ReplyAction="http://imagesourceinc.com/IUserManagerContract/StoreFavoriteSearchesResponse")]
        void StoreFavoriteSearches(string userName, string securityToken, ILinxSoapImport.EdmsService.FavoriteSearch[] favoriteSearches);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserManagerContract/StoreFavoriteSearches", ReplyAction="http://imagesourceinc.com/IUserManagerContract/StoreFavoriteSearchesResponse")]
        System.Threading.Tasks.Task StoreFavoriteSearchesAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.FavoriteSearch[] favoriteSearches);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserManagerContract/RetrieveFavoriteSearches", ReplyAction="http://imagesourceinc.com/IUserManagerContract/RetrieveFavoriteSearchesResponse")]
        ILinxSoapImport.EdmsService.FavoriteSearch[] RetrieveFavoriteSearches(string userName, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserManagerContract/RetrieveFavoriteSearches", ReplyAction="http://imagesourceinc.com/IUserManagerContract/RetrieveFavoriteSearchesResponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.FavoriteSearch[]> RetrieveFavoriteSearchesAsync(string userName, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserGroupManagerContract/GetAllUserGroups1", ReplyAction="http://imagesourceinc.com/IUserGroupManagerContract/GetAllUserGroups1Response")]
        ILinxSoapImport.EdmsService.UserGroup[] GetAllUserGroups1(string userName, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserGroupManagerContract/GetAllUserGroups1", ReplyAction="http://imagesourceinc.com/IUserGroupManagerContract/GetAllUserGroups1Response")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.UserGroup[]> GetAllUserGroups1Async(string userName, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserGroupManagerContract/GetUserGroups", ReplyAction="http://imagesourceinc.com/IUserGroupManagerContract/GetUserGroupsResponse")]
        ILinxSoapImport.EdmsService.UserGroup[] GetUserGroups(string userName, string securityToken, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserGroupManagerContract/GetUserGroups", ReplyAction="http://imagesourceinc.com/IUserGroupManagerContract/GetUserGroupsResponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.UserGroup[]> GetUserGroupsAsync(string userName, string securityToken, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserGroupManagerContract/GetUserGroupsForUser", ReplyAction="http://imagesourceinc.com/IUserGroupManagerContract/GetUserGroupsForUserResponse")]
        ILinxSoapImport.EdmsService.UserGroup[] GetUserGroupsForUser(string userName, string securityToken, ILinxSoapImport.EdmsService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserGroupManagerContract/GetUserGroupsForUser", ReplyAction="http://imagesourceinc.com/IUserGroupManagerContract/GetUserGroupsForUserResponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.UserGroup[]> GetUserGroupsForUserAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserGroupManagerContract/GetAllUserGroups2", ReplyAction="http://imagesourceinc.com/IUserGroupManagerContract/GetAllUserGroups2Response")]
        System.Collections.Generic.Dictionary<int, ILinxSoapImport.EdmsService.UserGroup[]> GetAllUserGroups2(string userName, string securityToken, int[] userIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserGroupManagerContract/GetAllUserGroups2", ReplyAction="http://imagesourceinc.com/IUserGroupManagerContract/GetAllUserGroups2Response")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, ILinxSoapImport.EdmsService.UserGroup[]>> GetAllUserGroups2Async(string userName, string securityToken, int[] userIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserGroupManagerContract/AddNewGroup", ReplyAction="http://imagesourceinc.com/IUserGroupManagerContract/AddNewGroupResponse")]
        int AddNewGroup(string userName, string securityToken, ILinxSoapImport.EdmsService.UserGroup group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserGroupManagerContract/AddNewGroup", ReplyAction="http://imagesourceinc.com/IUserGroupManagerContract/AddNewGroupResponse")]
        System.Threading.Tasks.Task<int> AddNewGroupAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.UserGroup group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserGroupManagerContract/UpdateGroup", ReplyAction="http://imagesourceinc.com/IUserGroupManagerContract/UpdateGroupResponse")]
        void UpdateGroup(string userName, string securityToken, ILinxSoapImport.EdmsService.UserGroup group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserGroupManagerContract/UpdateGroup", ReplyAction="http://imagesourceinc.com/IUserGroupManagerContract/UpdateGroupResponse")]
        System.Threading.Tasks.Task UpdateGroupAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.UserGroup group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserGroupManagerContract/DeleteGroup", ReplyAction="http://imagesourceinc.com/IUserGroupManagerContract/DeleteGroupResponse")]
        bool DeleteGroup(string userName, string securityToken, int groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserGroupManagerContract/DeleteGroup", ReplyAction="http://imagesourceinc.com/IUserGroupManagerContract/DeleteGroupResponse")]
        System.Threading.Tasks.Task<bool> DeleteGroupAsync(string userName, string securityToken, int groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserGroupManagerContract/SearchADUserGroupStartWith", ReplyAction="http://imagesourceinc.com/IUserGroupManagerContract/SearchADUserGroupStartWithRes" +
            "ponse")]
        ILinxSoapImport.EdmsService.UserGroup[] SearchADUserGroupStartWith(string userName, string textSearch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserGroupManagerContract/SearchADUserGroupStartWith", ReplyAction="http://imagesourceinc.com/IUserGroupManagerContract/SearchADUserGroupStartWithRes" +
            "ponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.UserGroup[]> SearchADUserGroupStartWithAsync(string userName, string textSearch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserGroupManagerContract/GetUserGroupsByRepository", ReplyAction="http://imagesourceinc.com/IUserGroupManagerContract/GetUserGroupsByRepositoryResp" +
            "onse")]
        ILinxSoapImport.EdmsService.UserGroup[] GetUserGroupsByRepository(string userName, string securityToken, int repositoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IUserGroupManagerContract/GetUserGroupsByRepository", ReplyAction="http://imagesourceinc.com/IUserGroupManagerContract/GetUserGroupsByRepositoryResp" +
            "onse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.UserGroup[]> GetUserGroupsByRepositoryAsync(string userName, string securityToken, int repositoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/ISecurityManagerContract/GetAnnotationPermissionByUser", ReplyAction="http://imagesourceinc.com/ISecurityManagerContract/GetAnnotationPermissionByUserR" +
            "esponse")]
        ILinxSoapImport.EdmsService.AnnotationPermission GetAnnotationPermissionByUser(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/ISecurityManagerContract/GetAnnotationPermissionByUser", ReplyAction="http://imagesourceinc.com/ISecurityManagerContract/GetAnnotationPermissionByUserR" +
            "esponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.AnnotationPermission> GetAnnotationPermissionByUserAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/ISecurityManagerContract/GetAnnotationPermissionByGroup" +
            "", ReplyAction="http://imagesourceinc.com/ISecurityManagerContract/GetAnnotationPermissionByGroup" +
            "Response")]
        ILinxSoapImport.EdmsService.AnnotationPermission GetAnnotationPermissionByGroup(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.UserGroup group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/ISecurityManagerContract/GetAnnotationPermissionByGroup" +
            "", ReplyAction="http://imagesourceinc.com/ISecurityManagerContract/GetAnnotationPermissionByGroup" +
            "Response")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.AnnotationPermission> GetAnnotationPermissionByGroupAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.UserGroup group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/ISecurityManagerContract/GetDocumentPermissionByUser", ReplyAction="http://imagesourceinc.com/ISecurityManagerContract/GetDocumentPermissionByUserRes" +
            "ponse")]
        ILinxSoapImport.EdmsService.UserGroupPermission GetDocumentPermissionByUser(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/ISecurityManagerContract/GetDocumentPermissionByUser", ReplyAction="http://imagesourceinc.com/ISecurityManagerContract/GetDocumentPermissionByUserRes" +
            "ponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.UserGroupPermission> GetDocumentPermissionByUserAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/ISecurityManagerContract/GetDocumentPermissionByGroup", ReplyAction="http://imagesourceinc.com/ISecurityManagerContract/GetDocumentPermissionByGroupRe" +
            "sponse")]
        ILinxSoapImport.EdmsService.UserGroupPermission GetDocumentPermissionByGroup(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.UserGroup group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/ISecurityManagerContract/GetDocumentPermissionByGroup", ReplyAction="http://imagesourceinc.com/ISecurityManagerContract/GetDocumentPermissionByGroupRe" +
            "sponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.UserGroupPermission> GetDocumentPermissionByGroupAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.UserGroup group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/ISecurityManagerContract/SetAnnotationPermission", ReplyAction="http://imagesourceinc.com/ISecurityManagerContract/SetAnnotationPermissionRespons" +
            "e")]
        void SetAnnotationPermission(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.UserGroup group, ILinxSoapImport.EdmsService.AnnotationPermission permission);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/ISecurityManagerContract/SetAnnotationPermission", ReplyAction="http://imagesourceinc.com/ISecurityManagerContract/SetAnnotationPermissionRespons" +
            "e")]
        System.Threading.Tasks.Task SetAnnotationPermissionAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.UserGroup group, ILinxSoapImport.EdmsService.AnnotationPermission permission);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/ISecurityManagerContract/SetDocumentPermission", ReplyAction="http://imagesourceinc.com/ISecurityManagerContract/SetDocumentPermissionResponse")]
        void SetDocumentPermission(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.UserGroup group, ILinxSoapImport.EdmsService.UserGroupPermission permission);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/ISecurityManagerContract/SetDocumentPermission", ReplyAction="http://imagesourceinc.com/ISecurityManagerContract/SetDocumentPermissionResponse")]
        System.Threading.Tasks.Task SetDocumentPermissionAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.UserGroup group, ILinxSoapImport.EdmsService.UserGroupPermission permission);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/InsertDocument", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/InsertDocumentResponse")]
        System.Guid InsertDocument(string userName, string securityToken, ILinxSoapImport.EdmsService.ContentStoreDocument document, ILinxSoapImport.EdmsService.DiscussionMessage[] messages);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/InsertDocument", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/InsertDocumentResponse")]
        System.Threading.Tasks.Task<System.Guid> InsertDocumentAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.ContentStoreDocument document, ILinxSoapImport.EdmsService.DiscussionMessage[] messages);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/RunAdvanceSearch", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/RunAdvanceSearchResponse")]
        ILinxSoapImport.EdmsService.RunAdvanceSearchResponse RunAdvanceSearch(ILinxSoapImport.EdmsService.RunAdvanceSearchRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/RunAdvanceSearch", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/RunAdvanceSearchResponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.RunAdvanceSearchResponse> RunAdvanceSearchAsync(ILinxSoapImport.EdmsService.RunAdvanceSearchRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/RunAdvanceSearch2", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/RunAdvanceSearch2Response")]
        ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[] RunAdvanceSearch2(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.SearchDatum[] searchDatums, int maxRequestedSearchResultCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/RunAdvanceSearch2", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/RunAdvanceSearch2Response")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[]> RunAdvanceSearch2Async(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.SearchDatum[] searchDatums, int maxRequestedSearchResultCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/RetrieveDocument", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/RetrieveDocumentResponse")]
        ILinxSoapImport.EdmsService.RetrieveDocumentResponse RetrieveDocument(ILinxSoapImport.EdmsService.RetrieveDocumentRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/RetrieveDocument", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/RetrieveDocumentResponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.RetrieveDocumentResponse> RetrieveDocumentAsync(ILinxSoapImport.EdmsService.RetrieveDocumentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/RetrieveDocument2", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/RetrieveDocument2Response")]
        ILinxSoapImport.EdmsService.RetrieveDocument2Response RetrieveDocument2(ILinxSoapImport.EdmsService.RetrieveDocument2Request request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/RetrieveDocument2", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/RetrieveDocument2Response")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.RetrieveDocument2Response> RetrieveDocument2Async(ILinxSoapImport.EdmsService.RetrieveDocument2Request request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/RetrieveDiscussionMessages", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/RetrieveDiscussionMessagesResp" +
            "onse")]
        ILinxSoapImport.EdmsService.DiscussionMessage[] RetrieveDiscussionMessages(string userName, string securityToken, System.Guid documentId, string repositoryName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/RetrieveDiscussionMessages", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/RetrieveDiscussionMessagesResp" +
            "onse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.DiscussionMessage[]> RetrieveDiscussionMessagesAsync(string userName, string securityToken, System.Guid documentId, string repositoryName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/DeleteDocumentIndexRow", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/DeleteDocumentIndexRowResponse" +
            "")]
        void DeleteDocumentIndexRow(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, System.Guid docId, int indexRowId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/DeleteDocumentIndexRow", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/DeleteDocumentIndexRowResponse" +
            "")]
        System.Threading.Tasks.Task DeleteDocumentIndexRowAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, System.Guid docId, int indexRowId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/DeleteDocument", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/DeleteDocumentResponse")]
        void DeleteDocument(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, System.Guid docId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/DeleteDocument", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/DeleteDocumentResponse")]
        System.Threading.Tasks.Task DeleteDocumentAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, System.Guid docId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/RetrieveDocumentInformationByD" +
            "ocumentId", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/RetrieveDocumentInformationByD" +
            "ocumentIdResponse")]
        ILinxSoapImport.EdmsService.ContentStoreDocument RetrieveDocumentInformationByDocumentId(string userName, string securityToken, System.Guid documentId, string repositoryName, bool includeLinkedFields);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/RetrieveDocumentInformationByD" +
            "ocumentId", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/RetrieveDocumentInformationByD" +
            "ocumentIdResponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.ContentStoreDocument> RetrieveDocumentInformationByDocumentIdAsync(string userName, string securityToken, System.Guid documentId, string repositoryName, bool includeLinkedFields);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/RetrieveDocumentInformationByD" +
            "ocumentIds", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/RetrieveDocumentInformationByD" +
            "ocumentIdsResponse")]
        ILinxSoapImport.EdmsService.ContentStoreDocument[] RetrieveDocumentInformationByDocumentIds(string userName, string securityToken, System.Guid[] documentIds, string repositoryName, bool includeLinkedFields);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/RetrieveDocumentInformationByD" +
            "ocumentIds", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/RetrieveDocumentInformationByD" +
            "ocumentIdsResponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.ContentStoreDocument[]> RetrieveDocumentInformationByDocumentIdsAsync(string userName, string securityToken, System.Guid[] documentIds, string repositoryName, bool includeLinkedFields);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/UpdateMultipleIndexRows", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/UpdateMultipleIndexRowsRespons" +
            "e")]
        void UpdateMultipleIndexRows(string userName, string securityToken, string repositoryName, System.Collections.Generic.KeyValuePair<System.Guid, int>[] docIDRowIDPairs, ILinxSoapImport.EdmsService.IndexField[] indexes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/UpdateMultipleIndexRows", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/UpdateMultipleIndexRowsRespons" +
            "e")]
        System.Threading.Tasks.Task UpdateMultipleIndexRowsAsync(string userName, string securityToken, string repositoryName, System.Collections.Generic.KeyValuePair<System.Guid, int>[] docIDRowIDPairs, ILinxSoapImport.EdmsService.IndexField[] indexes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/UpdateDocument", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/UpdateDocumentResponse")]
        void UpdateDocument(string userName, string securityToken, ILinxSoapImport.EdmsService.ContentStoreDocument document, System.Guid[] deletedFileIds, ILinxSoapImport.EdmsService.DiscussionMessage[] addedMessages);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/UpdateDocument", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/UpdateDocumentResponse")]
        System.Threading.Tasks.Task UpdateDocumentAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.ContentStoreDocument document, System.Guid[] deletedFileIds, ILinxSoapImport.EdmsService.DiscussionMessage[] addedMessages);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/InsertDocumentWithBarcode1", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/InsertDocumentWithBarcode1Resp" +
            "onse")]
        void InsertDocumentWithBarcode1(string userName, string securityToken, string xmlBarcodeConfiguration, byte[] binary, string repositoryName, string fileExtension, bool allowInsertIfCannotReadBarcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/InsertDocumentWithBarcode1", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/InsertDocumentWithBarcode1Resp" +
            "onse")]
        System.Threading.Tasks.Task InsertDocumentWithBarcode1Async(string userName, string securityToken, string xmlBarcodeConfiguration, byte[] binary, string repositoryName, string fileExtension, bool allowInsertIfCannotReadBarcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/InsertDocumentWithBarcode2", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/InsertDocumentWithBarcode2Resp" +
            "onse")]
        void InsertDocumentWithBarcode2(string userName, string securityToken, ILinxSoapImport.EdmsService.BarcodeConfiguration[] barcodeConfigurations, byte[] binary, string repositoryName, string fileExtension, bool allowInsertIfCannotReadBarcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/InsertDocumentWithBarcode2", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/InsertDocumentWithBarcode2Resp" +
            "onse")]
        System.Threading.Tasks.Task InsertDocumentWithBarcode2Async(string userName, string securityToken, ILinxSoapImport.EdmsService.BarcodeConfiguration[] barcodeConfigurations, byte[] binary, string repositoryName, string fileExtension, bool allowInsertIfCannotReadBarcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/InsertNewIndexRowToExistingDoc" +
            "ument", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/InsertNewIndexRowToExistingDoc" +
            "umentResponse")]
        void InsertNewIndexRowToExistingDocument(string userName, string securityToken, ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData documentMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/InsertNewIndexRowToExistingDoc" +
            "ument", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/InsertNewIndexRowToExistingDoc" +
            "umentResponse")]
        System.Threading.Tasks.Task InsertNewIndexRowToExistingDocumentAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData documentMetadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/RunGlobalSearch", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/RunGlobalSearchResponse")]
        ILinxSoapImport.EdmsService.RunGlobalSearchResponse RunGlobalSearch(ILinxSoapImport.EdmsService.RunGlobalSearchRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/RunGlobalSearch", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/RunGlobalSearchResponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.RunGlobalSearchResponse> RunGlobalSearchAsync(ILinxSoapImport.EdmsService.RunGlobalSearchRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/RunSearchAdvancedForRepository" +
            "Associations", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/RunSearchAdvancedForRepository" +
            "AssociationsResponse")]
        ILinxSoapImport.EdmsService.RunSearchAdvancedForRepositoryAssociationsResponse RunSearchAdvancedForRepositoryAssociations(ILinxSoapImport.EdmsService.RunSearchAdvancedForRepositoryAssociationsRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/RunSearchAdvancedForRepository" +
            "Associations", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/RunSearchAdvancedForRepository" +
            "AssociationsResponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.RunSearchAdvancedForRepositoryAssociationsResponse> RunSearchAdvancedForRepositoryAssociationsAsync(ILinxSoapImport.EdmsService.RunSearchAdvancedForRepositoryAssociationsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/GetRepositories", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/GetRepositoriesResponse")]
        ILinxSoapImport.EdmsService.Repository[] GetRepositories(string userName, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/GetRepositories", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/GetRepositoriesResponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.Repository[]> GetRepositoriesAsync(string userName, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/CheckoutDocuments", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/CheckoutDocumentsResponse")]
        ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[] CheckoutDocuments(string userName, string securityToken, ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[] documentMetaDatas);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/CheckoutDocuments", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/CheckoutDocumentsResponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[]> CheckoutDocumentsAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[] documentMetaDatas);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/CanCheckoutDocuments", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/CanCheckoutDocumentsResponse")]
        ILinxSoapImport.EdmsService.CanCheckoutDocumentsResponse CanCheckoutDocuments(ILinxSoapImport.EdmsService.CanCheckoutDocumentsRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/CanCheckoutDocuments", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/CanCheckoutDocumentsResponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.CanCheckoutDocumentsResponse> CanCheckoutDocumentsAsync(ILinxSoapImport.EdmsService.CanCheckoutDocumentsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/CanUndoCheckoutDocuments", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/CanUndoCheckoutDocumentsRespon" +
            "se")]
        bool CanUndoCheckoutDocuments(string userName, string securityToken, ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[] documentMetadatas);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/CanUndoCheckoutDocuments", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/CanUndoCheckoutDocumentsRespon" +
            "se")]
        System.Threading.Tasks.Task<bool> CanUndoCheckoutDocumentsAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[] documentMetadatas);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/UndoCheckoutDocuments", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/UndoCheckoutDocumentsResponse")]
        void UndoCheckoutDocuments(string userName, string securityToken, ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[] documentMetaDatas);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/UndoCheckoutDocuments", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/UndoCheckoutDocumentsResponse")]
        System.Threading.Tasks.Task UndoCheckoutDocumentsAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[] documentMetaDatas);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/CheckinDocument", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/CheckinDocumentResponse")]
        void CheckinDocument(string userName, string securityToken, ILinxSoapImport.EdmsService.ContentStoreDocument document, ILinxSoapImport.EdmsService.DiscussionMessage[] addedMessages, string comment, bool isMajorVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/CheckinDocument", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/CheckinDocumentResponse")]
        System.Threading.Tasks.Task CheckinDocumentAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.ContentStoreDocument document, ILinxSoapImport.EdmsService.DiscussionMessage[] addedMessages, string comment, bool isMajorVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/RetrieveDocumentVersionHistory" +
            "", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/RetrieveDocumentVersionHistory" +
            "Response")]
        ILinxSoapImport.EdmsService.ContentStoreDocumentVersionEntry[] RetrieveDocumentVersionHistory(string userName, string securityToken, string repositoryName, System.Guid documentId, bool ascending);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/RetrieveDocumentVersionHistory" +
            "", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/RetrieveDocumentVersionHistory" +
            "Response")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.ContentStoreDocumentVersionEntry[]> RetrieveDocumentVersionHistoryAsync(string userName, string securityToken, string repositoryName, System.Guid documentId, bool ascending);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/RestoreDocument", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/RestoreDocumentResponse")]
        void RestoreDocument(string userName, string securityToken, string repositoryName, System.Guid documentId, System.Version version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/RestoreDocument", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/RestoreDocumentResponse")]
        System.Threading.Tasks.Task RestoreDocumentAsync(string userName, string securityToken, string repositoryName, System.Guid documentId, System.Version version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/RetrieveDocumentVersion", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/RetrieveDocumentVersionRespons" +
            "e")]
        ILinxSoapImport.EdmsService.RetrieveDocumentVersionResponse RetrieveDocumentVersion(ILinxSoapImport.EdmsService.RetrieveDocumentVersionRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/RetrieveDocumentVersion", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/RetrieveDocumentVersionRespons" +
            "e")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.RetrieveDocumentVersionResponse> RetrieveDocumentVersionAsync(ILinxSoapImport.EdmsService.RetrieveDocumentVersionRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/RetrieveDocumentVersionInforma" +
            "tion", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/RetrieveDocumentVersionInforma" +
            "tionResponse")]
        ILinxSoapImport.EdmsService.ContentStoreDocument RetrieveDocumentVersionInformation(string userName, string securityToken, System.Guid documentId, string repositoryName, System.Version version, bool includeLinkedFields);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/RetrieveDocumentVersionInforma" +
            "tion", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/RetrieveDocumentVersionInforma" +
            "tionResponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.ContentStoreDocument> RetrieveDocumentVersionInformationAsync(string userName, string securityToken, System.Guid documentId, string repositoryName, System.Version version, bool includeLinkedFields);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/RetrieveAllDocumentInformation" +
            "CheckedOutToUser", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/RetrieveAllDocumentInformation" +
            "CheckedOutToUserResponse")]
        ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[] RetrieveAllDocumentInformationCheckedOutToUser(string userName, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/RetrieveAllDocumentInformation" +
            "CheckedOutToUser", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/RetrieveAllDocumentInformation" +
            "CheckedOutToUserResponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[]> RetrieveAllDocumentInformationCheckedOutToUserAsync(string userName, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/DeleteDocumentVersion", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/DeleteDocumentVersionResponse")]
        void DeleteDocumentVersion(string userName, string securityToken, string repositoryName, System.Guid documentId, System.Version version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/DeleteDocumentVersion", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/DeleteDocumentVersionResponse")]
        System.Threading.Tasks.Task DeleteDocumentVersionAsync(string userName, string securityToken, string repositoryName, System.Guid documentId, System.Version version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/CreateShareDocLink", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/CreateShareDocLinkResponse")]
        System.Guid CreateShareDocLink(string userName, string passwordHash, string repositoryName, System.Guid documentID, System.DateTime expirationDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/CreateShareDocLink", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/CreateShareDocLinkResponse")]
        System.Threading.Tasks.Task<System.Guid> CreateShareDocLinkAsync(string userName, string passwordHash, string repositoryName, System.Guid documentID, System.DateTime expirationDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/DeleteShareDocLink", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/DeleteShareDocLinkResponse")]
        void DeleteShareDocLink(System.Guid linkID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/DeleteShareDocLink", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/DeleteShareDocLinkResponse")]
        System.Threading.Tasks.Task DeleteShareDocLinkAsync(System.Guid linkID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/DoesShareDocLinkExist", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/DoesShareDocLinkExistResponse")]
        bool DoesShareDocLinkExist(System.Guid linkID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/DoesShareDocLinkExist", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/DoesShareDocLinkExistResponse")]
        System.Threading.Tasks.Task<bool> DoesShareDocLinkExistAsync(System.Guid linkID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/GetShareDocByLinkID", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/GetShareDocByLinkIDResponse")]
        ILinxSoapImport.EdmsService.ContentStoreDocument GetShareDocByLinkID(System.Guid linkID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/GetShareDocByLinkID", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/GetShareDocByLinkIDResponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.ContentStoreDocument> GetShareDocByLinkIDAsync(System.Guid linkID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/IsShareDocLinkExpired", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/IsShareDocLinkExpiredResponse")]
        bool IsShareDocLinkExpired(System.Guid linkID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/IsShareDocLinkExpired", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/IsShareDocLinkExpiredResponse")]
        System.Threading.Tasks.Task<bool> IsShareDocLinkExpiredAsync(System.Guid linkID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/SendShareDocLink", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/SendShareDocLinkResponse")]
        void SendShareDocLink(string userName, string securityToken, string repositoryName, System.Guid documentID, string[] toEmails, string[] ccEmails, string subject, string message, int expireInDays);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/SendShareDocLink", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/SendShareDocLinkResponse")]
        System.Threading.Tasks.Task SendShareDocLinkAsync(string userName, string securityToken, string repositoryName, System.Guid documentID, string[] toEmails, string[] ccEmails, string subject, string message, int expireInDays);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/GetDocumentAnnotations", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/GetDocumentAnnotationsResponse" +
            "")]
        string GetDocumentAnnotations(string userName, string securityToken, string repositoryName, System.Guid documentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/GetDocumentAnnotations", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/GetDocumentAnnotationsResponse" +
            "")]
        System.Threading.Tasks.Task<string> GetDocumentAnnotationsAsync(string userName, string securityToken, string repositoryName, System.Guid documentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/SetDocumentAnnotations", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/SetDocumentAnnotationsResponse" +
            "")]
        void SetDocumentAnnotations(string userName, string securityToken, string repositoryName, System.Guid documentID, string annotationXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/SetDocumentAnnotations", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/SetDocumentAnnotationsResponse" +
            "")]
        System.Threading.Tasks.Task SetDocumentAnnotationsAsync(string userName, string securityToken, string repositoryName, System.Guid documentID, string annotationXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/IsDocumentLinkedWithBatch", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/IsDocumentLinkedWithBatchRespo" +
            "nse")]
        bool IsDocumentLinkedWithBatch(string userName, int repositoryId, System.Guid icsDocumentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IDocumentManagerContract/IsDocumentLinkedWithBatch", ReplyAction="http://imagesourceinc.com/IDocumentManagerContract/IsDocumentLinkedWithBatchRespo" +
            "nse")]
        System.Threading.Tasks.Task<bool> IsDocumentLinkedWithBatchAsync(string userName, int repositoryId, System.Guid icsDocumentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/GetRepositoryByName", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/GetRepositoryByNameResponse")]
        ILinxSoapImport.EdmsService.Repository GetRepositoryByName(string userName, string securityToken, string repositoryName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/GetRepositoryByName", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/GetRepositoryByNameResponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.Repository> GetRepositoryByNameAsync(string userName, string securityToken, string repositoryName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/GetRepositoryById", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/GetRepositoryByIdResponse")]
        ILinxSoapImport.EdmsService.Repository GetRepositoryById(string userName, string securityToken, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/GetRepositoryById", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/GetRepositoryByIdResponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.Repository> GetRepositoryByIdAsync(string userName, string securityToken, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/GetRepositoryByUser", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/GetRepositoryByUserResponse")]
        ILinxSoapImport.EdmsService.Repository[] GetRepositoryByUser(string userName, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/GetRepositoryByUser", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/GetRepositoryByUserResponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.Repository[]> GetRepositoryByUserAsync(string userName, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/GetRepositoryByUserGroup", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/GetRepositoryByUserGroupResp" +
            "onse")]
        ILinxSoapImport.EdmsService.Repository[] GetRepositoryByUserGroup(string userName, string securityToken, ILinxSoapImport.EdmsService.UserGroup group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/GetRepositoryByUserGroup", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/GetRepositoryByUserGroupResp" +
            "onse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.Repository[]> GetRepositoryByUserGroupAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.UserGroup group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/AddNewRepository", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/AddNewRepositoryResponse")]
        int AddNewRepository(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/AddNewRepository", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/AddNewRepositoryResponse")]
        System.Threading.Tasks.Task<int> AddNewRepositoryAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/UpdateRepository", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/UpdateRepositoryResponse")]
        void UpdateRepository(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.IndexField[] deletedIndexes, System.Collections.Generic.Dictionary<ILinxSoapImport.EdmsService.IndexField, string> renamedIndexes, ILinxSoapImport.EdmsService.IndexField[] newIndexes, ILinxSoapImport.EdmsService.IndexField[] updatedIndexes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/UpdateRepository", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/UpdateRepositoryResponse")]
        System.Threading.Tasks.Task UpdateRepositoryAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.IndexField[] deletedIndexes, System.Collections.Generic.Dictionary<ILinxSoapImport.EdmsService.IndexField, string> renamedIndexes, ILinxSoapImport.EdmsService.IndexField[] newIndexes, ILinxSoapImport.EdmsService.IndexField[] updatedIndexes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/DeleteRepository", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/DeleteRepositoryResponse")]
        void DeleteRepository(string userName, string securityToken, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/DeleteRepository", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/DeleteRepositoryResponse")]
        System.Threading.Tasks.Task DeleteRepositoryAsync(string userName, string securityToken, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/AddNewIndexesToRepository", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/AddNewIndexesToRepositoryRes" +
            "ponse")]
        void AddNewIndexesToRepository(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.IndexField[] indexes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/AddNewIndexesToRepository", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/AddNewIndexesToRepositoryRes" +
            "ponse")]
        System.Threading.Tasks.Task AddNewIndexesToRepositoryAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.IndexField[] indexes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/SetIndexOrder", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/SetIndexOrderResponse")]
        void SetIndexOrder(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, System.Collections.Generic.Dictionary<string, int> order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/SetIndexOrder", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/SetIndexOrderResponse")]
        System.Threading.Tasks.Task SetIndexOrderAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, System.Collections.Generic.Dictionary<string, int> order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/GetAllCaptureRepositories", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/GetAllCaptureRepositoriesRes" +
            "ponse")]
        ILinxSoapImport.EdmsService.Repository[] GetAllCaptureRepositories(string userName, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/GetAllCaptureRepositories", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/GetAllCaptureRepositoriesRes" +
            "ponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.Repository[]> GetAllCaptureRepositoriesAsync(string userName, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/GetAllSearchRepositories", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/GetAllSearchRepositoriesResp" +
            "onse")]
        ILinxSoapImport.EdmsService.Repository[] GetAllSearchRepositories(string userName, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/GetAllSearchRepositories", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/GetAllSearchRepositoriesResp" +
            "onse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.Repository[]> GetAllSearchRepositoriesAsync(string userName, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/DoesRepositoryExist", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/DoesRepositoryExistResponse")]
        bool DoesRepositoryExist(string userName, string securityToken, string repositoryName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/DoesRepositoryExist", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/DoesRepositoryExistResponse")]
        System.Threading.Tasks.Task<bool> DoesRepositoryExistAsync(string userName, string securityToken, string repositoryName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/DoesIndexFieldExist", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/DoesIndexFieldExistResponse")]
        bool DoesIndexFieldExist(string userName, string securityToken, string repositoryName, string indexFieldName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/DoesIndexFieldExist", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/DoesIndexFieldExistResponse")]
        System.Threading.Tasks.Task<bool> DoesIndexFieldExistAsync(string userName, string securityToken, string repositoryName, string indexFieldName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/GetSearchRestrictions", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/GetSearchRestrictionsRespons" +
            "e")]
        ILinxSoapImport.EdmsService.SearchDatum[] GetSearchRestrictions(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.UserGroup group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/GetSearchRestrictions", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/GetSearchRestrictionsRespons" +
            "e")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.SearchDatum[]> GetSearchRestrictionsAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.UserGroup group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/SetSearchRestrictions", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/SetSearchRestrictionsRespons" +
            "e")]
        void SetSearchRestrictions(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.UserGroup group, ILinxSoapImport.EdmsService.SearchDatum[] restrictions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/SetSearchRestrictions", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/SetSearchRestrictionsRespons" +
            "e")]
        System.Threading.Tasks.Task SetSearchRestrictionsAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.UserGroup group, ILinxSoapImport.EdmsService.SearchDatum[] restrictions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/GetDocumentCount", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/GetDocumentCountResponse")]
        int GetDocumentCount(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/GetDocumentCount", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/GetDocumentCountResponse")]
        System.Threading.Tasks.Task<int> GetDocumentCountAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/GetPicklistValuesForUser", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/GetPicklistValuesForUserResp" +
            "onse")]
        string[] GetPicklistValuesForUser(string userName, ILinxSoapImport.EdmsService.Repository repository, string indexName, ILinxSoapImport.EdmsService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/GetPicklistValuesForUser", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/GetPicklistValuesForUserResp" +
            "onse")]
        System.Threading.Tasks.Task<string[]> GetPicklistValuesForUserAsync(string userName, ILinxSoapImport.EdmsService.Repository repository, string indexName, ILinxSoapImport.EdmsService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/GetPicklistValuesForUserGrou" +
            "p", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/GetPicklistValuesForUserGrou" +
            "pResponse")]
        string[] GetPicklistValuesForUserGroup(string userName, ILinxSoapImport.EdmsService.Repository repository, string indexName, ILinxSoapImport.EdmsService.UserGroup userGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/GetPicklistValuesForUserGrou" +
            "p", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/GetPicklistValuesForUserGrou" +
            "pResponse")]
        System.Threading.Tasks.Task<string[]> GetPicklistValuesForUserGroupAsync(string userName, ILinxSoapImport.EdmsService.Repository repository, string indexName, ILinxSoapImport.EdmsService.UserGroup userGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/AddPicklistItem", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/AddPicklistItemResponse")]
        void AddPicklistItem(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string indexName, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/AddPicklistItem", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/AddPicklistItemResponse")]
        System.Threading.Tasks.Task AddPicklistItemAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string indexName, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/AddPicklistItems", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/AddPicklistItemsResponse")]
        void AddPicklistItems(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string indexName, string[] values);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/AddPicklistItems", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/AddPicklistItemsResponse")]
        System.Threading.Tasks.Task AddPicklistItemsAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string indexName, string[] values);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/RemovePicklistItem", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/RemovePicklistItemResponse")]
        void RemovePicklistItem(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string indexName, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/RemovePicklistItem", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/RemovePicklistItemResponse")]
        System.Threading.Tasks.Task RemovePicklistItemAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string indexName, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/UpdatePicklistItem", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/UpdatePicklistItemResponse")]
        void UpdatePicklistItem(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string indexName, string oldValue, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/UpdatePicklistItem", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/UpdatePicklistItemResponse")]
        System.Threading.Tasks.Task UpdatePicklistItemAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string indexName, string oldValue, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/RestrictPickListForGroup", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/RestrictPickListForGroupResp" +
            "onse")]
        void RestrictPickListForGroup(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string indexName, string[] values, ILinxSoapImport.EdmsService.UserGroup userGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/RestrictPickListForGroup", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/RestrictPickListForGroupResp" +
            "onse")]
        System.Threading.Tasks.Task RestrictPickListForGroupAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string indexName, string[] values, ILinxSoapImport.EdmsService.UserGroup userGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/UnRestrictPickListForGroup", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/UnRestrictPickListForGroupRe" +
            "sponse")]
        void UnRestrictPickListForGroup(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string indexName, string[] values, ILinxSoapImport.EdmsService.UserGroup userGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/UnRestrictPickListForGroup", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/UnRestrictPickListForGroupRe" +
            "sponse")]
        System.Threading.Tasks.Task UnRestrictPickListForGroupAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string indexName, string[] values, ILinxSoapImport.EdmsService.UserGroup userGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/GetPicklistSortingType", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/GetPicklistSortingTypeRespon" +
            "se")]
        ILinxSoapImport.EdmsService.PicklistSortingType GetPicklistSortingType(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string indexName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/GetPicklistSortingType", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/GetPicklistSortingTypeRespon" +
            "se")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.PicklistSortingType> GetPicklistSortingTypeAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string indexName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/SetPicklistSortingType", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/SetPicklistSortingTypeRespon" +
            "se")]
        void SetPicklistSortingType(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string indexName, ILinxSoapImport.EdmsService.PicklistSortingType sortingType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/SetPicklistSortingType", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/SetPicklistSortingTypeRespon" +
            "se")]
        System.Threading.Tasks.Task SetPicklistSortingTypeAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string indexName, ILinxSoapImport.EdmsService.PicklistSortingType sortingType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/GetRepositoryUsageSizeInMB", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/GetRepositoryUsageSizeInMBRe" +
            "sponse")]
        System.Collections.Generic.Dictionary<int, long> GetRepositoryUsageSizeInMB(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository[] repositories);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/GetRepositoryUsageSizeInMB", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/GetRepositoryUsageSizeInMBRe" +
            "sponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, long>> GetRepositoryUsageSizeInMBAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository[] repositories);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/GetMaxAllowableDatabaseSizeI" +
            "nMB", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/GetMaxAllowableDatabaseSizeI" +
            "nMBResponse")]
        int GetMaxAllowableDatabaseSizeInMB(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/GetMaxAllowableDatabaseSizeI" +
            "nMB", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/GetMaxAllowableDatabaseSizeI" +
            "nMBResponse")]
        System.Threading.Tasks.Task<int> GetMaxAllowableDatabaseSizeInMBAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/GetRepositoryAssociationsByI" +
            "d", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/GetRepositoryAssociationsByI" +
            "dResponse")]
        ILinxSoapImport.EdmsService.RepositoryAssociation[] GetRepositoryAssociationsById(string userName, string securityToken, long sourceRepositoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/GetRepositoryAssociationsByI" +
            "d", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/GetRepositoryAssociationsByI" +
            "dResponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.RepositoryAssociation[]> GetRepositoryAssociationsByIdAsync(string userName, string securityToken, long sourceRepositoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/GetRepositoryAssociationsByN" +
            "ame", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/GetRepositoryAssociationsByN" +
            "ameResponse")]
        ILinxSoapImport.EdmsService.RepositoryAssociation[] GetRepositoryAssociationsByName(string userName, string securityToken, string sourceRepositoryName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/GetRepositoryAssociationsByN" +
            "ame", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/GetRepositoryAssociationsByN" +
            "ameResponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.RepositoryAssociation[]> GetRepositoryAssociationsByNameAsync(string userName, string securityToken, string sourceRepositoryName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/SetRepositoryAssociations", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/SetRepositoryAssociationsRes" +
            "ponse")]
        void SetRepositoryAssociations(string userName, string securityToken, ILinxSoapImport.EdmsService.RepositoryAssociation[] repositoryAssociations);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/SetRepositoryAssociations", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/SetRepositoryAssociationsRes" +
            "ponse")]
        System.Threading.Tasks.Task SetRepositoryAssociationsAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.RepositoryAssociation[] repositoryAssociations);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/DeleteRepositoryAssociations" +
            "ForSourceRepository", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/DeleteRepositoryAssociations" +
            "ForSourceRepositoryResponse")]
        void DeleteRepositoryAssociationsForSourceRepository(string userName, string securityToken, long sourceRepositoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/DeleteRepositoryAssociations" +
            "ForSourceRepository", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/DeleteRepositoryAssociations" +
            "ForSourceRepositoryResponse")]
        System.Threading.Tasks.Task DeleteRepositoryAssociationsForSourceRepositoryAsync(string userName, string securityToken, long sourceRepositoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/SetSettingXml", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/SetSettingXmlResponse")]
        void SetSettingXml(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string settingXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/SetSettingXml", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/SetSettingXmlResponse")]
        System.Threading.Tasks.Task SetSettingXmlAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string settingXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/LockRepository", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/LockRepositoryResponse")]
        void LockRepository(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/LockRepository", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/LockRepositoryResponse")]
        System.Threading.Tasks.Task LockRepositoryAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/UnLockRepository", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/UnLockRepositoryResponse")]
        void UnLockRepository(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/UnLockRepository", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/UnLockRepositoryResponse")]
        System.Threading.Tasks.Task UnLockRepositoryAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/ForceUnlockRepository", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/ForceUnlockRepositoryRespons" +
            "e")]
        void ForceUnlockRepository(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/ForceUnlockRepository", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/ForceUnlockRepositoryRespons" +
            "e")]
        System.Threading.Tasks.Task ForceUnlockRepositoryAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/IsRepositoryLinkedWithBatchP" +
            "rofile", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/IsRepositoryLinkedWithBatchP" +
            "rofileResponse")]
        ILinxSoapImport.EdmsService.IsRepositoryLinkedWithBatchProfileResponse IsRepositoryLinkedWithBatchProfile(ILinxSoapImport.EdmsService.IsRepositoryLinkedWithBatchProfileRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/IsRepositoryLinkedWithBatchP" +
            "rofile", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/IsRepositoryLinkedWithBatchP" +
            "rofileResponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.IsRepositoryLinkedWithBatchProfileResponse> IsRepositoryLinkedWithBatchProfileAsync(ILinxSoapImport.EdmsService.IsRepositoryLinkedWithBatchProfileRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/GetLinkedServerSettings", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/GetLinkedServerSettingsRespo" +
            "nse")]
        ILinxSoapImport.EdmsService.LinkedServerTableSettings[] GetLinkedServerSettings(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/GetLinkedServerSettings", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/GetLinkedServerSettingsRespo" +
            "nse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.LinkedServerTableSettings[]> GetLinkedServerSettingsAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/UpdateLinkedServerSettings", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/UpdateLinkedServerSettingsRe" +
            "sponse")]
        void UpdateLinkedServerSettings(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.LinkedServerTableSettings[] linkedServerTableSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/UpdateLinkedServerSettings", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/UpdateLinkedServerSettingsRe" +
            "sponse")]
        System.Threading.Tasks.Task UpdateLinkedServerSettingsAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.LinkedServerTableSettings[] linkedServerTableSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/ExecuteLinkedServerQuery", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/ExecuteLinkedServerQueryResp" +
            "onse")]
        System.Data.DataTable ExecuteLinkedServerQuery(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/ExecuteLinkedServerQuery", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/ExecuteLinkedServerQueryResp" +
            "onse")]
        System.Threading.Tasks.Task<System.Data.DataTable> ExecuteLinkedServerQueryAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/DeleteLinkedServerSettings", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/DeleteLinkedServerSettingsRe" +
            "sponse")]
        void DeleteLinkedServerSettings(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/DeleteLinkedServerSettings", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/DeleteLinkedServerSettingsRe" +
            "sponse")]
        System.Threading.Tasks.Task DeleteLinkedServerSettingsAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/GetMigratedVersions", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/GetMigratedVersionsResponse")]
        System.Version[] GetMigratedVersions(string userName, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/GetMigratedVersions", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/GetMigratedVersionsResponse")]
        System.Threading.Tasks.Task<System.Version[]> GetMigratedVersionsAsync(string userName, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/ExportProfile", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/ExportProfileResponse")]
        byte[] ExportProfile(string userName, string securityToken, string repositoryName, System.Version version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/ExportProfile", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/ExportProfileResponse")]
        System.Threading.Tasks.Task<byte[]> ExportProfileAsync(string userName, string securityToken, string repositoryName, System.Version version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/ImportProfile", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/ImportProfileResponse")]
        void ImportProfile(string userName, string securityToken, byte[] xmlBinary, bool permissionImported, System.Collections.Generic.Dictionary<string, string> existedNamesMapping);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IRepositoryManagerContract/ImportProfile", ReplyAction="http://imagesourceinc.com/IRepositoryManagerContract/ImportProfileResponse")]
        System.Threading.Tasks.Task ImportProfileAsync(string userName, string securityToken, byte[] xmlBinary, bool permissionImported, System.Collections.Generic.Dictionary<string, string> existedNamesMapping);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IOfflineContract/Ping", ReplyAction="http://imagesourceinc.com/IOfflineContract/PingResponse")]
        bool Ping();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IOfflineContract/Ping", ReplyAction="http://imagesourceinc.com/IOfflineContract/PingResponse")]
        System.Threading.Tasks.Task<bool> PingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IOfflineContract/DownloadOfflineFile", ReplyAction="http://imagesourceinc.com/IOfflineContract/DownloadOfflineFileResponse")]
        byte[] DownloadOfflineFile(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IOfflineContract/DownloadOfflineFile", ReplyAction="http://imagesourceinc.com/IOfflineContract/DownloadOfflineFileResponse")]
        System.Threading.Tasks.Task<byte[]> DownloadOfflineFileAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IOfflineContract/GetCurrentClientBinaryVersion", ReplyAction="http://imagesourceinc.com/IOfflineContract/GetCurrentClientBinaryVersionResponse")]
        System.Version GetCurrentClientBinaryVersion();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IOfflineContract/GetCurrentClientBinaryVersion", ReplyAction="http://imagesourceinc.com/IOfflineContract/GetCurrentClientBinaryVersionResponse")]
        System.Threading.Tasks.Task<System.Version> GetCurrentClientBinaryVersionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IViewManagerContract/DeleteView", ReplyAction="http://imagesourceinc.com/IViewManagerContract/DeleteViewResponse")]
        void DeleteView(string userName, string securityToken, string viewName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IViewManagerContract/DeleteView", ReplyAction="http://imagesourceinc.com/IViewManagerContract/DeleteViewResponse")]
        System.Threading.Tasks.Task DeleteViewAsync(string userName, string securityToken, string viewName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IViewManagerContract/GenerateSampleViewSearch", ReplyAction="http://imagesourceinc.com/IViewManagerContract/GenerateSampleViewSearchResponse")]
        string GenerateSampleViewSearch(string userName, string securityToken, string repositoryName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IViewManagerContract/GenerateSampleViewSearch", ReplyAction="http://imagesourceinc.com/IViewManagerContract/GenerateSampleViewSearchResponse")]
        System.Threading.Tasks.Task<string> GenerateSampleViewSearchAsync(string userName, string securityToken, string repositoryName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IViewManagerContract/GetViewsForUser", ReplyAction="http://imagesourceinc.com/IViewManagerContract/GetViewsForUserResponse")]
        ILinxSoapImport.EdmsService.View[] GetViewsForUser(string userName, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IViewManagerContract/GetViewsForUser", ReplyAction="http://imagesourceinc.com/IViewManagerContract/GetViewsForUserResponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.View[]> GetViewsForUserAsync(string userName, string securityToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IViewManagerContract/GetViewsForUserGroup", ReplyAction="http://imagesourceinc.com/IViewManagerContract/GetViewsForUserGroupResponse")]
        ILinxSoapImport.EdmsService.View[] GetViewsForUserGroup(string userName, string securityToken, int userGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IViewManagerContract/GetViewsForUserGroup", ReplyAction="http://imagesourceinc.com/IViewManagerContract/GetViewsForUserGroupResponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.View[]> GetViewsForUserGroupAsync(string userName, string securityToken, int userGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IViewManagerContract/GetUserGroupsForView", ReplyAction="http://imagesourceinc.com/IViewManagerContract/GetUserGroupsForViewResponse")]
        ILinxSoapImport.EdmsService.UserGroup[] GetUserGroupsForView(string userName, string securityToken, string viewName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IViewManagerContract/GetUserGroupsForView", ReplyAction="http://imagesourceinc.com/IViewManagerContract/GetUserGroupsForViewResponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.UserGroup[]> GetUserGroupsForViewAsync(string userName, string securityToken, string viewName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IViewManagerContract/GetView", ReplyAction="http://imagesourceinc.com/IViewManagerContract/GetViewResponse")]
        ILinxSoapImport.EdmsService.View GetView(string userName, string securityToken, string viewName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IViewManagerContract/GetView", ReplyAction="http://imagesourceinc.com/IViewManagerContract/GetViewResponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.View> GetViewAsync(string userName, string securityToken, string viewName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IViewManagerContract/GetViewSearchFields", ReplyAction="http://imagesourceinc.com/IViewManagerContract/GetViewSearchFieldsResponse")]
        ILinxSoapImport.EdmsService.IndexField[] GetViewSearchFields(string userName, string securityToken, string viewName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IViewManagerContract/GetViewSearchFields", ReplyAction="http://imagesourceinc.com/IViewManagerContract/GetViewSearchFieldsResponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.IndexField[]> GetViewSearchFieldsAsync(string userName, string securityToken, string viewName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IViewManagerContract/GetViewSearchFieldsForViews", ReplyAction="http://imagesourceinc.com/IViewManagerContract/GetViewSearchFieldsForViewsRespons" +
            "e")]
        System.Collections.Generic.Dictionary<string, ILinxSoapImport.EdmsService.IndexField[]> GetViewSearchFieldsForViews(string userName, string securityToken, string[] viewNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IViewManagerContract/GetViewSearchFieldsForViews", ReplyAction="http://imagesourceinc.com/IViewManagerContract/GetViewSearchFieldsForViewsRespons" +
            "e")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, ILinxSoapImport.EdmsService.IndexField[]>> GetViewSearchFieldsForViewsAsync(string userName, string securityToken, string[] viewNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IViewManagerContract/GetViewPermission", ReplyAction="http://imagesourceinc.com/IViewManagerContract/GetViewPermissionResponse")]
        ILinxSoapImport.EdmsService.ViewPermission GetViewPermission(string userName, string securityToken, ILinxSoapImport.EdmsService.User user, string viewName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IViewManagerContract/GetViewPermission", ReplyAction="http://imagesourceinc.com/IViewManagerContract/GetViewPermissionResponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.ViewPermission> GetViewPermissionAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.User user, string viewName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IViewManagerContract/GetViewPermissions", ReplyAction="http://imagesourceinc.com/IViewManagerContract/GetViewPermissionsResponse")]
        System.Collections.Generic.Dictionary<string, ILinxSoapImport.EdmsService.ViewPermission> GetViewPermissions(string userName, string securityToken, ILinxSoapImport.EdmsService.User user, string[] viewNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IViewManagerContract/GetViewPermissions", ReplyAction="http://imagesourceinc.com/IViewManagerContract/GetViewPermissionsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, ILinxSoapImport.EdmsService.ViewPermission>> GetViewPermissionsAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.User user, string[] viewNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IViewManagerContract/RunViewSearch", ReplyAction="http://imagesourceinc.com/IViewManagerContract/RunViewSearchResponse")]
        System.Data.DataTable RunViewSearch(string userName, string securityToken, string viewName, ILinxSoapImport.EdmsService.IndexField[] searchDatums);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IViewManagerContract/RunViewSearch", ReplyAction="http://imagesourceinc.com/IViewManagerContract/RunViewSearchResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> RunViewSearchAsync(string userName, string securityToken, string viewName, ILinxSoapImport.EdmsService.IndexField[] searchDatums);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IViewManagerContract/SetView", ReplyAction="http://imagesourceinc.com/IViewManagerContract/SetViewResponse")]
        void SetView(string userName, string securityToken, ILinxSoapImport.EdmsService.View view);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IViewManagerContract/SetView", ReplyAction="http://imagesourceinc.com/IViewManagerContract/SetViewResponse")]
        System.Threading.Tasks.Task SetViewAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.View view);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IViewManagerContract/DoesViewNameExists", ReplyAction="http://imagesourceinc.com/IViewManagerContract/DoesViewNameExistsResponse")]
        bool DoesViewNameExists(string userName, string securityToken, string viewName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IViewManagerContract/DoesViewNameExists", ReplyAction="http://imagesourceinc.com/IViewManagerContract/DoesViewNameExistsResponse")]
        System.Threading.Tasks.Task<bool> DoesViewNameExistsAsync(string userName, string securityToken, string viewName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IViewManagerContract/ValidateViewSearch", ReplyAction="http://imagesourceinc.com/IViewManagerContract/ValidateViewSearchResponse")]
        System.Data.DataTable ValidateViewSearch(string userName, string securityToken, string query, ILinxSoapImport.EdmsService.IndexField[] searchDatums);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IViewManagerContract/ValidateViewSearch", ReplyAction="http://imagesourceinc.com/IViewManagerContract/ValidateViewSearchResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> ValidateViewSearchAsync(string userName, string securityToken, string query, ILinxSoapImport.EdmsService.IndexField[] searchDatums);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IViewManagerContract/ParseViewSearchForSearchFields", ReplyAction="http://imagesourceinc.com/IViewManagerContract/ParseViewSearchForSearchFieldsResp" +
            "onse")]
        ILinxSoapImport.EdmsService.IndexField[] ParseViewSearchForSearchFields(string userName, string securityToken, string viewSearchQuery);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IViewManagerContract/ParseViewSearchForSearchFields", ReplyAction="http://imagesourceinc.com/IViewManagerContract/ParseViewSearchForSearchFieldsResp" +
            "onse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.IndexField[]> ParseViewSearchForSearchFieldsAsync(string userName, string securityToken, string viewSearchQuery);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IViewManagerContract/RetrieveDocumentInformationFromVie" +
            "wSearchResult", ReplyAction="http://imagesourceinc.com/IViewManagerContract/RetrieveDocumentInformationFromVie" +
            "wSearchResultResponse")]
        ILinxSoapImport.EdmsService.ContentStoreDocument RetrieveDocumentInformationFromViewSearchResult(string userName, string securityToken, string viewName, System.Guid documentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IViewManagerContract/RetrieveDocumentInformationFromVie" +
            "wSearchResult", ReplyAction="http://imagesourceinc.com/IViewManagerContract/RetrieveDocumentInformationFromVie" +
            "wSearchResultResponse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.ContentStoreDocument> RetrieveDocumentInformationFromViewSearchResultAsync(string userName, string securityToken, string viewName, System.Guid documentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IViewManagerContract/SetViewPermission", ReplyAction="http://imagesourceinc.com/IViewManagerContract/SetViewPermissionResponse")]
        void SetViewPermission(string userName, string securityToken, string viewName, int userGroupId, ILinxSoapImport.EdmsService.ViewPermission permission);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IViewManagerContract/SetViewPermission", ReplyAction="http://imagesourceinc.com/IViewManagerContract/SetViewPermissionResponse")]
        System.Threading.Tasks.Task SetViewPermissionAsync(string userName, string securityToken, string viewName, int userGroupId, ILinxSoapImport.EdmsService.ViewPermission permission);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IViewManagerContract/GetViewPermissionForUserGroup", ReplyAction="http://imagesourceinc.com/IViewManagerContract/GetViewPermissionForUserGroupRespo" +
            "nse")]
        ILinxSoapImport.EdmsService.ViewPermission GetViewPermissionForUserGroup(string userName, string securityToken, string viewName, int userGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://imagesourceinc.com/IViewManagerContract/GetViewPermissionForUserGroup", ReplyAction="http://imagesourceinc.com/IViewManagerContract/GetViewPermissionForUserGroupRespo" +
            "nse")]
        System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.ViewPermission> GetViewPermissionForUserGroupAsync(string userName, string securityToken, string viewName, int userGroupId);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RunAdvanceSearch", WrapperNamespace="http://imagesourceinc.com/", IsWrapped=true)]
    public partial class RunAdvanceSearchRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=0)]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=1)]
        public string securityToken;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=2)]
        public ILinxSoapImport.EdmsService.Repository repository;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=3)]
        public ILinxSoapImport.EdmsService.SearchDatum[] searchDatums;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=4)]
        public bool getMaxRequested;
        
        public RunAdvanceSearchRequest() {
        }
        
        public RunAdvanceSearchRequest(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.SearchDatum[] searchDatums, bool getMaxRequested) {
            this.userName = userName;
            this.securityToken = securityToken;
            this.repository = repository;
            this.searchDatums = searchDatums;
            this.getMaxRequested = getMaxRequested;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RunAdvanceSearchResponse", WrapperNamespace="http://imagesourceinc.com/", IsWrapped=true)]
    public partial class RunAdvanceSearchResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=0)]
        public ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[] RunAdvanceSearchResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=1)]
        public int countItemsFound;
        
        public RunAdvanceSearchResponse() {
        }
        
        public RunAdvanceSearchResponse(ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[] RunAdvanceSearchResult, int countItemsFound) {
            this.RunAdvanceSearchResult = RunAdvanceSearchResult;
            this.countItemsFound = countItemsFound;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RetrieveDocument", WrapperNamespace="http://imagesourceinc.com/", IsWrapped=true)]
    public partial class RetrieveDocumentRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=0)]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=1)]
        public string securityToken;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=2)]
        public System.Guid documentId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=3)]
        public string repositoryName;
        
        public RetrieveDocumentRequest() {
        }
        
        public RetrieveDocumentRequest(string userName, string securityToken, System.Guid documentId, string repositoryName) {
            this.userName = userName;
            this.securityToken = securityToken;
            this.documentId = documentId;
            this.repositoryName = repositoryName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RetrieveDocumentResponse", WrapperNamespace="http://imagesourceinc.com/", IsWrapped=true)]
    public partial class RetrieveDocumentResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=0)]
        public ILinxSoapImport.EdmsService.ContentStoreDocument RetrieveDocumentResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=1)]
        public ILinxSoapImport.EdmsService.DiscussionMessage[] discussionMessages;
        
        public RetrieveDocumentResponse() {
        }
        
        public RetrieveDocumentResponse(ILinxSoapImport.EdmsService.ContentStoreDocument RetrieveDocumentResult, ILinxSoapImport.EdmsService.DiscussionMessage[] discussionMessages) {
            this.RetrieveDocumentResult = RetrieveDocumentResult;
            this.discussionMessages = discussionMessages;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RetrieveDocument2", WrapperNamespace="http://imagesourceinc.com/", IsWrapped=true)]
    public partial class RetrieveDocument2Request {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=0)]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=1)]
        public string securityToken;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=2)]
        public System.Guid documentId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=3)]
        public string repositoryName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=4)]
        public int rowId;
        
        public RetrieveDocument2Request() {
        }
        
        public RetrieveDocument2Request(string userName, string securityToken, System.Guid documentId, string repositoryName, int rowId) {
            this.userName = userName;
            this.securityToken = securityToken;
            this.documentId = documentId;
            this.repositoryName = repositoryName;
            this.rowId = rowId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RetrieveDocument2Response", WrapperNamespace="http://imagesourceinc.com/", IsWrapped=true)]
    public partial class RetrieveDocument2Response {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=0)]
        public ILinxSoapImport.EdmsService.ContentStoreDocument RetrieveDocument2Result;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=1)]
        public ILinxSoapImport.EdmsService.DiscussionMessage[] discussionMessages;
        
        public RetrieveDocument2Response() {
        }
        
        public RetrieveDocument2Response(ILinxSoapImport.EdmsService.ContentStoreDocument RetrieveDocument2Result, ILinxSoapImport.EdmsService.DiscussionMessage[] discussionMessages) {
            this.RetrieveDocument2Result = RetrieveDocument2Result;
            this.discussionMessages = discussionMessages;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RunGlobalSearch", WrapperNamespace="http://imagesourceinc.com/", IsWrapped=true)]
    public partial class RunGlobalSearchRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=0)]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=1)]
        public string securityToken;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=2)]
        public string searchValue;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=3)]
        public bool getMaxRequested;
        
        public RunGlobalSearchRequest() {
        }
        
        public RunGlobalSearchRequest(string userName, string securityToken, string searchValue, bool getMaxRequested) {
            this.userName = userName;
            this.securityToken = securityToken;
            this.searchValue = searchValue;
            this.getMaxRequested = getMaxRequested;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RunGlobalSearchResponse", WrapperNamespace="http://imagesourceinc.com/", IsWrapped=true)]
    public partial class RunGlobalSearchResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=0)]
        public ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[] RunGlobalSearchResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=1)]
        public int countItemsFound;
        
        public RunGlobalSearchResponse() {
        }
        
        public RunGlobalSearchResponse(ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[] RunGlobalSearchResult, int countItemsFound) {
            this.RunGlobalSearchResult = RunGlobalSearchResult;
            this.countItemsFound = countItemsFound;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RunSearchAdvancedForRepositoryAssociations", WrapperNamespace="http://imagesourceinc.com/", IsWrapped=true)]
    public partial class RunSearchAdvancedForRepositoryAssociationsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=0)]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=1)]
        public string securityToken;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=2)]
        public ILinxSoapImport.EdmsService.Repository sourceRepository;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=3)]
        public ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData sourceMetaData;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=4)]
        public string targetRepositoryName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=5)]
        public int maxRequestedSearchResultCount;
        
        public RunSearchAdvancedForRepositoryAssociationsRequest() {
        }
        
        public RunSearchAdvancedForRepositoryAssociationsRequest(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository sourceRepository, ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData sourceMetaData, string targetRepositoryName, int maxRequestedSearchResultCount) {
            this.userName = userName;
            this.securityToken = securityToken;
            this.sourceRepository = sourceRepository;
            this.sourceMetaData = sourceMetaData;
            this.targetRepositoryName = targetRepositoryName;
            this.maxRequestedSearchResultCount = maxRequestedSearchResultCount;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RunSearchAdvancedForRepositoryAssociationsResponse", WrapperNamespace="http://imagesourceinc.com/", IsWrapped=true)]
    public partial class RunSearchAdvancedForRepositoryAssociationsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=0)]
        public ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[] RunSearchAdvancedForRepositoryAssociationsResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=1)]
        public int countItemsFound;
        
        public RunSearchAdvancedForRepositoryAssociationsResponse() {
        }
        
        public RunSearchAdvancedForRepositoryAssociationsResponse(ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[] RunSearchAdvancedForRepositoryAssociationsResult, int countItemsFound) {
            this.RunSearchAdvancedForRepositoryAssociationsResult = RunSearchAdvancedForRepositoryAssociationsResult;
            this.countItemsFound = countItemsFound;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CanCheckoutDocuments", WrapperNamespace="http://imagesourceinc.com/", IsWrapped=true)]
    public partial class CanCheckoutDocumentsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=0)]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=1)]
        public string securityToken;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=2)]
        public ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[] documentMetaDatas;
        
        public CanCheckoutDocumentsRequest() {
        }
        
        public CanCheckoutDocumentsRequest(string userName, string securityToken, ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[] documentMetaDatas) {
            this.userName = userName;
            this.securityToken = securityToken;
            this.documentMetaDatas = documentMetaDatas;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CanCheckoutDocumentsResponse", WrapperNamespace="http://imagesourceinc.com/", IsWrapped=true)]
    public partial class CanCheckoutDocumentsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=0)]
        public bool CanCheckoutDocumentsResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=1)]
        public string checkedoutByUserName;
        
        public CanCheckoutDocumentsResponse() {
        }
        
        public CanCheckoutDocumentsResponse(bool CanCheckoutDocumentsResult, string checkedoutByUserName) {
            this.CanCheckoutDocumentsResult = CanCheckoutDocumentsResult;
            this.checkedoutByUserName = checkedoutByUserName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RetrieveDocumentVersion", WrapperNamespace="http://imagesourceinc.com/", IsWrapped=true)]
    public partial class RetrieveDocumentVersionRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=0)]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=1)]
        public string securityToken;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=2)]
        public System.Guid documentId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=3)]
        public string repositortyName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=4)]
        public System.Version version;
        
        public RetrieveDocumentVersionRequest() {
        }
        
        public RetrieveDocumentVersionRequest(string userName, string securityToken, System.Guid documentId, string repositortyName, System.Version version) {
            this.userName = userName;
            this.securityToken = securityToken;
            this.documentId = documentId;
            this.repositortyName = repositortyName;
            this.version = version;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RetrieveDocumentVersionResponse", WrapperNamespace="http://imagesourceinc.com/", IsWrapped=true)]
    public partial class RetrieveDocumentVersionResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=0)]
        public ILinxSoapImport.EdmsService.ContentStoreDocument RetrieveDocumentVersionResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=1)]
        public ILinxSoapImport.EdmsService.DiscussionMessage[] discussionMessages;
        
        public RetrieveDocumentVersionResponse() {
        }
        
        public RetrieveDocumentVersionResponse(ILinxSoapImport.EdmsService.ContentStoreDocument RetrieveDocumentVersionResult, ILinxSoapImport.EdmsService.DiscussionMessage[] discussionMessages) {
            this.RetrieveDocumentVersionResult = RetrieveDocumentVersionResult;
            this.discussionMessages = discussionMessages;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="IsRepositoryLinkedWithBatchProfile", WrapperNamespace="http://imagesourceinc.com/", IsWrapped=true)]
    public partial class IsRepositoryLinkedWithBatchProfileRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=0)]
        public int repositoryId;
        
        public IsRepositoryLinkedWithBatchProfileRequest() {
        }
        
        public IsRepositoryLinkedWithBatchProfileRequest(int repositoryId) {
            this.repositoryId = repositoryId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="IsRepositoryLinkedWithBatchProfileResponse", WrapperNamespace="http://imagesourceinc.com/", IsWrapped=true)]
    public partial class IsRepositoryLinkedWithBatchProfileResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=0)]
        public bool IsRepositoryLinkedWithBatchProfileResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://imagesourceinc.com/", Order=1)]
        public string batchProfileName;
        
        public IsRepositoryLinkedWithBatchProfileResponse() {
        }
        
        public IsRepositoryLinkedWithBatchProfileResponse(bool IsRepositoryLinkedWithBatchProfileResult, string batchProfileName) {
            this.IsRepositoryLinkedWithBatchProfileResult = IsRepositoryLinkedWithBatchProfileResult;
            this.batchProfileName = batchProfileName;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IContentStoreContractChannel : ILinxSoapImport.EdmsService.IContentStoreContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContentStoreContractClient : System.ServiceModel.ClientBase<ILinxSoapImport.EdmsService.IContentStoreContract>, ILinxSoapImport.EdmsService.IContentStoreContract {
        
        public ContentStoreContractClient() {
        }
        
        public ContentStoreContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ContentStoreContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContentStoreContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContentStoreContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ILinxSoapImport.EdmsService.User[] GetAllUsers(string userName, string securityToken) {
            return base.Channel.GetAllUsers(userName, securityToken);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.User[]> GetAllUsersAsync(string userName, string securityToken) {
            return base.Channel.GetAllUsersAsync(userName, securityToken);
        }
        
        public ILinxSoapImport.EdmsService.User[] GetUsers(string userName, string securityToken, int groupId) {
            return base.Channel.GetUsers(userName, securityToken, groupId);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.User[]> GetUsersAsync(string userName, string securityToken, int groupId) {
            return base.Channel.GetUsersAsync(userName, securityToken, groupId);
        }
        
        public int AddNewUser(string userName, string securityToken, ILinxSoapImport.EdmsService.User user) {
            return base.Channel.AddNewUser(userName, securityToken, user);
        }
        
        public System.Threading.Tasks.Task<int> AddNewUserAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.User user) {
            return base.Channel.AddNewUserAsync(userName, securityToken, user);
        }
        
        public void UpdateUser(string userName, string securityToken, ILinxSoapImport.EdmsService.User user) {
            base.Channel.UpdateUser(userName, securityToken, user);
        }
        
        public System.Threading.Tasks.Task UpdateUserAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.User user) {
            return base.Channel.UpdateUserAsync(userName, securityToken, user);
        }
        
        public void DeleteUser(string userName, string securityToken, int userId) {
            base.Channel.DeleteUser(userName, securityToken, userId);
        }
        
        public System.Threading.Tasks.Task DeleteUserAsync(string userName, string securityToken, int userId) {
            return base.Channel.DeleteUserAsync(userName, securityToken, userId);
        }
        
        public ILinxSoapImport.EdmsService.User Login(string userName, string encryptedPassword, string hostName, string ipAddress, bool rememberMe) {
            return base.Channel.Login(userName, encryptedPassword, hostName, ipAddress, rememberMe);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.User> LoginAsync(string userName, string encryptedPassword, string hostName, string ipAddress, bool rememberMe) {
            return base.Channel.LoginAsync(userName, encryptedPassword, hostName, ipAddress, rememberMe);
        }
        
        public ILinxSoapImport.EdmsService.User Login2(string userName, string password, string activationID, string callingAppName) {
            return base.Channel.Login2(userName, password, activationID, callingAppName);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.User> Login2Async(string userName, string password, string activationID, string callingAppName) {
            return base.Channel.Login2Async(userName, password, activationID, callingAppName);
        }
        
        public ILinxSoapImport.EdmsService.User Login3(string ADAccountSid, string[] ADGroupSids, string activationID, string callingAppName) {
            return base.Channel.Login3(ADAccountSid, ADGroupSids, activationID, callingAppName);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.User> Login3Async(string ADAccountSid, string[] ADGroupSids, string activationID, string callingAppName) {
            return base.Channel.Login3Async(ADAccountSid, ADGroupSids, activationID, callingAppName);
        }
        
        public void Logout(string userName, string hostName, System.DateTime lastLogin) {
            base.Channel.Logout(userName, hostName, lastLogin);
        }
        
        public System.Threading.Tasks.Task LogoutAsync(string userName, string hostName, System.DateTime lastLogin) {
            return base.Channel.LogoutAsync(userName, hostName, lastLogin);
        }
        
        public ILinxSoapImport.EdmsService.User ChangePassword(string userName, string securityToken, string oldEncryptedPassword, string newEncryptedPassword) {
            return base.Channel.ChangePassword(userName, securityToken, oldEncryptedPassword, newEncryptedPassword);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.User> ChangePasswordAsync(string userName, string securityToken, string oldEncryptedPassword, string newEncryptedPassword) {
            return base.Channel.ChangePasswordAsync(userName, securityToken, oldEncryptedPassword, newEncryptedPassword);
        }
        
        public string ResetUserPassword(string userName, string securityToken, string newEncryptedPassword) {
            return base.Channel.ResetUserPassword(userName, securityToken, newEncryptedPassword);
        }
        
        public System.Threading.Tasks.Task<string> ResetUserPasswordAsync(string userName, string securityToken, string newEncryptedPassword) {
            return base.Channel.ResetUserPasswordAsync(userName, securityToken, newEncryptedPassword);
        }
        
        public ILinxSoapImport.EdmsService.User[] SearchADUserStartWith(string userName, string textSearch) {
            return base.Channel.SearchADUserStartWith(userName, textSearch);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.User[]> SearchADUserStartWithAsync(string userName, string textSearch) {
            return base.Channel.SearchADUserStartWithAsync(userName, textSearch);
        }
        
        public bool IsADEnabled(string userName) {
            return base.Channel.IsADEnabled(userName);
        }
        
        public System.Threading.Tasks.Task<bool> IsADEnabledAsync(string userName) {
            return base.Channel.IsADEnabledAsync(userName);
        }
        
        public void StoreFavoriteSearches(string userName, string securityToken, ILinxSoapImport.EdmsService.FavoriteSearch[] favoriteSearches) {
            base.Channel.StoreFavoriteSearches(userName, securityToken, favoriteSearches);
        }
        
        public System.Threading.Tasks.Task StoreFavoriteSearchesAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.FavoriteSearch[] favoriteSearches) {
            return base.Channel.StoreFavoriteSearchesAsync(userName, securityToken, favoriteSearches);
        }
        
        public ILinxSoapImport.EdmsService.FavoriteSearch[] RetrieveFavoriteSearches(string userName, string securityToken) {
            return base.Channel.RetrieveFavoriteSearches(userName, securityToken);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.FavoriteSearch[]> RetrieveFavoriteSearchesAsync(string userName, string securityToken) {
            return base.Channel.RetrieveFavoriteSearchesAsync(userName, securityToken);
        }
        
        public ILinxSoapImport.EdmsService.UserGroup[] GetAllUserGroups1(string userName, string securityToken) {
            return base.Channel.GetAllUserGroups1(userName, securityToken);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.UserGroup[]> GetAllUserGroups1Async(string userName, string securityToken) {
            return base.Channel.GetAllUserGroups1Async(userName, securityToken);
        }
        
        public ILinxSoapImport.EdmsService.UserGroup[] GetUserGroups(string userName, string securityToken, int userId) {
            return base.Channel.GetUserGroups(userName, securityToken, userId);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.UserGroup[]> GetUserGroupsAsync(string userName, string securityToken, int userId) {
            return base.Channel.GetUserGroupsAsync(userName, securityToken, userId);
        }
        
        public ILinxSoapImport.EdmsService.UserGroup[] GetUserGroupsForUser(string userName, string securityToken, ILinxSoapImport.EdmsService.User user) {
            return base.Channel.GetUserGroupsForUser(userName, securityToken, user);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.UserGroup[]> GetUserGroupsForUserAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.User user) {
            return base.Channel.GetUserGroupsForUserAsync(userName, securityToken, user);
        }
        
        public System.Collections.Generic.Dictionary<int, ILinxSoapImport.EdmsService.UserGroup[]> GetAllUserGroups2(string userName, string securityToken, int[] userIds) {
            return base.Channel.GetAllUserGroups2(userName, securityToken, userIds);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, ILinxSoapImport.EdmsService.UserGroup[]>> GetAllUserGroups2Async(string userName, string securityToken, int[] userIds) {
            return base.Channel.GetAllUserGroups2Async(userName, securityToken, userIds);
        }
        
        public int AddNewGroup(string userName, string securityToken, ILinxSoapImport.EdmsService.UserGroup group) {
            return base.Channel.AddNewGroup(userName, securityToken, group);
        }
        
        public System.Threading.Tasks.Task<int> AddNewGroupAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.UserGroup group) {
            return base.Channel.AddNewGroupAsync(userName, securityToken, group);
        }
        
        public void UpdateGroup(string userName, string securityToken, ILinxSoapImport.EdmsService.UserGroup group) {
            base.Channel.UpdateGroup(userName, securityToken, group);
        }
        
        public System.Threading.Tasks.Task UpdateGroupAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.UserGroup group) {
            return base.Channel.UpdateGroupAsync(userName, securityToken, group);
        }
        
        public bool DeleteGroup(string userName, string securityToken, int groupId) {
            return base.Channel.DeleteGroup(userName, securityToken, groupId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteGroupAsync(string userName, string securityToken, int groupId) {
            return base.Channel.DeleteGroupAsync(userName, securityToken, groupId);
        }
        
        public ILinxSoapImport.EdmsService.UserGroup[] SearchADUserGroupStartWith(string userName, string textSearch) {
            return base.Channel.SearchADUserGroupStartWith(userName, textSearch);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.UserGroup[]> SearchADUserGroupStartWithAsync(string userName, string textSearch) {
            return base.Channel.SearchADUserGroupStartWithAsync(userName, textSearch);
        }
        
        public ILinxSoapImport.EdmsService.UserGroup[] GetUserGroupsByRepository(string userName, string securityToken, int repositoryId) {
            return base.Channel.GetUserGroupsByRepository(userName, securityToken, repositoryId);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.UserGroup[]> GetUserGroupsByRepositoryAsync(string userName, string securityToken, int repositoryId) {
            return base.Channel.GetUserGroupsByRepositoryAsync(userName, securityToken, repositoryId);
        }
        
        public ILinxSoapImport.EdmsService.AnnotationPermission GetAnnotationPermissionByUser(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.User user) {
            return base.Channel.GetAnnotationPermissionByUser(userName, securityToken, repository, user);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.AnnotationPermission> GetAnnotationPermissionByUserAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.User user) {
            return base.Channel.GetAnnotationPermissionByUserAsync(userName, securityToken, repository, user);
        }
        
        public ILinxSoapImport.EdmsService.AnnotationPermission GetAnnotationPermissionByGroup(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.UserGroup group) {
            return base.Channel.GetAnnotationPermissionByGroup(userName, securityToken, repository, group);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.AnnotationPermission> GetAnnotationPermissionByGroupAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.UserGroup group) {
            return base.Channel.GetAnnotationPermissionByGroupAsync(userName, securityToken, repository, group);
        }
        
        public ILinxSoapImport.EdmsService.UserGroupPermission GetDocumentPermissionByUser(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.User user) {
            return base.Channel.GetDocumentPermissionByUser(userName, securityToken, repository, user);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.UserGroupPermission> GetDocumentPermissionByUserAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.User user) {
            return base.Channel.GetDocumentPermissionByUserAsync(userName, securityToken, repository, user);
        }
        
        public ILinxSoapImport.EdmsService.UserGroupPermission GetDocumentPermissionByGroup(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.UserGroup group) {
            return base.Channel.GetDocumentPermissionByGroup(userName, securityToken, repository, group);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.UserGroupPermission> GetDocumentPermissionByGroupAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.UserGroup group) {
            return base.Channel.GetDocumentPermissionByGroupAsync(userName, securityToken, repository, group);
        }
        
        public void SetAnnotationPermission(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.UserGroup group, ILinxSoapImport.EdmsService.AnnotationPermission permission) {
            base.Channel.SetAnnotationPermission(userName, securityToken, repository, group, permission);
        }
        
        public System.Threading.Tasks.Task SetAnnotationPermissionAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.UserGroup group, ILinxSoapImport.EdmsService.AnnotationPermission permission) {
            return base.Channel.SetAnnotationPermissionAsync(userName, securityToken, repository, group, permission);
        }
        
        public void SetDocumentPermission(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.UserGroup group, ILinxSoapImport.EdmsService.UserGroupPermission permission) {
            base.Channel.SetDocumentPermission(userName, securityToken, repository, group, permission);
        }
        
        public System.Threading.Tasks.Task SetDocumentPermissionAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.UserGroup group, ILinxSoapImport.EdmsService.UserGroupPermission permission) {
            return base.Channel.SetDocumentPermissionAsync(userName, securityToken, repository, group, permission);
        }
        
        public System.Guid InsertDocument(string userName, string securityToken, ILinxSoapImport.EdmsService.ContentStoreDocument document, ILinxSoapImport.EdmsService.DiscussionMessage[] messages) {
            return base.Channel.InsertDocument(userName, securityToken, document, messages);
        }
        
        public System.Threading.Tasks.Task<System.Guid> InsertDocumentAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.ContentStoreDocument document, ILinxSoapImport.EdmsService.DiscussionMessage[] messages) {
            return base.Channel.InsertDocumentAsync(userName, securityToken, document, messages);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ILinxSoapImport.EdmsService.RunAdvanceSearchResponse ILinxSoapImport.EdmsService.IContentStoreContract.RunAdvanceSearch(ILinxSoapImport.EdmsService.RunAdvanceSearchRequest request) {
            return base.Channel.RunAdvanceSearch(request);
        }
        
        public ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[] RunAdvanceSearch(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.SearchDatum[] searchDatums, bool getMaxRequested, out int countItemsFound) {
            ILinxSoapImport.EdmsService.RunAdvanceSearchRequest inValue = new ILinxSoapImport.EdmsService.RunAdvanceSearchRequest();
            inValue.userName = userName;
            inValue.securityToken = securityToken;
            inValue.repository = repository;
            inValue.searchDatums = searchDatums;
            inValue.getMaxRequested = getMaxRequested;
            ILinxSoapImport.EdmsService.RunAdvanceSearchResponse retVal = ((ILinxSoapImport.EdmsService.IContentStoreContract)(this)).RunAdvanceSearch(inValue);
            countItemsFound = retVal.countItemsFound;
            return retVal.RunAdvanceSearchResult;
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.RunAdvanceSearchResponse> RunAdvanceSearchAsync(ILinxSoapImport.EdmsService.RunAdvanceSearchRequest request) {
            return base.Channel.RunAdvanceSearchAsync(request);
        }
        
        public ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[] RunAdvanceSearch2(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.SearchDatum[] searchDatums, int maxRequestedSearchResultCount) {
            return base.Channel.RunAdvanceSearch2(userName, securityToken, repository, searchDatums, maxRequestedSearchResultCount);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[]> RunAdvanceSearch2Async(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.SearchDatum[] searchDatums, int maxRequestedSearchResultCount) {
            return base.Channel.RunAdvanceSearch2Async(userName, securityToken, repository, searchDatums, maxRequestedSearchResultCount);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ILinxSoapImport.EdmsService.RetrieveDocumentResponse ILinxSoapImport.EdmsService.IContentStoreContract.RetrieveDocument(ILinxSoapImport.EdmsService.RetrieveDocumentRequest request) {
            return base.Channel.RetrieveDocument(request);
        }
        
        public ILinxSoapImport.EdmsService.ContentStoreDocument RetrieveDocument(string userName, string securityToken, System.Guid documentId, string repositoryName, out ILinxSoapImport.EdmsService.DiscussionMessage[] discussionMessages) {
            ILinxSoapImport.EdmsService.RetrieveDocumentRequest inValue = new ILinxSoapImport.EdmsService.RetrieveDocumentRequest();
            inValue.userName = userName;
            inValue.securityToken = securityToken;
            inValue.documentId = documentId;
            inValue.repositoryName = repositoryName;
            ILinxSoapImport.EdmsService.RetrieveDocumentResponse retVal = ((ILinxSoapImport.EdmsService.IContentStoreContract)(this)).RetrieveDocument(inValue);
            discussionMessages = retVal.discussionMessages;
            return retVal.RetrieveDocumentResult;
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.RetrieveDocumentResponse> RetrieveDocumentAsync(ILinxSoapImport.EdmsService.RetrieveDocumentRequest request) {
            return base.Channel.RetrieveDocumentAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ILinxSoapImport.EdmsService.RetrieveDocument2Response ILinxSoapImport.EdmsService.IContentStoreContract.RetrieveDocument2(ILinxSoapImport.EdmsService.RetrieveDocument2Request request) {
            return base.Channel.RetrieveDocument2(request);
        }
        
        public ILinxSoapImport.EdmsService.ContentStoreDocument RetrieveDocument2(string userName, string securityToken, System.Guid documentId, string repositoryName, int rowId, out ILinxSoapImport.EdmsService.DiscussionMessage[] discussionMessages) {
            ILinxSoapImport.EdmsService.RetrieveDocument2Request inValue = new ILinxSoapImport.EdmsService.RetrieveDocument2Request();
            inValue.userName = userName;
            inValue.securityToken = securityToken;
            inValue.documentId = documentId;
            inValue.repositoryName = repositoryName;
            inValue.rowId = rowId;
            ILinxSoapImport.EdmsService.RetrieveDocument2Response retVal = ((ILinxSoapImport.EdmsService.IContentStoreContract)(this)).RetrieveDocument2(inValue);
            discussionMessages = retVal.discussionMessages;
            return retVal.RetrieveDocument2Result;
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.RetrieveDocument2Response> RetrieveDocument2Async(ILinxSoapImport.EdmsService.RetrieveDocument2Request request) {
            return base.Channel.RetrieveDocument2Async(request);
        }
        
        public ILinxSoapImport.EdmsService.DiscussionMessage[] RetrieveDiscussionMessages(string userName, string securityToken, System.Guid documentId, string repositoryName) {
            return base.Channel.RetrieveDiscussionMessages(userName, securityToken, documentId, repositoryName);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.DiscussionMessage[]> RetrieveDiscussionMessagesAsync(string userName, string securityToken, System.Guid documentId, string repositoryName) {
            return base.Channel.RetrieveDiscussionMessagesAsync(userName, securityToken, documentId, repositoryName);
        }
        
        public void DeleteDocumentIndexRow(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, System.Guid docId, int indexRowId) {
            base.Channel.DeleteDocumentIndexRow(userName, securityToken, repository, docId, indexRowId);
        }
        
        public System.Threading.Tasks.Task DeleteDocumentIndexRowAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, System.Guid docId, int indexRowId) {
            return base.Channel.DeleteDocumentIndexRowAsync(userName, securityToken, repository, docId, indexRowId);
        }
        
        public void DeleteDocument(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, System.Guid docId) {
            base.Channel.DeleteDocument(userName, securityToken, repository, docId);
        }
        
        public System.Threading.Tasks.Task DeleteDocumentAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, System.Guid docId) {
            return base.Channel.DeleteDocumentAsync(userName, securityToken, repository, docId);
        }
        
        public ILinxSoapImport.EdmsService.ContentStoreDocument RetrieveDocumentInformationByDocumentId(string userName, string securityToken, System.Guid documentId, string repositoryName, bool includeLinkedFields) {
            return base.Channel.RetrieveDocumentInformationByDocumentId(userName, securityToken, documentId, repositoryName, includeLinkedFields);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.ContentStoreDocument> RetrieveDocumentInformationByDocumentIdAsync(string userName, string securityToken, System.Guid documentId, string repositoryName, bool includeLinkedFields) {
            return base.Channel.RetrieveDocumentInformationByDocumentIdAsync(userName, securityToken, documentId, repositoryName, includeLinkedFields);
        }
        
        public ILinxSoapImport.EdmsService.ContentStoreDocument[] RetrieveDocumentInformationByDocumentIds(string userName, string securityToken, System.Guid[] documentIds, string repositoryName, bool includeLinkedFields) {
            return base.Channel.RetrieveDocumentInformationByDocumentIds(userName, securityToken, documentIds, repositoryName, includeLinkedFields);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.ContentStoreDocument[]> RetrieveDocumentInformationByDocumentIdsAsync(string userName, string securityToken, System.Guid[] documentIds, string repositoryName, bool includeLinkedFields) {
            return base.Channel.RetrieveDocumentInformationByDocumentIdsAsync(userName, securityToken, documentIds, repositoryName, includeLinkedFields);
        }
        
        public void UpdateMultipleIndexRows(string userName, string securityToken, string repositoryName, System.Collections.Generic.KeyValuePair<System.Guid, int>[] docIDRowIDPairs, ILinxSoapImport.EdmsService.IndexField[] indexes) {
            base.Channel.UpdateMultipleIndexRows(userName, securityToken, repositoryName, docIDRowIDPairs, indexes);
        }
        
        public System.Threading.Tasks.Task UpdateMultipleIndexRowsAsync(string userName, string securityToken, string repositoryName, System.Collections.Generic.KeyValuePair<System.Guid, int>[] docIDRowIDPairs, ILinxSoapImport.EdmsService.IndexField[] indexes) {
            return base.Channel.UpdateMultipleIndexRowsAsync(userName, securityToken, repositoryName, docIDRowIDPairs, indexes);
        }
        
        public void UpdateDocument(string userName, string securityToken, ILinxSoapImport.EdmsService.ContentStoreDocument document, System.Guid[] deletedFileIds, ILinxSoapImport.EdmsService.DiscussionMessage[] addedMessages) {
            base.Channel.UpdateDocument(userName, securityToken, document, deletedFileIds, addedMessages);
        }
        
        public System.Threading.Tasks.Task UpdateDocumentAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.ContentStoreDocument document, System.Guid[] deletedFileIds, ILinxSoapImport.EdmsService.DiscussionMessage[] addedMessages) {
            return base.Channel.UpdateDocumentAsync(userName, securityToken, document, deletedFileIds, addedMessages);
        }
        
        public void InsertDocumentWithBarcode1(string userName, string securityToken, string xmlBarcodeConfiguration, byte[] binary, string repositoryName, string fileExtension, bool allowInsertIfCannotReadBarcode) {
            base.Channel.InsertDocumentWithBarcode1(userName, securityToken, xmlBarcodeConfiguration, binary, repositoryName, fileExtension, allowInsertIfCannotReadBarcode);
        }
        
        public System.Threading.Tasks.Task InsertDocumentWithBarcode1Async(string userName, string securityToken, string xmlBarcodeConfiguration, byte[] binary, string repositoryName, string fileExtension, bool allowInsertIfCannotReadBarcode) {
            return base.Channel.InsertDocumentWithBarcode1Async(userName, securityToken, xmlBarcodeConfiguration, binary, repositoryName, fileExtension, allowInsertIfCannotReadBarcode);
        }
        
        public void InsertDocumentWithBarcode2(string userName, string securityToken, ILinxSoapImport.EdmsService.BarcodeConfiguration[] barcodeConfigurations, byte[] binary, string repositoryName, string fileExtension, bool allowInsertIfCannotReadBarcode) {
            base.Channel.InsertDocumentWithBarcode2(userName, securityToken, barcodeConfigurations, binary, repositoryName, fileExtension, allowInsertIfCannotReadBarcode);
        }
        
        public System.Threading.Tasks.Task InsertDocumentWithBarcode2Async(string userName, string securityToken, ILinxSoapImport.EdmsService.BarcodeConfiguration[] barcodeConfigurations, byte[] binary, string repositoryName, string fileExtension, bool allowInsertIfCannotReadBarcode) {
            return base.Channel.InsertDocumentWithBarcode2Async(userName, securityToken, barcodeConfigurations, binary, repositoryName, fileExtension, allowInsertIfCannotReadBarcode);
        }
        
        public void InsertNewIndexRowToExistingDocument(string userName, string securityToken, ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData documentMetadata) {
            base.Channel.InsertNewIndexRowToExistingDocument(userName, securityToken, documentMetadata);
        }
        
        public System.Threading.Tasks.Task InsertNewIndexRowToExistingDocumentAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData documentMetadata) {
            return base.Channel.InsertNewIndexRowToExistingDocumentAsync(userName, securityToken, documentMetadata);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ILinxSoapImport.EdmsService.RunGlobalSearchResponse ILinxSoapImport.EdmsService.IContentStoreContract.RunGlobalSearch(ILinxSoapImport.EdmsService.RunGlobalSearchRequest request) {
            return base.Channel.RunGlobalSearch(request);
        }
        
        public ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[] RunGlobalSearch(string userName, string securityToken, string searchValue, bool getMaxRequested, out int countItemsFound) {
            ILinxSoapImport.EdmsService.RunGlobalSearchRequest inValue = new ILinxSoapImport.EdmsService.RunGlobalSearchRequest();
            inValue.userName = userName;
            inValue.securityToken = securityToken;
            inValue.searchValue = searchValue;
            inValue.getMaxRequested = getMaxRequested;
            ILinxSoapImport.EdmsService.RunGlobalSearchResponse retVal = ((ILinxSoapImport.EdmsService.IContentStoreContract)(this)).RunGlobalSearch(inValue);
            countItemsFound = retVal.countItemsFound;
            return retVal.RunGlobalSearchResult;
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.RunGlobalSearchResponse> RunGlobalSearchAsync(ILinxSoapImport.EdmsService.RunGlobalSearchRequest request) {
            return base.Channel.RunGlobalSearchAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ILinxSoapImport.EdmsService.RunSearchAdvancedForRepositoryAssociationsResponse ILinxSoapImport.EdmsService.IContentStoreContract.RunSearchAdvancedForRepositoryAssociations(ILinxSoapImport.EdmsService.RunSearchAdvancedForRepositoryAssociationsRequest request) {
            return base.Channel.RunSearchAdvancedForRepositoryAssociations(request);
        }
        
        public ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[] RunSearchAdvancedForRepositoryAssociations(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository sourceRepository, ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData sourceMetaData, string targetRepositoryName, int maxRequestedSearchResultCount, out int countItemsFound) {
            ILinxSoapImport.EdmsService.RunSearchAdvancedForRepositoryAssociationsRequest inValue = new ILinxSoapImport.EdmsService.RunSearchAdvancedForRepositoryAssociationsRequest();
            inValue.userName = userName;
            inValue.securityToken = securityToken;
            inValue.sourceRepository = sourceRepository;
            inValue.sourceMetaData = sourceMetaData;
            inValue.targetRepositoryName = targetRepositoryName;
            inValue.maxRequestedSearchResultCount = maxRequestedSearchResultCount;
            ILinxSoapImport.EdmsService.RunSearchAdvancedForRepositoryAssociationsResponse retVal = ((ILinxSoapImport.EdmsService.IContentStoreContract)(this)).RunSearchAdvancedForRepositoryAssociations(inValue);
            countItemsFound = retVal.countItemsFound;
            return retVal.RunSearchAdvancedForRepositoryAssociationsResult;
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.RunSearchAdvancedForRepositoryAssociationsResponse> RunSearchAdvancedForRepositoryAssociationsAsync(ILinxSoapImport.EdmsService.RunSearchAdvancedForRepositoryAssociationsRequest request) {
            return base.Channel.RunSearchAdvancedForRepositoryAssociationsAsync(request);
        }
        
        public ILinxSoapImport.EdmsService.Repository[] GetRepositories(string userName, string securityToken) {
            return base.Channel.GetRepositories(userName, securityToken);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.Repository[]> GetRepositoriesAsync(string userName, string securityToken) {
            return base.Channel.GetRepositoriesAsync(userName, securityToken);
        }
        
        public ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[] CheckoutDocuments(string userName, string securityToken, ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[] documentMetaDatas) {
            return base.Channel.CheckoutDocuments(userName, securityToken, documentMetaDatas);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[]> CheckoutDocumentsAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[] documentMetaDatas) {
            return base.Channel.CheckoutDocumentsAsync(userName, securityToken, documentMetaDatas);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ILinxSoapImport.EdmsService.CanCheckoutDocumentsResponse ILinxSoapImport.EdmsService.IContentStoreContract.CanCheckoutDocuments(ILinxSoapImport.EdmsService.CanCheckoutDocumentsRequest request) {
            return base.Channel.CanCheckoutDocuments(request);
        }
        
        public bool CanCheckoutDocuments(string userName, string securityToken, ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[] documentMetaDatas, out string checkedoutByUserName) {
            ILinxSoapImport.EdmsService.CanCheckoutDocumentsRequest inValue = new ILinxSoapImport.EdmsService.CanCheckoutDocumentsRequest();
            inValue.userName = userName;
            inValue.securityToken = securityToken;
            inValue.documentMetaDatas = documentMetaDatas;
            ILinxSoapImport.EdmsService.CanCheckoutDocumentsResponse retVal = ((ILinxSoapImport.EdmsService.IContentStoreContract)(this)).CanCheckoutDocuments(inValue);
            checkedoutByUserName = retVal.checkedoutByUserName;
            return retVal.CanCheckoutDocumentsResult;
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.CanCheckoutDocumentsResponse> CanCheckoutDocumentsAsync(ILinxSoapImport.EdmsService.CanCheckoutDocumentsRequest request) {
            return base.Channel.CanCheckoutDocumentsAsync(request);
        }
        
        public bool CanUndoCheckoutDocuments(string userName, string securityToken, ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[] documentMetadatas) {
            return base.Channel.CanUndoCheckoutDocuments(userName, securityToken, documentMetadatas);
        }
        
        public System.Threading.Tasks.Task<bool> CanUndoCheckoutDocumentsAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[] documentMetadatas) {
            return base.Channel.CanUndoCheckoutDocumentsAsync(userName, securityToken, documentMetadatas);
        }
        
        public void UndoCheckoutDocuments(string userName, string securityToken, ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[] documentMetaDatas) {
            base.Channel.UndoCheckoutDocuments(userName, securityToken, documentMetaDatas);
        }
        
        public System.Threading.Tasks.Task UndoCheckoutDocumentsAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[] documentMetaDatas) {
            return base.Channel.UndoCheckoutDocumentsAsync(userName, securityToken, documentMetaDatas);
        }
        
        public void CheckinDocument(string userName, string securityToken, ILinxSoapImport.EdmsService.ContentStoreDocument document, ILinxSoapImport.EdmsService.DiscussionMessage[] addedMessages, string comment, bool isMajorVersion) {
            base.Channel.CheckinDocument(userName, securityToken, document, addedMessages, comment, isMajorVersion);
        }
        
        public System.Threading.Tasks.Task CheckinDocumentAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.ContentStoreDocument document, ILinxSoapImport.EdmsService.DiscussionMessage[] addedMessages, string comment, bool isMajorVersion) {
            return base.Channel.CheckinDocumentAsync(userName, securityToken, document, addedMessages, comment, isMajorVersion);
        }
        
        public ILinxSoapImport.EdmsService.ContentStoreDocumentVersionEntry[] RetrieveDocumentVersionHistory(string userName, string securityToken, string repositoryName, System.Guid documentId, bool ascending) {
            return base.Channel.RetrieveDocumentVersionHistory(userName, securityToken, repositoryName, documentId, ascending);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.ContentStoreDocumentVersionEntry[]> RetrieveDocumentVersionHistoryAsync(string userName, string securityToken, string repositoryName, System.Guid documentId, bool ascending) {
            return base.Channel.RetrieveDocumentVersionHistoryAsync(userName, securityToken, repositoryName, documentId, ascending);
        }
        
        public void RestoreDocument(string userName, string securityToken, string repositoryName, System.Guid documentId, System.Version version) {
            base.Channel.RestoreDocument(userName, securityToken, repositoryName, documentId, version);
        }
        
        public System.Threading.Tasks.Task RestoreDocumentAsync(string userName, string securityToken, string repositoryName, System.Guid documentId, System.Version version) {
            return base.Channel.RestoreDocumentAsync(userName, securityToken, repositoryName, documentId, version);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ILinxSoapImport.EdmsService.RetrieveDocumentVersionResponse ILinxSoapImport.EdmsService.IContentStoreContract.RetrieveDocumentVersion(ILinxSoapImport.EdmsService.RetrieveDocumentVersionRequest request) {
            return base.Channel.RetrieveDocumentVersion(request);
        }
        
        public ILinxSoapImport.EdmsService.ContentStoreDocument RetrieveDocumentVersion(string userName, string securityToken, System.Guid documentId, string repositortyName, System.Version version, out ILinxSoapImport.EdmsService.DiscussionMessage[] discussionMessages) {
            ILinxSoapImport.EdmsService.RetrieveDocumentVersionRequest inValue = new ILinxSoapImport.EdmsService.RetrieveDocumentVersionRequest();
            inValue.userName = userName;
            inValue.securityToken = securityToken;
            inValue.documentId = documentId;
            inValue.repositortyName = repositortyName;
            inValue.version = version;
            ILinxSoapImport.EdmsService.RetrieveDocumentVersionResponse retVal = ((ILinxSoapImport.EdmsService.IContentStoreContract)(this)).RetrieveDocumentVersion(inValue);
            discussionMessages = retVal.discussionMessages;
            return retVal.RetrieveDocumentVersionResult;
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.RetrieveDocumentVersionResponse> RetrieveDocumentVersionAsync(ILinxSoapImport.EdmsService.RetrieveDocumentVersionRequest request) {
            return base.Channel.RetrieveDocumentVersionAsync(request);
        }
        
        public ILinxSoapImport.EdmsService.ContentStoreDocument RetrieveDocumentVersionInformation(string userName, string securityToken, System.Guid documentId, string repositoryName, System.Version version, bool includeLinkedFields) {
            return base.Channel.RetrieveDocumentVersionInformation(userName, securityToken, documentId, repositoryName, version, includeLinkedFields);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.ContentStoreDocument> RetrieveDocumentVersionInformationAsync(string userName, string securityToken, System.Guid documentId, string repositoryName, System.Version version, bool includeLinkedFields) {
            return base.Channel.RetrieveDocumentVersionInformationAsync(userName, securityToken, documentId, repositoryName, version, includeLinkedFields);
        }
        
        public ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[] RetrieveAllDocumentInformationCheckedOutToUser(string userName, string securityToken) {
            return base.Channel.RetrieveAllDocumentInformationCheckedOutToUser(userName, securityToken);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.ContentStoreDocumentMetaData[]> RetrieveAllDocumentInformationCheckedOutToUserAsync(string userName, string securityToken) {
            return base.Channel.RetrieveAllDocumentInformationCheckedOutToUserAsync(userName, securityToken);
        }
        
        public void DeleteDocumentVersion(string userName, string securityToken, string repositoryName, System.Guid documentId, System.Version version) {
            base.Channel.DeleteDocumentVersion(userName, securityToken, repositoryName, documentId, version);
        }
        
        public System.Threading.Tasks.Task DeleteDocumentVersionAsync(string userName, string securityToken, string repositoryName, System.Guid documentId, System.Version version) {
            return base.Channel.DeleteDocumentVersionAsync(userName, securityToken, repositoryName, documentId, version);
        }
        
        public System.Guid CreateShareDocLink(string userName, string passwordHash, string repositoryName, System.Guid documentID, System.DateTime expirationDate) {
            return base.Channel.CreateShareDocLink(userName, passwordHash, repositoryName, documentID, expirationDate);
        }
        
        public System.Threading.Tasks.Task<System.Guid> CreateShareDocLinkAsync(string userName, string passwordHash, string repositoryName, System.Guid documentID, System.DateTime expirationDate) {
            return base.Channel.CreateShareDocLinkAsync(userName, passwordHash, repositoryName, documentID, expirationDate);
        }
        
        public void DeleteShareDocLink(System.Guid linkID) {
            base.Channel.DeleteShareDocLink(linkID);
        }
        
        public System.Threading.Tasks.Task DeleteShareDocLinkAsync(System.Guid linkID) {
            return base.Channel.DeleteShareDocLinkAsync(linkID);
        }
        
        public bool DoesShareDocLinkExist(System.Guid linkID) {
            return base.Channel.DoesShareDocLinkExist(linkID);
        }
        
        public System.Threading.Tasks.Task<bool> DoesShareDocLinkExistAsync(System.Guid linkID) {
            return base.Channel.DoesShareDocLinkExistAsync(linkID);
        }
        
        public ILinxSoapImport.EdmsService.ContentStoreDocument GetShareDocByLinkID(System.Guid linkID) {
            return base.Channel.GetShareDocByLinkID(linkID);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.ContentStoreDocument> GetShareDocByLinkIDAsync(System.Guid linkID) {
            return base.Channel.GetShareDocByLinkIDAsync(linkID);
        }
        
        public bool IsShareDocLinkExpired(System.Guid linkID) {
            return base.Channel.IsShareDocLinkExpired(linkID);
        }
        
        public System.Threading.Tasks.Task<bool> IsShareDocLinkExpiredAsync(System.Guid linkID) {
            return base.Channel.IsShareDocLinkExpiredAsync(linkID);
        }
        
        public void SendShareDocLink(string userName, string securityToken, string repositoryName, System.Guid documentID, string[] toEmails, string[] ccEmails, string subject, string message, int expireInDays) {
            base.Channel.SendShareDocLink(userName, securityToken, repositoryName, documentID, toEmails, ccEmails, subject, message, expireInDays);
        }
        
        public System.Threading.Tasks.Task SendShareDocLinkAsync(string userName, string securityToken, string repositoryName, System.Guid documentID, string[] toEmails, string[] ccEmails, string subject, string message, int expireInDays) {
            return base.Channel.SendShareDocLinkAsync(userName, securityToken, repositoryName, documentID, toEmails, ccEmails, subject, message, expireInDays);
        }
        
        public string GetDocumentAnnotations(string userName, string securityToken, string repositoryName, System.Guid documentID) {
            return base.Channel.GetDocumentAnnotations(userName, securityToken, repositoryName, documentID);
        }
        
        public System.Threading.Tasks.Task<string> GetDocumentAnnotationsAsync(string userName, string securityToken, string repositoryName, System.Guid documentID) {
            return base.Channel.GetDocumentAnnotationsAsync(userName, securityToken, repositoryName, documentID);
        }
        
        public void SetDocumentAnnotations(string userName, string securityToken, string repositoryName, System.Guid documentID, string annotationXML) {
            base.Channel.SetDocumentAnnotations(userName, securityToken, repositoryName, documentID, annotationXML);
        }
        
        public System.Threading.Tasks.Task SetDocumentAnnotationsAsync(string userName, string securityToken, string repositoryName, System.Guid documentID, string annotationXML) {
            return base.Channel.SetDocumentAnnotationsAsync(userName, securityToken, repositoryName, documentID, annotationXML);
        }
        
        public bool IsDocumentLinkedWithBatch(string userName, int repositoryId, System.Guid icsDocumentId) {
            return base.Channel.IsDocumentLinkedWithBatch(userName, repositoryId, icsDocumentId);
        }
        
        public System.Threading.Tasks.Task<bool> IsDocumentLinkedWithBatchAsync(string userName, int repositoryId, System.Guid icsDocumentId) {
            return base.Channel.IsDocumentLinkedWithBatchAsync(userName, repositoryId, icsDocumentId);
        }
        
        public ILinxSoapImport.EdmsService.Repository GetRepositoryByName(string userName, string securityToken, string repositoryName) {
            return base.Channel.GetRepositoryByName(userName, securityToken, repositoryName);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.Repository> GetRepositoryByNameAsync(string userName, string securityToken, string repositoryName) {
            return base.Channel.GetRepositoryByNameAsync(userName, securityToken, repositoryName);
        }
        
        public ILinxSoapImport.EdmsService.Repository GetRepositoryById(string userName, string securityToken, int id) {
            return base.Channel.GetRepositoryById(userName, securityToken, id);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.Repository> GetRepositoryByIdAsync(string userName, string securityToken, int id) {
            return base.Channel.GetRepositoryByIdAsync(userName, securityToken, id);
        }
        
        public ILinxSoapImport.EdmsService.Repository[] GetRepositoryByUser(string userName, string securityToken) {
            return base.Channel.GetRepositoryByUser(userName, securityToken);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.Repository[]> GetRepositoryByUserAsync(string userName, string securityToken) {
            return base.Channel.GetRepositoryByUserAsync(userName, securityToken);
        }
        
        public ILinxSoapImport.EdmsService.Repository[] GetRepositoryByUserGroup(string userName, string securityToken, ILinxSoapImport.EdmsService.UserGroup group) {
            return base.Channel.GetRepositoryByUserGroup(userName, securityToken, group);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.Repository[]> GetRepositoryByUserGroupAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.UserGroup group) {
            return base.Channel.GetRepositoryByUserGroupAsync(userName, securityToken, group);
        }
        
        public int AddNewRepository(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository) {
            return base.Channel.AddNewRepository(userName, securityToken, repository);
        }
        
        public System.Threading.Tasks.Task<int> AddNewRepositoryAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository) {
            return base.Channel.AddNewRepositoryAsync(userName, securityToken, repository);
        }
        
        public void UpdateRepository(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.IndexField[] deletedIndexes, System.Collections.Generic.Dictionary<ILinxSoapImport.EdmsService.IndexField, string> renamedIndexes, ILinxSoapImport.EdmsService.IndexField[] newIndexes, ILinxSoapImport.EdmsService.IndexField[] updatedIndexes) {
            base.Channel.UpdateRepository(userName, securityToken, repository, deletedIndexes, renamedIndexes, newIndexes, updatedIndexes);
        }
        
        public System.Threading.Tasks.Task UpdateRepositoryAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.IndexField[] deletedIndexes, System.Collections.Generic.Dictionary<ILinxSoapImport.EdmsService.IndexField, string> renamedIndexes, ILinxSoapImport.EdmsService.IndexField[] newIndexes, ILinxSoapImport.EdmsService.IndexField[] updatedIndexes) {
            return base.Channel.UpdateRepositoryAsync(userName, securityToken, repository, deletedIndexes, renamedIndexes, newIndexes, updatedIndexes);
        }
        
        public void DeleteRepository(string userName, string securityToken, int id) {
            base.Channel.DeleteRepository(userName, securityToken, id);
        }
        
        public System.Threading.Tasks.Task DeleteRepositoryAsync(string userName, string securityToken, int id) {
            return base.Channel.DeleteRepositoryAsync(userName, securityToken, id);
        }
        
        public void AddNewIndexesToRepository(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.IndexField[] indexes) {
            base.Channel.AddNewIndexesToRepository(userName, securityToken, repository, indexes);
        }
        
        public System.Threading.Tasks.Task AddNewIndexesToRepositoryAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.IndexField[] indexes) {
            return base.Channel.AddNewIndexesToRepositoryAsync(userName, securityToken, repository, indexes);
        }
        
        public void SetIndexOrder(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, System.Collections.Generic.Dictionary<string, int> order) {
            base.Channel.SetIndexOrder(userName, securityToken, repository, order);
        }
        
        public System.Threading.Tasks.Task SetIndexOrderAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, System.Collections.Generic.Dictionary<string, int> order) {
            return base.Channel.SetIndexOrderAsync(userName, securityToken, repository, order);
        }
        
        public ILinxSoapImport.EdmsService.Repository[] GetAllCaptureRepositories(string userName, string securityToken) {
            return base.Channel.GetAllCaptureRepositories(userName, securityToken);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.Repository[]> GetAllCaptureRepositoriesAsync(string userName, string securityToken) {
            return base.Channel.GetAllCaptureRepositoriesAsync(userName, securityToken);
        }
        
        public ILinxSoapImport.EdmsService.Repository[] GetAllSearchRepositories(string userName, string securityToken) {
            return base.Channel.GetAllSearchRepositories(userName, securityToken);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.Repository[]> GetAllSearchRepositoriesAsync(string userName, string securityToken) {
            return base.Channel.GetAllSearchRepositoriesAsync(userName, securityToken);
        }
        
        public bool DoesRepositoryExist(string userName, string securityToken, string repositoryName) {
            return base.Channel.DoesRepositoryExist(userName, securityToken, repositoryName);
        }
        
        public System.Threading.Tasks.Task<bool> DoesRepositoryExistAsync(string userName, string securityToken, string repositoryName) {
            return base.Channel.DoesRepositoryExistAsync(userName, securityToken, repositoryName);
        }
        
        public bool DoesIndexFieldExist(string userName, string securityToken, string repositoryName, string indexFieldName) {
            return base.Channel.DoesIndexFieldExist(userName, securityToken, repositoryName, indexFieldName);
        }
        
        public System.Threading.Tasks.Task<bool> DoesIndexFieldExistAsync(string userName, string securityToken, string repositoryName, string indexFieldName) {
            return base.Channel.DoesIndexFieldExistAsync(userName, securityToken, repositoryName, indexFieldName);
        }
        
        public ILinxSoapImport.EdmsService.SearchDatum[] GetSearchRestrictions(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.UserGroup group) {
            return base.Channel.GetSearchRestrictions(userName, securityToken, repository, group);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.SearchDatum[]> GetSearchRestrictionsAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.UserGroup group) {
            return base.Channel.GetSearchRestrictionsAsync(userName, securityToken, repository, group);
        }
        
        public void SetSearchRestrictions(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.UserGroup group, ILinxSoapImport.EdmsService.SearchDatum[] restrictions) {
            base.Channel.SetSearchRestrictions(userName, securityToken, repository, group, restrictions);
        }
        
        public System.Threading.Tasks.Task SetSearchRestrictionsAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.UserGroup group, ILinxSoapImport.EdmsService.SearchDatum[] restrictions) {
            return base.Channel.SetSearchRestrictionsAsync(userName, securityToken, repository, group, restrictions);
        }
        
        public int GetDocumentCount(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository) {
            return base.Channel.GetDocumentCount(userName, securityToken, repository);
        }
        
        public System.Threading.Tasks.Task<int> GetDocumentCountAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository) {
            return base.Channel.GetDocumentCountAsync(userName, securityToken, repository);
        }
        
        public string[] GetPicklistValuesForUser(string userName, ILinxSoapImport.EdmsService.Repository repository, string indexName, ILinxSoapImport.EdmsService.User user) {
            return base.Channel.GetPicklistValuesForUser(userName, repository, indexName, user);
        }
        
        public System.Threading.Tasks.Task<string[]> GetPicklistValuesForUserAsync(string userName, ILinxSoapImport.EdmsService.Repository repository, string indexName, ILinxSoapImport.EdmsService.User user) {
            return base.Channel.GetPicklistValuesForUserAsync(userName, repository, indexName, user);
        }
        
        public string[] GetPicklistValuesForUserGroup(string userName, ILinxSoapImport.EdmsService.Repository repository, string indexName, ILinxSoapImport.EdmsService.UserGroup userGroup) {
            return base.Channel.GetPicklistValuesForUserGroup(userName, repository, indexName, userGroup);
        }
        
        public System.Threading.Tasks.Task<string[]> GetPicklistValuesForUserGroupAsync(string userName, ILinxSoapImport.EdmsService.Repository repository, string indexName, ILinxSoapImport.EdmsService.UserGroup userGroup) {
            return base.Channel.GetPicklistValuesForUserGroupAsync(userName, repository, indexName, userGroup);
        }
        
        public void AddPicklistItem(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string indexName, string value) {
            base.Channel.AddPicklistItem(userName, securityToken, repository, indexName, value);
        }
        
        public System.Threading.Tasks.Task AddPicklistItemAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string indexName, string value) {
            return base.Channel.AddPicklistItemAsync(userName, securityToken, repository, indexName, value);
        }
        
        public void AddPicklistItems(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string indexName, string[] values) {
            base.Channel.AddPicklistItems(userName, securityToken, repository, indexName, values);
        }
        
        public System.Threading.Tasks.Task AddPicklistItemsAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string indexName, string[] values) {
            return base.Channel.AddPicklistItemsAsync(userName, securityToken, repository, indexName, values);
        }
        
        public void RemovePicklistItem(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string indexName, string value) {
            base.Channel.RemovePicklistItem(userName, securityToken, repository, indexName, value);
        }
        
        public System.Threading.Tasks.Task RemovePicklistItemAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string indexName, string value) {
            return base.Channel.RemovePicklistItemAsync(userName, securityToken, repository, indexName, value);
        }
        
        public void UpdatePicklistItem(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string indexName, string oldValue, string value) {
            base.Channel.UpdatePicklistItem(userName, securityToken, repository, indexName, oldValue, value);
        }
        
        public System.Threading.Tasks.Task UpdatePicklistItemAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string indexName, string oldValue, string value) {
            return base.Channel.UpdatePicklistItemAsync(userName, securityToken, repository, indexName, oldValue, value);
        }
        
        public void RestrictPickListForGroup(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string indexName, string[] values, ILinxSoapImport.EdmsService.UserGroup userGroup) {
            base.Channel.RestrictPickListForGroup(userName, securityToken, repository, indexName, values, userGroup);
        }
        
        public System.Threading.Tasks.Task RestrictPickListForGroupAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string indexName, string[] values, ILinxSoapImport.EdmsService.UserGroup userGroup) {
            return base.Channel.RestrictPickListForGroupAsync(userName, securityToken, repository, indexName, values, userGroup);
        }
        
        public void UnRestrictPickListForGroup(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string indexName, string[] values, ILinxSoapImport.EdmsService.UserGroup userGroup) {
            base.Channel.UnRestrictPickListForGroup(userName, securityToken, repository, indexName, values, userGroup);
        }
        
        public System.Threading.Tasks.Task UnRestrictPickListForGroupAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string indexName, string[] values, ILinxSoapImport.EdmsService.UserGroup userGroup) {
            return base.Channel.UnRestrictPickListForGroupAsync(userName, securityToken, repository, indexName, values, userGroup);
        }
        
        public ILinxSoapImport.EdmsService.PicklistSortingType GetPicklistSortingType(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string indexName) {
            return base.Channel.GetPicklistSortingType(userName, securityToken, repository, indexName);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.PicklistSortingType> GetPicklistSortingTypeAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string indexName) {
            return base.Channel.GetPicklistSortingTypeAsync(userName, securityToken, repository, indexName);
        }
        
        public void SetPicklistSortingType(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string indexName, ILinxSoapImport.EdmsService.PicklistSortingType sortingType) {
            base.Channel.SetPicklistSortingType(userName, securityToken, repository, indexName, sortingType);
        }
        
        public System.Threading.Tasks.Task SetPicklistSortingTypeAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string indexName, ILinxSoapImport.EdmsService.PicklistSortingType sortingType) {
            return base.Channel.SetPicklistSortingTypeAsync(userName, securityToken, repository, indexName, sortingType);
        }
        
        public System.Collections.Generic.Dictionary<int, long> GetRepositoryUsageSizeInMB(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository[] repositories) {
            return base.Channel.GetRepositoryUsageSizeInMB(userName, securityToken, repositories);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, long>> GetRepositoryUsageSizeInMBAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository[] repositories) {
            return base.Channel.GetRepositoryUsageSizeInMBAsync(userName, securityToken, repositories);
        }
        
        public int GetMaxAllowableDatabaseSizeInMB(string userName) {
            return base.Channel.GetMaxAllowableDatabaseSizeInMB(userName);
        }
        
        public System.Threading.Tasks.Task<int> GetMaxAllowableDatabaseSizeInMBAsync(string userName) {
            return base.Channel.GetMaxAllowableDatabaseSizeInMBAsync(userName);
        }
        
        public ILinxSoapImport.EdmsService.RepositoryAssociation[] GetRepositoryAssociationsById(string userName, string securityToken, long sourceRepositoryId) {
            return base.Channel.GetRepositoryAssociationsById(userName, securityToken, sourceRepositoryId);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.RepositoryAssociation[]> GetRepositoryAssociationsByIdAsync(string userName, string securityToken, long sourceRepositoryId) {
            return base.Channel.GetRepositoryAssociationsByIdAsync(userName, securityToken, sourceRepositoryId);
        }
        
        public ILinxSoapImport.EdmsService.RepositoryAssociation[] GetRepositoryAssociationsByName(string userName, string securityToken, string sourceRepositoryName) {
            return base.Channel.GetRepositoryAssociationsByName(userName, securityToken, sourceRepositoryName);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.RepositoryAssociation[]> GetRepositoryAssociationsByNameAsync(string userName, string securityToken, string sourceRepositoryName) {
            return base.Channel.GetRepositoryAssociationsByNameAsync(userName, securityToken, sourceRepositoryName);
        }
        
        public void SetRepositoryAssociations(string userName, string securityToken, ILinxSoapImport.EdmsService.RepositoryAssociation[] repositoryAssociations) {
            base.Channel.SetRepositoryAssociations(userName, securityToken, repositoryAssociations);
        }
        
        public System.Threading.Tasks.Task SetRepositoryAssociationsAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.RepositoryAssociation[] repositoryAssociations) {
            return base.Channel.SetRepositoryAssociationsAsync(userName, securityToken, repositoryAssociations);
        }
        
        public void DeleteRepositoryAssociationsForSourceRepository(string userName, string securityToken, long sourceRepositoryId) {
            base.Channel.DeleteRepositoryAssociationsForSourceRepository(userName, securityToken, sourceRepositoryId);
        }
        
        public System.Threading.Tasks.Task DeleteRepositoryAssociationsForSourceRepositoryAsync(string userName, string securityToken, long sourceRepositoryId) {
            return base.Channel.DeleteRepositoryAssociationsForSourceRepositoryAsync(userName, securityToken, sourceRepositoryId);
        }
        
        public void SetSettingXml(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string settingXml) {
            base.Channel.SetSettingXml(userName, securityToken, repository, settingXml);
        }
        
        public System.Threading.Tasks.Task SetSettingXmlAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string settingXml) {
            return base.Channel.SetSettingXmlAsync(userName, securityToken, repository, settingXml);
        }
        
        public void LockRepository(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository) {
            base.Channel.LockRepository(userName, securityToken, repository);
        }
        
        public System.Threading.Tasks.Task LockRepositoryAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository) {
            return base.Channel.LockRepositoryAsync(userName, securityToken, repository);
        }
        
        public void UnLockRepository(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository) {
            base.Channel.UnLockRepository(userName, securityToken, repository);
        }
        
        public System.Threading.Tasks.Task UnLockRepositoryAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository) {
            return base.Channel.UnLockRepositoryAsync(userName, securityToken, repository);
        }
        
        public void ForceUnlockRepository(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository) {
            base.Channel.ForceUnlockRepository(userName, securityToken, repository);
        }
        
        public System.Threading.Tasks.Task ForceUnlockRepositoryAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository) {
            return base.Channel.ForceUnlockRepositoryAsync(userName, securityToken, repository);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ILinxSoapImport.EdmsService.IsRepositoryLinkedWithBatchProfileResponse ILinxSoapImport.EdmsService.IContentStoreContract.IsRepositoryLinkedWithBatchProfile(ILinxSoapImport.EdmsService.IsRepositoryLinkedWithBatchProfileRequest request) {
            return base.Channel.IsRepositoryLinkedWithBatchProfile(request);
        }
        
        public bool IsRepositoryLinkedWithBatchProfile(int repositoryId, out string batchProfileName) {
            ILinxSoapImport.EdmsService.IsRepositoryLinkedWithBatchProfileRequest inValue = new ILinxSoapImport.EdmsService.IsRepositoryLinkedWithBatchProfileRequest();
            inValue.repositoryId = repositoryId;
            ILinxSoapImport.EdmsService.IsRepositoryLinkedWithBatchProfileResponse retVal = ((ILinxSoapImport.EdmsService.IContentStoreContract)(this)).IsRepositoryLinkedWithBatchProfile(inValue);
            batchProfileName = retVal.batchProfileName;
            return retVal.IsRepositoryLinkedWithBatchProfileResult;
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.IsRepositoryLinkedWithBatchProfileResponse> IsRepositoryLinkedWithBatchProfileAsync(ILinxSoapImport.EdmsService.IsRepositoryLinkedWithBatchProfileRequest request) {
            return base.Channel.IsRepositoryLinkedWithBatchProfileAsync(request);
        }
        
        public ILinxSoapImport.EdmsService.LinkedServerTableSettings[] GetLinkedServerSettings(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository) {
            return base.Channel.GetLinkedServerSettings(userName, securityToken, repository);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.LinkedServerTableSettings[]> GetLinkedServerSettingsAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository) {
            return base.Channel.GetLinkedServerSettingsAsync(userName, securityToken, repository);
        }
        
        public void UpdateLinkedServerSettings(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.LinkedServerTableSettings[] linkedServerTableSettings) {
            base.Channel.UpdateLinkedServerSettings(userName, securityToken, repository, linkedServerTableSettings);
        }
        
        public System.Threading.Tasks.Task UpdateLinkedServerSettingsAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, ILinxSoapImport.EdmsService.LinkedServerTableSettings[] linkedServerTableSettings) {
            return base.Channel.UpdateLinkedServerSettingsAsync(userName, securityToken, repository, linkedServerTableSettings);
        }
        
        public System.Data.DataTable ExecuteLinkedServerQuery(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string query) {
            return base.Channel.ExecuteLinkedServerQuery(userName, securityToken, repository, query);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> ExecuteLinkedServerQueryAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository, string query) {
            return base.Channel.ExecuteLinkedServerQueryAsync(userName, securityToken, repository, query);
        }
        
        public void DeleteLinkedServerSettings(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository) {
            base.Channel.DeleteLinkedServerSettings(userName, securityToken, repository);
        }
        
        public System.Threading.Tasks.Task DeleteLinkedServerSettingsAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.Repository repository) {
            return base.Channel.DeleteLinkedServerSettingsAsync(userName, securityToken, repository);
        }
        
        public System.Version[] GetMigratedVersions(string userName, string securityToken) {
            return base.Channel.GetMigratedVersions(userName, securityToken);
        }
        
        public System.Threading.Tasks.Task<System.Version[]> GetMigratedVersionsAsync(string userName, string securityToken) {
            return base.Channel.GetMigratedVersionsAsync(userName, securityToken);
        }
        
        public byte[] ExportProfile(string userName, string securityToken, string repositoryName, System.Version version) {
            return base.Channel.ExportProfile(userName, securityToken, repositoryName, version);
        }
        
        public System.Threading.Tasks.Task<byte[]> ExportProfileAsync(string userName, string securityToken, string repositoryName, System.Version version) {
            return base.Channel.ExportProfileAsync(userName, securityToken, repositoryName, version);
        }
        
        public void ImportProfile(string userName, string securityToken, byte[] xmlBinary, bool permissionImported, System.Collections.Generic.Dictionary<string, string> existedNamesMapping) {
            base.Channel.ImportProfile(userName, securityToken, xmlBinary, permissionImported, existedNamesMapping);
        }
        
        public System.Threading.Tasks.Task ImportProfileAsync(string userName, string securityToken, byte[] xmlBinary, bool permissionImported, System.Collections.Generic.Dictionary<string, string> existedNamesMapping) {
            return base.Channel.ImportProfileAsync(userName, securityToken, xmlBinary, permissionImported, existedNamesMapping);
        }
        
        public bool Ping() {
            return base.Channel.Ping();
        }
        
        public System.Threading.Tasks.Task<bool> PingAsync() {
            return base.Channel.PingAsync();
        }
        
        public byte[] DownloadOfflineFile(string userName) {
            return base.Channel.DownloadOfflineFile(userName);
        }
        
        public System.Threading.Tasks.Task<byte[]> DownloadOfflineFileAsync(string userName) {
            return base.Channel.DownloadOfflineFileAsync(userName);
        }
        
        public System.Version GetCurrentClientBinaryVersion() {
            return base.Channel.GetCurrentClientBinaryVersion();
        }
        
        public System.Threading.Tasks.Task<System.Version> GetCurrentClientBinaryVersionAsync() {
            return base.Channel.GetCurrentClientBinaryVersionAsync();
        }
        
        public void DeleteView(string userName, string securityToken, string viewName) {
            base.Channel.DeleteView(userName, securityToken, viewName);
        }
        
        public System.Threading.Tasks.Task DeleteViewAsync(string userName, string securityToken, string viewName) {
            return base.Channel.DeleteViewAsync(userName, securityToken, viewName);
        }
        
        public string GenerateSampleViewSearch(string userName, string securityToken, string repositoryName) {
            return base.Channel.GenerateSampleViewSearch(userName, securityToken, repositoryName);
        }
        
        public System.Threading.Tasks.Task<string> GenerateSampleViewSearchAsync(string userName, string securityToken, string repositoryName) {
            return base.Channel.GenerateSampleViewSearchAsync(userName, securityToken, repositoryName);
        }
        
        public ILinxSoapImport.EdmsService.View[] GetViewsForUser(string userName, string securityToken) {
            return base.Channel.GetViewsForUser(userName, securityToken);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.View[]> GetViewsForUserAsync(string userName, string securityToken) {
            return base.Channel.GetViewsForUserAsync(userName, securityToken);
        }
        
        public ILinxSoapImport.EdmsService.View[] GetViewsForUserGroup(string userName, string securityToken, int userGroupId) {
            return base.Channel.GetViewsForUserGroup(userName, securityToken, userGroupId);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.View[]> GetViewsForUserGroupAsync(string userName, string securityToken, int userGroupId) {
            return base.Channel.GetViewsForUserGroupAsync(userName, securityToken, userGroupId);
        }
        
        public ILinxSoapImport.EdmsService.UserGroup[] GetUserGroupsForView(string userName, string securityToken, string viewName) {
            return base.Channel.GetUserGroupsForView(userName, securityToken, viewName);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.UserGroup[]> GetUserGroupsForViewAsync(string userName, string securityToken, string viewName) {
            return base.Channel.GetUserGroupsForViewAsync(userName, securityToken, viewName);
        }
        
        public ILinxSoapImport.EdmsService.View GetView(string userName, string securityToken, string viewName) {
            return base.Channel.GetView(userName, securityToken, viewName);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.View> GetViewAsync(string userName, string securityToken, string viewName) {
            return base.Channel.GetViewAsync(userName, securityToken, viewName);
        }
        
        public ILinxSoapImport.EdmsService.IndexField[] GetViewSearchFields(string userName, string securityToken, string viewName) {
            return base.Channel.GetViewSearchFields(userName, securityToken, viewName);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.IndexField[]> GetViewSearchFieldsAsync(string userName, string securityToken, string viewName) {
            return base.Channel.GetViewSearchFieldsAsync(userName, securityToken, viewName);
        }
        
        public System.Collections.Generic.Dictionary<string, ILinxSoapImport.EdmsService.IndexField[]> GetViewSearchFieldsForViews(string userName, string securityToken, string[] viewNames) {
            return base.Channel.GetViewSearchFieldsForViews(userName, securityToken, viewNames);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, ILinxSoapImport.EdmsService.IndexField[]>> GetViewSearchFieldsForViewsAsync(string userName, string securityToken, string[] viewNames) {
            return base.Channel.GetViewSearchFieldsForViewsAsync(userName, securityToken, viewNames);
        }
        
        public ILinxSoapImport.EdmsService.ViewPermission GetViewPermission(string userName, string securityToken, ILinxSoapImport.EdmsService.User user, string viewName) {
            return base.Channel.GetViewPermission(userName, securityToken, user, viewName);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.ViewPermission> GetViewPermissionAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.User user, string viewName) {
            return base.Channel.GetViewPermissionAsync(userName, securityToken, user, viewName);
        }
        
        public System.Collections.Generic.Dictionary<string, ILinxSoapImport.EdmsService.ViewPermission> GetViewPermissions(string userName, string securityToken, ILinxSoapImport.EdmsService.User user, string[] viewNames) {
            return base.Channel.GetViewPermissions(userName, securityToken, user, viewNames);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, ILinxSoapImport.EdmsService.ViewPermission>> GetViewPermissionsAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.User user, string[] viewNames) {
            return base.Channel.GetViewPermissionsAsync(userName, securityToken, user, viewNames);
        }
        
        public System.Data.DataTable RunViewSearch(string userName, string securityToken, string viewName, ILinxSoapImport.EdmsService.IndexField[] searchDatums) {
            return base.Channel.RunViewSearch(userName, securityToken, viewName, searchDatums);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> RunViewSearchAsync(string userName, string securityToken, string viewName, ILinxSoapImport.EdmsService.IndexField[] searchDatums) {
            return base.Channel.RunViewSearchAsync(userName, securityToken, viewName, searchDatums);
        }
        
        public void SetView(string userName, string securityToken, ILinxSoapImport.EdmsService.View view) {
            base.Channel.SetView(userName, securityToken, view);
        }
        
        public System.Threading.Tasks.Task SetViewAsync(string userName, string securityToken, ILinxSoapImport.EdmsService.View view) {
            return base.Channel.SetViewAsync(userName, securityToken, view);
        }
        
        public bool DoesViewNameExists(string userName, string securityToken, string viewName) {
            return base.Channel.DoesViewNameExists(userName, securityToken, viewName);
        }
        
        public System.Threading.Tasks.Task<bool> DoesViewNameExistsAsync(string userName, string securityToken, string viewName) {
            return base.Channel.DoesViewNameExistsAsync(userName, securityToken, viewName);
        }
        
        public System.Data.DataTable ValidateViewSearch(string userName, string securityToken, string query, ILinxSoapImport.EdmsService.IndexField[] searchDatums) {
            return base.Channel.ValidateViewSearch(userName, securityToken, query, searchDatums);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> ValidateViewSearchAsync(string userName, string securityToken, string query, ILinxSoapImport.EdmsService.IndexField[] searchDatums) {
            return base.Channel.ValidateViewSearchAsync(userName, securityToken, query, searchDatums);
        }
        
        public ILinxSoapImport.EdmsService.IndexField[] ParseViewSearchForSearchFields(string userName, string securityToken, string viewSearchQuery) {
            return base.Channel.ParseViewSearchForSearchFields(userName, securityToken, viewSearchQuery);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.IndexField[]> ParseViewSearchForSearchFieldsAsync(string userName, string securityToken, string viewSearchQuery) {
            return base.Channel.ParseViewSearchForSearchFieldsAsync(userName, securityToken, viewSearchQuery);
        }
        
        public ILinxSoapImport.EdmsService.ContentStoreDocument RetrieveDocumentInformationFromViewSearchResult(string userName, string securityToken, string viewName, System.Guid documentID) {
            return base.Channel.RetrieveDocumentInformationFromViewSearchResult(userName, securityToken, viewName, documentID);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.ContentStoreDocument> RetrieveDocumentInformationFromViewSearchResultAsync(string userName, string securityToken, string viewName, System.Guid documentID) {
            return base.Channel.RetrieveDocumentInformationFromViewSearchResultAsync(userName, securityToken, viewName, documentID);
        }
        
        public void SetViewPermission(string userName, string securityToken, string viewName, int userGroupId, ILinxSoapImport.EdmsService.ViewPermission permission) {
            base.Channel.SetViewPermission(userName, securityToken, viewName, userGroupId, permission);
        }
        
        public System.Threading.Tasks.Task SetViewPermissionAsync(string userName, string securityToken, string viewName, int userGroupId, ILinxSoapImport.EdmsService.ViewPermission permission) {
            return base.Channel.SetViewPermissionAsync(userName, securityToken, viewName, userGroupId, permission);
        }
        
        public ILinxSoapImport.EdmsService.ViewPermission GetViewPermissionForUserGroup(string userName, string securityToken, string viewName, int userGroupId) {
            return base.Channel.GetViewPermissionForUserGroup(userName, securityToken, viewName, userGroupId);
        }
        
        public System.Threading.Tasks.Task<ILinxSoapImport.EdmsService.ViewPermission> GetViewPermissionForUserGroupAsync(string userName, string securityToken, string viewName, int userGroupId) {
            return base.Channel.GetViewPermissionForUserGroupAsync(userName, securityToken, viewName, userGroupId);
        }
    }
}
