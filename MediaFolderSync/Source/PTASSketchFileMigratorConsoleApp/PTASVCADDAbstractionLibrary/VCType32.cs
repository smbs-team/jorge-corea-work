// <auto-generated/>
namespace VCType32
{
    static class VCConstants
    {
        // Entity Kinds
        // extern "C" short WINAPI VCGetCurrentEntityKind(short* iError);
        // Reserve 1-100 for 2D kinds
        public const int UNKNOWN = 0;
        public const int LINE2D = 1;
        public const int ARC2D = 2;
        public const int CIRCLE2D = 3;
        public const int ELLIPSE2D = 4;
        public const int BEZIER2D = 5;
        public const int POINT2D = 6;
        public const int SYMBOL2D = 7;
        public const int TEXT2D = 8;
        public const int DIMLINEAR2D = 9;
        public const int DIMANGULAR2D = 10;
        public const int DIMRADIAL2D = 11;
        public const int DIMDIAMETER2D = 12;
        public const int FILL2D = 13;
        public const int HATCH2D = 14;
        public const int ATTRIBUTE2D = 15;
        public const int INTERPCURV2D = 16;
        public const int MINTERPCURV2D = 17;
        public const int ELLIPTICALARC2D = 18;
        public const int CONTINUOUSLINE2D = 19;
        public const int CONTINUOUSBEZIER2D = 20;
        public const int LEADER2D = 21;
        public const int REFFRAME2D = 22;
        public const int ORDDIM2D = 23;
        public const int IMAGE2D = 24; //Added version 6.0.0
        public const int MULTILINE2D = 25; //Added version 6.0.0

        // Reserve 101-200 for 3D kinds
        public const int POLYGON3D = 101;
        public const int POINT3D = 102;
        public const int LINE3D = 103;
        public const int SYMBOL3D = 104;
        public const int CONTINUOUSLINE3D = 105;

        // Bitwise flags that can be "OR"ed together for the bByLayerFlag member of the EAttr Struct
        public const int COLORBYLAYER = 0x01; 
        public const int TYPEBYLAYER = 0x02; 
        public const int WIDTHBYLAYER = 0x04; 
        public const int RESERVEBYLAYER = 0x08; 

        //======================================================================================
        // Defines for VCSetAlertApp, VCSetAlertAppEx, VCSetAlertAppDll, VCSetAlertAppDllEx & SetAlertEvent
        // extern "C" void WINAPI VCSetAlertAppDllEx(short* iError, char* DllName, char* NativeCmd, long iCode0, long iCode1);

        // iCode0 = ALERT_APP_....
        // Code1 = ALERT_APP_EX_.....
        // These values can be bit-wise "OR"ed together.
        // Example:
        // VCSetAlertAppDllEx(iError, DllName, NativeCmd, iCode0, iCode1);
        // iCode0 = ALERT_APP_WORLD_CLOSE | ALERT_APP_UTOOL_MOUSEMOVE
        // iCode1 = ALERT_APP_EX_WORLD_ACTIVATE


        // The ALERT_APP_..._DLL defines are the DLL function name postfix’s when using
        // VCSetAlertAppDll(...) and VCSetAlertAppDllEx(...). They are seperated from the
        // NativeCmd parameter by a '_'.
        // Example:
        // NativeCmd = "MyFunction"
        // iCode0 = ALERT_APP_UTOOL_MOUSEDOWN | ALERT_APP_UTOOL_MOUSEMOVE
        // You need to define the following the functions in your DLL:
        // void WINAPI MyFunction_MouseDown( WPARAM, LPARAM); //ALERT_APP_UTOOL_MOUSEDOWN
        // void WINAPI MyFunction_MouseMove( WPARAM, LPARAM); // ALERT_APP_UTOOL_MOUSEMOVE 

        // The ALERT_..._CHARCODE defines values are sent to your application as the wParam
        // parameters of a WM_CHAR message when using VCSetAlertApp(...) and VCSetAlertAppEx(...).

        // The ALERT_APP_... HEX value defines are for the iCode0
        // The ALERT_APP_EX_... HEX value defines are for the iCode1
        //======================================================================================
        
        public const uint ALERT_APP_ALL = 0;
        public const uint ALERT_APP_NONE = 0x80000000;

        public const uint ALERT_APP_UTOOL_MOUSEDOWN = 0x00000001;
        public const string ALERT_APP_UTOOL_MOUSEDOWN_DLL = "MouseDown";

        public const uint ALERT_APP_UTOOL_MOUSEMOVE = 0x00000002;
        public const string ALERT_APP_UTOOL_MOUSEMOVE_DLL = "MouseMove";

        public const uint ALERT_APP_UTOOL_ABORT = 0x00000004;
        public const string ALERT_APP_UTOOL_ABORT_DLL = "Abort";

        public const uint ALERT_APP_CMDLINE_CHAR = 0x00000008;
        public const string ALERT_APP_CMDLINE_CHAR_DLL = "Char";

        public const uint ALERT_APP_CLOSE = 0x00000010;
        public const string ALERT_APP_CLOSE_DLL = "AppClose";

        public const uint ALERT_APP_UTOOL_PENUP = 0x00000020;
        public const string ALERT_APP_UTOOL_PENUP_DLL = "PenUp";
        public const uint ALERT_PENUP_CHARCODE = 252;

        public const uint ALERT_APP_WORLD_CLOSE = 0x00000040;
        public const string ALERT_APP_WORLD_CLOSE_DLL = 	"DrawingClose";
        public const uint ALERT_APP_WORLD_CLOSE_CHARCODE = 253;

        public const uint ALERT_APP_UTOOL_ERASERUBBER = 0x00000080;
        public const string ALERT_APP_UTOOL_ERASERUBBER_DLL = "EraseRubber";
        public const uint ALERT_UTOOL_ERASERUBBER_CHARCODE = 255;

        public const uint ALERT_APP_TOOL_COMPLETE = 0x00000100;
        public const string ALERT_APP_TOOL_COMPLETE_DLL = "ToolComplete";
        public const uint ALERT_TOOL_COMPLETE_CHARCODE = 254;
        // Added version 4.0.0
        // Added an encoded lParam which is sent with the alert 
        // LOWORD = the ID of the tool completing. See CmdID.h
        // HIGHWORD = the tool type. See Visual CADD Tool Types.

        public const uint ALERT_APP_UTOOL_INIT = 0x00000200;
        public const string ALERT_APP_UTOOL_INIT_DLL = "Init";
        public const uint ALERT_UTOOL_INIT_CHARCODE = 251;

        public const uint ALERT_APP_UTOOL_TERMINATE = 0x00000400;
        public const string ALERT_APP_UTOOL_TERMINATE_DLL = "Terminate";
        public const uint ALERT_UTOOL_TERMINATE_CHARCODE = 250;

        public const uint ALERT_APP_FRAME_CLOSE = 0x00000800;
        public const string ALERT_APP_FRAME_CLOSE_DLL = "FrameClose";
        public const uint ALERT_FRAME_CLOSE_CHARCODE = 249;

        public const uint ALERT_APP_FRAME_RESIZE = 0x00001000;
        public const string ALERT_APP_FRAME_RESIZE_DLL = "FrameResize";
        public const uint ALERT_FRAME_RESIZE_CHARCODE = 248;

        public const uint ALERT_APP_ENTITY_ERASED = 0x00002000;
        public const string ALERT_APP_ENTITY_ERASED_DLL = "EntityErased";
        public const uint ALERT_APP_ENTITY_ERASED_CHARCODE = 247;

        public const uint ALERT_APP_ENTITY_SELECT_CHANGE = 0x00004000;
        public const string ALERT_APP_ENTITY_SELECT_CHANGE_DLL = "EntitySelectChange";
        public const uint ALERT_APP_ENTITY_SELECT_CHANGE_CHARCODE = 246;

        public const uint ALERT_APP_ACTIVATE = 0x00008000;
        public const string ALERT_APP_ACTIVATE_DLL = "Activate";
        public const uint ALERT_APP_ACTIVATE_CHARCODE = 245;

        public const uint ALERT_APP_DEACTIVATE = 0x00010000;
        public const string ALERT_APP_DEACTIVATE_DLL = "DeActivate";
        public const uint ALERT_APP_DEACTIVATE_CHARCODE = 244;

        public const uint ALERT_APP_UTOOL_MOUSEUP = 0x00020000;
        public const string ALERT_APP_UTOOL_MOUSEUP_DLL = "MouseUp";

        public const uint ALERT_APP_WORLD_MOUSEMOVE = 0x00040000;
        public const string ALERT_APP_WORLD_MOUSEMOVE_DLL = "WorldMouseMove";
        public const uint ALERT_APP_WORLD_MOUSEMOVE_CHARCODE = 243;

        public const uint ALERT_APP_WORLD_MOUSEDOWN = 0x00080000; 
        public const string ALERT_APP_WORLD_MOUSEDOWN_DLL = "WorldMouseDown";
        public const uint ALERT_APP_WORLD_MOUSEDOWN_CHARCODE = 242;

        public const uint ALERT_APP_WORLD_MOUSEUP = 0x00100000; 
        public const string ALERT_APP_WORLD_MOUSEUP_DLL = "WorldMouseUp";
        public const uint ALERT_APP_WORLD_MOUSEUP_CHARCODE = 241;

        public const uint ALERT_APP_WORLD_END_REDRAW = 0x00200000; 
        public const string ALERT_APP_WORLD_END_REDRAW_DLL = "WorldEndRedraw";
        public const uint ALERT_APP_WORLD_END_REDRAW_CHARCODE = 240;

        public const uint ALERT_APP_WORLD_BEGIN_REDRAW = 0x00400000; 
        public const string ALERT_APP_WORLD_BEGIN_REDRAW_DLL = "WorldBeginRedraw";
        public const uint ALERT_APP_WORLD_BEGIN_REDRAW_CHARCODE = 239;

        public const uint ALERT_APP_WORLD_BEGIN_PRINT = 0x00800000;
        public const string ALERT_APP_WORLD_BEGIN_PRINT_DLL = "WorldBeginPrint";
        public const uint ALERT_APP_WORLD_BEGIN_PRINT_CHARCODE = 238;

        public const uint ALERT_APP_WORLD_END_PRINT = 0x01000000; 
        public const string ALERT_APP_WORLD_END_PRINT_DLL = "WorldEndPrint";
        public const uint ALERT_APP_WORLD_END_PRINT_CHARCODE = 237;

        // Added version 3.0.0
        public const uint ALERT_APP_TOOL_START = 0x02000000;  
        public const string ALERT_APP_TOOL_START_DLL = "ToolStart";
        public const uint ALERT_APP_TOOL_START_CHARCODE = 236;
        // Added version 4.0.0
        // encoded lParam which is sent with the alert 
        // LOWORD = the ID of the tool being starting. See CmdID.h
        // HIGHWORD = the tool type. See Visual CADD Tool Types.

        // Added version 3.0.0
        public const uint ALERT_APP_TOOL_ABORT = 0x04000000;  
        public const string ALERT_APP_TOOL_ABORT_DLL = "ToolAbort";
        public const uint ALERT_APP_TOOL_ABORT_CHARCODE = 235;
        // Added version 4.0.0
        // encoded lParam which is sent with the alert
        // LOWORD = the ID of the tool being aborted. See CmdID.h
        // HIGHWORD = the tool type. See Visual CADD Tool Types.

        //======================================================================================
        // Defines for VCSetAlertAppEx & VCSetAlertAppDllEx iCode1 Parameter Added version 3.0.0
        //======================================================================================
        // Added version 3.0.0
        public const uint ALERT_APP_EX_ALL = 0xFFFFFFFF;

        // Added version 3.0.0
        public const uint ALERT_APP_EX_PRE_TRANSLATE_GET_MESSAGE = 0x00000001;
        public const string ALERT_APP_EX_PRE_TRANSLATE_GET_MESSAGE_DLL = "PreTranslateGetMessage";
        public const uint ALERT_APP_EX_PRE_TRANSLATE_GET_MESSAGE_CHARCODE = 233;

        // Added version 3.0.0
        public const uint ALERT_APP_EX_PRE_TRANSLATE_FRAME_MESSAGE = 0x00000002;
        public const string ALERT_APP_EX_PRE_TRANSLATE_FRAME_MESSAGE_DLL = "PreTranslateFrameMessage";
        public const uint ALERT_APP_EX_PRE_TRANSLATE_FRAME_MESSAGE_CHARCODE = 232;

        // Added version 3.0.0
        public const uint ALERT_APP_EX_PRE_TRANSLATE_DIALOG_MESSAGE = 0x00000004;
        public const string ALERT_APP_EX_PRE_TRANSLATE_DIALOG_MESSAGE_DLL = "PreTranslateDialogMessage";
        public const uint ALERT_APP_EX_PRE_TRANSLATE_DIALOG_MESSAGE_CHARCODE = 231;

        // Added version 3.0.0
        // VCM_USER_ALERT Posted as the wParam of a WM_COMMAND Message will cause Visual CADD
        // to call the ALERT_APP_EX_USER_ALERT_MESSAGE. The lParam the user sends in the WM_COMMAND
        // message will be sent back to them. This call can be used to avoid recursion which can
        // happen in many of the AlertApp messages such as starting a new tool from within the 
        // AlertAppToolComplete message.
        public const uint ALERT_APP_EX_USER_ALERT_MESSAGE = 0x00000008; 
        public const string ALERT_APP_EX_USER_ALERT_DLL = "UserAlert";
        public const uint ALERT_APP_EX_USER_ALERT_CHARCODE = 230;
        public const uint  VCM_USER_ALERT = 	2801;

        // Added version 3.0.1
        public const uint ALERT_APP_EX_DIALOG_OPEN_MESSAGE = 0x00000010;
        public const string ALERT_APP_EX_DIALOG_OPEN_DLL = "DialogOpen";
        public const uint ALERT_APP_EX_DIALOG_OPEN_CHARCODE = 229;

        // Added version 3.0.1
        public const uint ALERT_APP_EX_DIALOG_CLOSE_MESSAGE = 0x00000020; 
        public const string ALERT_APP_EX_DIALOG_CLOSE_DLL = "DialogClose";
        public const uint ALERT_APP_EX_DIALOG_CLOSE_CHARCODE = 228;

        // Added version 4.0.0
        public const uint ALERT_APP_EX_PRE_TRANSLATE_MDICHILD_MESSAGE = 0x00000040; 
        public const string ALERT_APP_EX_PRE_TRANSLATE_MDICHILD_MESSAGE_DLL = "PreTranslateMdiChildMessage";
        public const uint ALERT_APP_EX_PRE_TRANSLATE_MDICHILD_MESSAGE_CHARCODE = 227;

        // Added version 5.0.0
        // ALERT_APP_EX_WORLD_ACTIVATE sends the
        // HWND of the world just activated as the lParam.
        // This alert is sent after the world has been activated.
        public const uint ALERT_APP_EX_WORLD_ACTIVATE = 0x00000080; 
        public const string ALERT_APP_EX_WORLD_ACTIVATE_DLL = "WorldActivate";
        public const uint ALERT_APP_EX_WORLD_ACTIVATE_CHARCODE = 226;

        // Added version 5.0.0
        // ALERT_APP_EX_WORLD_DEACTIVATE sends the
        // HWND of the world to be deactivated as the lParam.
        // This alert is sent before the window is deactivated.
        public const uint ALERT_APP_EX_WORLD_DEACTIVATE = 0x00000100; 
        public const string ALERT_APP_EX_WORLD_DEACTIVATE_DLL = "WorldDeActivate";
        public const uint ALERT_APP_EX_WORLD_DEACTIVATE_CHARCODE = 225;

        // Added version 5.0.0
        // ALERT_APP_EX_FILE_OPEN sends a flag indicating its
        // state as the lParam.
        // See ALERT_APP_EX_FILE_OPEN/FILE_SAVE alerts flags
        public const uint ALERT_APP_EX_FILE_OPEN = 0x00000200; 
        public const string ALERT_APP_EX_FILE_OPEN_DLL = "FileOpen"; 
        public const uint ALERT_APP_EX_FILE_OPEN_CHARCODE = 224;

        // Added version 5.0.0
        // ALERT_APP_EX_FILE_SAVE sends a flag indicating its
        // state as the lParam.
        // See ALERT_APP_EX_FILE_OPEN/FILE_SAVE alerts flags
        public const uint ALERT_APP_EX_FILE_SAVE = 0x00000400; 
        public const string ALERT_APP_EX_FILE_SAVE_DLL = "FileSave";
        public const uint ALERT_APP_EX_FILE_SAVE_CHARCODE = 223;
        
        // Added version 4.0.0
        // The Visual CADD Tool Types flags sent as the lParam with
        // the ALERT_APP_TOOL_START/COMPLETE/ABORT alerts.
        public const int TOOL_NON_NESTABLE = 0;
        public const int TOOL_NESTABLE = 1;
        public const int TOOL_PHANTOM = 2;
        public const int TOOL_ALLOW_NON_NESTABLE = 3;

        // Added version 5.0.0
        // The lParam flags sent with the ALERT_APP_EX_FILE_OPEN/FILE_SAVE alerts
        public const int VC_FA_PRE_OPEN = 1; 
        public const int VC_FA_POST_OPEN = 2; 
        public const int VC_FA_PRE_DATA = 3; 
        public const int VC_FA_POST_DATA = 4; 
        public const int VC_FA_PRE_CLOSE = 5; 
        public const int VC_FA_POST_CLOSE = 6; 

        // API calls which use "SymbolIndex", use this parameter for entity section additions
        // extern "C" void WINAPI VCAddLineEntity(short* iError, short iSymbolIndex, Point2D dpP0, Point2D dpP1);
        // iSymbolIndex = or iSymbolIndex = VCGetSymbolIndex(iError, pName);
        public const int NONDEFENTITY = (-1); 
        public const int HATCHFILLENTITY = (-2); 

        // extern "C" void WINAPI VCSetProjection3D(short* iError, short iCode);
        // iCode =
        public const int VIEW3D_FLAT = 0; 
        public const int VIEW3D_PARALLEL = 1; 
        public const int VIEW3D_PERSPECTIVE = 2; 

        // extern "C" void WINAPI VCSet3DDisplay(short* iError, short iCode);
        // iCode =
        public const int VIEW3D_WIREFRAME = 0; 
        public const int VIEW3D_QSHADE = 1; 

        // extern "C" void WINAPI VCSet3DQShadeOptions(short* iError, short iCode);
        // iCode =
        public const int QSHADE_ROUGH = 0; 
        public const int QSHADE_EXACT = 1; 
        public const int QSHADE_EXACT_AND_SPLIT = 2; 

        // extern "C" void WINAPI VCChangeView3D(short* iError, short iCode, double dFact);
        // iCode =
        public const int CHANGE_VIEW3D_LEFT = 0; 
        public const int CHANGE_VIEW3D_RIGHT = 1; 
        public const int CHANGE_VIEW3D_UP = 2; 
        public const int CHANGE_VIEW3D_DOWN = 3; 

        // VC Supported File Types
        // extern "C" void WINAPI VCSaveDrawing(short* iError, char* pName, short iFileType, vbool tfSaveSelected);
        // iFileType =
        public const int FILE_NONVALID = (-1); 
        public const int FILE_VCD = 0; 
        public const int FILE_VCS = 1; 
        public const int FILE_VCA = 2; 
        public const int FILE_GCD = 3; 
        public const int FILE_CMP = 4; 
        public const int FILE_DWG = 5; 
        public const int FILE_DXF = 6; 
        public const int FILE_STY = 7; 
        public const int FILE_VCF = 8; 
        public const int FILE_EMF = 9; 
        public const int FILE_WMF = 10; 
        public const int FILE_SHP = 11;   // Added version 3.0.0
        public const int FILE_MIF = 12;   // Added version 3.0.0
        public const int FILE_VBK = 13;   // Added version 3.0.0
        public const int FILE_PDF = 14;   // Added version 5.0.0
        public const int FILE_VBS = 15;   // Added version 6.0.0
        public const int FILE_JS = 16;   // Added version 6.0.0

        // Conversion unit constants 
        public const int UNIT_INCH = 0; 
        public const int UNIT_FEET = 1; 
        public const int UNIT_MM = 2; 
        public const int UNIT_CM = 3; 
        public const int UNIT_M = 4; 
        public const int UNIT_MILE = 10;   // Added version 3.0.0
        public const int UNIT_K = 11;   // Added version 3.0.0

        // Display and dimension units
        // extern "C" void WINAPI VCSetDisplayDistFormat(short* iError, short iF);
        // extern "C" void WINAPI VCSetDimDistFormat(short* iError, short iF_);
        // iF =
        public const int InDec = 0; 
        public const int FtInDec = 1; 
        public const int FtDec = 2; 
        public const int InFrac = 3; 
        public const int FtInFrac = 4; 
        public const int FtFrac = 5; 
        public const int Mil = 6; 
        public const int Cen = 7; 
        public const int Met = 8; 
        public const int Mile = 20;   // Added version 3.0.0
        public const int Kilo = 21;   // Added version 3.0.0

        // Angular display and dimension units
        // extern "C" void WINAPI VCSetDisplayAngleFormat(short* iError, short iF);
        // extern "C" void WINAPI VCSetDimAngleFormat(short* iError, short iF_); 
        // iF =
        public const int AngDeg = 9; 
        public const int AngDMS = 10; 
        public const int AngDM = 11;  // Added version 3.0.0
        public const int AngRad = 12;  // Added version 6.0.0
        public const int AngGrad = 13;  // Added version 6.0.0
        public const int AngSurvey = 14;  // Added version 6.0.0

        // Dimension mode
        // extern "C" void WINAPI VCDimSetDimMode(short* iError, short b);
        // b =
        public const int DIMMODESINGLE = 0; 
        public const int DIMMODECUMULATIVE = 1; 
        public const int DIMMODEPARTITIONED = 2; 

        // Dimension Direction
        // extern "C" void WINAPI VCSetDimLineDirect(short* iError, short b);
        // b =
        public const int DIMALIGNED = 1; 
        public const int DIMHORIZONTAL = 2; 
        public const int DIMVERTICAL = 3; 
        public const int DIMATANANGLE = 4; 

        // Tolerance Type
        // extern "C" void WINAPI VCSetDimTextTolType(short* iError, short b);
        // b =
        public const int DIMNOTOLERANCE = 0; 
        public const int DIMSTACKEDMINMAX = 1; 
        public const int DIMSTACKEDVARIANCE = 2; 
        public const int DIMFIXEDVARIANCE = 3; 
        public const int DIMBASICTOLERANCE = 4; 

        // Dimension Extension Stretch
        // extern "C" void WINAPI VCDimSetDimExtStretch(short* iError, short b);
        // b =
        public const int DIMEXTNOSTRETCH = 0; 
        public const int DIMEXTSTRETCH = 1; 

        // Arrow Types
        // extern "C" void WINAPI VCSetDimArrowType(short* iError, short b);
        // b =
        public const int DIMARROWREGNOFILL = 0; 
        public const int DIMARROWREGFILLED = 1; 
        public const int DIMARROWREGOPEN = 2; 
        public const int DIMARROWNOTCHED = 3; 
        public const int DIMARROWSLASH = 4; 
        public const int DIMARROWCIRCLENOFILL = 5; 
        public const int DIMARROWCIRCLEFILL = 6; 

        // Dimension Text Position
        // extern "C" void WINAPI VCSetDimLineText(short *iError, short b);
        // b =
        public const int DIMTEXTINLINE = 0; 
        public const int DIMTEXTABOVELINE = 1; 
        public const int DIMTEXTFREEFLOAT = 2; 
        public const int DIMTOUTSIDELINE = 3;  // Added version 4.0.0

        // Dimension Text Rotation
        // extern "C" void WINAPI  VCSetDimTextRotationType(short* iError, short b);
        // b =
        public const int DIMTEXTROTATIONALIGNED = 0; 
        public const int DIMTEXTROTATIONHORIZONTAL = 1; 

        // Dimension Proximity Mode
        // extern "C" void WINAPI VCDimSetDimProximity(short* iError, short b);
        // b =
        public const int DIMLINENOPROXFIX = 0; 
        public const int DIMLINEPROXFIX = 1; 

        // Arrow Mode
        // extern "C" void WINAPI VCSetDimArrowMode(short* iError, short b);
        // b =
        public const int DIMARROWNOFLIP = 0; 
        public const int DIMARROWFLIP = 1; 

        // Dimension items
        // extern "C" void WINAPI VCSetDimItemColor(short* iError, short i, short j);
        // i =
        public const int DIMLINE = 0; 
        public const int DIMLEFTARROW = 1; 
        public const int DIMRIGHTARROW = 2; 
        public const int DIMLEFTEXT = 3; 
        public const int DIMRIGHTEXT = 4; 
        public const int DIMTEXT = 5; 

        //Added version 6.0.0
        // Dimension angle styles
        public const int DIMANGLESTYLE_DEFAULT = 0; 
        public const int DIMANGLESTYLE_ANGLEFIRST = 1; 
        public const int DIMANGLESTYLE_ANGLELAST = 2; 
        public const int DIMANGLESTYLE_ANGLEONLY = 3; 

        // Leader vertical alignments
        // extern "C" void WINAPI VCSetLeaderVerticalAlign(short* iError, short b);
        // b =
        public const int LEADER_VERT_DEFAULT = 0; 
        public const int LEADER_VERT_BASELINE = 1; 
        public const int LEADER_VERT_TOP = 2; 
        public const int LEADER_VERT_CENTER = 3; 
        public const int LEADER_VERT_BOTTOMCENTER = 4; 
        public const int LEADER_VERT_BOTTOMBASELINE = 5; 

        //Added version 6.0.0
        // Leader borders
        public const int LEADER_BORDER_BOX = 0; 
        public const int LEADER_BORDER_CIRCLE_FIX = 1; 
        public const int LEADER_BORDER_CIRCLE_VAR = 2; 
        public const int LEADER_BORDER_VLINE = 3; 
        public const int LEADER_BORDER_HLINE = 4; 

        //Added version 6.0.0
        // Leader items
        public const int LEADERTEXT = 0; 
        public const int LEADERLINE = 1; 
        public const int LEADERARROW = 2; 
        public const int LEADERBORDER = 3; 

        // Datum modes
        // extern "C" void WINAPI VCSetDatumType(short* iError, short iDatumType);
        // iDatumType =
        public const int DATUMNONE = 0; 
        public const int DATUMXY = 1; 
        public const int DATUMX = 2; 
        public const int DATUMY = 3; 

        // Text justify modes
        // extern "C" void WINAPI VCSetTextJustify(short* iError, short j);
        // j =
        public const int JUSTIFY_CENTER = 67;   //  ASCII character 'C'
        public const int JUSTIFY_LEFT = 76;   //  ASCII character 'L'
        public const int JUSTIFY_RIGHT = 82;   //  ASCII character 'R'

        // Symbol explode layers
        // extern "C" void  WINAPI VCSetSymExplode(short* iError, short iEx);
        // iEx =
        public const int INDIVIDUAL_LAYER = 0; 
        public const int PLACEMENT_LAYER = 1; 
        public const int CURRENT_LAYER = 2; 

        // AutoCAD Import Unit Types
        // extern "C" void WINAPI VCSetAcadImportUnit(short* iError, BYTE b);
        // b =
        public const int ACAD_UNIT_FIRST = 0; 
        public const int ACAD_UNIT_INCH = ACAD_UNIT_FIRST; 
        public const int ACAD_UNIT_FEET = 1; 
        public const int ACAD_UNIT_MILL = 2; 
        public const int ACAD_UNIT_CENT = 3; 
        public const int ACAD_UNIT_METER = 4; 
        public const int ACAD_UNIT_LAST = ACAD_UNIT_METER;  // Updated as new unit types are added

        // Printer API constants

        // PrintStruct.tfPrintMode =
        public const int PRINTMODE = 0; 
        public const int PLOTMODE = 1; 

        // PrintStruct.ScaleMode =
        public const int FITTOPAPER = 0; 
        public const int CURRENTVIEW = 1; 
        public const int SCALE = 2; 

        // PrintStruct.Orientation =
        public const int PORTRAITMODE = 0; 
        public const int LANDSCAPEMODE = 1; 

        // PrintStruct.PaperUnit =
        public const int METRICUNITS = 0; 
        public const int ENGLISHUNITS = 1; 

        // Plotter API constants

        // PlotStruct.Port =
        public const int PORTCOM1 = 0; 
        public const int PORTCOM2 = 1; 
        public const int PORTCOM3 = 2; 
        public const int PORTCOM4 = 3; 
        public const int PORTLPT1 = 4; 
        public const int PORTLPT2 = 5; 
        public const int PORTLPT3 = 6; 
        public const int PORTFILE = 7;  

        // PlotStruct.BaudRate =
        public const int BAUD110 = 0; 
        public const int BAUD300 = 1; 
        public const int BAUD1200 = 2; 
        public const int BAUD2400 = 3; 
        public const int BAUD4800 = 4; 
        public const int BAUD9600 = 5; 
        public const int BAUD19200 = 6; 
        public const int BAUD38400 = 7; 
        public const int BAUD57600 = 8; 

        // PlotStruct.DataBits =
        public const int DATABITS7 = 0; 
        public const int DATABITS8 = 1; 

        // PlotStruct.Parity =
        public const int PARITYODD = 0; 
        public const int PARITYEVEN = 1; 
        public const int PARITYNONE = 2; 

        // PlotStruct.StopBits =
        public const int STOPBITS1 = 0; 
        public const int STOPBITS2 = 1; 

        // Tool Bar constants
        // extern "C" HWND WINAPI VCGetToolbar(short i);
        // i =
        public const int TBNONE = 0;  // no toolbar
        public const int TBTOP = 1;  // the main speedbar
        public const int TBLEFT = 2;  // the tool palette
        public const int TBRIGHT = 3;  // not used
        public const int TBBOTTOM = 4;  // the status bar

        // Font types constants
        // extern "C" void  WINAPI VCSetTextFontNameAndType(short* iError, char* sz, BYTE b);
        // b = 
        public const int WINTEXT = 0x00;   // Windows font
        public const int VCFTEXT = 0x01;   // VCF font
        public const int LIMBOTEXT = 0x02;   // undetermined font. Added version 5.0.0
        public const int BASETEXT = (LIMBOTEXT  | VCFTEXT); //  base type mask (i.e., 0x03). Added version 5.0.0
        public const int LOOKUPTEXT = 0x04;   // lookup font type in font table. Added version 5.0.0

        // Added version 4.0.0
        // Ortho Advanced type flags
        // extern "C" void WINAPI VCSetOrthoAdvancedType(short* iError, short iType);
        // iType =
        public const int ORTHOADV_NONE = 0; 
        public const int ORTHOADV_STEPANGLE = 1; 
        public const int ORTHOADV_INCREMENTS = 2; 
        public const int ORTHOADV_ONEANGLE = 3; 

        // Added version 4.0.0
        // Running snap type flags
        // extern "C" void WINAPI VCSetRunningSnapType(short* iError, DWORD dwFlags, WORD wOperation);
        // dwFlags =
        public const int NOSNAP = 0x0000; 
        public const int OSNAP_END = 0x0001; 
        public const int OSNAP_OBJ = 0x0002; 
        public const int OSNAP_MID = 0x0004; 
        public const int OSNAP_INT = 0x0008; 
        public const int OSNAP_PERP = 0x0010; 
        public const int OSNAP_TAN = 0x0020; 
        public const int OSNAP_QUAD = 0x0040; 
        public const int OSNAP_PER = 0x0080; 
        public const int OSNAP_CEN = 0x0100; 
        public const int OSNAP_ALL = 0x01FF;  // This will be updated if new snaps are added

        // Added version 4.0.0
        // Running snap types bitwise operators
        // extern "C" void WINAPI VCSetRunningSnapType(short* iError, DWORD dwFlags, WORD wOperation);
        // wOperation =
        public const int Op_Assign = 1; 
        public const int Op_OR = 2; 
        public const int Op_AND = 3; 
        public const int Op_Restore = 4;  // Added version 7.0.0

        // Added version 4.0.0
        // Font list sorting order flags
        // extern "C" void WINAPI VCSetFontListSorting(short* iError, short i);
        // i =
        public const int SORT_ALLFONTS_MIXED = 0; 
        public const int SORT_VECTORFONT_FIRST = 1; 
        public const int SORT_TRUETYPEFONT_FIRST = 2; 

        // Added version 5.0.0
        // status codes on completion of HatchGen
        // extern "C" int WINAPI VCGetCurrentHatchStatus(short* iError);
        public const int GENERATE_NOT_DONE = 0; 
        public const int GENERATE_NORMAL = 1; 
        public const int GENERATE_USER_ABORT = 2; 
        public const int GENERATE_MAX_EXCEEDED = 3; 
        public const int GENERATE_HATCH_NOT_FOUND = 4; 
        public const int GENERATE_INVALID_BOUNDARY = 5; 
        public const int GENERATE_NO_DRAWPATTERN = 6; 

        // Added version 5.0.0
        // Hatch alignment flags
        // extern "C" void WINAPI VCSetHatchAlignment(short* iError, int iAlign);
        // iAlign =
        public const int HATCH_ALIGN_CENTER = 0; 
        public const int HATCH_ALIGN_ORIGIN = 1; 
        public const int HATCH_ALIGN_LOWER_LEFT = 2; 
        public const int HATCH_ALIGN_FIRST_POINT = 3; 

        // Added version 5.0.0
        // Sound event flags
        // extern "C" void WINAPI VCSound(UINT Sound);
        // Sound =
        public const int SND_CRITICAL = 0x01000000;   // critical error
        public const int SND_TOOLERROR = 0x02000000;   // tool error
        public const int SND_TOOLDONE = 0x03000000;   // successful tool completion
        public const int SND_ABORT = 0x04000000;   // abort
        public const int SND_ALERT = 0x05000000;   // user attention is required
        public const int SND_INPUT = 0x06000000;   // input error
        public const int SND_DEBUG = 0x07000000;   // internal debug sound
        public const int SND_STARTUP = 0x08000000;   // start up sound
        public const int SOUND_COUNT = 8;  //  updated as needed

        // Added version 5.0.0
        // EraseEx action flags 
        // extern "C" vbool WINAPI VCSetCurrentErasedEx(short* iError, short iErase, short iUserSessionID, DWORD bfFlags);
        // iErase =
        public const int EREX_UNERASE = 0; 
        public const int EREX_ERASE = 1; 
        public const int EREX_ERASE_NOREDO = 2; 
        public const int EREX_PURGE = 3; 

        // Added version 5.0.0
        // OperationEx and EraseEx behaviour flags
        // extern "C" vbool WINAPI VCSetCurrentErasedEx(short* iError, short iErase, short iUserSessionID, DWORD bfFlags);
        // extern "C" short WINAPI VCEndOperationEx(short* iError, short iUserSessionID, DWORD bfFlags);
        // bfFlags = 
        public const int OPEX_DEFAULT = 0x00000000; 
        public const int OPEX_NOTRUNC = 0x00000001; 
        public const int OPEX_NOPURGE = 0x00000002; 
        public const int OPEX_NODESELECT = 0x00000004; 
        public const int OPEX_NODRAW = 0x00000008; 

        //--------------------------------------------------------------------------------------------
        // The following are not used directly in the API but can be useful in Visual CADD programming
        //--------------------------------------------------------------------------------------------

        // Visual CADD Fonts

        // TrueType font ASCII Character Code values for dimension symbols
        public const int TT_DIAMETER_SYMBOL = 216; 
        public const int TT_PLUSMINUS_SYMBOL = 177; 
        public const int TT_DEGREE_SYMBOL = 176; 

        // VCF font ASCII Character Code values for dimension symbols
        public const int VCF_DIAMETER_SYMBOL = 157; 
        public const int VCF_PLUSMINUS_SYMBOL = 241; 
        public const int VCF_DEGREE_SYMBOL = 248; 

        // Visual CADD cursor names
        // These can be used to load Visual CADD cursors for use in your application.
        // Example: hLikeCur = LoadCursor(VCGetVCResourceInstance(), CUR_LIKECURSOR);
        public const string CUR_LIKECURSOR = "LIKECURSOR"; 
        public const string CUR_POINTER = "POINTER"; 
        public const string CUR_NOCURSOR = "NOCURSOR"; 
        public const string CUR_MOVECURSOR = "MOVECURSOR"; 
        public const string CUR_SNAPEND = "SNAPEND"; 
        public const string CUR_SNAPCENTER = "SNAPCENTER"; 
        public const string CUR_SNAPINT = "SNAPINT"; 
        public const string CUR_SNAPOBJ = "SNAPOBJ"; 
        public const string CUR_SNAPMID = "SNAPMID"; 
        public const string CUR_SNAPPERCENT = "SNAPPERCENT"; 
        public const string CUR_SNAPPERP = "SNAPPERP"; 
        public const string CUR_SNAPQUAD = "SNAPQUAD"; 
        public const string CUR_SNAPTAN = "SNAPTAN"; 
        public const string CUR_DRAGDOC = "DRAGDOC"; 
        public const string CUR_DRAGDATA = "DRAGDATA"; 
        public const string CUR_SIZEWE = "SIZEWE"; 
        public const string CUR_TOLAYER = "TOLAYER"; 

        // Visual CADD limits

        // The following string lengths are the sizes of the maximum string
        // sizes and do not include space for the terminal NULL. Buffer to
        // receive these values need to be sized accordingly.
        // Example: szBuffer[MAX_MACRO + 1]
        public const int MAX_VC_OBJ_NAME = 32; 
        public const int MAX_VC_SYM_NAME = MAX_VC_OBJ_NAME; 
        public const int MAX_VC_ATB_NAME = MAX_VC_OBJ_NAME; 
        public const int MAX_VC_HATCH_NAME = MAX_VC_OBJ_NAME; 
        public const int MAX_VC_LAY_NAME = MAX_VC_OBJ_NAME; 
        public const int MAX_VC_LAY_GRP_NAME = MAX_VC_LAY_NAME; 
        public const int MAX_VC_COLOR_NAME = MAX_VC_OBJ_NAME; 
        public const int MAX_VC_LTYPE_NAME = MAX_VC_OBJ_NAME; 
        public const int MAX_VC_VIEW_NAME = MAX_VC_OBJ_NAME; 

        public const int MAX_NATIVE_NAME = 12; 
        public const int MAX_SHORTCUT = 3; 
        public const int MAX_DESCRIPTION = 128; 
        public const int MAX_MACRO = 32000;  // Changed from 255 in version 4.0.0

        public const int MAX_VC_RWLWIDTH_STRING = 25; 
        public const int MAX_VC_DIM_STRING = 347; 

        // Visual CADD Layers
        public const int MAX_VCADD_LAYERS = 1024; 
        public const int MAX_VCADD_LAYERS_INDEX = (MAX_VCADD_LAYERS - 1);
        public const int MIN_VCADD_LAYERS_INDEX = 0; 

        // Visual CADD Colors
        public const int MAX_VCADD_COLORS = 256; 
        public const int MAX_VCADD_COLOR_INDEX = (MAX_VCADD_COLORS - 1);
        public const int MIN_VCADD_COLOR_INDEX = 0; 
        public const int MAX_SYSTEM_COLOR_INDEX = 15;  // Cursor and other system setting with a limited color pallet

        // Visual CADD LineTypes
        public const int MAX_VCADD_LTYPES = 256; 
        public const int MAX_VCADD_LTYPES_INDEX = (MAX_VCADD_LTYPES - 1);
        public const int MIN_VCADD_LTYPES_INDEX = 0; 

        // Visual CADD LineWidths
        public const int MAX_VCADD_LWIDTHS = 16; 
        public const int MAX_VCADD_LWIDTHS_INDEX = (MAX_VCADD_LWIDTHS - 1);
        public const int MIN_VCADD_LWIDTHS_INDEX = 0; 

        //maximum number of points in a continuous entity (CONTINUOUSLINE2D, CONTINUOUSBEZIER2D, MINTERPCURV2D, MULTILINE2D)
        public const int MAX_CONTINUOUS_POINTS = 3748; 

        // Mathematical constants

        // PI defines
        public const double PI = 3.14159265358979323846; 
        public const double TWOPI = (2.0  * PI);
        public const double HALFPI = 1.57079632679489661923; 

        public const double MYRADIAN = (180.0  / PI);

        // Standard angles
        public const double A15 = (15.0  / MYRADIAN);
        public const double A30 = (30.0  / MYRADIAN);
        public const double A45 = (45.0  / MYRADIAN);
        public const double A90 = (HALFPI); 
        public const double A135 = (135.0  / MYRADIAN);
        public const double A150 = (150.0  / MYRADIAN);
        public const double A210 = (210.0  / MYRADIAN);
        public const double A270 = (3.0  * HALFPI);
        public const double A315 = (315.0  / MYRADIAN);
        public const double A330 = (330.0  / MYRADIAN);

        // Unit conversion definitions
        public const double MM_PER_INCH = 25.4; 
        public const double INCHES_PER_INCH = 1.0; 
        public const double INCHES_PER_FOOT = 12.0; 
        public const double INCHES_PER_MILE = 63360.0; 

        public const double INCHES_PER_MM = (1.0 / MM_PER_INCH);
        public const double INCHES_PER_CM = (10.0 / MM_PER_INCH);
        public const double INCHES_PER_METER = (1000.0 / MM_PER_INCH);
        public const double INCHES_PER_KILOMETER = (1000000.0 / MM_PER_INCH);

        public const double FEET_PER_INCH = (INCHES_PER_INCH / INCHES_PER_FOOT);
        public const double MILES_PER_INCH = (INCHES_PER_INCH / INCHES_PER_MILE);
        public const double CM_PER_INCH = (MM_PER_INCH / 10.0);
        public const double METERS_PER_INCH = (MM_PER_INCH / 1000.0);
        public const double KILOMETERS_PER_INCH = (MM_PER_INCH / 1000000.0);

        //Added version 6.0.0
        //File Locking
        public const int MAX_VC_LOC_USERNAME = 274;  //MAX_COMPUTERNAME_LENGTH + UNLEN + 3

        public const int VCLF_SAVING = 0x01; 
        public const int VCLF_SILENT = 0x02; 
        public const int VCLF_LOCKALWAYS = 0x04; 
        public const int VCLF_NOLOCK = 0x08; 
        public const int VCLF_READWRITE = 0x10; 

        public const int IEX_BMP = 0; 
        public const int IEX_JPG = 1; 
        public const int IEX_TIF = 2; 
        public const int IEX_PNG = 3; 
        public const int IEX_EMF = 4; 
        public const int IEX_WMF = 5; 
        public const int IEX_GIF = 6; 

        public const int IEX_BMP_MODE_BW = 0;   //Black on white
        public const int IEX_BMP_MODE_WB = 1;   //White on black
        public const int IEX_BMP_MODE_8 = 2;   //256 Colors (8 bit)
        public const int IEX_BMP_MODE_16 = 3;   //65k Colors (16 bit)
        public const int IEX_BMP_MODE_24 = 4;   //16.7M Colors (24 bit)

        public const int IEX_JPG_MODE_8 = 0;   //8 bit grayscale
        public const int IEX_JPG_MODE_RGB = 1;   //24 bit RGB
        public const int IEX_JPG_MODE_CYMK = 2;   //32 bit CMYK

        public const int IEX_TIF_MODE_BW = 0;   //Black on white
        public const int IEX_TIF_MODE_WB = 1;   //White on black
        public const int IEX_TIF_MODE_8 = 2;   //256 Colors (8 bit)
        public const int IEX_TIF_MODE_24 = 3;   //16.7M Colors (24 bit RGB)
        public const int IEX_TIF_MODE_32 = 4;   //16.7M Colors (32 bit RGBA)

        public const int IEX_PNG_MODE_BW = 0;   //Black on white
        public const int IEX_PNG_MODE_WB = 1;   //White on black
        public const int IEX_PNG_MODE_GRAY = 2;   //Grayscale (8 bit)
        public const int IEX_PNG_MODE_MAP = 3;   //256 Colors (8 bit)
        public const int IEX_PNG_MODE_RGB = 4;   //16.7M Colors(24 bit RGB)
        public const int IEX_PNG_MODE_RGBA = 5;   //16.7M (32 bit RGBA)

        public const int IEX_EMF_MODE_NONE = 0;   //No background
        public const int IEX_EMF_MODE_BACK = 1;   //Include Background

        public const int IEX_GIF_MODE_8 = 0;   //8 Bit with palette

        public const int IEX_BMP_COMP_0 = 0;   //None
        public const int IEX_BMP_COMP_1 = 1;   //RLE

        public const int IEX_JPG_COMP_0 = 0;   //Low
        public const int IEX_JPG_COMP_1 = 1;   //Medium
        public const int IEX_JPG_COMP_2 = 2;   //High

        public const int IEX_TIF_COMP_0 = 0;   //None
        public const int IEX_TIF_COMP_1 = 1;   //CCITT
        public const int IEX_TIF_COMP_2 = 2;   //JPEG
        public const int IEX_TIF_COMP_3 = 3;   //PackBits
        public const int IEX_TIF_COMP_4 = 4;   //Deflate

        //Configuration file translation type constants
        public const int CFT_SCRIPT = 1;  //Script.def
        public const int CFT_CMDEXT = 2;  //Cmdext.def
        public const int CFT_MENU = 3;  //Menu (.mnu) files
        public const int CFT_HATCH = 4;  //Hatches.hat
        public const int CFT_MULTILINE = 5;  //Multiline styles
        public const int CFT_PRESETS = 6;  //Print presets
        public const int CFT_PDF = 7;  //PDF presets
        public const int CFT_PLOT = 8;  //Plot settings
        public const int CFT_LINETYPE = 9;  //Linetype.lnt
        public const int CFT_VGAPAL = 10;  //VGA.pal
        public const int CFT_TOOLBAR = 11;  //Toolbars (.mbr, .tbr)
        public const int CFT_MOUSEMNU = 12;  //MouseMenu.def
        public const int CFT_POPUP = 13;  //Popup (.pop) files

        //Added version 7.0.2
        //  user data constants
        public const int USER_UNKNOWN = 0; 
        public const int USER_BYTE = 1; 
        public const int USER_SHORT = 2; 
        public const int USER_LONG = 3; 
        public const int USER_DOUBLE = 4; 
        public const int USER_FLOAT = 5; 
        public const int USER_CHUNK = 6; 
        public const int USER_STRING = 7; 

        public const int USER_NAME_SIZE = 16; 
        public const int USER_MAX_CHUNK_SIZE = 1024; 
        public const int USER_MAX_STRING_SIZE = 255; 
    }
}
