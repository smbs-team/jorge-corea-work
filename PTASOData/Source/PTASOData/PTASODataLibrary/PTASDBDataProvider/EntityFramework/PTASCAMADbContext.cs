namespace PTASODataLibrary.PtasDbDataProvider.EntityFramework
{
    using System.Diagnostics.CodeAnalysis;
    using System.Threading.Tasks;
    using Microsoft.EntityFrameworkCore;
    using PTASODataLibrary.PtasDbDataProvider.PtasCamaModel;
    using PTASServicesCommon.TokenProvider;

    /// <summary>
    /// Database context for CAMA data.
    /// </summary>
    /// <seealso cref="Microsoft.EntityFrameworkCore.DbContext" />
    /// <seealso cref="System.Data.Entity.DbContext" />
    [ExcludeFromCodeCoverage]
    public partial class PTASCAMADbContext : DbContext
    {
        private const string ConnectionStringPasswordSection = "password";

        /// <summary>
        /// Initializes a new instance of the <see cref="PTASCAMADbContext" /> class.
        /// </summary>
        /// <param name="options">The options for this context.</param>
        /// <param name="tokenProvider">The token provider.</param>
        public PTASCAMADbContext(DbContextOptions<PTASCAMADbContext> options, IServiceTokenProvider tokenProvider)
            : base(options)
        {
            if (tokenProvider == null)
            {
                throw new System.ArgumentNullException(nameof(tokenProvider));
            }

            dynamic conn = null;
            try
            {
                conn = this.Database?.GetDbConnection();
            }
            catch (System.InvalidOperationException)
            {
                // System.InvalidOperationException is thrown when this is a memory database.  We consider the connection null in this case.
            }

            if (conn != null)
            {
                // We only used bearer token when password is not provided
                if (!conn.ConnectionString.Contains(PTASCAMADbContext.ConnectionStringPasswordSection, System.StringComparison.OrdinalIgnoreCase))
                {
                    string token = Task.Run(async () =>
                    {
                        return await tokenProvider.GetAccessTokenAsync(AzureTokenProvider.DbTokenEndpoint, AzureTokenProvider.TenantUrl);
                    }).Result;

                    conn.AccessToken = token;
                }
            }
        }

#pragma warning disable SA1600 // Elements should be documented
#pragma warning disable SA1300 // Element should begin with upper-case letter
#pragma warning disable SA1516 // Elements should be separated by blank line

        public virtual DbSet<Contact> Contact { get; set; }
        public virtual DbSet<PtasAbstractdocument> PtasAbstractdocument { get; set; }
        public virtual DbSet<PtasAbstractproject> PtasAbstractproject { get; set; }
        public virtual DbSet<PtasAbstractprojectresultparcel> PtasAbstractprojectresultparcel { get; set; }
        public virtual DbSet<PtasAbstractprojectsourceparcel> PtasAbstractprojectsourceparcel { get; set; }
        public virtual DbSet<PtasAccessorydetail> PtasAccessorydetail { get; set; }
        public virtual DbSet<PtasAccessorydetailPtasMediarepository> PtasAccessorydetailPtasMediarepository { get; set; }
        public virtual DbSet<PtasAccessorydetailSnapshot> PtasAccessorydetailSnapshot { get; set; }
        public virtual DbSet<PtasAddresschangehistory> PtasAddresschangehistory { get; set; }
        public virtual DbSet<PtasAgriculturalusetype> PtasAgriculturalusetype { get; set; }
        public virtual DbSet<PtasAlternateaddress> PtasAlternateaddress { get; set; }
        public virtual DbSet<PtasAnnexationparcelreview> PtasAnnexationparcelreview { get; set; }
        public virtual DbSet<PtasAnnexationtracker> PtasAnnexationtracker { get; set; }
        public virtual DbSet<PtasAnnualcostdistribution> PtasAnnualcostdistribution { get; set; }
        public virtual DbSet<PtasApartmentregion> PtasApartmentregion { get; set; }
        public virtual DbSet<PtasApartmentsupergroup> PtasApartmentsupergroup { get; set; }
        public virtual DbSet<PtasAppeal> PtasAppeal { get; set; }
        public virtual DbSet<PtasAppealaccess> PtasAppealaccess { get; set; }
        public virtual DbSet<PtasAptadjustedlevyrate> PtasAptadjustedlevyrate { get; set; }
        public virtual DbSet<PtasAptavailablecomparablesale> PtasAptavailablecomparablesale { get; set; }
        public virtual DbSet<PtasAptbuildingqualityadjustment> PtasAptbuildingqualityadjustment { get; set; }
        public virtual DbSet<PtasAptcloseproximity> PtasAptcloseproximity { get; set; }
        public virtual DbSet<PtasAptcommercialincomeexpense> PtasAptcommercialincomeexpense { get; set; }
        public virtual DbSet<PtasAptcomparablerent> PtasAptcomparablerent { get; set; }
        public virtual DbSet<PtasAptcomparablesale> PtasAptcomparablesale { get; set; }
        public virtual DbSet<PtasAptconditionadjustment> PtasAptconditionadjustment { get; set; }
        public virtual DbSet<PtasAptestimatedunitsqft> PtasAptestimatedunitsqft { get; set; }
        public virtual DbSet<PtasAptexpensehighend> PtasAptexpensehighend { get; set; }
        public virtual DbSet<PtasAptexpenseunitsize> PtasAptexpenseunitsize { get; set; }
        public virtual DbSet<PtasAptincomeexpense> PtasAptincomeexpense { get; set; }
        public virtual DbSet<PtasAptlistedrent> PtasAptlistedrent { get; set; }
        public virtual DbSet<PtasAptneighborhood> PtasAptneighborhood { get; set; }
        public virtual DbSet<PtasAptnumberofunitsadjustment> PtasAptnumberofunitsadjustment { get; set; }
        public virtual DbSet<PtasAptpoolandelevatorexpense> PtasAptpoolandelevatorexpense { get; set; }
        public virtual DbSet<PtasAptrentmodel> PtasAptrentmodel { get; set; }
        public virtual DbSet<PtasAptsalesmodel> PtasAptsalesmodel { get; set; }
        public virtual DbSet<PtasApttrending> PtasApttrending { get; set; }
        public virtual DbSet<PtasAptunittypeadjustment> PtasAptunittypeadjustment { get; set; }
        public virtual DbSet<PtasAptvaluation> PtasAptvaluation { get; set; }
        public virtual DbSet<PtasAptvaluationproject> PtasAptvaluationproject { get; set; }
        public virtual DbSet<PtasAptviewqualityadjustment> PtasAptviewqualityadjustment { get; set; }
        public virtual DbSet<PtasAptviewrankadjustment> PtasAptviewrankadjustment { get; set; }
        public virtual DbSet<PtasAptviewtypeadjustment> PtasAptviewtypeadjustment { get; set; }
        public virtual DbSet<PtasAptyearbuiltadjustment> PtasAptyearbuiltadjustment { get; set; }
        public virtual DbSet<PtasArcreasoncode> PtasArcreasoncode { get; set; }
        public virtual DbSet<PtasArea> PtasArea { get; set; }
        public virtual DbSet<PtasAssessmentreviewstatus> PtasAssessmentreviewstatus { get; set; }
        public virtual DbSet<PtasAssessmentrollcorrection> PtasAssessmentrollcorrection { get; set; }
        public virtual DbSet<PtasBillingclassification> PtasBillingclassification { get; set; }
        public virtual DbSet<PtasBillingcode> PtasBillingcode { get; set; }
        public virtual DbSet<PtasBookmark> PtasBookmark { get; set; }
        public virtual DbSet<PtasBookmarktag> PtasBookmarktag { get; set; }
        public virtual DbSet<PtasBuildingdetail> PtasBuildingdetail { get; set; }
        public virtual DbSet<PtasBuildingdetailCommercialuse> PtasBuildingdetailCommercialuse { get; set; }
        public virtual DbSet<PtasBuildingdetailCommercialuseSnapshot> PtasBuildingdetailCommercialuseSnapshot { get; set; }
        public virtual DbSet<PtasBuildingdetailPtasMediarepository> PtasBuildingdetailPtasMediarepository { get; set; }
        public virtual DbSet<PtasBuildingdetailSnapshot> PtasBuildingdetailSnapshot { get; set; }
        public virtual DbSet<PtasBuildingsectionfeature> PtasBuildingsectionfeature { get; set; }
        public virtual DbSet<PtasBuildingsectionfeatureSnapshot> PtasBuildingsectionfeatureSnapshot { get; set; }
        public virtual DbSet<PtasBuildingsectionuse> PtasBuildingsectionuse { get; set; }
        public virtual DbSet<PtasCamanotes> PtasCamanotes { get; set; }
        public virtual DbSet<PtasCamanotesPtasMediarepository> PtasCamanotesPtasMediarepository { get; set; }
        public virtual DbSet<PtasCaprate> PtasCaprate { get; set; }
        public virtual DbSet<PtasChangereason> PtasChangereason { get; set; }
        public virtual DbSet<PtasCity> PtasCity { get; set; }
        public virtual DbSet<PtasCityCounty> PtasCityCounty { get; set; }
        public virtual DbSet<PtasCityStateorprovince> PtasCityStateorprovince { get; set; }
        public virtual DbSet<PtasCityZipcode> PtasCityZipcode { get; set; }
        public virtual DbSet<PtasCondocomplex> PtasCondocomplex { get; set; }
        public virtual DbSet<PtasCondocomplexPtasMediarepository> PtasCondocomplexPtasMediarepository { get; set; }
        public virtual DbSet<PtasCondocomplexSnapshot> PtasCondocomplexSnapshot { get; set; }
        public virtual DbSet<PtasCondounit> PtasCondounit { get; set; }
        public virtual DbSet<PtasCondounitPtasMediarepository> PtasCondounitPtasMediarepository { get; set; }
        public virtual DbSet<PtasCondounitSnapshot> PtasCondounitSnapshot { get; set; }
        public virtual DbSet<PtasContaminatedlandreduction> PtasContaminatedlandreduction { get; set; }
        public virtual DbSet<PtasContaminationproject> PtasContaminationproject { get; set; }
        public virtual DbSet<PtasCountry> PtasCountry { get; set; }
        public virtual DbSet<PtasCounty> PtasCounty { get; set; }
        public virtual DbSet<PtasCountyStateorprovince> PtasCountyStateorprovince { get; set; }
        public virtual DbSet<PtasCountyZipcode> PtasCountyZipcode { get; set; }
        public virtual DbSet<PtasCountylevydetails> PtasCountylevydetails { get; set; }
        public virtual DbSet<PtasCurrentuseapplication> PtasCurrentuseapplication { get; set; }
        public virtual DbSet<PtasCurrentuseapplicationparcel> PtasCurrentuseapplicationparcel { get; set; }
        public virtual DbSet<PtasCurrentusebacktaxstatement> PtasCurrentusebacktaxstatement { get; set; }
        public virtual DbSet<PtasCurrentusebacktaxyear> PtasCurrentusebacktaxyear { get; set; }
        public virtual DbSet<PtasCurrentusefarmyieldhistory> PtasCurrentusefarmyieldhistory { get; set; }
        public virtual DbSet<PtasCurrentusegroup> PtasCurrentusegroup { get; set; }
        public virtual DbSet<PtasCurrentuselanduse> PtasCurrentuselanduse { get; set; }
        public virtual DbSet<PtasCurrentusenote> PtasCurrentusenote { get; set; }
        public virtual DbSet<PtasCurrentuseparcel2> PtasCurrentuseparcel2 { get; set; }
        public virtual DbSet<PtasCurrentuseparcelCurrentuseapplication> PtasCurrentuseparcelCurrentuseapplication { get; set; }
        public virtual DbSet<PtasCurrentusepbrsresource> PtasCurrentusepbrsresource { get; set; }
        public virtual DbSet<PtasCurrentusepbrsresources> PtasCurrentusepbrsresources { get; set; }
        public virtual DbSet<PtasCurrentusetask> PtasCurrentusetask { get; set; }
        public virtual DbSet<PtasCurrentusevaluehistory> PtasCurrentusevaluehistory { get; set; }
        public virtual DbSet<PtasDepreciationtable> PtasDepreciationtable { get; set; }
        public virtual DbSet<PtasDesignationtype> PtasDesignationtype { get; set; }
        public virtual DbSet<PtasDistrict> PtasDistrict { get; set; }
        public virtual DbSet<PtasEbscostcenter> PtasEbscostcenter { get; set; }
        public virtual DbSet<PtasEbsfundnumber> PtasEbsfundnumber { get; set; }
        public virtual DbSet<PtasEbsmainaccount> PtasEbsmainaccount { get; set; }
        public virtual DbSet<PtasEbsproject> PtasEbsproject { get; set; }
        public virtual DbSet<PtasEconomicunit> PtasEconomicunit { get; set; }
        public virtual DbSet<PtasEconomicunitAccessorydetail> PtasEconomicunitAccessorydetail { get; set; }
        public virtual DbSet<PtasEnvironmentalrestriction> PtasEnvironmentalrestriction { get; set; }
        public virtual DbSet<PtasEnvironmentalrestrictiontype> PtasEnvironmentalrestrictiontype { get; set; }
        public virtual DbSet<PtasExemption> PtasExemption { get; set; }
        public virtual DbSet<PtasFileattachmentmetadata> PtasFileattachmentmetadata { get; set; }
        public virtual DbSet<PtasFund> PtasFund { get; set; }
        public virtual DbSet<PtasFundallocation> PtasFundallocation { get; set; }
        public virtual DbSet<PtasFundfactordetail> PtasFundfactordetail { get; set; }
        public virtual DbSet<PtasFundtype> PtasFundtype { get; set; }
        public virtual DbSet<PtasGeoarea> PtasGeoarea { get; set; }
        public virtual DbSet<PtasGeoneighborhood> PtasGeoneighborhood { get; set; }
        public virtual DbSet<PtasGovtaxpayername> PtasGovtaxpayername { get; set; }
        public virtual DbSet<PtasGradestratificationmapping> PtasGradestratificationmapping { get; set; }
        public virtual DbSet<PtasHinotesPtasMediarepository> PtasHinotesPtasMediarepository { get; set; }
        public virtual DbSet<PtasHomeimprovement> PtasHomeimprovement { get; set; }
        public virtual DbSet<PtasHomeimprovementnotes> PtasHomeimprovementnotes { get; set; }
        public virtual DbSet<PtasHousingprogram> PtasHousingprogram { get; set; }
        public virtual DbSet<PtasIndustry> PtasIndustry { get; set; }
        public virtual DbSet<PtasIndustryPtasPersonalpropertycategory> PtasIndustryPtasPersonalpropertycategory { get; set; }
        public virtual DbSet<PtasInspectionhistory> PtasInspectionhistory { get; set; }
        public virtual DbSet<PtasInspectionyear> PtasInspectionyear { get; set; }
        public virtual DbSet<PtasJurisdiction> PtasJurisdiction { get; set; }
        public virtual DbSet<PtasJurisdictioncontact> PtasJurisdictioncontact { get; set; }
        public virtual DbSet<PtasLand> PtasLand { get; set; }
        public virtual DbSet<PtasLandPtasMediarepository> PtasLandPtasMediarepository { get; set; }
        public virtual DbSet<PtasLandSnapshot> PtasLandSnapshot { get; set; }
        public virtual DbSet<PtasLanduse> PtasLanduse { get; set; }
        public virtual DbSet<PtasLandvaluebreakdown> PtasLandvaluebreakdown { get; set; }
        public virtual DbSet<PtasLandvaluebreakdownSnapshot> PtasLandvaluebreakdownSnapshot { get; set; }
        public virtual DbSet<PtasLandvaluecalculation> PtasLandvaluecalculation { get; set; }
        public virtual DbSet<PtasLandvaluecalculationSnapshot> PtasLandvaluecalculationSnapshot { get; set; }
        public virtual DbSet<PtasLegaldescriptions> PtasLegaldescriptions { get; set; }
        public virtual DbSet<PtasLevycode> PtasLevycode { get; set; }
        public virtual DbSet<PtasLevycodePtasFund> PtasLevycodePtasFund { get; set; }
        public virtual DbSet<PtasLevycodechange> PtasLevycodechange { get; set; }
        public virtual DbSet<PtasLevycoderates> PtasLevycoderates { get; set; }
        public virtual DbSet<PtasLevylidliftbond> PtasLevylidliftbond { get; set; }
        public virtual DbSet<PtasLevyordinancerequest> PtasLevyordinancerequest { get; set; }
        public virtual DbSet<PtasLevyworksheetdetails> PtasLevyworksheetdetails { get; set; }
        public virtual DbSet<PtasLevyworksheetdetailsLevycoderates> PtasLevyworksheetdetailsLevycoderates { get; set; }
        public virtual DbSet<PtasLowincomehousingprogram> PtasLowincomehousingprogram { get; set; }
        public virtual DbSet<PtasLowincomehousingprogramSnapshot> PtasLowincomehousingprogramSnapshot { get; set; }
        public virtual DbSet<PtasLowincomehousingunits> PtasLowincomehousingunits { get; set; }
        public virtual DbSet<PtasLowincomeparameters> PtasLowincomeparameters { get; set; }
        public virtual DbSet<PtasMajornumberdetail> PtasMajornumberdetail { get; set; }
        public virtual DbSet<PtasMajornumberindex> PtasMajornumberindex { get; set; }
        public virtual DbSet<PtasMasspayaccumulator> PtasMasspayaccumulator { get; set; }
        public virtual DbSet<PtasMasspayaction> PtasMasspayaction { get; set; }
        public virtual DbSet<PtasMasspayer> PtasMasspayer { get; set; }
        public virtual DbSet<PtasMediarepository> PtasMediarepository { get; set; }
        public virtual DbSet<PtasMedicareplan> PtasMedicareplan { get; set; }
        public virtual DbSet<PtasNaicscode> PtasNaicscode { get; set; }
        public virtual DbSet<PtasNeighborhood> PtasNeighborhood { get; set; }
        public virtual DbSet<PtasNotificationconfiguration> PtasNotificationconfiguration { get; set; }
        public virtual DbSet<PtasNuisancetype> PtasNuisancetype { get; set; }
        public virtual DbSet<PtasOmit> PtasOmit { get; set; }
        public virtual DbSet<PtasParceldetail> PtasParceldetail { get; set; }
        public virtual DbSet<PtasParceldetailPtasMediarepository> PtasParceldetailPtasMediarepository { get; set; }
        public virtual DbSet<PtasParceldetailSnapshot> PtasParceldetailSnapshot { get; set; }
        public virtual DbSet<PtasParceleconomicunit> PtasParceleconomicunit { get; set; }
        public virtual DbSet<PtasParcelmetadata> PtasParcelmetadata { get; set; }
        public virtual DbSet<PtasParkingdistrict> PtasParkingdistrict { get; set; }
        public virtual DbSet<PtasPaymentreceipt> PtasPaymentreceipt { get; set; }
        public virtual DbSet<PtasPbrspointlevel> PtasPbrspointlevel { get; set; }
        public virtual DbSet<PtasPbrsresourcetype> PtasPbrsresourcetype { get; set; }
        public virtual DbSet<PtasPermit> PtasPermit { get; set; }
        public virtual DbSet<PtasPermitPtasMediarepository> PtasPermitPtasMediarepository { get; set; }
        public virtual DbSet<PtasPermitinspectionhistory> PtasPermitinspectionhistory { get; set; }
        public virtual DbSet<PtasPermitwebsiteconfig> PtasPermitwebsiteconfig { get; set; }
        public virtual DbSet<PtasPersonalproperty> PtasPersonalproperty { get; set; }
        public virtual DbSet<PtasPersonalpropertyaccountaccess> PtasPersonalpropertyaccountaccess { get; set; }
        public virtual DbSet<PtasPersonalpropertyaccountstatus> PtasPersonalpropertyaccountstatus { get; set; }
        public virtual DbSet<PtasPersonalpropertyasset> PtasPersonalpropertyasset { get; set; }
        public virtual DbSet<PtasPersonalpropertycategory> PtasPersonalpropertycategory { get; set; }
        public virtual DbSet<PtasPersonalpropertyhistory> PtasPersonalpropertyhistory { get; set; }
        public virtual DbSet<PtasPersonalpropertylisting> PtasPersonalpropertylisting { get; set; }
        public virtual DbSet<PtasPersonalpropertynote> PtasPersonalpropertynote { get; set; }
        public virtual DbSet<PtasPerspropbannerannouncement> PtasPerspropbannerannouncement { get; set; }
        public virtual DbSet<PtasPhonenumber> PtasPhonenumber { get; set; }
        public virtual DbSet<PtasPortaladdress> PtasPortaladdress { get; set; }
        public virtual DbSet<PtasPortalcontact> PtasPortalcontact { get; set; }
        public virtual DbSet<PtasPortalcontactPtasParceldetail> PtasPortalcontactPtasParceldetail { get; set; }
        public virtual DbSet<PtasPortalemail> PtasPortalemail { get; set; }
        public virtual DbSet<PtasProjectdock> PtasProjectdock { get; set; }
        public virtual DbSet<PtasProjectdockSnapshot> PtasProjectdockSnapshot { get; set; }
        public virtual DbSet<PtasPropertyreview> PtasPropertyreview { get; set; }
        public virtual DbSet<PtasPropertytype> PtasPropertytype { get; set; }
        public virtual DbSet<PtasPtasBookmarkPtasBookmarktag> PtasPtasBookmarkPtasBookmarktag { get; set; }
        public virtual DbSet<PtasPtasCamanotesPtasFileattachmentmetad> PtasPtasCamanotesPtasFileattachmentmetad { get; set; }
        public virtual DbSet<PtasPtasFileattachmentmetadataPtasAddres> PtasPtasFileattachmentmetadataPtasAddres { get; set; }
        public virtual DbSet<PtasPtasHomeimprovementnotesPtasFileatta> PtasPtasHomeimprovementnotesPtasFileatta { get; set; }
        public virtual DbSet<PtasPtasPermitPtasFileattachmentmetadata> PtasPtasPermitPtasFileattachmentmetadata { get; set; }
        public virtual DbSet<PtasPtasPermitPtasMediarepository> PtasPtasPermitPtasMediarepository { get; set; }
        public virtual DbSet<PtasPtasResidentialappraiserteamSystemuse> PtasPtasResidentialappraiserteamSystemuse { get; set; }
        public virtual DbSet<PtasPtasSalesPtasFileattachmentmetadata> PtasPtasSalesPtasFileattachmentmetadata { get; set; }
        public virtual DbSet<PtasPtasSalesnotePtasFileattachmentmetad> PtasPtasSalesnotePtasFileattachmentmetad { get; set; }
        public virtual DbSet<PtasPtasSeappdetailPtasSeapppredefnotes> PtasPtasSeappdetailPtasSeapppredefnotes { get; set; }
        public virtual DbSet<PtasPtasSeapplicationPtasSeapppredefnote> PtasPtasSeapplicationPtasSeapppredefnote { get; set; }
        public virtual DbSet<PtasPtasTaskPtasFileattachmentmetadata> PtasPtasTaskPtasFileattachmentmetadata { get; set; }
        public virtual DbSet<PtasPtasTaskPtasParceldetail> PtasPtasTaskPtasParceldetail { get; set; }
        public virtual DbSet<PtasPtasTaskPtasTaxrollcorrection> PtasPtasTaskPtasTaxrollcorrection { get; set; }
        public virtual DbSet<PtasPtasTaxaccountPtasFileattachmentmeta> PtasPtasTaxaccountPtasFileattachmentmeta { get; set; }
        public virtual DbSet<PtasPtasTaxdistrictPtasCounty> PtasPtasTaxdistrictPtasCounty { get; set; }
        public virtual DbSet<PtasPtasTaxdistrictPtasTaxdistrict> PtasPtasTaxdistrictPtasTaxdistrict { get; set; }
        public virtual DbSet<PtasPtasYearSystemuser> PtasPtasYearSystemuser { get; set; }
        public virtual DbSet<PtasPtasconfiguration> PtasPtasconfiguration { get; set; }
        public virtual DbSet<PtasPtassetting> PtasPtassetting { get; set; }
        public virtual DbSet<PtasQstr> PtasQstr { get; set; }
        public virtual DbSet<PtasQuickcollect> PtasQuickcollect { get; set; }
        public virtual DbSet<PtasRatesheetdetail> PtasRatesheetdetail { get; set; }
        public virtual DbSet<PtasRecentparcel> PtasRecentparcel { get; set; }
        public virtual DbSet<PtasRefundpetition> PtasRefundpetition { get; set; }
        public virtual DbSet<PtasRefundpetitionlevyrate> PtasRefundpetitionlevyrate { get; set; }
        public virtual DbSet<PtasResidentialappraiserteam> PtasResidentialappraiserteam { get; set; }
        public virtual DbSet<PtasResponsibility> PtasResponsibility { get; set; }
        public virtual DbSet<PtasRestrictedrent> PtasRestrictedrent { get; set; }
        public virtual DbSet<PtasSalepriceadjustment> PtasSalepriceadjustment { get; set; }
        public virtual DbSet<PtasSales> PtasSales { get; set; }
        public virtual DbSet<PtasSalesParceldetailParcelsinsale> PtasSalesParceldetailParcelsinsale { get; set; }
        public virtual DbSet<PtasSalesPtasMediarepository> PtasSalesPtasMediarepository { get; set; }
        public virtual DbSet<PtasSalesPtasSaleswarningcode> PtasSalesPtasSaleswarningcode { get; set; }
        public virtual DbSet<PtasSalesaccessory> PtasSalesaccessory { get; set; }
        public virtual DbSet<PtasSalesaggregate> PtasSalesaggregate { get; set; }
        public virtual DbSet<PtasSalesbuilding> PtasSalesbuilding { get; set; }
        public virtual DbSet<PtasSalesnote> PtasSalesnote { get; set; }
        public virtual DbSet<PtasSalesnotePtasMediarepository> PtasSalesnotePtasMediarepository { get; set; }
        public virtual DbSet<PtasSalesparcel> PtasSalesparcel { get; set; }
        public virtual DbSet<PtasSaleswarningcode> PtasSaleswarningcode { get; set; }
        public virtual DbSet<PtasScheduledworkflow> PtasScheduledworkflow { get; set; }
        public virtual DbSet<PtasSeappdetail> PtasSeappdetail { get; set; }
        public virtual DbSet<PtasSeapplication> PtasSeapplication { get; set; }
        public virtual DbSet<PtasSeapplicationtask> PtasSeapplicationtask { get; set; }
        public virtual DbSet<PtasSeappnote> PtasSeappnote { get; set; }
        public virtual DbSet<PtasSeappoccupant> PtasSeappoccupant { get; set; }
        public virtual DbSet<PtasSeappoccupantPtasSefinancialformid> PtasSeappoccupantPtasSefinancialformid { get; set; }
        public virtual DbSet<PtasSeappotherprop> PtasSeappotherprop { get; set; }
        public virtual DbSet<PtasSeapppredefnotes> PtasSeapppredefnotes { get; set; }
        public virtual DbSet<PtasSectionusesqft> PtasSectionusesqft { get; set; }
        public virtual DbSet<PtasSectionusesqftSnapshot> PtasSectionusesqftSnapshot { get; set; }
        public virtual DbSet<PtasSeeligibility> PtasSeeligibility { get; set; }
        public virtual DbSet<PtasSeeligibilitybracket> PtasSeeligibilitybracket { get; set; }
        public virtual DbSet<PtasSeexemptionreason> PtasSeexemptionreason { get; set; }
        public virtual DbSet<PtasSefinancialforms> PtasSefinancialforms { get; set; }
        public virtual DbSet<PtasSefrozenvalue> PtasSefrozenvalue { get; set; }
        public virtual DbSet<PtasSketch> PtasSketch { get; set; }
        public virtual DbSet<PtasSpecialtyarea> PtasSpecialtyarea { get; set; }
        public virtual DbSet<PtasSpecialtyneighborhood> PtasSpecialtyneighborhood { get; set; }
        public virtual DbSet<PtasStateorprovince> PtasStateorprovince { get; set; }
        public virtual DbSet<PtasStateutilityvalue> PtasStateutilityvalue { get; set; }
        public virtual DbSet<PtasStreetname> PtasStreetname { get; set; }
        public virtual DbSet<PtasStreettype> PtasStreettype { get; set; }
        public virtual DbSet<PtasSubarea> PtasSubarea { get; set; }
        public virtual DbSet<PtasSubmarket> PtasSubmarket { get; set; }
        public virtual DbSet<PtasSupergroup> PtasSupergroup { get; set; }
        public virtual DbSet<PtasTask> PtasTask { get; set; }
        public virtual DbSet<PtasTaxaccount> PtasTaxaccount { get; set; }
        public virtual DbSet<PtasTaxaccountSnapshot> PtasTaxaccountSnapshot { get; set; }
        public virtual DbSet<PtasTaxbill> PtasTaxbill { get; set; }
        public virtual DbSet<PtasTaxdistrict> PtasTaxdistrict { get; set; }
        public virtual DbSet<PtasTaxdistrictLevycode> PtasTaxdistrictLevycode { get; set; }
        public virtual DbSet<PtasTaxdistrictcontacts> PtasTaxdistrictcontacts { get; set; }
        public virtual DbSet<PtasTaxrollcorrection> PtasTaxrollcorrection { get; set; }
        public virtual DbSet<PtasTaxrollcorrectionvalue> PtasTaxrollcorrectionvalue { get; set; }
        public virtual DbSet<PtasTimberusetype> PtasTimberusetype { get; set; }
        public virtual DbSet<PtasTrendfactor> PtasTrendfactor { get; set; }
        public virtual DbSet<PtasUnitbreakdown> PtasUnitbreakdown { get; set; }
        public virtual DbSet<PtasUnitbreakdownSnapshot> PtasUnitbreakdownSnapshot { get; set; }
        public virtual DbSet<PtasUnitbreakdowntype> PtasUnitbreakdowntype { get; set; }
        public virtual DbSet<PtasValuehistory> PtasValuehistory { get; set; }
        public virtual DbSet<PtasViewtype> PtasViewtype { get; set; }
        public virtual DbSet<PtasVisitedsketch> PtasVisitedsketch { get; set; }
        public virtual DbSet<PtasYear> PtasYear { get; set; }
        public virtual DbSet<PtasZipcode> PtasZipcode { get; set; }
        public virtual DbSet<PtasZipcodeStateorprovince> PtasZipcodeStateorprovince { get; set; }
        public virtual DbSet<PtasZoning> PtasZoning { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<Stringmap> Stringmap { get; set; }
        public virtual DbSet<Systemuser> Systemuser { get; set; }
        public virtual DbSet<Systemuserroles> Systemuserroles { get; set; }
        public virtual DbSet<Team> Team { get; set; }
        public virtual DbSet<Teammembership> Teammembership { get; set; }
        public virtual DbSet<Teamprofiles> Teamprofiles { get; set; }
        public virtual DbSet<Teamroles> Teamroles { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Contact>(entity =>
            {
                entity.ToTable("contact", "dynamics");

                entity.Property(e => e.Contactid)
                    .HasColumnName("contactid")
                    .ValueGeneratedNever();

                entity.Property(e => e.AccountidValue).HasColumnName("_accountid_value");

                entity.Property(e => e.Accountrolecode).HasColumnName("accountrolecode");

                entity.Property(e => e.Address1Addressid).HasColumnName("address1_addressid");

                entity.Property(e => e.Address1Addresstypecode).HasColumnName("address1_addresstypecode");

                entity.Property(e => e.Address1City).HasColumnName("address1_city");

                entity.Property(e => e.Address1Composite).HasColumnName("address1_composite");

                entity.Property(e => e.Address1Country).HasColumnName("address1_country");

                entity.Property(e => e.Address1County).HasColumnName("address1_county");

                entity.Property(e => e.Address1Fax).HasColumnName("address1_fax");

                entity.Property(e => e.Address1Freighttermscode).HasColumnName("address1_freighttermscode");

                entity.Property(e => e.Address1Latitude).HasColumnName("address1_latitude");

                entity.Property(e => e.Address1Line1).HasColumnName("address1_line1");

                entity.Property(e => e.Address1Line2).HasColumnName("address1_line2");

                entity.Property(e => e.Address1Line3).HasColumnName("address1_line3");

                entity.Property(e => e.Address1Longitude).HasColumnName("address1_longitude");

                entity.Property(e => e.Address1Name).HasColumnName("address1_name");

                entity.Property(e => e.Address1Postalcode).HasColumnName("address1_postalcode");

                entity.Property(e => e.Address1Postofficebox).HasColumnName("address1_postofficebox");

                entity.Property(e => e.Address1Primarycontactname).HasColumnName("address1_primarycontactname");

                entity.Property(e => e.Address1Shippingmethodcode).HasColumnName("address1_shippingmethodcode");

                entity.Property(e => e.Address1Stateorprovince).HasColumnName("address1_stateorprovince");

                entity.Property(e => e.Address1Telephone1).HasColumnName("address1_telephone1");

                entity.Property(e => e.Address1Telephone2).HasColumnName("address1_telephone2");

                entity.Property(e => e.Address1Telephone3).HasColumnName("address1_telephone3");

                entity.Property(e => e.Address1Upszone).HasColumnName("address1_upszone");

                entity.Property(e => e.Address1Utcoffset).HasColumnName("address1_utcoffset");

                entity.Property(e => e.Address2Addressid).HasColumnName("address2_addressid");

                entity.Property(e => e.Address2Addresstypecode).HasColumnName("address2_addresstypecode");

                entity.Property(e => e.Address2City).HasColumnName("address2_city");

                entity.Property(e => e.Address2Composite).HasColumnName("address2_composite");

                entity.Property(e => e.Address2Country).HasColumnName("address2_country");

                entity.Property(e => e.Address2County).HasColumnName("address2_county");

                entity.Property(e => e.Address2Fax).HasColumnName("address2_fax");

                entity.Property(e => e.Address2Freighttermscode).HasColumnName("address2_freighttermscode");

                entity.Property(e => e.Address2Latitude).HasColumnName("address2_latitude");

                entity.Property(e => e.Address2Line1).HasColumnName("address2_line1");

                entity.Property(e => e.Address2Line2).HasColumnName("address2_line2");

                entity.Property(e => e.Address2Line3).HasColumnName("address2_line3");

                entity.Property(e => e.Address2Longitude).HasColumnName("address2_longitude");

                entity.Property(e => e.Address2Name).HasColumnName("address2_name");

                entity.Property(e => e.Address2Postalcode).HasColumnName("address2_postalcode");

                entity.Property(e => e.Address2Postofficebox).HasColumnName("address2_postofficebox");

                entity.Property(e => e.Address2Primarycontactname).HasColumnName("address2_primarycontactname");

                entity.Property(e => e.Address2Shippingmethodcode).HasColumnName("address2_shippingmethodcode");

                entity.Property(e => e.Address2Stateorprovince).HasColumnName("address2_stateorprovince");

                entity.Property(e => e.Address2Telephone1).HasColumnName("address2_telephone1");

                entity.Property(e => e.Address2Telephone2).HasColumnName("address2_telephone2");

                entity.Property(e => e.Address2Telephone3).HasColumnName("address2_telephone3");

                entity.Property(e => e.Address2Upszone).HasColumnName("address2_upszone");

                entity.Property(e => e.Address2Utcoffset).HasColumnName("address2_utcoffset");

                entity.Property(e => e.Address3Addressid).HasColumnName("address3_addressid");

                entity.Property(e => e.Address3Addresstypecode).HasColumnName("address3_addresstypecode");

                entity.Property(e => e.Address3City).HasColumnName("address3_city");

                entity.Property(e => e.Address3Composite).HasColumnName("address3_composite");

                entity.Property(e => e.Address3Country).HasColumnName("address3_country");

                entity.Property(e => e.Address3County).HasColumnName("address3_county");

                entity.Property(e => e.Address3Fax).HasColumnName("address3_fax");

                entity.Property(e => e.Address3Freighttermscode).HasColumnName("address3_freighttermscode");

                entity.Property(e => e.Address3Latitude).HasColumnName("address3_latitude");

                entity.Property(e => e.Address3Line1).HasColumnName("address3_line1");

                entity.Property(e => e.Address3Line2).HasColumnName("address3_line2");

                entity.Property(e => e.Address3Line3).HasColumnName("address3_line3");

                entity.Property(e => e.Address3Longitude).HasColumnName("address3_longitude");

                entity.Property(e => e.Address3Name).HasColumnName("address3_name");

                entity.Property(e => e.Address3Postalcode).HasColumnName("address3_postalcode");

                entity.Property(e => e.Address3Postofficebox).HasColumnName("address3_postofficebox");

                entity.Property(e => e.Address3Primarycontactname).HasColumnName("address3_primarycontactname");

                entity.Property(e => e.Address3Shippingmethodcode).HasColumnName("address3_shippingmethodcode");

                entity.Property(e => e.Address3Stateorprovince).HasColumnName("address3_stateorprovince");

                entity.Property(e => e.Address3Telephone1).HasColumnName("address3_telephone1");

                entity.Property(e => e.Address3Telephone2).HasColumnName("address3_telephone2");

                entity.Property(e => e.Address3Telephone3).HasColumnName("address3_telephone3");

                entity.Property(e => e.Address3Upszone).HasColumnName("address3_upszone");

                entity.Property(e => e.Address3Utcoffset).HasColumnName("address3_utcoffset");

                entity.Property(e => e.Aging30)
                    .HasColumnName("aging30")
                    .HasColumnType("money");

                entity.Property(e => e.Aging30Base)
                    .HasColumnName("aging30_base")
                    .HasColumnType("money");

                entity.Property(e => e.Aging60)
                    .HasColumnName("aging60")
                    .HasColumnType("money");

                entity.Property(e => e.Aging60Base)
                    .HasColumnName("aging60_base")
                    .HasColumnType("money");

                entity.Property(e => e.Aging90)
                    .HasColumnName("aging90")
                    .HasColumnType("money");

                entity.Property(e => e.Aging90Base)
                    .HasColumnName("aging90_base")
                    .HasColumnType("money");

                entity.Property(e => e.Anniversary)
                    .HasColumnName("anniversary")
                    .HasColumnType("datetime");

                entity.Property(e => e.Annualincome)
                    .HasColumnName("annualincome")
                    .HasColumnType("money");

                entity.Property(e => e.AnnualincomeBase)
                    .HasColumnName("annualincome_base")
                    .HasColumnType("money");

                entity.Property(e => e.Assistantname).HasColumnName("assistantname");

                entity.Property(e => e.Assistantphone).HasColumnName("assistantphone");

                entity.Property(e => e.Birthdate)
                    .HasColumnName("birthdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Business2).HasColumnName("business2");

                entity.Property(e => e.Businesscard).HasColumnName("businesscard");

                entity.Property(e => e.Businesscardattributes).HasColumnName("businesscardattributes");

                entity.Property(e => e.Callback).HasColumnName("callback");

                entity.Property(e => e.Childrensnames).HasColumnName("childrensnames");

                entity.Property(e => e.Company).HasColumnName("company");

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.CreatedbyexternalpartyValue).HasColumnName("_createdbyexternalparty_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Creditlimit)
                    .HasColumnName("creditlimit")
                    .HasColumnType("money");

                entity.Property(e => e.CreditlimitBase)
                    .HasColumnName("creditlimit_base")
                    .HasColumnType("money");

                entity.Property(e => e.Creditonhold).HasColumnName("creditonhold");

                entity.Property(e => e.Customersizecode).HasColumnName("customersizecode");

                entity.Property(e => e.Customertypecode).HasColumnName("customertypecode");

                entity.Property(e => e.DefaultpricelevelidValue).HasColumnName("_defaultpricelevelid_value");

                entity.Property(e => e.Department).HasColumnName("department");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.Donotbulkemail).HasColumnName("donotbulkemail");

                entity.Property(e => e.Donotbulkpostalmail).HasColumnName("donotbulkpostalmail");

                entity.Property(e => e.Donotemail).HasColumnName("donotemail");

                entity.Property(e => e.Donotfax).HasColumnName("donotfax");

                entity.Property(e => e.Donotphone).HasColumnName("donotphone");

                entity.Property(e => e.Donotpostalmail).HasColumnName("donotpostalmail");

                entity.Property(e => e.Donotsendmm).HasColumnName("donotsendmm");

                entity.Property(e => e.Educationcode).HasColumnName("educationcode");

                entity.Property(e => e.Emailaddress1).HasColumnName("emailaddress1");

                entity.Property(e => e.Emailaddress2).HasColumnName("emailaddress2");

                entity.Property(e => e.Emailaddress3).HasColumnName("emailaddress3");

                entity.Property(e => e.Employeeid).HasColumnName("employeeid");

                entity.Property(e => e.Entityimage).HasColumnName("entityimage");

                entity.Property(e => e.EntityimageTimestamp).HasColumnName("entityimage_timestamp");

                entity.Property(e => e.EntityimageUrl).HasColumnName("entityimage_url");

                entity.Property(e => e.Entityimageid).HasColumnName("entityimageid");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Externaluseridentifier).HasColumnName("externaluseridentifier");

                entity.Property(e => e.Familystatuscode).HasColumnName("familystatuscode");

                entity.Property(e => e.Fax).HasColumnName("fax");

                entity.Property(e => e.Firstname).HasColumnName("firstname");

                entity.Property(e => e.Followemail).HasColumnName("followemail");

                entity.Property(e => e.Ftpsiteurl).HasColumnName("ftpsiteurl");

                entity.Property(e => e.Fullname).HasColumnName("fullname");

                entity.Property(e => e.Gendercode).HasColumnName("gendercode");

                entity.Property(e => e.Governmentid).HasColumnName("governmentid");

                entity.Property(e => e.Haschildrencode).HasColumnName("haschildrencode");

                entity.Property(e => e.Home2).HasColumnName("home2");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.Isbackofficecustomer).HasColumnName("isbackofficecustomer");

                entity.Property(e => e.Jobtitle).HasColumnName("jobtitle");

                entity.Property(e => e.Lastname).HasColumnName("lastname");

                entity.Property(e => e.Lastonholdtime).HasColumnName("lastonholdtime");

                entity.Property(e => e.Lastusedincampaign).HasColumnName("lastusedincampaign");

                entity.Property(e => e.Leadsourcecode).HasColumnName("leadsourcecode");

                entity.Property(e => e.Managername).HasColumnName("managername");

                entity.Property(e => e.Managerphone).HasColumnName("managerphone");

                entity.Property(e => e.Marketingonly).HasColumnName("marketingonly");

                entity.Property(e => e.MasteridValue).HasColumnName("_masterid_value");

                entity.Property(e => e.Merged).HasColumnName("merged");

                entity.Property(e => e.Middlename).HasColumnName("middlename");

                entity.Property(e => e.Mobilephone).HasColumnName("mobilephone");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.ModifiedbyexternalpartyValue).HasColumnName("_modifiedbyexternalparty_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.MsdynGdproptout).HasColumnName("msdyn_gdproptout");

                entity.Property(e => e.MsdynOrgchangestatus).HasColumnName("msdyn_orgchangestatus");

                entity.Property(e => e.Nickname).HasColumnName("nickname");

                entity.Property(e => e.Numberofchildren).HasColumnName("numberofchildren");

                entity.Property(e => e.Onholdtime).HasColumnName("onholdtime");

                entity.Property(e => e.OriginatingleadidValue).HasColumnName("_originatingleadid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.Pager).HasColumnName("pager");

                entity.Property(e => e.ParentcontactidValue).HasColumnName("_parentcontactid_value");

                entity.Property(e => e.ParentcustomeridValue).HasColumnName("_parentcustomerid_value");

                entity.Property(e => e.Participatesinworkflow).HasColumnName("participatesinworkflow");

                entity.Property(e => e.Paymenttermscode).HasColumnName("paymenttermscode");

                entity.Property(e => e.Preferredappointmentdaycode).HasColumnName("preferredappointmentdaycode");

                entity.Property(e => e.Preferredappointmenttimecode).HasColumnName("preferredappointmenttimecode");

                entity.Property(e => e.Preferredcontactmethodcode).HasColumnName("preferredcontactmethodcode");

                entity.Property(e => e.PreferredequipmentidValue).HasColumnName("_preferredequipmentid_value");

                entity.Property(e => e.PreferredserviceidValue).HasColumnName("_preferredserviceid_value");

                entity.Property(e => e.PreferredsystemuseridValue).HasColumnName("_preferredsystemuserid_value");

                entity.Property(e => e.Processid).HasColumnName("processid");

                entity.Property(e => e.PtasAgeattimeofdeath).HasColumnName("ptas_ageattimeofdeath");

                entity.Property(e => e.PtasAlternatecontact).HasColumnName("ptas_alternatecontact");

                entity.Property(e => e.PtasCurrentage).HasColumnName("ptas_currentage");

                entity.Property(e => e.PtasDateofbirthstring).HasColumnName("ptas_dateofbirthstring");

                entity.Property(e => e.PtasDateofdeath)
                    .HasColumnName("ptas_dateofdeath")
                    .HasColumnType("datetime");

                entity.Property(e => e.PtasDeathcertificate).HasColumnName("ptas_deathcertificate");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasObituary).HasColumnName("ptas_obituary");

                entity.Property(e => e.PtasObituarycity).HasColumnName("ptas_obituarycity");

                entity.Property(e => e.PtasObituarysource).HasColumnName("ptas_obituarysource");

                entity.Property(e => e.PtasObituarystate).HasColumnName("ptas_obituarystate");

                entity.Property(e => e.PtasParcelidValue).HasColumnName("_ptas_parcelid_value");

                entity.Property(e => e.PtasSealternatekey).HasColumnName("ptas_sealternatekey");

                entity.Property(e => e.PtasSeniorexemptionscorrespondencere).HasColumnName("ptas_seniorexemptionscorrespondencere");

                entity.Property(e => e.PtasSpousefirstname).HasColumnName("ptas_spousefirstname");

                entity.Property(e => e.PtasSpouselastname).HasColumnName("ptas_spouselastname");

                entity.Property(e => e.PtasSpousemiddlename).HasColumnName("ptas_spousemiddlename");

                entity.Property(e => e.PtasSpousesuffix).HasColumnName("ptas_spousesuffix");

                entity.Property(e => e.PtasSurvivingspouseinforeceivedon).HasColumnName("ptas_survivingspouseinforeceivedon");

                entity.Property(e => e.PtasSurvivingspouseinfosenton).HasColumnName("ptas_survivingspouseinfosenton");

                entity.Property(e => e.PtasTextsmscapable).HasColumnName("ptas_textsmscapable");

                entity.Property(e => e.Salutation).HasColumnName("salutation");

                entity.Property(e => e.Shippingmethodcode).HasColumnName("shippingmethodcode");

                entity.Property(e => e.SlaidValue).HasColumnName("_slaid_value");

                entity.Property(e => e.SlainvokedidValue).HasColumnName("_slainvokedid_value");

                entity.Property(e => e.Spousesname).HasColumnName("spousesname");

                entity.Property(e => e.Stageid).HasColumnName("stageid");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Subscriptionid).HasColumnName("subscriptionid");

                entity.Property(e => e.Suffix).HasColumnName("suffix");

                entity.Property(e => e.Teamsfollowed).HasColumnName("teamsfollowed");

                entity.Property(e => e.Telephone1).HasColumnName("telephone1");

                entity.Property(e => e.Telephone2).HasColumnName("telephone2");

                entity.Property(e => e.Telephone3).HasColumnName("telephone3");

                entity.Property(e => e.Territorycode).HasColumnName("territorycode");

                entity.Property(e => e.Timespentbymeonemailandmeetings).HasColumnName("timespentbymeonemailandmeetings");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Traversedpath).HasColumnName("traversedpath");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.Property(e => e.Websiteurl).HasColumnName("websiteurl");

                entity.Property(e => e.Yomifirstname).HasColumnName("yomifirstname");

                entity.Property(e => e.Yomifullname).HasColumnName("yomifullname");

                entity.Property(e => e.Yomilastname).HasColumnName("yomilastname");

                entity.Property(e => e.Yomimiddlename).HasColumnName("yomimiddlename");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.ContactCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_contact_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.ContactCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_contact_createdonbehalfby");

                entity.HasOne(d => d.MasteridValueNavigation)
                    .WithMany(p => p.InverseMasteridValueNavigation)
                    .HasForeignKey(d => d.MasteridValue)
                    .HasConstraintName("FK_contact_contact_masterid");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.ContactModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_contact_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.ContactModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_contact_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.Contact)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_contact_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.ContactOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_contact_owninguser");

                entity.HasOne(d => d.ParentcustomeridValueNavigation)
                    .WithMany(p => p.InverseParentcustomeridValueNavigation)
                    .HasForeignKey(d => d.ParentcustomeridValue)
                    .HasConstraintName("FK_contact_contact_parentcustomerid");

                entity.HasOne(d => d.PreferredsystemuseridValueNavigation)
                    .WithMany(p => p.ContactPreferredsystemuseridValueNavigation)
                    .HasForeignKey(d => d.PreferredsystemuseridValue)
                    .HasConstraintName("FK_systemuser_contact_preferredsystemuserid");

                entity.HasOne(d => d.PtasParcelidValueNavigation)
                    .WithMany(p => p.Contact)
                    .HasForeignKey(d => d.PtasParcelidValue)
                    .HasConstraintName("FK_ptas_parceldetail_contact_ptas_parcelid");
            });

            modelBuilder.Entity<PtasAbstractdocument>(entity =>
            {
                entity.ToTable("ptas_abstractdocument", "dynamics");

                entity.Property(e => e.PtasAbstractdocumentid)
                    .HasColumnName("ptas_abstractdocumentid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAbstractprojectidValue).HasColumnName("_ptas_abstractprojectid_value");

                entity.Property(e => e.PtasAssigneddate).HasColumnName("ptas_assigneddate");

                entity.Property(e => e.PtasCheckamount)
                    .HasColumnName("ptas_checkamount")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCheckamountBase)
                    .HasColumnName("ptas_checkamount_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasChecknumber).HasColumnName("ptas_checknumber");

                entity.Property(e => e.PtasCheckpayee).HasColumnName("ptas_checkpayee");

                entity.Property(e => e.PtasContactinfo).HasColumnName("ptas_contactinfo");

                entity.Property(e => e.PtasDatemoreinforequested).HasColumnName("ptas_datemoreinforequested");

                entity.Property(e => e.PtasDeliveredrecordersoffice).HasColumnName("ptas_deliveredrecordersoffice");

                entity.Property(e => e.PtasDocneedsrecording).HasColumnName("ptas_docneedsrecording");

                entity.Property(e => e.PtasDocumentformat).HasColumnName("ptas_documentformat");

                entity.Property(e => e.PtasDocumentformatother).HasColumnName("ptas_documentformatother");

                entity.Property(e => e.PtasExcisedocnumber).HasColumnName("ptas_excisedocnumber");

                entity.Property(e => e.PtasLinktodoclandmark).HasColumnName("ptas_linktodoclandmark");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNotes).HasColumnName("ptas_notes");

                entity.Property(e => e.PtasOwnername).HasColumnName("ptas_ownername");

                entity.Property(e => e.PtasParceldetailidValue).HasColumnName("_ptas_parceldetailid_value");

                entity.Property(e => e.PtasPaymenttype).HasColumnName("ptas_paymenttype");

                entity.Property(e => e.PtasReceiveddate).HasColumnName("ptas_receiveddate");

                entity.Property(e => e.PtasReceivedfrom).HasColumnName("ptas_receivedfrom");

                entity.Property(e => e.PtasRecievedrecordersoffice).HasColumnName("ptas_recievedrecordersoffice");

                entity.Property(e => e.PtasRecordingnumber).HasColumnName("ptas_recordingnumber");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAbstractdocumentCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_abstractdocument_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAbstractdocumentCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_abstractdocument_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAbstractdocumentModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_abstractdocument_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAbstractdocumentModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_abstractdocument_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasAbstractdocument)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_abstractdocument_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasAbstractdocumentOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_abstractdocument_owninguser");

                entity.HasOne(d => d.PtasAbstractprojectidValueNavigation)
                    .WithMany(p => p.PtasAbstractdocument)
                    .HasForeignKey(d => d.PtasAbstractprojectidValue)
                    .HasConstraintName("FK_ptas_abstractproject_ptas_abstractdocument_ptas_abstractprojectid");

                entity.HasOne(d => d.PtasParceldetailidValueNavigation)
                    .WithMany(p => p.PtasAbstractdocument)
                    .HasForeignKey(d => d.PtasParceldetailidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_abstractdocument_ptas_parceldetailid");
            });

            modelBuilder.Entity<PtasAbstractproject>(entity =>
            {
                entity.ToTable("ptas_abstractproject", "dynamics");

                entity.Property(e => e.PtasAbstractprojectid)
                    .HasColumnName("ptas_abstractprojectid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasCondoCreateparcelsforexistingunits).HasColumnName("ptas_condo_createparcelsforexistingunits");

                entity.Property(e => e.PtasCondocomplexidValue).HasColumnName("_ptas_condocomplexid_value");

                entity.Property(e => e.PtasCondomajornumberidValue).HasColumnName("_ptas_condomajornumberid_value");

                entity.Property(e => e.PtasCreatenewdevelopmentrights).HasColumnName("ptas_createnewdevelopmentrights");

                entity.Property(e => e.PtasCreateparcelsandtaxaccounts).HasColumnName("ptas_createparcelsandtaxaccounts");

                entity.Property(e => e.PtasCreateresultparcels).HasColumnName("ptas_createresultparcels");

                entity.Property(e => e.PtasIncrementminornumbersby).HasColumnName("ptas_incrementminornumbersby");

                entity.Property(e => e.PtasLegaltrailerValue).HasColumnName("_ptas_legaltrailer_value");

                entity.Property(e => e.PtasMppgDatemappingworkcomplete).HasColumnName("ptas_mppg_datemappingworkcomplete");

                entity.Property(e => e.PtasMppgDatesenttomapping).HasColumnName("ptas_mppg_datesenttomapping");

                entity.Property(e => e.PtasMppgMappingchangedescription).HasColumnName("ptas_mppg_mappingchangedescription");

                entity.Property(e => e.PtasMppgMappingchangemadebyidValue).HasColumnName("_ptas_mppg_mappingchangemadebyid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNpdAreaidValue).HasColumnName("_ptas_npd_areaid_value");

                entity.Property(e => e.PtasNpdBlock).HasColumnName("ptas_npd_block");

                entity.Property(e => e.PtasNpdBuilding).HasColumnName("ptas_npd_building");

                entity.Property(e => e.PtasNpdDrainagedistrictidValue).HasColumnName("_ptas_npd_drainagedistrictid_value");

                entity.Property(e => e.PtasNpdEndrollyearidValue).HasColumnName("_ptas_npd_endrollyearid_value");

                entity.Property(e => e.PtasNpdLevycodeidValue).HasColumnName("_ptas_npd_levycodeid_value");

                entity.Property(e => e.PtasNpdMiscellaneousdescription).HasColumnName("ptas_npd_miscellaneousdescription");

                entity.Property(e => e.PtasNpdNeighborhoodidValue).HasColumnName("_ptas_npd_neighborhoodid_value");

                entity.Property(e => e.PtasNpdPropertytypeidValue).HasColumnName("_ptas_npd_propertytypeid_value");

                entity.Property(e => e.PtasNpdQstridValue).HasColumnName("_ptas_npd_qstrid_value");

                entity.Property(e => e.PtasNpdResponsibilityidValue).HasColumnName("_ptas_npd_responsibilityid_value");

                entity.Property(e => e.PtasNpdStartrollyearidValue).HasColumnName("_ptas_npd_startrollyearid_value");

                entity.Property(e => e.PtasNpdSubareaidValue).HasColumnName("_ptas_npd_subareaid_value");

                entity.Property(e => e.PtasNpdTaxpayername).HasColumnName("ptas_npd_taxpayername");

                entity.Property(e => e.PtasNpdZoningidValue).HasColumnName("_ptas_npd_zoningid_value");

                entity.Property(e => e.PtasNumberofcondostocreate).HasColumnName("ptas_numberofcondostocreate");

                entity.Property(e => e.PtasOtherAretaxlots).HasColumnName("ptas_other_aretaxlots");

                entity.Property(e => e.PtasOtherNumberoflotstocreate).HasColumnName("ptas_other_numberoflotstocreate");

                entity.Property(e => e.PtasOtherNumberoftractstocreate).HasColumnName("ptas_other_numberoftractstocreate");

                entity.Property(e => e.PtasParceldetailidValue).HasColumnName("_ptas_parceldetailid_value");

                entity.Property(e => e.PtasPhasedcondo).HasColumnName("ptas_phasedcondo");

                entity.Property(e => e.PtasPlatNumberoflotstocreate).HasColumnName("ptas_plat_numberoflotstocreate");

                entity.Property(e => e.PtasPlatNumberoftractstocreate).HasColumnName("ptas_plat_numberoftractstocreate");

                entity.Property(e => e.PtasPlatStartinglotnumber).HasColumnName("ptas_plat_startinglotnumber");

                entity.Property(e => e.PtasPlatmajornumberidValue).HasColumnName("_ptas_platmajornumberid_value");

                entity.Property(e => e.PtasPlatname).HasColumnName("ptas_platname");

                entity.Property(e => e.PtasProjecteffectivedate).HasColumnName("ptas_projecteffectivedate");

                entity.Property(e => e.PtasProjectphase).HasColumnName("ptas_projectphase");

                entity.Property(e => e.PtasProjectreason).HasColumnName("ptas_projectreason");

                entity.Property(e => e.PtasProjectrollyearidValue).HasColumnName("_ptas_projectrollyearid_value");

                entity.Property(e => e.PtasProjectstartdate).HasColumnName("ptas_projectstartdate");

                entity.Property(e => e.PtasProjecttype).HasColumnName("ptas_projecttype");

                entity.Property(e => e.PtasResultparcelscreated).HasColumnName("ptas_resultparcelscreated");

                entity.Property(e => e.PtasRpAllocatevalues).HasColumnName("ptas_rp_allocatevalues");

                entity.Property(e => e.PtasRpLandvalueallocationmethod).HasColumnName("ptas_rp_landvalueallocationmethod");

                entity.Property(e => e.PtasShowabstractdocuments).HasColumnName("ptas_showabstractdocuments");

                entity.Property(e => e.PtasSkipminornumbersrangeend).HasColumnName("ptas_skipminornumbersrangeend");

                entity.Property(e => e.PtasSkipminornumbersrangestart).HasColumnName("ptas_skipminornumbersrangestart");

                entity.Property(e => e.PtasSpTotalimprovementvalue)
                    .HasColumnName("ptas_sp_totalimprovementvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSpTotalimprovementvalueBase)
                    .HasColumnName("ptas_sp_totalimprovementvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSpTotallandvalue)
                    .HasColumnName("ptas_sp_totallandvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSpTotallandvalueBase)
                    .HasColumnName("ptas_sp_totallandvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSpTotalsquarefootage).HasColumnName("ptas_sp_totalsquarefootage");

                entity.Property(e => e.PtasSpValuesbeforemustequalafter).HasColumnName("ptas_sp_valuesbeforemustequalafter");

                entity.Property(e => e.PtasSpcCurrentexemptionsmulti).HasColumnName("ptas_spc_currentexemptionsmulti");

                entity.Property(e => e.PtasSpcDifferentlevycodes).HasColumnName("ptas_spc_differentlevycodes");

                entity.Property(e => e.PtasSpcDifferentowners).HasColumnName("ptas_spc_differentowners");

                entity.Property(e => e.PtasSpcDifferenttaxstatus).HasColumnName("ptas_spc_differenttaxstatus");

                entity.Property(e => e.PtasSpcExemptionstobereadded).HasColumnName("ptas_spc_exemptionstobereadded");

                entity.Property(e => e.PtasSpcForcesegregation).HasColumnName("ptas_spc_forcesegregation");

                entity.Property(e => e.PtasSpcForestfireacres).HasColumnName("ptas_spc_forestfireacres");

                entity.Property(e => e.PtasSpcSplitaccounts).HasColumnName("ptas_spc_splitaccounts");

                entity.Property(e => e.PtasSpcUnpaidtaxes).HasColumnName("ptas_spc_unpaidtaxes");

                entity.Property(e => e.PtasStartingcondonumber).HasColumnName("ptas_startingcondonumber");

                entity.Property(e => e.PtasStartingminornumber).HasColumnName("ptas_startingminornumber");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAbstractprojectCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_abstractproject_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAbstractprojectCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_abstractproject_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAbstractprojectModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_abstractproject_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAbstractprojectModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_abstractproject_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasAbstractproject)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_abstractproject_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasAbstractprojectOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_abstractproject_owninguser");

                entity.HasOne(d => d.PtasCondocomplexidValueNavigation)
                    .WithMany(p => p.PtasAbstractproject)
                    .HasForeignKey(d => d.PtasCondocomplexidValue)
                    .HasConstraintName("FK_ptas_condocomplex_ptas_abstractproject_ptas_condocomplexid");

                entity.HasOne(d => d.PtasCondomajornumberidValueNavigation)
                    .WithMany(p => p.PtasAbstractprojectPtasCondomajornumberidValueNavigation)
                    .HasForeignKey(d => d.PtasCondomajornumberidValue)
                    .HasConstraintName("FK_ptas_majornumberindex_ptas_abstractproject_ptas_condomajornumberid");

                entity.HasOne(d => d.PtasLegaltrailerValueNavigation)
                    .WithMany(p => p.PtasAbstractproject)
                    .HasForeignKey(d => d.PtasLegaltrailerValue)
                    .HasConstraintName("FK_ptas_legaldescriptions_ptas_abstractproject_ptas_legaltrailer");

                entity.HasOne(d => d.PtasMppgMappingchangemadebyidValueNavigation)
                    .WithMany(p => p.PtasAbstractprojectPtasMppgMappingchangemadebyidValueNavigation)
                    .HasForeignKey(d => d.PtasMppgMappingchangemadebyidValue)
                    .HasConstraintName("FK_systemuser_ptas_abstractproject_ptas_mppg_mappingchangemadebyid");

                entity.HasOne(d => d.PtasNpdAreaidValueNavigation)
                    .WithMany(p => p.PtasAbstractproject)
                    .HasForeignKey(d => d.PtasNpdAreaidValue)
                    .HasConstraintName("FK_ptas_area_ptas_abstractproject_ptas_npd_areaid");

                entity.HasOne(d => d.PtasNpdDrainagedistrictidValueNavigation)
                    .WithMany(p => p.PtasAbstractproject)
                    .HasForeignKey(d => d.PtasNpdDrainagedistrictidValue)
                    .HasConstraintName("FK_ptas_district_ptas_abstractproject_ptas_npd_drainagedistrictid");

                entity.HasOne(d => d.PtasNpdEndrollyearidValueNavigation)
                    .WithMany(p => p.PtasAbstractprojectPtasNpdEndrollyearidValueNavigation)
                    .HasForeignKey(d => d.PtasNpdEndrollyearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_abstractproject_ptas_npd_endrollyearid");

                entity.HasOne(d => d.PtasNpdLevycodeidValueNavigation)
                    .WithMany(p => p.PtasAbstractproject)
                    .HasForeignKey(d => d.PtasNpdLevycodeidValue)
                    .HasConstraintName("FK_ptas_levycode_ptas_abstractproject_ptas_npd_levycodeid");

                entity.HasOne(d => d.PtasNpdNeighborhoodidValueNavigation)
                    .WithMany(p => p.PtasAbstractproject)
                    .HasForeignKey(d => d.PtasNpdNeighborhoodidValue)
                    .HasConstraintName("FK_ptas_neighborhood_ptas_abstractproject_ptas_npd_neighborhoodid");

                entity.HasOne(d => d.PtasNpdPropertytypeidValueNavigation)
                    .WithMany(p => p.PtasAbstractproject)
                    .HasForeignKey(d => d.PtasNpdPropertytypeidValue)
                    .HasConstraintName("FK_ptas_propertytype_ptas_abstractproject_ptas_npd_propertytypeid");

                entity.HasOne(d => d.PtasNpdQstridValueNavigation)
                    .WithMany(p => p.PtasAbstractproject)
                    .HasForeignKey(d => d.PtasNpdQstridValue)
                    .HasConstraintName("FK_ptas_qstr_ptas_abstractproject_ptas_npd_qstrid");

                entity.HasOne(d => d.PtasNpdResponsibilityidValueNavigation)
                    .WithMany(p => p.PtasAbstractproject)
                    .HasForeignKey(d => d.PtasNpdResponsibilityidValue)
                    .HasConstraintName("FK_ptas_responsibility_ptas_abstractproject_ptas_npd_responsibilityid");

                entity.HasOne(d => d.PtasNpdStartrollyearidValueNavigation)
                    .WithMany(p => p.PtasAbstractprojectPtasNpdStartrollyearidValueNavigation)
                    .HasForeignKey(d => d.PtasNpdStartrollyearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_abstractproject_ptas_npd_startrollyearid");

                entity.HasOne(d => d.PtasNpdSubareaidValueNavigation)
                    .WithMany(p => p.PtasAbstractproject)
                    .HasForeignKey(d => d.PtasNpdSubareaidValue)
                    .HasConstraintName("FK_ptas_subarea_ptas_abstractproject_ptas_npd_subareaid");

                entity.HasOne(d => d.PtasNpdZoningidValueNavigation)
                    .WithMany(p => p.PtasAbstractproject)
                    .HasForeignKey(d => d.PtasNpdZoningidValue)
                    .HasConstraintName("FK_ptas_zoning_ptas_abstractproject_ptas_npd_zoningid");

                entity.HasOne(d => d.PtasParceldetailidValueNavigation)
                    .WithMany(p => p.PtasAbstractproject)
                    .HasForeignKey(d => d.PtasParceldetailidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_abstractproject_ptas_parceldetailid");

                entity.HasOne(d => d.PtasPlatmajornumberidValueNavigation)
                    .WithMany(p => p.PtasAbstractprojectPtasPlatmajornumberidValueNavigation)
                    .HasForeignKey(d => d.PtasPlatmajornumberidValue)
                    .HasConstraintName("FK_ptas_majornumberindex_ptas_abstractproject_ptas_platmajornumberid");

                entity.HasOne(d => d.PtasProjectrollyearidValueNavigation)
                    .WithMany(p => p.PtasAbstractprojectPtasProjectrollyearidValueNavigation)
                    .HasForeignKey(d => d.PtasProjectrollyearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_abstractproject_ptas_projectrollyearid");
            });

            modelBuilder.Entity<PtasAbstractprojectresultparcel>(entity =>
            {
                entity.ToTable("ptas_abstractprojectresultparcel", "dynamics");

                entity.Property(e => e.PtasAbstractprojectresultparcelid)
                    .HasColumnName("ptas_abstractprojectresultparcelid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAbstractprojectidValue).HasColumnName("_ptas_abstractprojectid_value");

                entity.Property(e => e.PtasAeCurrentuse).HasColumnName("ptas_ae_currentuse");

                entity.Property(e => e.PtasAeHistoricbuilding).HasColumnName("ptas_ae_historicbuilding");

                entity.Property(e => e.PtasAeHomeimprovement).HasColumnName("ptas_ae_homeimprovement");

                entity.Property(e => e.PtasAeMultifamily).HasColumnName("ptas_ae_multifamily");

                entity.Property(e => e.PtasAeNonprofit).HasColumnName("ptas_ae_nonprofit");

                entity.Property(e => e.PtasAeSeniorordisability).HasColumnName("ptas_ae_seniorordisability");

                entity.Property(e => e.PtasCondocomplexidValue).HasColumnName("_ptas_condocomplexid_value");

                entity.Property(e => e.PtasDetailsImprovementsvalue)
                    .HasColumnName("ptas_details_improvementsvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDetailsImprovementsvalueBase)
                    .HasColumnName("ptas_details_improvementsvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDetailsLandvalue)
                    .HasColumnName("ptas_details_landvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDetailsLandvalueBase)
                    .HasColumnName("ptas_details_landvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDetailsParcelacres)
                    .HasColumnName("ptas_details_parcelacres")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDetailsParcelsquarefootage).HasColumnName("ptas_details_parcelsquarefootage");

                entity.Property(e => e.PtasInfoAreaidValue).HasColumnName("_ptas_info_areaid_value");

                entity.Property(e => e.PtasInfoBlock).HasColumnName("ptas_info_block");

                entity.Property(e => e.PtasInfoBuilding).HasColumnName("ptas_info_building");

                entity.Property(e => e.PtasInfoLevycodeidValue).HasColumnName("_ptas_info_levycodeid_value");

                entity.Property(e => e.PtasInfoLot).HasColumnName("ptas_info_lot");

                entity.Property(e => e.PtasInfoNeighborhoodidValue).HasColumnName("_ptas_info_neighborhoodid_value");

                entity.Property(e => e.PtasInfoPropertyname).HasColumnName("ptas_info_propertyname");

                entity.Property(e => e.PtasInfoPropertytypeidValue).HasColumnName("_ptas_info_propertytypeid_value");

                entity.Property(e => e.PtasInfoQstridValue).HasColumnName("_ptas_info_qstrid_value");

                entity.Property(e => e.PtasInfoResponsibilityidValue).HasColumnName("_ptas_info_responsibilityid_value");

                entity.Property(e => e.PtasInfoSubareaidValue).HasColumnName("_ptas_info_subareaid_value");

                entity.Property(e => e.PtasInfoUnit).HasColumnName("ptas_info_unit");

                entity.Property(e => e.PtasInfoUnitChar).HasColumnName("ptas_info_unit_char");

                entity.Property(e => e.PtasLandfractionallocation).HasColumnName("ptas_landfractionallocation");

                entity.Property(e => e.PtasLandpercentallocation)
                    .HasColumnName("ptas_landpercentallocation")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLegaldescription).HasColumnName("ptas_legaldescription");

                entity.Property(e => e.PtasMajor).HasColumnName("ptas_major");

                entity.Property(e => e.PtasMinor).HasColumnName("ptas_minor");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasOtherBenefitacres)
                    .HasColumnName("ptas_other_benefitacres")
                    .HasColumnType("money");

                entity.Property(e => e.PtasOtherDrainagedistrictidValue).HasColumnName("_ptas_other_drainagedistrictid_value");

                entity.Property(e => e.PtasOtherForestfireacres)
                    .HasColumnName("ptas_other_forestfireacres")
                    .HasColumnType("money");

                entity.Property(e => e.PtasParcelnumber).HasColumnName("ptas_parcelnumber");

                entity.Property(e => e.PtasParceltype).HasColumnName("ptas_parceltype");

                entity.Property(e => e.PtasPercentundividedinterest)
                    .HasColumnName("ptas_percentundividedinterest")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSitusaddress).HasColumnName("ptas_situsaddress");

                entity.Property(e => e.PtasTaxstatus).HasColumnName("ptas_taxstatus");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAbstractprojectresultparcelCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_abstractprojectresultparcel_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAbstractprojectresultparcelCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_abstractprojectresultparcel_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAbstractprojectresultparcelModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_abstractprojectresultparcel_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAbstractprojectresultparcelModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_abstractprojectresultparcel_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasAbstractprojectresultparcel)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_abstractprojectresultparcel_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasAbstractprojectresultparcelOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_abstractprojectresultparcel_owninguser");

                entity.HasOne(d => d.PtasAbstractprojectidValueNavigation)
                    .WithMany(p => p.PtasAbstractprojectresultparcel)
                    .HasForeignKey(d => d.PtasAbstractprojectidValue)
                    .HasConstraintName("FK_ptas_abstractproject_ptas_abstractprojectresultparcel_ptas_abstractprojectid");

                entity.HasOne(d => d.PtasCondocomplexidValueNavigation)
                    .WithMany(p => p.PtasAbstractprojectresultparcel)
                    .HasForeignKey(d => d.PtasCondocomplexidValue)
                    .HasConstraintName("FK_ptas_condocomplex_ptas_abstractprojectresultparcel_ptas_condocomplexid");

                entity.HasOne(d => d.PtasInfoAreaidValueNavigation)
                    .WithMany(p => p.PtasAbstractprojectresultparcel)
                    .HasForeignKey(d => d.PtasInfoAreaidValue)
                    .HasConstraintName("FK_ptas_area_ptas_abstractprojectresultparcel_ptas_info_areaid");

                entity.HasOne(d => d.PtasInfoLevycodeidValueNavigation)
                    .WithMany(p => p.PtasAbstractprojectresultparcel)
                    .HasForeignKey(d => d.PtasInfoLevycodeidValue)
                    .HasConstraintName("FK_ptas_levycode_ptas_abstractprojectresultparcel_ptas_info_levycodeid");

                entity.HasOne(d => d.PtasInfoNeighborhoodidValueNavigation)
                    .WithMany(p => p.PtasAbstractprojectresultparcel)
                    .HasForeignKey(d => d.PtasInfoNeighborhoodidValue)
                    .HasConstraintName("FK_ptas_neighborhood_ptas_abstractprojectresultparcel_ptas_info_neighborhoodid");

                entity.HasOne(d => d.PtasInfoPropertytypeidValueNavigation)
                    .WithMany(p => p.PtasAbstractprojectresultparcel)
                    .HasForeignKey(d => d.PtasInfoPropertytypeidValue)
                    .HasConstraintName("FK_ptas_propertytype_ptas_abstractprojectresultparcel_ptas_info_propertytypeid");

                entity.HasOne(d => d.PtasInfoQstridValueNavigation)
                    .WithMany(p => p.PtasAbstractprojectresultparcel)
                    .HasForeignKey(d => d.PtasInfoQstridValue)
                    .HasConstraintName("FK_ptas_qstr_ptas_abstractprojectresultparcel_ptas_info_qstrid");

                entity.HasOne(d => d.PtasInfoResponsibilityidValueNavigation)
                    .WithMany(p => p.PtasAbstractprojectresultparcel)
                    .HasForeignKey(d => d.PtasInfoResponsibilityidValue)
                    .HasConstraintName("FK_ptas_responsibility_ptas_abstractprojectresultparcel_ptas_info_responsibilityid");

                entity.HasOne(d => d.PtasInfoSubareaidValueNavigation)
                    .WithMany(p => p.PtasAbstractprojectresultparcel)
                    .HasForeignKey(d => d.PtasInfoSubareaidValue)
                    .HasConstraintName("FK_ptas_subarea_ptas_abstractprojectresultparcel_ptas_info_subareaid");

                entity.HasOne(d => d.PtasOtherDrainagedistrictidValueNavigation)
                    .WithMany(p => p.PtasAbstractprojectresultparcel)
                    .HasForeignKey(d => d.PtasOtherDrainagedistrictidValue)
                    .HasConstraintName("FK_ptas_district_ptas_abstractprojectresultparcel_ptas_other_drainagedistrictid");
            });

            modelBuilder.Entity<PtasAbstractprojectsourceparcel>(entity =>
            {
                entity.ToTable("ptas_abstractprojectsourceparcel", "dynamics");

                entity.Property(e => e.PtasAbstractprojectsourceparcelid)
                    .HasColumnName("ptas_abstractprojectsourceparcelid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAbstractprojectidValue).HasColumnName("_ptas_abstractprojectid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasParcelidValue).HasColumnName("_ptas_parcelid_value");

                entity.Property(e => e.PtasParcelwillberetained).HasColumnName("ptas_parcelwillberetained");

                entity.Property(e => e.PtasSuppresstaxbillcorrection).HasColumnName("ptas_suppresstaxbillcorrection");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAbstractprojectsourceparcelCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_abstractprojectsourceparcel_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAbstractprojectsourceparcelCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_abstractprojectsourceparcel_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAbstractprojectsourceparcelModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_abstractprojectsourceparcel_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAbstractprojectsourceparcelModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_abstractprojectsourceparcel_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasAbstractprojectsourceparcel)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_abstractprojectsourceparcel_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasAbstractprojectsourceparcelOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_abstractprojectsourceparcel_owninguser");

                entity.HasOne(d => d.PtasAbstractprojectidValueNavigation)
                    .WithMany(p => p.PtasAbstractprojectsourceparcel)
                    .HasForeignKey(d => d.PtasAbstractprojectidValue)
                    .HasConstraintName("FK_ptas_abstractproject_ptas_abstractprojectsourceparcel_ptas_abstractprojectid");

                entity.HasOne(d => d.PtasParcelidValueNavigation)
                    .WithMany(p => p.PtasAbstractprojectsourceparcel)
                    .HasForeignKey(d => d.PtasParcelidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_abstractprojectsourceparcel_ptas_parcelid");
            });

            modelBuilder.Entity<PtasAccessorydetail>(entity =>
            {
                entity.ToTable("ptas_accessorydetail", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_accessorydetail_modifiedon");

                entity.HasIndex(e => new { e.PtasParceldetailidValue, e.Statecode })
                    .HasName("idx_StateCodeParceldetailid_value");

                entity.Property(e => e.PtasAccessorydetailid)
                    .HasColumnName("ptas_accessorydetailid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAccessoryvalue)
                    .HasColumnName("ptas_accessoryvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAccessoryvalueBase)
                    .HasColumnName("ptas_accessoryvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAddr1CompositeaddressOneline).HasColumnName("ptas_addr1_compositeaddress_oneline");

                entity.Property(e => e.PtasAlternatekey).HasColumnName("ptas_alternatekey");

                entity.Property(e => e.PtasBuildingdetailidValue).HasColumnName("_ptas_buildingdetailid_value");

                entity.Property(e => e.PtasBuildinggrade).HasColumnName("ptas_buildinggrade");

                entity.Property(e => e.PtasBuildingquality).HasColumnName("ptas_buildingquality");

                entity.Property(e => e.PtasCommaccessorytype).HasColumnName("ptas_commaccessorytype");

                entity.Property(e => e.PtasConditionlevel).HasColumnName("ptas_conditionlevel");

                entity.Property(e => e.PtasDatevalued).HasColumnName("ptas_datevalued");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasDirectnavigation).HasColumnName("ptas_directnavigation");

                entity.Property(e => e.PtasEffectiveyear).HasColumnName("ptas_effectiveyear");

                entity.Property(e => e.PtasFullsitusaddress).HasColumnName("ptas_fullsitusaddress");

                entity.Property(e => e.PtasGaragearea).HasColumnName("ptas_garagearea");

                entity.Property(e => e.PtasHistguid).HasColumnName("ptas_histguid");

                entity.Property(e => e.PtasHistyear).HasColumnName("ptas_histyear");

                entity.Property(e => e.PtasInteriorfinish).HasColumnName("ptas_interiorfinish");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasLoft).HasColumnName("ptas_loft");

                entity.Property(e => e.PtasMasteraccessoryidValue).HasColumnName("_ptas_masteraccessoryid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNetconditionvalue)
                    .HasColumnName("ptas_netconditionvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasNetconditionvalueBase)
                    .HasColumnName("ptas_netconditionvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasParceldetailidValue).HasColumnName("_ptas_parceldetailid_value");

                entity.Property(e => e.PtasParcelheadername).HasColumnName("ptas_parcelheadername");

                entity.Property(e => e.PtasParcelheadertext).HasColumnName("ptas_parcelheadertext");

                entity.Property(e => e.PtasParcelheadertext2).HasColumnName("ptas_parcelheadertext2");

                entity.Property(e => e.PtasPercentnetcondition).HasColumnName("ptas_percentnetcondition");

                entity.Property(e => e.PtasProjectidValue).HasColumnName("_ptas_projectid_value");

                entity.Property(e => e.PtasPropertytypeidValue).HasColumnName("_ptas_propertytypeid_value");

                entity.Property(e => e.PtasQuality).HasColumnName("ptas_quality");

                entity.Property(e => e.PtasQualitylevel).HasColumnName("ptas_qualitylevel");

                entity.Property(e => e.PtasQuantity).HasColumnName("ptas_quantity");

                entity.Property(e => e.PtasResaccessorytype).HasColumnName("ptas_resaccessorytype");

                entity.Property(e => e.PtasShowrecordchanges).HasColumnName("ptas_showrecordchanges");

                entity.Property(e => e.PtasSitusaddress).HasColumnName("ptas_situsaddress");

                entity.Property(e => e.PtasSize).HasColumnName("ptas_size");

                entity.Property(e => e.PtasSketchidValue).HasColumnName("_ptas_sketchid_value");

                entity.Property(e => e.PtasSnapshotdatetime).HasColumnName("ptas_snapshotdatetime");

                entity.Property(e => e.PtasSnapshottype).HasColumnName("ptas_snapshottype");

                entity.Property(e => e.PtasUnitofmeasure).HasColumnName("ptas_unitofmeasure");

                entity.Property(e => e.PtasWalltype).HasColumnName("ptas_walltype");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAccessorydetailCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_accessorydetail_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAccessorydetailCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_accessorydetail_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAccessorydetailModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_accessorydetail_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAccessorydetailModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_accessorydetail_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasAccessorydetail)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_accessorydetail_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasAccessorydetailOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_accessorydetail_owninguser");

                entity.HasOne(d => d.PtasBuildingdetailidValueNavigation)
                    .WithMany(p => p.PtasAccessorydetail)
                    .HasForeignKey(d => d.PtasBuildingdetailidValue)
                    .HasConstraintName("FK_ptas_buildingdetail_ptas_accessorydetail_ptas_buildingdetailid");

                entity.HasOne(d => d.PtasMasteraccessoryidValueNavigation)
                    .WithMany(p => p.InversePtasMasteraccessoryidValueNavigation)
                    .HasForeignKey(d => d.PtasMasteraccessoryidValue)
                    .HasConstraintName("FK_ptas_accessorydetail_ptas_accessorydetail_ptas_masteraccessoryid");

                entity.HasOne(d => d.PtasParceldetailidValueNavigation)
                    .WithMany(p => p.PtasAccessorydetail)
                    .HasForeignKey(d => d.PtasParceldetailidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_accessorydetail_ptas_parceldetailid");

                entity.HasOne(d => d.PtasProjectidValueNavigation)
                    .WithMany(p => p.PtasAccessorydetail)
                    .HasForeignKey(d => d.PtasProjectidValue)
                    .HasConstraintName("FK_ptas_condocomplex_ptas_accessorydetail_ptas_projectid");

                entity.HasOne(d => d.PtasPropertytypeidValueNavigation)
                    .WithMany(p => p.PtasAccessorydetail)
                    .HasForeignKey(d => d.PtasPropertytypeidValue)
                    .HasConstraintName("FK_ptas_propertytype_ptas_accessorydetail_ptas_propertytypeid");

                entity.HasOne(d => d.PtasSketchidValueNavigation)
                    .WithMany(p => p.PtasAccessorydetail)
                    .HasForeignKey(d => d.PtasSketchidValue)
                    .HasConstraintName("FK_ptas_sketch_ptas_accessorydetail_ptas_sketchid");
            });

            modelBuilder.Entity<PtasAccessorydetailPtasMediarepository>(entity =>
            {
                entity.ToTable("ptas_accessorydetail_ptas_mediarepository", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_accessorydetail_ptas_mediarepository_modifiedon");

                entity.Property(e => e.PtasAccessorydetailPtasMediarepositoryid)
                    .HasColumnName("ptas_accessorydetail_ptas_mediarepositoryid")
                    .ValueGeneratedNever();

                entity.Property(e => e.Modifiedon)
                    .HasColumnName("modifiedon")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.PtasAccessorydetailid).HasColumnName("ptas_accessorydetailid");

                entity.Property(e => e.PtasMediarepositoryid).HasColumnName("ptas_mediarepositoryid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasAccessorydetailSnapshot>(entity =>
            {
                entity.HasKey(e => e.PtasAccessorydetailid);

                entity.ToTable("ptas_accessorydetail_snapshot", "dynamics");

                entity.Property(e => e.PtasAccessorydetailid)
                    .HasColumnName("ptas_accessorydetailid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAccessoryvalue)
                    .HasColumnName("ptas_accessoryvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAccessoryvalueBase)
                    .HasColumnName("ptas_accessoryvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAddr1CompositeaddressOneline).HasColumnName("ptas_addr1_compositeaddress_oneline");

                entity.Property(e => e.PtasAlternatekey).HasColumnName("ptas_alternatekey");

                entity.Property(e => e.PtasBuildingdetailidValue).HasColumnName("_ptas_buildingdetailid_value");

                entity.Property(e => e.PtasBuildinggrade).HasColumnName("ptas_buildinggrade");

                entity.Property(e => e.PtasBuildingquality).HasColumnName("ptas_buildingquality");

                entity.Property(e => e.PtasCommaccessorytype).HasColumnName("ptas_commaccessorytype");

                entity.Property(e => e.PtasConditionlevel).HasColumnName("ptas_conditionlevel");

                entity.Property(e => e.PtasDatevalued).HasColumnName("ptas_datevalued");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasDirectnavigation).HasColumnName("ptas_directnavigation");

                entity.Property(e => e.PtasEffectiveyear).HasColumnName("ptas_effectiveyear");

                entity.Property(e => e.PtasFullsitusaddress).HasColumnName("ptas_fullsitusaddress");

                entity.Property(e => e.PtasGaragearea).HasColumnName("ptas_garagearea");

                entity.Property(e => e.PtasHistguid).HasColumnName("ptas_histguid");

                entity.Property(e => e.PtasHistyear).HasColumnName("ptas_histyear");

                entity.Property(e => e.PtasInteriorfinish).HasColumnName("ptas_interiorfinish");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasLoft).HasColumnName("ptas_loft");

                entity.Property(e => e.PtasMasteraccessoryidValue).HasColumnName("_ptas_masteraccessoryid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNetconditionvalue)
                    .HasColumnName("ptas_netconditionvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasNetconditionvalueBase)
                    .HasColumnName("ptas_netconditionvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasParceldetailidValue).HasColumnName("_ptas_parceldetailid_value");

                entity.Property(e => e.PtasParcelheadername).HasColumnName("ptas_parcelheadername");

                entity.Property(e => e.PtasParcelheadertext).HasColumnName("ptas_parcelheadertext");

                entity.Property(e => e.PtasParcelheadertext2).HasColumnName("ptas_parcelheadertext2");

                entity.Property(e => e.PtasPercentnetcondition).HasColumnName("ptas_percentnetcondition");

                entity.Property(e => e.PtasProjectidValue).HasColumnName("_ptas_projectid_value");

                entity.Property(e => e.PtasPropertytypeidValue).HasColumnName("_ptas_propertytypeid_value");

                entity.Property(e => e.PtasQuality).HasColumnName("ptas_quality");

                entity.Property(e => e.PtasQualitylevel).HasColumnName("ptas_qualitylevel");

                entity.Property(e => e.PtasQuantity).HasColumnName("ptas_quantity");

                entity.Property(e => e.PtasResaccessorytype).HasColumnName("ptas_resaccessorytype");

                entity.Property(e => e.PtasShowrecordchanges).HasColumnName("ptas_showrecordchanges");

                entity.Property(e => e.PtasSitusaddress).HasColumnName("ptas_situsaddress");

                entity.Property(e => e.PtasSize).HasColumnName("ptas_size");

                entity.Property(e => e.PtasSketchidValue).HasColumnName("_ptas_sketchid_value");

                entity.Property(e => e.PtasSnapshotdatetime).HasColumnName("ptas_snapshotdatetime");

                entity.Property(e => e.PtasSnapshottype).HasColumnName("ptas_snapshottype");

                entity.Property(e => e.PtasUnitofmeasure).HasColumnName("ptas_unitofmeasure");

                entity.Property(e => e.PtasWalltype).HasColumnName("ptas_walltype");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasAddresschangehistory>(entity =>
            {
                entity.ToTable("ptas_addresschangehistory", "dynamics");

                entity.Property(e => e.PtasAddresschangehistoryid)
                    .HasColumnName("ptas_addresschangehistoryid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAddresstype).HasColumnName("ptas_addresstype");

                entity.Property(e => e.PtasDate).HasColumnName("ptas_date");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNewaddress).HasColumnName("ptas_newaddress");

                entity.Property(e => e.PtasOldaddress).HasColumnName("ptas_oldaddress");

                entity.Property(e => e.PtasParcelidValue).HasColumnName("_ptas_parcelid_value");

                entity.Property(e => e.PtasReason).HasColumnName("ptas_reason");

                entity.Property(e => e.PtasTaxaccountidValue).HasColumnName("_ptas_taxaccountid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAddresschangehistoryCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_addresschangehistory_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAddresschangehistoryCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_addresschangehistory_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAddresschangehistoryModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_addresschangehistory_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAddresschangehistoryModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_addresschangehistory_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasAddresschangehistory)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_addresschangehistory_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasAddresschangehistoryOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_addresschangehistory_owninguser");

                entity.HasOne(d => d.PtasParcelidValueNavigation)
                    .WithMany(p => p.PtasAddresschangehistory)
                    .HasForeignKey(d => d.PtasParcelidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_addresschangehistory_ptas_parcelid");

                entity.HasOne(d => d.PtasTaxaccountidValueNavigation)
                    .WithMany(p => p.PtasAddresschangehistory)
                    .HasForeignKey(d => d.PtasTaxaccountidValue)
                    .HasConstraintName("FK_ptas_taxaccount_ptas_addresschangehistory_ptas_taxaccountid");
            });

            modelBuilder.Entity<PtasAgriculturalusetype>(entity =>
            {
                entity.ToTable("ptas_agriculturalusetype", "dynamics");

                entity.Property(e => e.PtasAgriculturalusetypeid)
                    .HasColumnName("ptas_agriculturalusetypeid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasAgriculturalincomelevel).HasColumnName("ptas_agriculturalincomelevel");

                entity.Property(e => e.PtasAgriculturalusecode).HasColumnName("ptas_agriculturalusecode");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasTaxyearValue).HasColumnName("_ptas_taxyear_value");

                entity.Property(e => e.PtasYearlyrent)
                    .HasColumnName("ptas_yearlyrent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasYearlyrentBase)
                    .HasColumnName("ptas_yearlyrent_base")
                    .HasColumnType("money");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAgriculturalusetypeCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_agriculturalusetype_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAgriculturalusetypeCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_agriculturalusetype_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAgriculturalusetypeModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_agriculturalusetype_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAgriculturalusetypeModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_agriculturalusetype_modifiedonbehalfby");

                entity.HasOne(d => d.PtasTaxyearValueNavigation)
                    .WithMany(p => p.PtasAgriculturalusetype)
                    .HasForeignKey(d => d.PtasTaxyearValue)
                    .HasConstraintName("FK_ptas_year_ptas_agriculturalusetype_ptas_taxyear");
            });

            modelBuilder.Entity<PtasAlternateaddress>(entity =>
            {
                entity.ToTable("ptas_alternateaddress", "dynamics");

                entity.Property(e => e.PtasAlternateaddressid)
                    .HasColumnName("ptas_alternateaddressid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAddr1CityidValue).HasColumnName("_ptas_addr1_cityid_value");

                entity.Property(e => e.PtasAddr1Compositeaddress).HasColumnName("ptas_addr1_compositeaddress");

                entity.Property(e => e.PtasAddr1CountryidValue).HasColumnName("_ptas_addr1_countryid_value");

                entity.Property(e => e.PtasAddr1Directionprefix).HasColumnName("ptas_addr1_directionprefix");

                entity.Property(e => e.PtasAddr1Directionsuffix).HasColumnName("ptas_addr1_directionsuffix");

                entity.Property(e => e.PtasAddr1Line2).HasColumnName("ptas_addr1_line2");

                entity.Property(e => e.PtasAddr1StateidValue).HasColumnName("_ptas_addr1_stateid_value");

                entity.Property(e => e.PtasAddr1StreetnameidValue).HasColumnName("_ptas_addr1_streetnameid_value");

                entity.Property(e => e.PtasAddr1Streetnumber).HasColumnName("ptas_addr1_streetnumber");

                entity.Property(e => e.PtasAddr1Streetnumberfraction).HasColumnName("ptas_addr1_streetnumberfraction");

                entity.Property(e => e.PtasAddr1StreettypeidValue).HasColumnName("_ptas_addr1_streettypeid_value");

                entity.Property(e => e.PtasAddr1ZipcodeidValue).HasColumnName("_ptas_addr1_zipcodeid_value");

                entity.Property(e => e.PtasAddressfor).HasColumnName("ptas_addressfor");

                entity.Property(e => e.PtasBuildingidValue).HasColumnName("_ptas_buildingid_value");

                entity.Property(e => e.PtasComplexidValue).HasColumnName("_ptas_complexid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasParceldetailidValue).HasColumnName("_ptas_parceldetailid_value");

                entity.Property(e => e.PtasTaxaccountidValue).HasColumnName("_ptas_taxaccountid_value");

                entity.Property(e => e.PtasUnitidValue).HasColumnName("_ptas_unitid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasAnnexationparcelreview>(entity =>
            {
                entity.ToTable("ptas_annexationparcelreview", "dynamics");

                entity.Property(e => e.PtasAnnexationparcelreviewid)
                    .HasColumnName("ptas_annexationparcelreviewid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAnnexationtrackeridValue).HasColumnName("_ptas_annexationtrackerid_value");

                entity.Property(e => e.PtasAssessedimprovements)
                    .HasColumnName("ptas_assessedimprovements")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAssessedimprovementsBase)
                    .HasColumnName("ptas_assessedimprovements_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAssessedland)
                    .HasColumnName("ptas_assessedland")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAssessedlandBase)
                    .HasColumnName("ptas_assessedland_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLevycodeidValue).HasColumnName("_ptas_levycodeid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasParcelValue).HasColumnName("_ptas_parcel_value");

                entity.Property(e => e.PtasPropertyowner).HasColumnName("ptas_propertyowner");

                entity.Property(e => e.PtasSignedpetition).HasColumnName("ptas_signedpetition");

                entity.Property(e => e.PtasTaxrollyearforavValue).HasColumnName("_ptas_taxrollyearforav_value");

                entity.Property(e => e.PtasTotalassessedvalue)
                    .HasColumnName("ptas_totalassessedvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalassessedvalueBase)
                    .HasColumnName("ptas_totalassessedvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasVerifiedpropertyowner).HasColumnName("ptas_verifiedpropertyowner");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAnnexationparcelreviewCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_annexationparcelreview_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAnnexationparcelreviewCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_annexationparcelreview_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAnnexationparcelreviewModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_annexationparcelreview_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAnnexationparcelreviewModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_annexationparcelreview_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasAnnexationparcelreview)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_annexationparcelreview_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasAnnexationparcelreviewOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_annexationparcelreview_owninguser");

                entity.HasOne(d => d.PtasAnnexationtrackeridValueNavigation)
                    .WithMany(p => p.PtasAnnexationparcelreview)
                    .HasForeignKey(d => d.PtasAnnexationtrackeridValue)
                    .HasConstraintName("FK_ptas_annexationtracker_ptas_annexationparcelreview_ptas_annexationtrackerid");

                entity.HasOne(d => d.PtasLevycodeidValueNavigation)
                    .WithMany(p => p.PtasAnnexationparcelreview)
                    .HasForeignKey(d => d.PtasLevycodeidValue)
                    .HasConstraintName("FK_ptas_levycode_ptas_annexationparcelreview_ptas_levycodeid");

                entity.HasOne(d => d.PtasParcelValueNavigation)
                    .WithMany(p => p.PtasAnnexationparcelreview)
                    .HasForeignKey(d => d.PtasParcelValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_annexationparcelreview_ptas_parcel");

                entity.HasOne(d => d.PtasTaxrollyearforavValueNavigation)
                    .WithMany(p => p.PtasAnnexationparcelreview)
                    .HasForeignKey(d => d.PtasTaxrollyearforavValue)
                    .HasConstraintName("FK_ptas_year_ptas_annexationparcelreview_ptas_taxrollyearforav");
            });

            modelBuilder.Entity<PtasAnnexationtracker>(entity =>
            {
                entity.ToTable("ptas_annexationtracker", "dynamics");

                entity.Property(e => e.PtasAnnexationtrackerid)
                    .HasColumnName("ptas_annexationtrackerid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAnnexationname).HasColumnName("ptas_annexationname");

                entity.Property(e => e.PtasAnnexationtype).HasColumnName("ptas_annexationtype");

                entity.Property(e => e.PtasBoundaryreviewboardnumber).HasColumnName("ptas_boundaryreviewboardnumber");

                entity.Property(e => e.PtasBrbnoticeofintentdate).HasColumnName("ptas_brbnoticeofintentdate");

                entity.Property(e => e.PtasBrbnoticveofintentdate).HasColumnName("ptas_brbnoticveofintentdate");

                entity.Property(e => e.PtasChangelevycodes).HasColumnName("ptas_changelevycodes");

                entity.Property(e => e.PtasCompletedlcreview).HasColumnName("ptas_completedlcreview");

                entity.Property(e => e.PtasCompletedreceivedfromgis).HasColumnName("ptas_completedreceivedfromgis");

                entity.Property(e => e.PtasCompletedsubmittogis).HasColumnName("ptas_completedsubmittogis");

                entity.Property(e => e.PtasCreatelimit).HasColumnName("ptas_createlimit");

                entity.Property(e => e.PtasCreatenewlevycodes).HasColumnName("ptas_createnewlevycodes");

                entity.Property(e => e.PtasDoafirstreceived).HasColumnName("ptas_doafirstreceived");

                entity.Property(e => e.PtasDoaprocessed).HasColumnName("ptas_doaprocessed");

                entity.Property(e => e.PtasDraftreceivedfromgis).HasColumnName("ptas_draftreceivedfromgis");

                entity.Property(e => e.PtasDraftsubmittogis).HasColumnName("ptas_draftsubmittogis");

                entity.Property(e => e.PtasEffectivedate).HasColumnName("ptas_effectivedate");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNumberofparcels).HasColumnName("ptas_numberofparcels");

                entity.Property(e => e.PtasNumberofparcelsverified).HasColumnName("ptas_numberofparcelsverified");

                entity.Property(e => e.PtasResolutionordinance).HasColumnName("ptas_resolutionordinance");

                entity.Property(e => e.PtasSenttodor).HasColumnName("ptas_senttodor");

                entity.Property(e => e.PtasSenttopersonalproperty).HasColumnName("ptas_senttopersonalproperty");

                entity.Property(e => e.PtasSenttorecordersoffice).HasColumnName("ptas_senttorecordersoffice");

                entity.Property(e => e.PtasSenttotreasury).HasColumnName("ptas_senttotreasury");

                entity.Property(e => e.PtasSignedandverifiedav)
                    .HasColumnName("ptas_signedandverifiedav")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSignedandverifiedavBase)
                    .HasColumnName("ptas_signedandverifiedav_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSignedandverifiedpercentage)
                    .HasColumnName("ptas_signedandverifiedpercentage")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTaxingdistrictidValue).HasColumnName("_ptas_taxingdistrictid_value");

                entity.Property(e => e.PtasTaxrollyeareffectiveidValue).HasColumnName("_ptas_taxrollyeareffectiveid_value");

                entity.Property(e => e.PtasTotalassessedvalue)
                    .HasColumnName("ptas_totalassessedvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalassessedvalueBase)
                    .HasColumnName("ptas_totalassessedvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAnnexationtrackerCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_annexationtracker_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAnnexationtrackerCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_annexationtracker_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAnnexationtrackerModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_annexationtracker_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAnnexationtrackerModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_annexationtracker_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasAnnexationtracker)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_annexationtracker_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasAnnexationtrackerOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_annexationtracker_owninguser");

                entity.HasOne(d => d.PtasTaxingdistrictidValueNavigation)
                    .WithMany(p => p.PtasAnnexationtracker)
                    .HasForeignKey(d => d.PtasTaxingdistrictidValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_annexationtracker_ptas_taxingdistrictid");

                entity.HasOne(d => d.PtasTaxrollyeareffectiveidValueNavigation)
                    .WithMany(p => p.PtasAnnexationtracker)
                    .HasForeignKey(d => d.PtasTaxrollyeareffectiveidValue)
                    .HasConstraintName("FK_ptas_year_ptas_annexationtracker_ptas_taxrollyeareffectiveid");
            });

            modelBuilder.Entity<PtasAnnualcostdistribution>(entity =>
            {
                entity.ToTable("ptas_annualcostdistribution", "dynamics");

                entity.Property(e => e.PtasAnnualcostdistributionid)
                    .HasColumnName("ptas_annualcostdistributionid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.Ptas10yeartreasuryrate)
                    .HasColumnName("ptas_10yeartreasuryrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAnnualcost)
                    .HasColumnName("ptas_annualcost")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAnnualcostBase)
                    .HasColumnName("ptas_annualcost_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasContaminatedprojectValue).HasColumnName("_ptas_contaminatedproject_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasPresentcost)
                    .HasColumnName("ptas_presentcost")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPresentcostBase)
                    .HasColumnName("ptas_presentcost_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPresentvaluefactor)
                    .HasColumnName("ptas_presentvaluefactor")
                    .HasColumnType("money");

                entity.Property(e => e.PtasYear).HasColumnName("ptas_year");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAnnualcostdistributionCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_annualcostdistribution_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAnnualcostdistributionCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_annualcostdistribution_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAnnualcostdistributionModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_annualcostdistribution_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAnnualcostdistributionModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_annualcostdistribution_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasAnnualcostdistribution)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_annualcostdistribution_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasAnnualcostdistributionOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_annualcostdistribution_owninguser");

                entity.HasOne(d => d.PtasContaminatedprojectValueNavigation)
                    .WithMany(p => p.PtasAnnualcostdistribution)
                    .HasForeignKey(d => d.PtasContaminatedprojectValue)
                    .HasConstraintName("FK_ptas_contaminationproject_ptas_annualcostdistribution_ptas_contaminatedproject");
            });

            modelBuilder.Entity<PtasApartmentregion>(entity =>
            {
                entity.ToTable("ptas_apartmentregion", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_apartmentregion_modifiedon");

                entity.Property(e => e.PtasApartmentregionid)
                    .HasColumnName("ptas_apartmentregionid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasApartmentregionCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_apartmentregion_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasApartmentregionCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_apartmentregion_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasApartmentregionModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_apartmentregion_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasApartmentregionModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_apartmentregion_modifiedonbehalfby");
            });

            modelBuilder.Entity<PtasApartmentsupergroup>(entity =>
            {
                entity.ToTable("ptas_apartmentsupergroup", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_apartmentsupergroup_modifiedon");

                entity.Property(e => e.PtasApartmentsupergroupid)
                    .HasColumnName("ptas_apartmentsupergroupid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasApartmentregionidValue).HasColumnName("_ptas_apartmentregionid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasApartmentsupergroupCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_apartmentsupergroup_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasApartmentsupergroupCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_apartmentsupergroup_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasApartmentsupergroupModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_apartmentsupergroup_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasApartmentsupergroupModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_apartmentsupergroup_modifiedonbehalfby");

                entity.HasOne(d => d.PtasApartmentregionidValueNavigation)
                    .WithMany(p => p.PtasApartmentsupergroup)
                    .HasForeignKey(d => d.PtasApartmentregionidValue)
                    .HasConstraintName("FK_ptas_apartmentregion_ptas_apartmentsupergroup_ptas_apartmentregionid");
            });

            modelBuilder.Entity<PtasAppeal>(entity =>
            {
                entity.ToTable("ptas_appeal", "dynamics");

                entity.Property(e => e.PtasAppealid)
                    .HasColumnName("ptas_appealid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAppealCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_appeal_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAppealCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_appeal_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAppealModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_appeal_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAppealModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_appeal_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasAppeal)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_appeal_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasAppealOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_appeal_owninguser");
            });

            modelBuilder.Entity<PtasAppealaccess>(entity =>
            {
                entity.ToTable("ptas_appealaccess", "dynamics");

                entity.Property(e => e.PtasAppealaccessid)
                    .HasColumnName("ptas_appealaccessid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAccesslevel).HasColumnName("ptas_accesslevel");

                entity.Property(e => e.PtasAppealidValue).HasColumnName("_ptas_appealid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasPortalcontactidValue).HasColumnName("_ptas_portalcontactid_value");

                entity.Property(e => e.PtasPrimaryfiler).HasColumnName("ptas_primaryfiler");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasAptadjustedlevyrate>(entity =>
            {
                entity.ToTable("ptas_aptadjustedlevyrate", "dynamics");

                entity.Property(e => e.PtasAptadjustedlevyrateid)
                    .HasColumnName("ptas_aptadjustedlevyrateid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAdjustedlevyrate)
                    .HasColumnName("ptas_adjustedlevyrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAssessmentyear).HasColumnName("ptas_assessmentyear");

                entity.Property(e => e.PtasAssessmentyearlookupidValue).HasColumnName("_ptas_assessmentyearlookupid_value");

                entity.Property(e => e.PtasLevycodeidValue).HasColumnName("_ptas_levycodeid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAptadjustedlevyrateCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptadjustedlevyrate_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptadjustedlevyrateCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptadjustedlevyrate_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAptadjustedlevyrateModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptadjustedlevyrate_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptadjustedlevyrateModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptadjustedlevyrate_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasAptadjustedlevyrate)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_aptadjustedlevyrate_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasAptadjustedlevyrateOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_aptadjustedlevyrate_owninguser");

                entity.HasOne(d => d.PtasAssessmentyearlookupidValueNavigation)
                    .WithMany(p => p.PtasAptadjustedlevyrate)
                    .HasForeignKey(d => d.PtasAssessmentyearlookupidValue)
                    .HasConstraintName("FK_ptas_year_ptas_aptadjustedlevyrate_ptas_assessmentyearlookupid");

                entity.HasOne(d => d.PtasLevycodeidValueNavigation)
                    .WithMany(p => p.PtasAptadjustedlevyrate)
                    .HasForeignKey(d => d.PtasLevycodeidValue)
                    .HasConstraintName("FK_ptas_levycode_ptas_aptadjustedlevyrate_ptas_levycodeid");
            });

            modelBuilder.Entity<PtasAptavailablecomparablesale>(entity =>
            {
                entity.ToTable("ptas_aptavailablecomparablesale", "dynamics");

                entity.Property(e => e.PtasAptavailablecomparablesaleid)
                    .HasColumnName("ptas_aptavailablecomparablesaleid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAirportnoiseadjustment)
                    .HasColumnName("ptas_airportnoiseadjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasApartmentneighborhoodidValue).HasColumnName("_ptas_apartmentneighborhoodid_value");

                entity.Property(e => e.PtasAssessmentyear).HasColumnName("ptas_assessmentyear");

                entity.Property(e => e.PtasAverageunitsize).HasColumnName("ptas_averageunitsize");

                entity.Property(e => e.PtasBuildingquality).HasColumnName("ptas_buildingquality");

                entity.Property(e => e.PtasCaprate)
                    .HasColumnName("ptas_caprate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCondition).HasColumnName("ptas_condition");

                entity.Property(e => e.PtasElevators).HasColumnName("ptas_elevators");

                entity.Property(e => e.PtasExcisetaxnumber).HasColumnName("ptas_excisetaxnumber");

                entity.Property(e => e.PtasGim)
                    .HasColumnName("ptas_gim")
                    .HasColumnType("money");

                entity.Property(e => e.PtasGrosssqft).HasColumnName("ptas_grosssqft");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNetsqft).HasColumnName("ptas_netsqft");

                entity.Property(e => e.PtasNumberofunits).HasColumnName("ptas_numberofunits");

                entity.Property(e => e.PtasParcelidValue).HasColumnName("_ptas_parcelid_value");

                entity.Property(e => e.PtasPercentcommercial).HasColumnName("ptas_percentcommercial");

                entity.Property(e => e.PtasPercentwithview).HasColumnName("ptas_percentwithview");

                entity.Property(e => e.PtasPool).HasColumnName("ptas_pool");

                entity.Property(e => e.PtasPropertyaddress).HasColumnName("ptas_propertyaddress");

                entity.Property(e => e.PtasPropertyname).HasColumnName("ptas_propertyname");

                entity.Property(e => e.PtasPropertytypeidValue).HasColumnName("_ptas_propertytypeid_value");

                entity.Property(e => e.PtasResponsibilityidValue).HasColumnName("_ptas_responsibilityid_value");

                entity.Property(e => e.PtasSaledate).HasColumnName("ptas_saledate");

                entity.Property(e => e.PtasSaleidValue).HasColumnName("_ptas_saleid_value");

                entity.Property(e => e.PtasSaleprice)
                    .HasColumnName("ptas_saleprice")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSalepriceBase)
                    .HasColumnName("ptas_saleprice_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSalepriceperunit)
                    .HasColumnName("ptas_salepriceperunit")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSalepriceperunitBase)
                    .HasColumnName("ptas_salepriceperunit_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSpecialtyareaidValue).HasColumnName("_ptas_specialtyareaid_value");

                entity.Property(e => e.PtasTrenddate).HasColumnName("ptas_trenddate");

                entity.Property(e => e.PtasTrendedsaleprice)
                    .HasColumnName("ptas_trendedsaleprice")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTrendedsalepriceBase)
                    .HasColumnName("ptas_trendedsaleprice_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTrendedsalepriceperunit)
                    .HasColumnName("ptas_trendedsalepriceperunit")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTrendedsalepriceperunitBase)
                    .HasColumnName("ptas_trendedsalepriceperunit_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasViewrank)
                    .HasColumnName("ptas_viewrank")
                    .HasColumnType("money");

                entity.Property(e => e.PtasYearbuilt).HasColumnName("ptas_yearbuilt");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAptavailablecomparablesaleCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptavailablecomparablesale_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptavailablecomparablesaleCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptavailablecomparablesale_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAptavailablecomparablesaleModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptavailablecomparablesale_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptavailablecomparablesaleModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptavailablecomparablesale_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasAptavailablecomparablesale)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_aptavailablecomparablesale_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasAptavailablecomparablesaleOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_aptavailablecomparablesale_owninguser");

                entity.HasOne(d => d.PtasApartmentneighborhoodidValueNavigation)
                    .WithMany(p => p.PtasAptavailablecomparablesale)
                    .HasForeignKey(d => d.PtasApartmentneighborhoodidValue)
                    .HasConstraintName("FK_ptas_aptneighborhood_ptas_aptavailablecomparablesale_ptas_apartmentneighborhoodid");

                entity.HasOne(d => d.PtasParcelidValueNavigation)
                    .WithMany(p => p.PtasAptavailablecomparablesale)
                    .HasForeignKey(d => d.PtasParcelidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_aptavailablecomparablesale_ptas_parcelid");

                entity.HasOne(d => d.PtasPropertytypeidValueNavigation)
                    .WithMany(p => p.PtasAptavailablecomparablesale)
                    .HasForeignKey(d => d.PtasPropertytypeidValue)
                    .HasConstraintName("FK_ptas_propertytype_ptas_aptavailablecomparablesale_ptas_propertytypeid");

                entity.HasOne(d => d.PtasResponsibilityidValueNavigation)
                    .WithMany(p => p.PtasAptavailablecomparablesale)
                    .HasForeignKey(d => d.PtasResponsibilityidValue)
                    .HasConstraintName("FK_ptas_responsibility_ptas_aptavailablecomparablesale_ptas_responsibilityid");

                entity.HasOne(d => d.PtasSaleidValueNavigation)
                    .WithMany(p => p.PtasAptavailablecomparablesale)
                    .HasForeignKey(d => d.PtasSaleidValue)
                    .HasConstraintName("FK_ptas_sales_ptas_aptavailablecomparablesale_ptas_saleid");

                entity.HasOne(d => d.PtasSpecialtyareaidValueNavigation)
                    .WithMany(p => p.PtasAptavailablecomparablesale)
                    .HasForeignKey(d => d.PtasSpecialtyareaidValue)
                    .HasConstraintName("FK_ptas_specialtyarea_ptas_aptavailablecomparablesale_ptas_specialtyareaid");
            });

            modelBuilder.Entity<PtasAptbuildingqualityadjustment>(entity =>
            {
                entity.ToTable("ptas_aptbuildingqualityadjustment", "dynamics");

                entity.Property(e => e.PtasAptbuildingqualityadjustmentid)
                    .HasColumnName("ptas_aptbuildingqualityadjustmentid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAssessmentyear).HasColumnName("ptas_assessmentyear");

                entity.Property(e => e.PtasAssessmentyearlookupidValue).HasColumnName("_ptas_assessmentyearlookupid_value");

                entity.Property(e => e.PtasBuildingquality).HasColumnName("ptas_buildingquality");

                entity.Property(e => e.PtasCaprateadjustment)
                    .HasColumnName("ptas_caprateadjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCommercialcapratemultiplier)
                    .HasColumnName("ptas_commercialcapratemultiplier")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCommercialgimmultiplier)
                    .HasColumnName("ptas_commercialgimmultiplier")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCommercialrentmultiplier)
                    .HasColumnName("ptas_commercialrentmultiplier")
                    .HasColumnType("money");

                entity.Property(e => e.PtasGimadjustment)
                    .HasColumnName("ptas_gimadjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasRentscoefficient)
                    .HasColumnName("ptas_rentscoefficient")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSalescoefficient)
                    .HasColumnName("ptas_salescoefficient")
                    .HasColumnType("money");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAptbuildingqualityadjustmentCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptbuildingqualityadjustment_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptbuildingqualityadjustmentCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptbuildingqualityadjustment_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAptbuildingqualityadjustmentModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptbuildingqualityadjustment_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptbuildingqualityadjustmentModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptbuildingqualityadjustment_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasAptbuildingqualityadjustment)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_aptbuildingqualityadjustment_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasAptbuildingqualityadjustmentOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_aptbuildingqualityadjustment_owninguser");

                entity.HasOne(d => d.PtasAssessmentyearlookupidValueNavigation)
                    .WithMany(p => p.PtasAptbuildingqualityadjustment)
                    .HasForeignKey(d => d.PtasAssessmentyearlookupidValue)
                    .HasConstraintName("FK_ptas_year_ptas_aptbuildingqualityadjustment_ptas_assessmentyearlookupid");
            });

            modelBuilder.Entity<PtasAptcloseproximity>(entity =>
            {
                entity.ToTable("ptas_aptcloseproximity", "dynamics");

                entity.Property(e => e.PtasAptcloseproximityid)
                    .HasColumnName("ptas_aptcloseproximityid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasAssessmentyear).HasColumnName("ptas_assessmentyear");

                entity.Property(e => e.PtasAssessmentyearlookupidValue).HasColumnName("_ptas_assessmentyearlookupid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasProximitycode).HasColumnName("ptas_proximitycode");

                entity.Property(e => e.PtasSalerentneighborhoodidValue).HasColumnName("_ptas_salerentneighborhoodid_value");

                entity.Property(e => e.PtasSubjectneighborhoodidValue).HasColumnName("_ptas_subjectneighborhoodid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAptcloseproximityCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptcloseproximity_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptcloseproximityCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptcloseproximity_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAptcloseproximityModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptcloseproximity_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptcloseproximityModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptcloseproximity_modifiedonbehalfby");

                entity.HasOne(d => d.PtasAssessmentyearlookupidValueNavigation)
                    .WithMany(p => p.PtasAptcloseproximity)
                    .HasForeignKey(d => d.PtasAssessmentyearlookupidValue)
                    .HasConstraintName("FK_ptas_year_ptas_aptcloseproximity_ptas_assessmentyearlookupid");

                entity.HasOne(d => d.PtasSalerentneighborhoodidValueNavigation)
                    .WithMany(p => p.PtasAptcloseproximityPtasSalerentneighborhoodidValueNavigation)
                    .HasForeignKey(d => d.PtasSalerentneighborhoodidValue)
                    .HasConstraintName("FK_ptas_aptneighborhood_ptas_aptcloseproximity_ptas_salerentneighborhoodid");

                entity.HasOne(d => d.PtasSubjectneighborhoodidValueNavigation)
                    .WithMany(p => p.PtasAptcloseproximityPtasSubjectneighborhoodidValueNavigation)
                    .HasForeignKey(d => d.PtasSubjectneighborhoodidValue)
                    .HasConstraintName("FK_ptas_aptneighborhood_ptas_aptcloseproximity_ptas_subjectneighborhoodid");
            });

            modelBuilder.Entity<PtasAptcommercialincomeexpense>(entity =>
            {
                entity.ToTable("ptas_aptcommercialincomeexpense", "dynamics");

                entity.Property(e => e.PtasAptcommercialincomeexpenseid)
                    .HasColumnName("ptas_aptcommercialincomeexpenseid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAptvaluationidValue).HasColumnName("_ptas_aptvaluationid_value");

                entity.Property(e => e.PtasCaprate)
                    .HasColumnName("ptas_caprate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEffectivegrossincome)
                    .HasColumnName("ptas_effectivegrossincome")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEffectivegrossincomeBase)
                    .HasColumnName("ptas_effectivegrossincome_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomevalue)
                    .HasColumnName("ptas_incomevalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomevalueBase)
                    .HasColumnName("ptas_incomevalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNetoperatingincome)
                    .HasColumnName("ptas_netoperatingincome")
                    .HasColumnType("money");

                entity.Property(e => e.PtasNetoperatingincomeBase)
                    .HasColumnName("ptas_netoperatingincome_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasNetsqft).HasColumnName("ptas_netsqft");

                entity.Property(e => e.PtasOperatingexpensefactor)
                    .HasColumnName("ptas_operatingexpensefactor")
                    .HasColumnType("money");

                entity.Property(e => e.PtasOperatingexpenses)
                    .HasColumnName("ptas_operatingexpenses")
                    .HasColumnType("money");

                entity.Property(e => e.PtasOperatingexpensesBase)
                    .HasColumnName("ptas_operatingexpenses_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPotentialgrossincome)
                    .HasColumnName("ptas_potentialgrossincome")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPotentialgrossincomeBase)
                    .HasColumnName("ptas_potentialgrossincome_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRentrate)
                    .HasColumnName("ptas_rentrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRentrateBase)
                    .HasColumnName("ptas_rentrate_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSectionuseidValue).HasColumnName("_ptas_sectionuseid_value");

                entity.Property(e => e.PtasVacancyandcreditloss)
                    .HasColumnName("ptas_vacancyandcreditloss")
                    .HasColumnType("money");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAptcommercialincomeexpenseCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptcommercialincomeexpense_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptcommercialincomeexpenseCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptcommercialincomeexpense_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAptcommercialincomeexpenseModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptcommercialincomeexpense_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptcommercialincomeexpenseModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptcommercialincomeexpense_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasAptcommercialincomeexpense)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_aptcommercialincomeexpense_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasAptcommercialincomeexpenseOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_aptcommercialincomeexpense_owninguser");

                entity.HasOne(d => d.PtasAptvaluationidValueNavigation)
                    .WithMany(p => p.PtasAptcommercialincomeexpense)
                    .HasForeignKey(d => d.PtasAptvaluationidValue)
                    .HasConstraintName("FK_ptas_aptvaluation_ptas_aptcommercialincomeexpense_ptas_aptvaluationid");

                entity.HasOne(d => d.PtasSectionuseidValueNavigation)
                    .WithMany(p => p.PtasAptcommercialincomeexpense)
                    .HasForeignKey(d => d.PtasSectionuseidValue)
                    .HasConstraintName("FK_ptas_buildingdetail_commercialuse_ptas_aptcommercialincomeexpense_ptas_sectionuseid");
            });

            modelBuilder.Entity<PtasAptcomparablerent>(entity =>
            {
                entity.ToTable("ptas_aptcomparablerent", "dynamics");

                entity.Property(e => e.PtasAptcomparablerentid)
                    .HasColumnName("ptas_aptcomparablerentid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAbsoluteadjustsment)
                    .HasColumnName("ptas_absoluteadjustsment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAdjustedrent)
                    .HasColumnName("ptas_adjustedrent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAdjustedrentBase)
                    .HasColumnName("ptas_adjustedrent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAgeadjustment)
                    .HasColumnName("ptas_ageadjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAirportnoiseadjustment)
                    .HasColumnName("ptas_airportnoiseadjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAssessmentyear).HasColumnName("ptas_assessmentyear");

                entity.Property(e => e.PtasComp).HasColumnName("ptas_comp");

                entity.Property(e => e.PtasConditionadjustment)
                    .HasColumnName("ptas_conditionadjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDistancemetriccombinedadjustment)
                    .HasColumnName("ptas_distancemetriccombinedadjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLocationadjustment)
                    .HasColumnName("ptas_locationadjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNetadjustment)
                    .HasColumnName("ptas_netadjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasNumberofbathroomsadjustment)
                    .HasColumnName("ptas_numberofbathroomsadjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasNumberofbedroomsadjustment)
                    .HasColumnName("ptas_numberofbedroomsadjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPooladjustment)
                    .HasColumnName("ptas_pooladjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasProximityadjustment)
                    .HasColumnName("ptas_proximityadjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasProximitycode).HasColumnName("ptas_proximitycode");

                entity.Property(e => e.PtasQualityadjustment)
                    .HasColumnName("ptas_qualityadjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRentidValue).HasColumnName("_ptas_rentid_value");

                entity.Property(e => e.PtasRentsubjectidValue).HasColumnName("_ptas_rentsubjectid_value");

                entity.Property(e => e.PtasUnitsizeadjustment1)
                    .HasColumnName("ptas_unitsizeadjustment1")
                    .HasColumnType("money");

                entity.Property(e => e.PtasUnitsizeadjustment2)
                    .HasColumnName("ptas_unitsizeadjustment2")
                    .HasColumnType("money");

                entity.Property(e => e.PtasUnittypeadjustment)
                    .HasColumnName("ptas_unittypeadjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasViewadjustment1)
                    .HasColumnName("ptas_viewadjustment1")
                    .HasColumnType("money");

                entity.Property(e => e.PtasViewadjustment2)
                    .HasColumnName("ptas_viewadjustment2")
                    .HasColumnType("money");

                entity.Property(e => e.PtasWeightingdenominator)
                    .HasColumnName("ptas_weightingdenominator")
                    .HasColumnType("money");

                entity.Property(e => e.PtasYearbuiltadjustment)
                    .HasColumnName("ptas_yearbuiltadjustment")
                    .HasColumnType("money");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAptcomparablerentCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptcomparablerent_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptcomparablerentCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptcomparablerent_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAptcomparablerentModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptcomparablerent_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptcomparablerentModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptcomparablerent_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasAptcomparablerent)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_aptcomparablerent_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasAptcomparablerentOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_aptcomparablerent_owninguser");

                entity.HasOne(d => d.PtasRentidValueNavigation)
                    .WithMany(p => p.PtasAptcomparablerent)
                    .HasForeignKey(d => d.PtasRentidValue)
                    .HasConstraintName("FK_ptas_aptlistedrent_ptas_aptcomparablerent_ptas_rentid");

                entity.HasOne(d => d.PtasRentsubjectidValueNavigation)
                    .WithMany(p => p.PtasAptcomparablerent)
                    .HasForeignKey(d => d.PtasRentsubjectidValue)
                    .HasConstraintName("FK_ptas_aptvaluation_ptas_aptcomparablerent_ptas_rentsubjectid");
            });

            modelBuilder.Entity<PtasAptcomparablesale>(entity =>
            {
                entity.ToTable("ptas_aptcomparablesale", "dynamics");

                entity.Property(e => e.PtasAptcomparablesaleid)
                    .HasColumnName("ptas_aptcomparablesaleid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAbsoluteadjustmentwithoutlocation)
                    .HasColumnName("ptas_absoluteadjustmentwithoutlocation")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAbsoluteadjustsment)
                    .HasColumnName("ptas_absoluteadjustsment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAdjustedsaleprice)
                    .HasColumnName("ptas_adjustedsaleprice")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAdjustedsalepriceBase)
                    .HasColumnName("ptas_adjustedsaleprice_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAdjustedsalepriceperunit)
                    .HasColumnName("ptas_adjustedsalepriceperunit")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAdjustedsalepriceperunitBase)
                    .HasColumnName("ptas_adjustedsalepriceperunit_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAgeadjustment)
                    .HasColumnName("ptas_ageadjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAggregateabsoluteadjustment)
                    .HasColumnName("ptas_aggregateabsoluteadjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAirportnoiseadjustment)
                    .HasColumnName("ptas_airportnoiseadjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAssessmentyear).HasColumnName("ptas_assessmentyear");

                entity.Property(e => e.PtasAverageunitsizeadjustment)
                    .HasColumnName("ptas_averageunitsizeadjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasBuildingqualityadjustment)
                    .HasColumnName("ptas_buildingqualityadjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasComp).HasColumnName("ptas_comp");

                entity.Property(e => e.PtasComparablesalesvaluationsubjectidValue).HasColumnName("_ptas_comparablesalesvaluationsubjectid_value");

                entity.Property(e => e.PtasComplementofabsoluteadjustment)
                    .HasColumnName("ptas_complementofabsoluteadjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCompweight)
                    .HasColumnName("ptas_compweight")
                    .HasColumnType("money");

                entity.Property(e => e.PtasConditionadjustment)
                    .HasColumnName("ptas_conditionadjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDistancemetriccombinedadjustment)
                    .HasColumnName("ptas_distancemetriccombinedadjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLocationadjustment)
                    .HasColumnName("ptas_locationadjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNetadjustment)
                    .HasColumnName("ptas_netadjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasNetadjustmentwithoutlocation)
                    .HasColumnName("ptas_netadjustmentwithoutlocation")
                    .HasColumnType("money");

                entity.Property(e => e.PtasNumberofunitsadjustment)
                    .HasColumnName("ptas_numberofunitsadjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPercentcommercialadjustment)
                    .HasColumnName("ptas_percentcommercialadjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPooladjustment)
                    .HasColumnName("ptas_pooladjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasProximitycode).HasColumnName("ptas_proximitycode");

                entity.Property(e => e.PtasProximitycodeadjustment)
                    .HasColumnName("ptas_proximitycodeadjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasReconciledcomparablevalueperunit)
                    .HasColumnName("ptas_reconciledcomparablevalueperunit")
                    .HasColumnType("money");

                entity.Property(e => e.PtasReconciledcomparablevalueperunitBase)
                    .HasColumnName("ptas_reconciledcomparablevalueperunit_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSaledateadjustment)
                    .HasColumnName("ptas_saledateadjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSaleidValue).HasColumnName("_ptas_saleid_value");

                entity.Property(e => e.PtasTrendedsalepriceperunit)
                    .HasColumnName("ptas_trendedsalepriceperunit")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTrendedsalepriceperunitBase)
                    .HasColumnName("ptas_trendedsalepriceperunit_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasViewadjustment)
                    .HasColumnName("ptas_viewadjustment")
                    .HasColumnType("money");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAptcomparablesaleCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptcomparablesale_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptcomparablesaleCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptcomparablesale_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAptcomparablesaleModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptcomparablesale_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptcomparablesaleModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptcomparablesale_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasAptcomparablesale)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_aptcomparablesale_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasAptcomparablesaleOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_aptcomparablesale_owninguser");

                entity.HasOne(d => d.PtasComparablesalesvaluationsubjectidValueNavigation)
                    .WithMany(p => p.PtasAptcomparablesale)
                    .HasForeignKey(d => d.PtasComparablesalesvaluationsubjectidValue)
                    .HasConstraintName("FK_ptas_aptvaluation_ptas_aptcomparablesale_ptas_comparablesalesvaluationsubjectid");

                entity.HasOne(d => d.PtasSaleidValueNavigation)
                    .WithMany(p => p.PtasAptcomparablesale)
                    .HasForeignKey(d => d.PtasSaleidValue)
                    .HasConstraintName("FK_ptas_aptavailablecomparablesale_ptas_aptcomparablesale_ptas_saleid");
            });

            modelBuilder.Entity<PtasAptconditionadjustment>(entity =>
            {
                entity.ToTable("ptas_aptconditionadjustment", "dynamics");

                entity.Property(e => e.PtasAptconditionadjustmentid)
                    .HasColumnName("ptas_aptconditionadjustmentid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAptcondition).HasColumnName("ptas_aptcondition");

                entity.Property(e => e.PtasAssessmentyear).HasColumnName("ptas_assessmentyear");

                entity.Property(e => e.PtasAssessmentyearlookupidValue).HasColumnName("_ptas_assessmentyearlookupid_value");

                entity.Property(e => e.PtasCaprateadjustment)
                    .HasColumnName("ptas_caprateadjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasGimadjustment)
                    .HasColumnName("ptas_gimadjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasRentscoefficient)
                    .HasColumnName("ptas_rentscoefficient")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSalescoefficient)
                    .HasColumnName("ptas_salescoefficient")
                    .HasColumnType("money");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAptconditionadjustmentCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptconditionadjustment_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptconditionadjustmentCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptconditionadjustment_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAptconditionadjustmentModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptconditionadjustment_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptconditionadjustmentModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptconditionadjustment_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasAptconditionadjustment)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_aptconditionadjustment_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasAptconditionadjustmentOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_aptconditionadjustment_owninguser");

                entity.HasOne(d => d.PtasAssessmentyearlookupidValueNavigation)
                    .WithMany(p => p.PtasAptconditionadjustment)
                    .HasForeignKey(d => d.PtasAssessmentyearlookupidValue)
                    .HasConstraintName("FK_ptas_year_ptas_aptconditionadjustment_ptas_assessmentyearlookupid");
            });

            modelBuilder.Entity<PtasAptestimatedunitsqft>(entity =>
            {
                entity.ToTable("ptas_aptestimatedunitsqft", "dynamics");

                entity.Property(e => e.PtasAptestimatedunitsqftid)
                    .HasColumnName("ptas_aptestimatedunitsqftid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasApartmentunittype).HasColumnName("ptas_apartmentunittype");

                entity.Property(e => e.PtasAssessmentyear).HasColumnName("ptas_assessmentyear");

                entity.Property(e => e.PtasAssessmentyearlookupidValue).HasColumnName("_ptas_assessmentyearlookupid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasRegion).HasColumnName("ptas_region");

                entity.Property(e => e.PtasSqft).HasColumnName("ptas_sqft");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAptestimatedunitsqftCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptestimatedunitsqft_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptestimatedunitsqftCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptestimatedunitsqft_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAptestimatedunitsqftModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptestimatedunitsqft_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptestimatedunitsqftModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptestimatedunitsqft_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasAptestimatedunitsqft)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_aptestimatedunitsqft_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasAptestimatedunitsqftOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_aptestimatedunitsqft_owninguser");

                entity.HasOne(d => d.PtasAssessmentyearlookupidValueNavigation)
                    .WithMany(p => p.PtasAptestimatedunitsqft)
                    .HasForeignKey(d => d.PtasAssessmentyearlookupidValue)
                    .HasConstraintName("FK_ptas_year_ptas_aptestimatedunitsqft_ptas_assessmentyearlookupid");
            });

            modelBuilder.Entity<PtasAptexpensehighend>(entity =>
            {
                entity.ToTable("ptas_aptexpensehighend", "dynamics");

                entity.Property(e => e.PtasAptexpensehighendid)
                    .HasColumnName("ptas_aptexpensehighendid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAssessmentyear).HasColumnName("ptas_assessmentyear");

                entity.Property(e => e.PtasAssessmentyearlookupidValue).HasColumnName("_ptas_assessmentyearlookupid_value");

                entity.Property(e => e.PtasHighendexpense)
                    .HasColumnName("ptas_highendexpense")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncometonumberofunitsratio).HasColumnName("ptas_incometonumberofunitsratio");

                entity.Property(e => e.PtasMinnumberofunits).HasColumnName("ptas_minnumberofunits");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAptexpensehighendCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptexpensehighend_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptexpensehighendCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptexpensehighend_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAptexpensehighendModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptexpensehighend_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptexpensehighendModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptexpensehighend_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasAptexpensehighend)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_aptexpensehighend_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasAptexpensehighendOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_aptexpensehighend_owninguser");

                entity.HasOne(d => d.PtasAssessmentyearlookupidValueNavigation)
                    .WithMany(p => p.PtasAptexpensehighend)
                    .HasForeignKey(d => d.PtasAssessmentyearlookupidValue)
                    .HasConstraintName("FK_ptas_year_ptas_aptexpensehighend_ptas_assessmentyearlookupid");
            });

            modelBuilder.Entity<PtasAptexpenseunitsize>(entity =>
            {
                entity.ToTable("ptas_aptexpenseunitsize", "dynamics");

                entity.Property(e => e.PtasAptexpenseunitsizeid)
                    .HasColumnName("ptas_aptexpenseunitsizeid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAssessmentyear).HasColumnName("ptas_assessmentyear");

                entity.Property(e => e.PtasAssessmentyearlookupidValue).HasColumnName("_ptas_assessmentyearlookupid_value");

                entity.Property(e => e.PtasMaxunitsize).HasColumnName("ptas_maxunitsize");

                entity.Property(e => e.PtasMinunitsize).HasColumnName("ptas_minunitsize");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasUnitsizeexpense)
                    .HasColumnName("ptas_unitsizeexpense")
                    .HasColumnType("money");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAptexpenseunitsizeCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptexpenseunitsize_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptexpenseunitsizeCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptexpenseunitsize_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAptexpenseunitsizeModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptexpenseunitsize_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptexpenseunitsizeModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptexpenseunitsize_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasAptexpenseunitsize)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_aptexpenseunitsize_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasAptexpenseunitsizeOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_aptexpenseunitsize_owninguser");

                entity.HasOne(d => d.PtasAssessmentyearlookupidValueNavigation)
                    .WithMany(p => p.PtasAptexpenseunitsize)
                    .HasForeignKey(d => d.PtasAssessmentyearlookupidValue)
                    .HasConstraintName("FK_ptas_year_ptas_aptexpenseunitsize_ptas_assessmentyearlookupid");
            });

            modelBuilder.Entity<PtasAptincomeexpense>(entity =>
            {
                entity.ToTable("ptas_aptincomeexpense", "dynamics");

                entity.Property(e => e.PtasAptincomeexpenseid)
                    .HasColumnName("ptas_aptincomeexpenseid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasApartmentneighborhoodidValue).HasColumnName("_ptas_apartmentneighborhoodid_value");

                entity.Property(e => e.PtasAssessmentyear).HasColumnName("ptas_assessmentyear");

                entity.Property(e => e.PtasAssessmentyearlookupidValue).HasColumnName("_ptas_assessmentyearlookupid_value");

                entity.Property(e => e.PtasBasecaprate)
                    .HasColumnName("ptas_basecaprate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasBaseexpense)
                    .HasColumnName("ptas_baseexpense")
                    .HasColumnType("money");

                entity.Property(e => e.PtasBaseexpenseBase)
                    .HasColumnName("ptas_baseexpense_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasBasegim)
                    .HasColumnName("ptas_basegim")
                    .HasColumnType("money");

                entity.Property(e => e.PtasBasepercentexpense)
                    .HasColumnName("ptas_basepercentexpense")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCommercialgim)
                    .HasColumnName("ptas_commercialgim")
                    .HasColumnType("money");

                entity.Property(e => e.PtasMaxnumberofunits).HasColumnName("ptas_maxnumberofunits");

                entity.Property(e => e.PtasMaxyearbuilt).HasColumnName("ptas_maxyearbuilt");

                entity.Property(e => e.PtasMinnumberofunits).HasColumnName("ptas_minnumberofunits");

                entity.Property(e => e.PtasMinyearbuilt).HasColumnName("ptas_minyearbuilt");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasOtherincome)
                    .HasColumnName("ptas_otherincome")
                    .HasColumnType("money");

                entity.Property(e => e.PtasOtherincomeBase)
                    .HasColumnName("ptas_otherincome_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRegion).HasColumnName("ptas_region");

                entity.Property(e => e.PtasSupergroupidValue).HasColumnName("_ptas_supergroupid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAptincomeexpenseCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptincomeexpense_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptincomeexpenseCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptincomeexpense_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAptincomeexpenseModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptincomeexpense_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptincomeexpenseModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptincomeexpense_modifiedonbehalfby");

                entity.HasOne(d => d.PtasApartmentneighborhoodidValueNavigation)
                    .WithMany(p => p.PtasAptincomeexpense)
                    .HasForeignKey(d => d.PtasApartmentneighborhoodidValue)
                    .HasConstraintName("FK_ptas_aptneighborhood_ptas_aptincomeexpense_ptas_apartmentneighborhoodid");

                entity.HasOne(d => d.PtasAssessmentyearlookupidValueNavigation)
                    .WithMany(p => p.PtasAptincomeexpense)
                    .HasForeignKey(d => d.PtasAssessmentyearlookupidValue)
                    .HasConstraintName("FK_ptas_year_ptas_aptincomeexpense_ptas_assessmentyearlookupid");

                entity.HasOne(d => d.PtasSupergroupidValueNavigation)
                    .WithMany(p => p.PtasAptincomeexpense)
                    .HasForeignKey(d => d.PtasSupergroupidValue)
                    .HasConstraintName("FK_ptas_supergroup_ptas_aptincomeexpense_ptas_supergroupid");
            });

            modelBuilder.Entity<PtasAptlistedrent>(entity =>
            {
                entity.ToTable("ptas_aptlistedrent", "dynamics");

                entity.Property(e => e.PtasAptlistedrentid)
                    .HasColumnName("ptas_aptlistedrentid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAirportnoise).HasColumnName("ptas_airportnoise");

                entity.Property(e => e.PtasBuildingquality).HasColumnName("ptas_buildingquality");

                entity.Property(e => e.PtasCondition).HasColumnName("ptas_condition");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasDetailcomment).HasColumnName("ptas_detailcomment");

                entity.Property(e => e.PtasEffectivestartdate).HasColumnName("ptas_effectivestartdate");

                entity.Property(e => e.PtasHasview).HasColumnName("ptas_hasview");

                entity.Property(e => e.PtasInformationsource).HasColumnName("ptas_informationsource");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNeighborhoodidValue).HasColumnName("_ptas_neighborhoodid_value");

                entity.Property(e => e.PtasNetareasqft).HasColumnName("ptas_netareasqft");

                entity.Property(e => e.PtasNumberofbathrooms).HasColumnName("ptas_numberofbathrooms");

                entity.Property(e => e.PtasNumberofbedrooms).HasColumnName("ptas_numberofbedrooms");

                entity.Property(e => e.PtasNumberofunits).HasColumnName("ptas_numberofunits");

                entity.Property(e => e.PtasParceldValue).HasColumnName("_ptas_parceld_value");

                entity.Property(e => e.PtasPercentwithview).HasColumnName("ptas_percentwithview");

                entity.Property(e => e.PtasPool).HasColumnName("ptas_pool");

                entity.Property(e => e.PtasProjectidValue).HasColumnName("_ptas_projectid_value");

                entity.Property(e => e.PtasRegion).HasColumnName("ptas_region");

                entity.Property(e => e.PtasRenttermperiod).HasColumnName("ptas_renttermperiod");

                entity.Property(e => e.PtasRenttermunit).HasColumnName("ptas_renttermunit");

                entity.Property(e => e.PtasTrenddate).HasColumnName("ptas_trenddate");

                entity.Property(e => e.PtasTrendedrent)
                    .HasColumnName("ptas_trendedrent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTrendedrentBase)
                    .HasColumnName("ptas_trendedrent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTypicalrent)
                    .HasColumnName("ptas_typicalrent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTypicalrentBase)
                    .HasColumnName("ptas_typicalrent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasUnitbreakdowntype).HasColumnName("ptas_unitbreakdowntype");

                entity.Property(e => e.PtasUnituse).HasColumnName("ptas_unituse");

                entity.Property(e => e.PtasYearbuilt).HasColumnName("ptas_yearbuilt");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAptlistedrentCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptlistedrent_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptlistedrentCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptlistedrent_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAptlistedrentModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptlistedrent_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptlistedrentModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptlistedrent_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasAptlistedrent)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_aptlistedrent_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasAptlistedrentOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_aptlistedrent_owninguser");

                entity.HasOne(d => d.PtasNeighborhoodidValueNavigation)
                    .WithMany(p => p.PtasAptlistedrent)
                    .HasForeignKey(d => d.PtasNeighborhoodidValue)
                    .HasConstraintName("FK_ptas_neighborhood_ptas_aptlistedrent_ptas_neighborhoodid");

                entity.HasOne(d => d.PtasParceldValueNavigation)
                    .WithMany(p => p.PtasAptlistedrent)
                    .HasForeignKey(d => d.PtasParceldValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_aptlistedrent_ptas_parceld");

                entity.HasOne(d => d.PtasProjectidValueNavigation)
                    .WithMany(p => p.PtasAptlistedrent)
                    .HasForeignKey(d => d.PtasProjectidValue)
                    .HasConstraintName("FK_ptas_condocomplex_ptas_aptlistedrent_ptas_projectid");
            });

            modelBuilder.Entity<PtasAptneighborhood>(entity =>
            {
                entity.ToTable("ptas_aptneighborhood", "dynamics");

                entity.Property(e => e.PtasAptneighborhoodid)
                    .HasColumnName("ptas_aptneighborhoodid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasAptvaluationprojectidValue).HasColumnName("_ptas_aptvaluationprojectid_value");

                entity.Property(e => e.PtasAssessmentyear).HasColumnName("ptas_assessmentyear");

                entity.Property(e => e.PtasAssessmentyearlookupidValue).HasColumnName("_ptas_assessmentyearlookupid_value");

                entity.Property(e => e.PtasCommonlaundryincome)
                    .HasColumnName("ptas_commonlaundryincome")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCommonlaundryincomeBase)
                    .HasColumnName("ptas_commonlaundryincome_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasMoorageeffectiverentmultiplier)
                    .HasColumnName("ptas_moorageeffectiverentmultiplier")
                    .HasColumnType("money");

                entity.Property(e => e.PtasMoorageexpensemultiplier)
                    .HasColumnName("ptas_moorageexpensemultiplier")
                    .HasColumnType("money");

                entity.Property(e => e.PtasMooragerent)
                    .HasColumnName("ptas_mooragerent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasMooragerentBase)
                    .HasColumnName("ptas_mooragerent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNeighborhoodidValue).HasColumnName("_ptas_neighborhoodid_value");

                entity.Property(e => e.PtasParkingcoveredsecuredrent)
                    .HasColumnName("ptas_parkingcoveredsecuredrent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasParkingcoveredsecuredrentBase)
                    .HasColumnName("ptas_parkingcoveredsecuredrent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasParkingcoveredunsecuredrent)
                    .HasColumnName("ptas_parkingcoveredunsecuredrent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasParkingcoveredunsecuredrentBase)
                    .HasColumnName("ptas_parkingcoveredunsecuredrent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasParkingopensecuredrent)
                    .HasColumnName("ptas_parkingopensecuredrent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasParkingopensecuredrentBase)
                    .HasColumnName("ptas_parkingopensecuredrent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasParkingopenunsecuredrent)
                    .HasColumnName("ptas_parkingopenunsecuredrent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasParkingopenunsecuredrentBase)
                    .HasColumnName("ptas_parkingopenunsecuredrent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRank)
                    .HasColumnName("ptas_rank")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRegion).HasColumnName("ptas_region");

                entity.Property(e => e.PtasRentmultiplier)
                    .HasColumnName("ptas_rentmultiplier")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSalemodelfactor)
                    .HasColumnName("ptas_salemodelfactor")
                    .HasColumnType("money");

                entity.Property(e => e.PtasVacancyandcreditloss)
                    .HasColumnName("ptas_vacancyandcreditloss")
                    .HasColumnType("money");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAptneighborhoodCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptneighborhood_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptneighborhoodCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptneighborhood_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAptneighborhoodModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptneighborhood_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptneighborhoodModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptneighborhood_modifiedonbehalfby");

                entity.HasOne(d => d.PtasAptvaluationprojectidValueNavigation)
                    .WithMany(p => p.PtasAptneighborhood)
                    .HasForeignKey(d => d.PtasAptvaluationprojectidValue)
                    .HasConstraintName("FK_ptas_aptvaluationproject_ptas_aptneighborhood_ptas_aptvaluationprojectid");

                entity.HasOne(d => d.PtasAssessmentyearlookupidValueNavigation)
                    .WithMany(p => p.PtasAptneighborhood)
                    .HasForeignKey(d => d.PtasAssessmentyearlookupidValue)
                    .HasConstraintName("FK_ptas_year_ptas_aptneighborhood_ptas_assessmentyearlookupid");

                entity.HasOne(d => d.PtasNeighborhoodidValueNavigation)
                    .WithMany(p => p.PtasAptneighborhood)
                    .HasForeignKey(d => d.PtasNeighborhoodidValue)
                    .HasConstraintName("FK_ptas_neighborhood_ptas_aptneighborhood_ptas_neighborhoodid");
            });

            modelBuilder.Entity<PtasAptnumberofunitsadjustment>(entity =>
            {
                entity.ToTable("ptas_aptnumberofunitsadjustment", "dynamics");

                entity.Property(e => e.PtasAptnumberofunitsadjustmentid)
                    .HasColumnName("ptas_aptnumberofunitsadjustmentid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAssessmentyear).HasColumnName("ptas_assessmentyear");

                entity.Property(e => e.PtasAssessmentyearlookupidValue).HasColumnName("_ptas_assessmentyearlookupid_value");

                entity.Property(e => e.PtasMaxnumberofunits).HasColumnName("ptas_maxnumberofunits");

                entity.Property(e => e.PtasMinnumberofunits).HasColumnName("ptas_minnumberofunits");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasRentscoefficient)
                    .HasColumnName("ptas_rentscoefficient")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSalescoefficient)
                    .HasColumnName("ptas_salescoefficient")
                    .HasColumnType("money");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAptnumberofunitsadjustmentCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptnumberofunitsadjustment_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptnumberofunitsadjustmentCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptnumberofunitsadjustment_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAptnumberofunitsadjustmentModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptnumberofunitsadjustment_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptnumberofunitsadjustmentModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptnumberofunitsadjustment_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasAptnumberofunitsadjustment)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_aptnumberofunitsadjustment_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasAptnumberofunitsadjustmentOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_aptnumberofunitsadjustment_owninguser");

                entity.HasOne(d => d.PtasAssessmentyearlookupidValueNavigation)
                    .WithMany(p => p.PtasAptnumberofunitsadjustment)
                    .HasForeignKey(d => d.PtasAssessmentyearlookupidValue)
                    .HasConstraintName("FK_ptas_year_ptas_aptnumberofunitsadjustment_ptas_assessmentyearlookupid");
            });

            modelBuilder.Entity<PtasAptpoolandelevatorexpense>(entity =>
            {
                entity.ToTable("ptas_aptpoolandelevatorexpense", "dynamics");

                entity.Property(e => e.PtasAptpoolandelevatorexpenseid)
                    .HasColumnName("ptas_aptpoolandelevatorexpenseid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAssessmentyear).HasColumnName("ptas_assessmentyear");

                entity.Property(e => e.PtasAssessmentyearlookupidValue).HasColumnName("_ptas_assessmentyearlookupid_value");

                entity.Property(e => e.PtasElevatorpercentexpense)
                    .HasColumnName("ptas_elevatorpercentexpense")
                    .HasColumnType("money");

                entity.Property(e => e.PtasMaxnumberofunits).HasColumnName("ptas_maxnumberofunits");

                entity.Property(e => e.PtasMinnumberofunits).HasColumnName("ptas_minnumberofunits");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasPoolpercentexpense)
                    .HasColumnName("ptas_poolpercentexpense")
                    .HasColumnType("money");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAptpoolandelevatorexpenseCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptpoolandelevatorexpense_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptpoolandelevatorexpenseCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptpoolandelevatorexpense_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAptpoolandelevatorexpenseModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptpoolandelevatorexpense_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptpoolandelevatorexpenseModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptpoolandelevatorexpense_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasAptpoolandelevatorexpense)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_aptpoolandelevatorexpense_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasAptpoolandelevatorexpenseOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_aptpoolandelevatorexpense_owninguser");

                entity.HasOne(d => d.PtasAssessmentyearlookupidValueNavigation)
                    .WithMany(p => p.PtasAptpoolandelevatorexpense)
                    .HasForeignKey(d => d.PtasAssessmentyearlookupidValue)
                    .HasConstraintName("FK_ptas_year_ptas_aptpoolandelevatorexpense_ptas_assessmentyearlookupid");
            });

            modelBuilder.Entity<PtasAptrentmodel>(entity =>
            {
                entity.ToTable("ptas_aptrentmodel", "dynamics");

                entity.Property(e => e.PtasAptrentmodelid)
                    .HasColumnName("ptas_aptrentmodelid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAssessmentyear).HasColumnName("ptas_assessmentyear");

                entity.Property(e => e.PtasAssessmentyearlookupidValue).HasColumnName("_ptas_assessmentyearlookupid_value");

                entity.Property(e => e.PtasCoefficient)
                    .HasColumnName("ptas_coefficient")
                    .HasColumnType("money");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasVariablename).HasColumnName("ptas_variablename");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAptrentmodelCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptrentmodel_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptrentmodelCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptrentmodel_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAptrentmodelModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptrentmodel_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptrentmodelModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptrentmodel_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasAptrentmodel)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_aptrentmodel_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasAptrentmodelOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_aptrentmodel_owninguser");

                entity.HasOne(d => d.PtasAssessmentyearlookupidValueNavigation)
                    .WithMany(p => p.PtasAptrentmodel)
                    .HasForeignKey(d => d.PtasAssessmentyearlookupidValue)
                    .HasConstraintName("FK_ptas_year_ptas_aptrentmodel_ptas_assessmentyearlookupid");
            });

            modelBuilder.Entity<PtasAptsalesmodel>(entity =>
            {
                entity.ToTable("ptas_aptsalesmodel", "dynamics");

                entity.Property(e => e.PtasAptsalesmodelid)
                    .HasColumnName("ptas_aptsalesmodelid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAssessmentyear).HasColumnName("ptas_assessmentyear");

                entity.Property(e => e.PtasAssessmentyearlookupidValue).HasColumnName("_ptas_assessmentyearlookupid_value");

                entity.Property(e => e.PtasCoefficient)
                    .HasColumnName("ptas_coefficient")
                    .HasColumnType("money");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasVariablename).HasColumnName("ptas_variablename");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAptsalesmodelCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptsalesmodel_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptsalesmodelCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptsalesmodel_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAptsalesmodelModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptsalesmodel_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptsalesmodelModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptsalesmodel_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasAptsalesmodel)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_aptsalesmodel_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasAptsalesmodelOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_aptsalesmodel_owninguser");

                entity.HasOne(d => d.PtasAssessmentyearlookupidValueNavigation)
                    .WithMany(p => p.PtasAptsalesmodel)
                    .HasForeignKey(d => d.PtasAssessmentyearlookupidValue)
                    .HasConstraintName("FK_ptas_year_ptas_aptsalesmodel_ptas_assessmentyearlookupid");
            });

            modelBuilder.Entity<PtasApttrending>(entity =>
            {
                entity.ToTable("ptas_apttrending", "dynamics");

                entity.Property(e => e.PtasApttrendingid)
                    .HasColumnName("ptas_apttrendingid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAssessmentyear).HasColumnName("ptas_assessmentyear");

                entity.Property(e => e.PtasAssessmentyearlookupidValue).HasColumnName("_ptas_assessmentyearlookupid_value");

                entity.Property(e => e.PtasMaxnumberofunits).HasColumnName("ptas_maxnumberofunits");

                entity.Property(e => e.PtasMinnumberofunits).HasColumnName("ptas_minnumberofunits");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasRegion).HasColumnName("ptas_region");

                entity.Property(e => e.PtasRentcoefficient)
                    .HasColumnName("ptas_rentcoefficient")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSalecoefficient)
                    .HasColumnName("ptas_salecoefficient")
                    .HasColumnType("money");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasApttrendingCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_apttrending_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasApttrendingCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_apttrending_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasApttrendingModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_apttrending_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasApttrendingModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_apttrending_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasApttrending)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_apttrending_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasApttrendingOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_apttrending_owninguser");

                entity.HasOne(d => d.PtasAssessmentyearlookupidValueNavigation)
                    .WithMany(p => p.PtasApttrending)
                    .HasForeignKey(d => d.PtasAssessmentyearlookupidValue)
                    .HasConstraintName("FK_ptas_year_ptas_apttrending_ptas_assessmentyearlookupid");
            });

            modelBuilder.Entity<PtasAptunittypeadjustment>(entity =>
            {
                entity.ToTable("ptas_aptunittypeadjustment", "dynamics");

                entity.Property(e => e.PtasAptunittypeadjustmentid)
                    .HasColumnName("ptas_aptunittypeadjustmentid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasApartmentunittype).HasColumnName("ptas_apartmentunittype");

                entity.Property(e => e.PtasApartmentunittyperentcoefficient)
                    .HasColumnName("ptas_apartmentunittyperentcoefficient")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAssessmentyear).HasColumnName("ptas_assessmentyear");

                entity.Property(e => e.PtasAssessmentyearlookupidValue).HasColumnName("_ptas_assessmentyearlookupid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAptunittypeadjustmentCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptunittypeadjustment_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptunittypeadjustmentCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptunittypeadjustment_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAptunittypeadjustmentModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptunittypeadjustment_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptunittypeadjustmentModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptunittypeadjustment_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasAptunittypeadjustment)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_aptunittypeadjustment_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasAptunittypeadjustmentOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_aptunittypeadjustment_owninguser");

                entity.HasOne(d => d.PtasAssessmentyearlookupidValueNavigation)
                    .WithMany(p => p.PtasAptunittypeadjustment)
                    .HasForeignKey(d => d.PtasAssessmentyearlookupidValue)
                    .HasConstraintName("FK_ptas_year_ptas_aptunittypeadjustment_ptas_assessmentyearlookupid");
            });

            modelBuilder.Entity<PtasAptvaluation>(entity =>
            {
                entity.ToTable("ptas_aptvaluation", "dynamics");

                entity.Property(e => e.PtasAptvaluationid)
                    .HasColumnName("ptas_aptvaluationid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAirportnoise).HasColumnName("ptas_airportnoise");

                entity.Property(e => e.PtasAnnuallaundryincome)
                    .HasColumnName("ptas_annuallaundryincome")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAnnuallaundryincomeBase)
                    .HasColumnName("ptas_annuallaundryincome_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAnnualmiscellaneousincome)
                    .HasColumnName("ptas_annualmiscellaneousincome")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAnnualmiscellaneousincomeBase)
                    .HasColumnName("ptas_annualmiscellaneousincome_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAnnualmoorageincome)
                    .HasColumnName("ptas_annualmoorageincome")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAnnualmoorageincomeBase)
                    .HasColumnName("ptas_annualmoorageincome_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAnnualparkingincome)
                    .HasColumnName("ptas_annualparkingincome")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAnnualparkingincomeBase)
                    .HasColumnName("ptas_annualparkingincome_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasApartmentexpense)
                    .HasColumnName("ptas_apartmentexpense")
                    .HasColumnType("money");

                entity.Property(e => e.PtasApartmentexpenseBase)
                    .HasColumnName("ptas_apartmentexpense_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasApartmentgim)
                    .HasColumnName("ptas_apartmentgim")
                    .HasColumnType("money");

                entity.Property(e => e.PtasApartmentrentincomemonthly)
                    .HasColumnName("ptas_apartmentrentincomemonthly")
                    .HasColumnType("money");

                entity.Property(e => e.PtasApartmentrentincomemonthlyBase)
                    .HasColumnName("ptas_apartmentrentincomemonthly_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAppeals).HasColumnName("ptas_appeals");

                entity.Property(e => e.PtasAppraiseridValue).HasColumnName("_ptas_appraiserid_value");

                entity.Property(e => e.PtasAptcondition).HasColumnName("ptas_aptcondition");

                entity.Property(e => e.PtasAptneighborhoodidValue).HasColumnName("_ptas_aptneighborhoodid_value");

                entity.Property(e => e.PtasAptvaluationprojectidValue).HasColumnName("_ptas_aptvaluationprojectid_value");

                entity.Property(e => e.PtasAssessmentdate).HasColumnName("ptas_assessmentdate");

                entity.Property(e => e.PtasAssessmentyear).HasColumnName("ptas_assessmentyear");

                entity.Property(e => e.PtasAssessmentyearlookupidValue).HasColumnName("_ptas_assessmentyearlookupid_value");

                entity.Property(e => e.PtasAtmarket).HasColumnName("ptas_atmarket");

                entity.Property(e => e.PtasAverageunitsize).HasColumnName("ptas_averageunitsize");

                entity.Property(e => e.PtasBaselandvalue)
                    .HasColumnName("ptas_baselandvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasBaselandvalueBase)
                    .HasColumnName("ptas_baselandvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasBlendedcaprate)
                    .HasColumnName("ptas_blendedcaprate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasBuildingnetsqft).HasColumnName("ptas_buildingnetsqft");

                entity.Property(e => e.PtasBuildingquality).HasColumnName("ptas_buildingquality");

                entity.Property(e => e.PtasCommercialcaprate)
                    .HasColumnName("ptas_commercialcaprate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCommercialegi)
                    .HasColumnName("ptas_commercialegi")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCommercialegiBase)
                    .HasColumnName("ptas_commercialegi_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCommercialgim)
                    .HasColumnName("ptas_commercialgim")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCommercialincomevalue)
                    .HasColumnName("ptas_commercialincomevalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCommercialincomevalueBase)
                    .HasColumnName("ptas_commercialincomevalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCommercialnetsqft).HasColumnName("ptas_commercialnetsqft");

                entity.Property(e => e.PtasCommercialnoi)
                    .HasColumnName("ptas_commercialnoi")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCommercialnoiBase)
                    .HasColumnName("ptas_commercialnoi_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCommercialoexfactor)
                    .HasColumnName("ptas_commercialoexfactor")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCommercialpgi)
                    .HasColumnName("ptas_commercialpgi")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCommercialpgiBase)
                    .HasColumnName("ptas_commercialpgi_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCommercialrentincomeannual)
                    .HasColumnName("ptas_commercialrentincomeannual")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCommercialrentincomeannualBase)
                    .HasColumnName("ptas_commercialrentincomeannual_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCommercialrentrate)
                    .HasColumnName("ptas_commercialrentrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCommercialrentrateBase)
                    .HasColumnName("ptas_commercialrentrate_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCommercialvcl)
                    .HasColumnName("ptas_commercialvcl")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCommonlaundry).HasColumnName("ptas_commonlaundry");

                entity.Property(e => e.PtasComparablesalesvalue)
                    .HasColumnName("ptas_comparablesalesvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasComparablesalesvalueBase)
                    .HasColumnName("ptas_comparablesalesvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasComparablesalesvalueminusvacantland)
                    .HasColumnName("ptas_comparablesalesvalueminusvacantland")
                    .HasColumnType("money");

                entity.Property(e => e.PtasComparablesalesvalueminusvacantlandBase)
                    .HasColumnName("ptas_comparablesalesvalueminusvacantland_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasComparablesalesvalueperunit)
                    .HasColumnName("ptas_comparablesalesvalueperunit")
                    .HasColumnType("money");

                entity.Property(e => e.PtasComparablesalesvalueperunitBase)
                    .HasColumnName("ptas_comparablesalesvalueperunit_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasComparablesalesweight)
                    .HasColumnName("ptas_comparablesalesweight")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCostvaluercnldplusland)
                    .HasColumnName("ptas_costvaluercnldplusland")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCostvaluercnldpluslandBase)
                    .HasColumnName("ptas_costvaluercnldplusland_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDataproblems).HasColumnName("ptas_dataproblems");

                entity.Property(e => e.PtasEconomicunitidValue).HasColumnName("_ptas_economicunitid_value");

                entity.Property(e => e.PtasEconomicunitparcellist).HasColumnName("ptas_economicunitparcellist");

                entity.Property(e => e.PtasEconomicunittype).HasColumnName("ptas_economicunittype");

                entity.Property(e => e.PtasEconomicunitvaluationdescription).HasColumnName("ptas_economicunitvaluationdescription");

                entity.Property(e => e.PtasEconomicunitvaluationmethod).HasColumnName("ptas_economicunitvaluationmethod");

                entity.Property(e => e.PtasEffectivegrossincome)
                    .HasColumnName("ptas_effectivegrossincome")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEffectivegrossincomeBase)
                    .HasColumnName("ptas_effectivegrossincome_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEffectiveyear).HasColumnName("ptas_effectiveyear");

                entity.Property(e => e.PtasElevators).HasColumnName("ptas_elevators");

                entity.Property(e => e.PtasEmvminusvacantland)
                    .HasColumnName("ptas_emvminusvacantland")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEmvminusvacantlandBase)
                    .HasColumnName("ptas_emvminusvacantland_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEmvperunit)
                    .HasColumnName("ptas_emvperunit")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEmvperunitBase)
                    .HasColumnName("ptas_emvperunit_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEmvweight)
                    .HasColumnName("ptas_emvweight")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEstimatedmarketvalueemv)
                    .HasColumnName("ptas_estimatedmarketvalueemv")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEstimatedmarketvalueemvBase)
                    .HasColumnName("ptas_estimatedmarketvalueemv_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFlag).HasColumnName("ptas_flag");

                entity.Property(e => e.PtasGeoareaidValue).HasColumnName("_ptas_geoareaid_value");

                entity.Property(e => e.PtasGeoneighborhoodidValue).HasColumnName("_ptas_geoneighborhoodid_value");

                entity.Property(e => e.PtasGimblended)
                    .HasColumnName("ptas_gimblended")
                    .HasColumnType("money");

                entity.Property(e => e.PtasGimminusvacantland)
                    .HasColumnName("ptas_gimminusvacantland")
                    .HasColumnType("money");

                entity.Property(e => e.PtasGimminusvacantlandBase)
                    .HasColumnName("ptas_gimminusvacantland_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasGovernmentowned).HasColumnName("ptas_governmentowned");

                entity.Property(e => e.PtasGrossincomemultiplervaluegim)
                    .HasColumnName("ptas_grossincomemultiplervaluegim")
                    .HasColumnType("money");

                entity.Property(e => e.PtasGrossincomemultiplervaluegimBase)
                    .HasColumnName("ptas_grossincomemultiplervaluegim_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasHoldout).HasColumnName("ptas_holdout");

                entity.Property(e => e.PtasIncomevalue)
                    .HasColumnName("ptas_incomevalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomevalueBase)
                    .HasColumnName("ptas_incomevalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomevalueminusvacantland)
                    .HasColumnName("ptas_incomevalueminusvacantland")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomevalueminusvacantlandBase)
                    .HasColumnName("ptas_incomevalueminusvacantland_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomevalueperunit)
                    .HasColumnName("ptas_incomevalueperunit")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomevalueperunitBase)
                    .HasColumnName("ptas_incomevalueperunit_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomevaluetopreviousvalue)
                    .HasColumnName("ptas_incomevaluetopreviousvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomeweight)
                    .HasColumnName("ptas_incomeweight")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLevycodeidValue).HasColumnName("_ptas_levycodeid_value");

                entity.Property(e => e.PtasManualvalue)
                    .HasColumnName("ptas_manualvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasManualvalueBase)
                    .HasColumnName("ptas_manualvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasMooragecovered).HasColumnName("ptas_mooragecovered");

                entity.Property(e => e.PtasMoorageopen).HasColumnName("ptas_moorageopen");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNeighborhoodrank)
                    .HasColumnName("ptas_neighborhoodrank")
                    .HasColumnType("money");

                entity.Property(e => e.PtasNetincome)
                    .HasColumnName("ptas_netincome")
                    .HasColumnType("money");

                entity.Property(e => e.PtasNetincomeBase)
                    .HasColumnName("ptas_netincome_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasNumberofparcelsinsale).HasColumnName("ptas_numberofparcelsinsale");

                entity.Property(e => e.PtasNumberofunits).HasColumnName("ptas_numberofunits");

                entity.Property(e => e.PtasOmmercialoex)
                    .HasColumnName("ptas_ommercialoex")
                    .HasColumnType("money");

                entity.Property(e => e.PtasOmmercialoexBase)
                    .HasColumnName("ptas_ommercialoex_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasOtherincome)
                    .HasColumnName("ptas_otherincome")
                    .HasColumnType("money");

                entity.Property(e => e.PtasOtherincomeBase)
                    .HasColumnName("ptas_otherincome_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasParcelidValue).HasColumnName("_ptas_parcelid_value");

                entity.Property(e => e.PtasParkingcoveredsecured).HasColumnName("ptas_parkingcoveredsecured");

                entity.Property(e => e.PtasParkingcoveredunsecured).HasColumnName("ptas_parkingcoveredunsecured");

                entity.Property(e => e.PtasParkingopensecured).HasColumnName("ptas_parkingopensecured");

                entity.Property(e => e.PtasParkingopenunsecured).HasColumnName("ptas_parkingopenunsecured");

                entity.Property(e => e.PtasPercentcommercial)
                    .HasColumnName("ptas_percentcommercial")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPercenttax)
                    .HasColumnName("ptas_percenttax")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPercentwithview).HasColumnName("ptas_percentwithview");

                entity.Property(e => e.PtasPermits).HasColumnName("ptas_permits");

                entity.Property(e => e.PtasPool).HasColumnName("ptas_pool");

                entity.Property(e => e.PtasPotentialgrossincome)
                    .HasColumnName("ptas_potentialgrossincome")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPotentialgrossincomeBase)
                    .HasColumnName("ptas_potentialgrossincome_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPresentuse).HasColumnName("ptas_presentuse");

                entity.Property(e => e.PtasPreviousselectedmethod).HasColumnName("ptas_previousselectedmethod");

                entity.Property(e => e.PtasPrevioustotalvalue)
                    .HasColumnName("ptas_previoustotalvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPrevioustotalvalueBase)
                    .HasColumnName("ptas_previoustotalvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasProjectidValue).HasColumnName("_ptas_projectid_value");

                entity.Property(e => e.PtasPropertyname).HasColumnName("ptas_propertyname");

                entity.Property(e => e.PtasPropertytypeidValue).HasColumnName("_ptas_propertytypeid_value");

                entity.Property(e => e.PtasRecommendedselectmethod).HasColumnName("ptas_recommendedselectmethod");

                entity.Property(e => e.PtasRecommendedvalue)
                    .HasColumnName("ptas_recommendedvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRecommendedvalueBase)
                    .HasColumnName("ptas_recommendedvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRecommendedvaluetopreviousvalue)
                    .HasColumnName("ptas_recommendedvaluetopreviousvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRegion).HasColumnName("ptas_region");

                entity.Property(e => e.PtasRentRoommarketrent)
                    .HasColumnName("ptas_rent_roommarketrent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRentRoommarketrentBase)
                    .HasColumnName("ptas_rent_roommarketrent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRentStudiocount).HasColumnName("ptas_rent_studiocount");

                entity.Property(e => e.PtasRents1bedroom1bathMarketrent)
                    .HasColumnName("ptas_rents_1bedroom1bath_marketrent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRents1bedroom1bathMarketrentBase)
                    .HasColumnName("ptas_rents_1bedroom1bath_marketrent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRents1bedroom1bathavgsqft).HasColumnName("ptas_rents_1bedroom1bathavgsqft");

                entity.Property(e => e.PtasRents1bedroom1bathcomprent)
                    .HasColumnName("ptas_rents_1bedroom1bathcomprent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRents1bedroom1bathcomprentBase)
                    .HasColumnName("ptas_rents_1bedroom1bathcomprent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRents1bedroom1bathcount).HasColumnName("ptas_rents_1bedroom1bathcount");

                entity.Property(e => e.PtasRents2bedroom1bathavgsqft).HasColumnName("ptas_rents_2bedroom1bathavgsqft");

                entity.Property(e => e.PtasRents2bedroom1bathcomprent)
                    .HasColumnName("ptas_rents_2bedroom1bathcomprent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRents2bedroom1bathcomprentBase)
                    .HasColumnName("ptas_rents_2bedroom1bathcomprent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRents2bedroom1bathcount).HasColumnName("ptas_rents_2bedroom1bathcount");

                entity.Property(e => e.PtasRents2bedroom1bathmarketrent)
                    .HasColumnName("ptas_rents_2bedroom1bathmarketrent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRents2bedroom1bathmarketrentBase)
                    .HasColumnName("ptas_rents_2bedroom1bathmarketrent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRents2bedroom2bathavgsqft).HasColumnName("ptas_rents_2bedroom2bathavgsqft");

                entity.Property(e => e.PtasRents2bedroom2bathcomprent)
                    .HasColumnName("ptas_rents_2bedroom2bathcomprent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRents2bedroom2bathcomprentBase)
                    .HasColumnName("ptas_rents_2bedroom2bathcomprent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRents2bedroom2bathcount).HasColumnName("ptas_rents_2bedroom2bathcount");

                entity.Property(e => e.PtasRents2bedroom2bathmarketrent)
                    .HasColumnName("ptas_rents_2bedroom2bathmarketrent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRents2bedroom2bathmarketrentBase)
                    .HasColumnName("ptas_rents_2bedroom2bathmarketrent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRents3bedroom1bathavgsqft).HasColumnName("ptas_rents_3bedroom1bathavgsqft");

                entity.Property(e => e.PtasRents3bedroom1bathcomprent)
                    .HasColumnName("ptas_rents_3bedroom1bathcomprent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRents3bedroom1bathcomprentBase)
                    .HasColumnName("ptas_rents_3bedroom1bathcomprent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRents3bedroom1bathcount).HasColumnName("ptas_rents_3bedroom1bathcount");

                entity.Property(e => e.PtasRents3bedroom1bathmarketrent)
                    .HasColumnName("ptas_rents_3bedroom1bathmarketrent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRents3bedroom1bathmarketrentBase)
                    .HasColumnName("ptas_rents_3bedroom1bathmarketrent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRents3bedroom2bathavgsqft).HasColumnName("ptas_rents_3bedroom2bathavgsqft");

                entity.Property(e => e.PtasRents3bedroom2bathcomprent)
                    .HasColumnName("ptas_rents_3bedroom2bathcomprent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRents3bedroom2bathcomprentBase)
                    .HasColumnName("ptas_rents_3bedroom2bathcomprent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRents3bedroom2bathcount).HasColumnName("ptas_rents_3bedroom2bathcount");

                entity.Property(e => e.PtasRents3bedroom2bathmarketrent)
                    .HasColumnName("ptas_rents_3bedroom2bathmarketrent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRents3bedroom2bathmarketrentBase)
                    .HasColumnName("ptas_rents_3bedroom2bathmarketrent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRents3bedroom3bathavgsqft).HasColumnName("ptas_rents_3bedroom3bathavgsqft");

                entity.Property(e => e.PtasRents3bedroom3bathcomprent)
                    .HasColumnName("ptas_rents_3bedroom3bathcomprent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRents3bedroom3bathcomprentBase)
                    .HasColumnName("ptas_rents_3bedroom3bathcomprent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRents3bedroom3bathcount).HasColumnName("ptas_rents_3bedroom3bathcount");

                entity.Property(e => e.PtasRents3bedroom3bathmarketrent)
                    .HasColumnName("ptas_rents_3bedroom3bathmarketrent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRents3bedroom3bathmarketrentBase)
                    .HasColumnName("ptas_rents_3bedroom3bathmarketrent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRents4bedroomavgsqft).HasColumnName("ptas_rents_4bedroomavgsqft");

                entity.Property(e => e.PtasRents4bedroomcomprent)
                    .HasColumnName("ptas_rents_4bedroomcomprent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRents4bedroomcomprentBase)
                    .HasColumnName("ptas_rents_4bedroomcomprent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRents4bedroomcount).HasColumnName("ptas_rents_4bedroomcount");

                entity.Property(e => e.PtasRents4bedroommarketrent)
                    .HasColumnName("ptas_rents_4bedroommarketrent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRents4bedroommarketrentBase)
                    .HasColumnName("ptas_rents_4bedroommarketrent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRents5bedroomplusavgsqft).HasColumnName("ptas_rents_5bedroomplusavgsqft");

                entity.Property(e => e.PtasRents5bedroompluscomprent)
                    .HasColumnName("ptas_rents_5bedroompluscomprent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRents5bedroompluscomprentBase)
                    .HasColumnName("ptas_rents_5bedroompluscomprent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRents5bedroompluscount).HasColumnName("ptas_rents_5bedroompluscount");

                entity.Property(e => e.PtasRents5bedroomplusmarketrent)
                    .HasColumnName("ptas_rents_5bedroomplusmarketrent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRents5bedroomplusmarketrentBase)
                    .HasColumnName("ptas_rents_5bedroomplusmarketrent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRentsMarketrent)
                    .HasColumnName("ptas_rents_marketrent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRentsMarketrentBase)
                    .HasColumnName("ptas_rents_marketrent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRentsOpen1bedroomMarketrent)
                    .HasColumnName("ptas_rents_open1bedroom_marketrent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRentsOpen1bedroomMarketrentBase)
                    .HasColumnName("ptas_rents_open1bedroom_marketrent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRentsOpen1bedroomavgsqft).HasColumnName("ptas_rents_open1bedroomavgsqft");

                entity.Property(e => e.PtasRentsOpen1bedroomcomprent)
                    .HasColumnName("ptas_rents_open1bedroomcomprent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRentsOpen1bedroomcomprentBase)
                    .HasColumnName("ptas_rents_open1bedroomcomprent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRentsOpen1bedroomcount).HasColumnName("ptas_rents_open1bedroomcount");

                entity.Property(e => e.PtasRentsRoomavgsqft).HasColumnName("ptas_rents_roomavgsqft");

                entity.Property(e => e.PtasRentsRoomcomprent)
                    .HasColumnName("ptas_rents_roomcomprent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRentsRoomcomprentBase)
                    .HasColumnName("ptas_rents_roomcomprent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRentsRoomcount).HasColumnName("ptas_rents_roomcount");

                entity.Property(e => e.PtasRentsStudioavgsqft).HasColumnName("ptas_rents_studioavgsqft");

                entity.Property(e => e.PtasRentsStudiocomprent)
                    .HasColumnName("ptas_rents_studiocomprent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRentsStudiocomprentBase)
                    .HasColumnName("ptas_rents_studiocomprent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRentsStudiomarketrent)
                    .HasColumnName("ptas_rents_studiomarketrent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRentsStudiomarketrentBase)
                    .HasColumnName("ptas_rents_studiomarketrent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasResponsibilityapplgroupValue).HasColumnName("_ptas_responsibilityapplgroup_value");

                entity.Property(e => e.PtasSaleddate).HasColumnName("ptas_saleddate");

                entity.Property(e => e.PtasSaleprice)
                    .HasColumnName("ptas_saleprice")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSalepriceBase)
                    .HasColumnName("ptas_saleprice_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSpecialtyareaValue).HasColumnName("_ptas_specialtyarea_value");

                entity.Property(e => e.PtasSupergroupValue).HasColumnName("_ptas_supergroup_value");

                entity.Property(e => e.PtasTenantpaidheat).HasColumnName("ptas_tenantpaidheat");

                entity.Property(e => e.PtasTotalapartmentmarketrent)
                    .HasColumnName("ptas_totalapartmentmarketrent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalapartmentmarketrentBase)
                    .HasColumnName("ptas_totalapartmentmarketrent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalexpenses)
                    .HasColumnName("ptas_totalexpenses")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalexpensesBase)
                    .HasColumnName("ptas_totalexpenses_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalexpensespercent)
                    .HasColumnName("ptas_totalexpensespercent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTrendedprice)
                    .HasColumnName("ptas_trendedprice")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTrendedpriceBase)
                    .HasColumnName("ptas_trendedprice_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTrendedpriceperunit)
                    .HasColumnName("ptas_trendedpriceperunit")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTrendedpriceperunitBase)
                    .HasColumnName("ptas_trendedpriceperunit_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasUnitsizefactor)
                    .HasColumnName("ptas_unitsizefactor")
                    .HasColumnType("money");

                entity.Property(e => e.PtasUpdatedbyidValue).HasColumnName("_ptas_updatedbyid_value");

                entity.Property(e => e.PtasVacancyandcreditloss)
                    .HasColumnName("ptas_vacancyandcreditloss")
                    .HasColumnType("money");

                entity.Property(e => e.PtasValueestimatesupdated).HasColumnName("ptas_valueestimatesupdated");

                entity.Property(e => e.PtasValueestimateupdatedate).HasColumnName("ptas_valueestimateupdatedate");

                entity.Property(e => e.PtasViewrank)
                    .HasColumnName("ptas_viewrank")
                    .HasColumnType("money");

                entity.Property(e => e.PtasWeightedvalue)
                    .HasColumnName("ptas_weightedvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasWeightedvalueBase)
                    .HasColumnName("ptas_weightedvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasWeightedvalueminusvacantland)
                    .HasColumnName("ptas_weightedvalueminusvacantland")
                    .HasColumnType("money");

                entity.Property(e => e.PtasWeightedvalueminusvacantlandBase)
                    .HasColumnName("ptas_weightedvalueminusvacantland_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasWeightedvalueperunit)
                    .HasColumnName("ptas_weightedvalueperunit")
                    .HasColumnType("money");

                entity.Property(e => e.PtasWeightedvalueperunitBase)
                    .HasColumnName("ptas_weightedvalueperunit_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasWeightedvaluetopreviousvalue)
                    .HasColumnName("ptas_weightedvaluetopreviousvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasYearbuilt).HasColumnName("ptas_yearbuilt");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAptvaluationCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptvaluation_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptvaluationCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptvaluation_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAptvaluationModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptvaluation_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptvaluationModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptvaluation_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasAptvaluation)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_aptvaluation_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasAptvaluationOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_aptvaluation_owninguser");

                entity.HasOne(d => d.PtasAppraiseridValueNavigation)
                    .WithMany(p => p.PtasAptvaluationPtasAppraiseridValueNavigation)
                    .HasForeignKey(d => d.PtasAppraiseridValue)
                    .HasConstraintName("FK_systemuser_ptas_aptvaluation_ptas_appraiserid");

                entity.HasOne(d => d.PtasAptneighborhoodidValueNavigation)
                    .WithMany(p => p.PtasAptvaluation)
                    .HasForeignKey(d => d.PtasAptneighborhoodidValue)
                    .HasConstraintName("FK_ptas_aptneighborhood_ptas_aptvaluation_ptas_aptneighborhoodid");

                entity.HasOne(d => d.PtasAptvaluationprojectidValueNavigation)
                    .WithMany(p => p.PtasAptvaluation)
                    .HasForeignKey(d => d.PtasAptvaluationprojectidValue)
                    .HasConstraintName("FK_ptas_aptvaluationproject_ptas_aptvaluation_ptas_aptvaluationprojectid");

                entity.HasOne(d => d.PtasAssessmentyearlookupidValueNavigation)
                    .WithMany(p => p.PtasAptvaluation)
                    .HasForeignKey(d => d.PtasAssessmentyearlookupidValue)
                    .HasConstraintName("FK_ptas_year_ptas_aptvaluation_ptas_assessmentyearlookupid");

                entity.HasOne(d => d.PtasEconomicunitidValueNavigation)
                    .WithMany(p => p.PtasAptvaluation)
                    .HasForeignKey(d => d.PtasEconomicunitidValue)
                    .HasConstraintName("FK_ptas_economicunit_ptas_aptvaluation_ptas_economicunitid");

                entity.HasOne(d => d.PtasGeoareaidValueNavigation)
                    .WithMany(p => p.PtasAptvaluation)
                    .HasForeignKey(d => d.PtasGeoareaidValue)
                    .HasConstraintName("FK_ptas_geoarea_ptas_aptvaluation_ptas_geoareaid");

                entity.HasOne(d => d.PtasGeoneighborhoodidValueNavigation)
                    .WithMany(p => p.PtasAptvaluation)
                    .HasForeignKey(d => d.PtasGeoneighborhoodidValue)
                    .HasConstraintName("FK_ptas_geoneighborhood_ptas_aptvaluation_ptas_geoneighborhoodid");

                entity.HasOne(d => d.PtasLevycodeidValueNavigation)
                    .WithMany(p => p.PtasAptvaluation)
                    .HasForeignKey(d => d.PtasLevycodeidValue)
                    .HasConstraintName("FK_ptas_levycode_ptas_aptvaluation_ptas_levycodeid");

                entity.HasOne(d => d.PtasParcelidValueNavigation)
                    .WithMany(p => p.PtasAptvaluation)
                    .HasForeignKey(d => d.PtasParcelidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_aptvaluation_ptas_parcelid");

                entity.HasOne(d => d.PtasProjectidValueNavigation)
                    .WithMany(p => p.PtasAptvaluation)
                    .HasForeignKey(d => d.PtasProjectidValue)
                    .HasConstraintName("FK_ptas_condocomplex_ptas_aptvaluation_ptas_projectid");

                entity.HasOne(d => d.PtasPropertytypeidValueNavigation)
                    .WithMany(p => p.PtasAptvaluation)
                    .HasForeignKey(d => d.PtasPropertytypeidValue)
                    .HasConstraintName("FK_ptas_propertytype_ptas_aptvaluation_ptas_propertytypeid");

                entity.HasOne(d => d.PtasResponsibilityapplgroupValueNavigation)
                    .WithMany(p => p.PtasAptvaluation)
                    .HasForeignKey(d => d.PtasResponsibilityapplgroupValue)
                    .HasConstraintName("FK_ptas_responsibility_ptas_aptvaluation_ptas_responsibilityapplgroup");

                entity.HasOne(d => d.PtasSpecialtyareaValueNavigation)
                    .WithMany(p => p.PtasAptvaluation)
                    .HasForeignKey(d => d.PtasSpecialtyareaValue)
                    .HasConstraintName("FK_ptas_specialtyarea_ptas_aptvaluation_ptas_specialtyarea");

                entity.HasOne(d => d.PtasSupergroupValueNavigation)
                    .WithMany(p => p.PtasAptvaluation)
                    .HasForeignKey(d => d.PtasSupergroupValue)
                    .HasConstraintName("FK_ptas_supergroup_ptas_aptvaluation_ptas_supergroup");

                entity.HasOne(d => d.PtasUpdatedbyidValueNavigation)
                    .WithMany(p => p.PtasAptvaluationPtasUpdatedbyidValueNavigation)
                    .HasForeignKey(d => d.PtasUpdatedbyidValue)
                    .HasConstraintName("FK_systemuser_ptas_aptvaluation_ptas_updatedbyid");
            });

            modelBuilder.Entity<PtasAptvaluationproject>(entity =>
            {
                entity.ToTable("ptas_aptvaluationproject", "dynamics");

                entity.Property(e => e.PtasAptvaluationprojectid)
                    .HasColumnName("ptas_aptvaluationprojectid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasApartmentneighborhood).HasColumnName("ptas_apartmentneighborhood");

                entity.Property(e => e.PtasApartmentregressionprojecturl).HasColumnName("ptas_apartmentregressionprojecturl");

                entity.Property(e => e.PtasAssessmentyear).HasColumnName("ptas_assessmentyear");

                entity.Property(e => e.PtasAssessmentyearlookupidValue).HasColumnName("_ptas_assessmentyearlookupid_value");

                entity.Property(e => e.PtasComparablesalesapproachran).HasColumnName("ptas_comparablesalesapproachran");

                entity.Property(e => e.PtasComparablesalesweight)
                    .HasColumnName("ptas_comparablesalesweight")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEmvapproachran).HasColumnName("ptas_emvapproachran");

                entity.Property(e => e.PtasEmvweight)
                    .HasColumnName("ptas_emvweight")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomeapproachran).HasColumnName("ptas_incomeapproachran");

                entity.Property(e => e.PtasIncomeweight)
                    .HasColumnName("ptas_incomeweight")
                    .HasColumnType("money");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasRentcompenddate).HasColumnName("ptas_rentcompenddate");

                entity.Property(e => e.PtasRentcompstartdate).HasColumnName("ptas_rentcompstartdate");

                entity.Property(e => e.PtasRentregressionenddate).HasColumnName("ptas_rentregressionenddate");

                entity.Property(e => e.PtasRentregressionstartdate).HasColumnName("ptas_rentregressionstartdate");

                entity.Property(e => e.PtasSalecompenddate).HasColumnName("ptas_salecompenddate");

                entity.Property(e => e.PtasSalecompstartdate).HasColumnName("ptas_salecompstartdate");

                entity.Property(e => e.PtasSaleregressionenddate).HasColumnName("ptas_saleregressionenddate");

                entity.Property(e => e.PtasSaleregressionstartdate).HasColumnName("ptas_saleregressionstartdate");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAptvaluationprojectCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptvaluationproject_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptvaluationprojectCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptvaluationproject_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAptvaluationprojectModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptvaluationproject_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptvaluationprojectModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptvaluationproject_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasAptvaluationproject)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_aptvaluationproject_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasAptvaluationprojectOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_aptvaluationproject_owninguser");

                entity.HasOne(d => d.PtasAssessmentyearlookupidValueNavigation)
                    .WithMany(p => p.PtasAptvaluationproject)
                    .HasForeignKey(d => d.PtasAssessmentyearlookupidValue)
                    .HasConstraintName("FK_ptas_year_ptas_aptvaluationproject_ptas_assessmentyearlookupid");
            });

            modelBuilder.Entity<PtasAptviewqualityadjustment>(entity =>
            {
                entity.ToTable("ptas_aptviewqualityadjustment", "dynamics");

                entity.Property(e => e.PtasAptviewqualityadjustmentid)
                    .HasColumnName("ptas_aptviewqualityadjustmentid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasAptviewquality).HasColumnName("ptas_aptviewquality");

                entity.Property(e => e.PtasAssessmentyear).HasColumnName("ptas_assessmentyear");

                entity.Property(e => e.PtasAssessmentyearlookupidValue).HasColumnName("_ptas_assessmentyearlookupid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasViewqualityadjustment)
                    .HasColumnName("ptas_viewqualityadjustment")
                    .HasColumnType("money");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAptviewqualityadjustmentCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptviewqualityadjustment_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptviewqualityadjustmentCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptviewqualityadjustment_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAptviewqualityadjustmentModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptviewqualityadjustment_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptviewqualityadjustmentModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptviewqualityadjustment_modifiedonbehalfby");

                entity.HasOne(d => d.PtasAssessmentyearlookupidValueNavigation)
                    .WithMany(p => p.PtasAptviewqualityadjustment)
                    .HasForeignKey(d => d.PtasAssessmentyearlookupidValue)
                    .HasConstraintName("FK_ptas_year_ptas_aptviewqualityadjustment_ptas_assessmentyearlookupid");
            });

            modelBuilder.Entity<PtasAptviewrankadjustment>(entity =>
            {
                entity.ToTable("ptas_aptviewrankadjustment", "dynamics");

                entity.Property(e => e.PtasAptviewrankadjustmentid)
                    .HasColumnName("ptas_aptviewrankadjustmentid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAssessmentyear).HasColumnName("ptas_assessmentyear");

                entity.Property(e => e.PtasAssessmentyearlookupidValue).HasColumnName("_ptas_assessmentyearlookupid_value");

                entity.Property(e => e.PtasCaprateviewadjustmentcoefficient)
                    .HasColumnName("ptas_caprateviewadjustmentcoefficient")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCaprateviewadjustmentintercept)
                    .HasColumnName("ptas_caprateviewadjustmentintercept")
                    .HasColumnType("money");

                entity.Property(e => e.PtasGimviewadjsutmentcoefficient)
                    .HasColumnName("ptas_gimviewadjsutmentcoefficient")
                    .HasColumnType("money");

                entity.Property(e => e.PtasGimviewadjustmentintercept)
                    .HasColumnName("ptas_gimviewadjustmentintercept")
                    .HasColumnType("money");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAptviewrankadjustmentCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptviewrankadjustment_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptviewrankadjustmentCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptviewrankadjustment_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAptviewrankadjustmentModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptviewrankadjustment_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptviewrankadjustmentModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptviewrankadjustment_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasAptviewrankadjustment)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_aptviewrankadjustment_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasAptviewrankadjustmentOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_aptviewrankadjustment_owninguser");

                entity.HasOne(d => d.PtasAssessmentyearlookupidValueNavigation)
                    .WithMany(p => p.PtasAptviewrankadjustment)
                    .HasForeignKey(d => d.PtasAssessmentyearlookupidValue)
                    .HasConstraintName("FK_ptas_year_ptas_aptviewrankadjustment_ptas_assessmentyearlookupid");
            });

            modelBuilder.Entity<PtasAptviewtypeadjustment>(entity =>
            {
                entity.ToTable("ptas_aptviewtypeadjustment", "dynamics");

                entity.Property(e => e.PtasAptviewtypeadjustmentid)
                    .HasColumnName("ptas_aptviewtypeadjustmentid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasAssessmentyear).HasColumnName("ptas_assessmentyear");

                entity.Property(e => e.PtasAssessmentyearlookupidValue).HasColumnName("_ptas_assessmentyearlookupid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasViewtype).HasColumnName("ptas_viewtype");

                entity.Property(e => e.PtasViewtypeadjustment)
                    .HasColumnName("ptas_viewtypeadjustment")
                    .HasColumnType("money");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAptviewtypeadjustmentCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptviewtypeadjustment_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptviewtypeadjustmentCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptviewtypeadjustment_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAptviewtypeadjustmentModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptviewtypeadjustment_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptviewtypeadjustmentModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptviewtypeadjustment_modifiedonbehalfby");

                entity.HasOne(d => d.PtasAssessmentyearlookupidValueNavigation)
                    .WithMany(p => p.PtasAptviewtypeadjustment)
                    .HasForeignKey(d => d.PtasAssessmentyearlookupidValue)
                    .HasConstraintName("FK_ptas_year_ptas_aptviewtypeadjustment_ptas_assessmentyearlookupid");
            });

            modelBuilder.Entity<PtasAptyearbuiltadjustment>(entity =>
            {
                entity.ToTable("ptas_aptyearbuiltadjustment", "dynamics");

                entity.Property(e => e.PtasAptyearbuiltadjustmentid)
                    .HasColumnName("ptas_aptyearbuiltadjustmentid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAssessmentyear).HasColumnName("ptas_assessmentyear");

                entity.Property(e => e.PtasAssessmentyearlookupidValue).HasColumnName("_ptas_assessmentyearlookupid_value");

                entity.Property(e => e.PtasMaxyearbuilt).HasColumnName("ptas_maxyearbuilt");

                entity.Property(e => e.PtasMinyearbuilt).HasColumnName("ptas_minyearbuilt");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasRentscoefficient)
                    .HasColumnName("ptas_rentscoefficient")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSalescoefficient)
                    .HasColumnName("ptas_salescoefficient")
                    .HasColumnType("money");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAptyearbuiltadjustmentCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptyearbuiltadjustment_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptyearbuiltadjustmentCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptyearbuiltadjustment_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAptyearbuiltadjustmentModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptyearbuiltadjustment_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAptyearbuiltadjustmentModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_aptyearbuiltadjustment_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasAptyearbuiltadjustment)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_aptyearbuiltadjustment_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasAptyearbuiltadjustmentOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_aptyearbuiltadjustment_owninguser");

                entity.HasOne(d => d.PtasAssessmentyearlookupidValueNavigation)
                    .WithMany(p => p.PtasAptyearbuiltadjustment)
                    .HasForeignKey(d => d.PtasAssessmentyearlookupidValue)
                    .HasConstraintName("FK_ptas_year_ptas_aptyearbuiltadjustment_ptas_assessmentyearlookupid");
            });

            modelBuilder.Entity<PtasArcreasoncode>(entity =>
            {
                entity.ToTable("ptas_arcreasoncode", "dynamics");

                entity.Property(e => e.PtasArcreasoncodeid)
                    .HasColumnName("ptas_arcreasoncodeid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasReasoncodedescription).HasColumnName("ptas_reasoncodedescription");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasArcreasoncodeCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_arcreasoncode_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasArcreasoncodeCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_arcreasoncode_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasArcreasoncodeModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_arcreasoncode_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasArcreasoncodeModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_arcreasoncode_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasArcreasoncode)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_arcreasoncode_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasArcreasoncodeOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_arcreasoncode_owninguser");
            });

            modelBuilder.Entity<PtasArea>(entity =>
            {
                entity.ToTable("ptas_area", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_area_modifiedon");

                entity.Property(e => e.PtasAreaid)
                    .HasColumnName("ptas_areaid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasAppraiseridValue).HasColumnName("_ptas_appraiserid_value");

                entity.Property(e => e.PtasAreanumber).HasColumnName("ptas_areanumber");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasDistrict).HasColumnName("ptas_district");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasResidentialappraiserteamValue).HasColumnName("_ptas_residentialappraiserteam_value");

                entity.Property(e => e.PtasSeniorappraiserValue).HasColumnName("_ptas_seniorappraiser_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAreaCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_area_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAreaCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_area_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAreaModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_area_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAreaModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_area_modifiedonbehalfby");

                entity.HasOne(d => d.PtasAppraiseridValueNavigation)
                    .WithMany(p => p.PtasAreaPtasAppraiseridValueNavigation)
                    .HasForeignKey(d => d.PtasAppraiseridValue)
                    .HasConstraintName("FK_systemuser_ptas_area_ptas_appraiserid");

                entity.HasOne(d => d.PtasResidentialappraiserteamValueNavigation)
                    .WithMany(p => p.PtasArea)
                    .HasForeignKey(d => d.PtasResidentialappraiserteamValue)
                    .HasConstraintName("FK_ptas_residentialappraiserteam_ptas_area_ptas_residentialappraiserteam");

                entity.HasOne(d => d.PtasSeniorappraiserValueNavigation)
                    .WithMany(p => p.PtasAreaPtasSeniorappraiserValueNavigation)
                    .HasForeignKey(d => d.PtasSeniorappraiserValue)
                    .HasConstraintName("FK_systemuser_ptas_area_ptas_seniorappraiser");
            });

            modelBuilder.Entity<PtasAssessmentreviewstatus>(entity =>
            {
                entity.ToTable("ptas_assessmentreviewstatus", "dynamics");

                entity.Property(e => e.PtasAssessmentreviewstatusid)
                    .HasColumnName("ptas_assessmentreviewstatusid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasAbbreviation).HasColumnName("ptas_abbreviation");

                entity.Property(e => e.PtasItemid).HasColumnName("ptas_itemid");

                entity.Property(e => e.PtasLongdescription).HasColumnName("ptas_longdescription");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasTypeid).HasColumnName("ptas_typeid");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasAssessmentrollcorrection>(entity =>
            {
                entity.ToTable("ptas_assessmentrollcorrection", "dynamics");

                entity.Property(e => e.PtasAssessmentrollcorrectionid)
                    .HasColumnName("ptas_assessmentrollcorrectionid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasApprovalappraiseridValue).HasColumnName("_ptas_approvalappraiserid_value");

                entity.Property(e => e.PtasApprovaldate).HasColumnName("ptas_approvaldate");

                entity.Property(e => e.PtasApprovearc).HasColumnName("ptas_approvearc");

                entity.Property(e => e.PtasAssessmenthistoryidValue).HasColumnName("_ptas_assessmenthistoryid_value");

                entity.Property(e => e.PtasAssessmentyearidValue).HasColumnName("_ptas_assessmentyearid_value");

                entity.Property(e => e.PtasBilldifference)
                    .HasColumnName("ptas_billdifference")
                    .HasColumnType("money");

                entity.Property(e => e.PtasBilldifferenceBase)
                    .HasColumnName("ptas_billdifference_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDatesubmitted).HasColumnName("ptas_datesubmitted");

                entity.Property(e => e.PtasLevycodeidValue).HasColumnName("_ptas_levycodeid_value");

                entity.Property(e => e.PtasLevyrate)
                    .HasColumnName("ptas_levyrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNewbill)
                    .HasColumnName("ptas_newbill")
                    .HasColumnType("money");

                entity.Property(e => e.PtasNewbillBase)
                    .HasColumnName("ptas_newbill_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasNewpenaltyamount)
                    .HasColumnName("ptas_newpenaltyamount")
                    .HasColumnType("money");

                entity.Property(e => e.PtasNewpenaltyamountBase)
                    .HasColumnName("ptas_newpenaltyamount_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasNewpenaltypercent).HasColumnName("ptas_newpenaltypercent");

                entity.Property(e => e.PtasNewvalue)
                    .HasColumnName("ptas_newvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasNewvalueBase)
                    .HasColumnName("ptas_newvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasOktopost).HasColumnName("ptas_oktopost");

                entity.Property(e => e.PtasOldbill)
                    .HasColumnName("ptas_oldbill")
                    .HasColumnType("money");

                entity.Property(e => e.PtasOldbillBase)
                    .HasColumnName("ptas_oldbill_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasOldpenaltyamount)
                    .HasColumnName("ptas_oldpenaltyamount")
                    .HasColumnType("money");

                entity.Property(e => e.PtasOldpenaltyamountBase)
                    .HasColumnName("ptas_oldpenaltyamount_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasOldpenaltypercent).HasColumnName("ptas_oldpenaltypercent");

                entity.Property(e => e.PtasOldvalue)
                    .HasColumnName("ptas_oldvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasOldvalueBase)
                    .HasColumnName("ptas_oldvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasOrdernumber).HasColumnName("ptas_ordernumber");

                entity.Property(e => e.PtasPaidamount)
                    .HasColumnName("ptas_paidamount")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPaidamountBase)
                    .HasColumnName("ptas_paidamount_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPaiddate).HasColumnName("ptas_paiddate");

                entity.Property(e => e.PtasPersonalpropertyaccountidValue).HasColumnName("_ptas_personalpropertyaccountid_value");

                entity.Property(e => e.PtasPetitionnumber).HasColumnName("ptas_petitionnumber");

                entity.Property(e => e.PtasPostedbyidValue).HasColumnName("_ptas_postedbyid_value");

                entity.Property(e => e.PtasPosteddate).HasColumnName("ptas_posteddate");

                entity.Property(e => e.PtasReasoncodeidValue).HasColumnName("_ptas_reasoncodeid_value");

                entity.Property(e => e.PtasReceipt1)
                    .HasColumnName("ptas_receipt1")
                    .HasColumnType("money");

                entity.Property(e => e.PtasReceipt1Base)
                    .HasColumnName("ptas_receipt1_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasReceipt2)
                    .HasColumnName("ptas_receipt2")
                    .HasColumnType("money");

                entity.Property(e => e.PtasReceipt2Base)
                    .HasColumnName("ptas_receipt2_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasReferencetransaction).HasColumnName("ptas_referencetransaction");

                entity.Property(e => e.PtasRefundonly).HasColumnName("ptas_refundonly");

                entity.Property(e => e.PtasResponsibleappraiseridValue).HasColumnName("_ptas_responsibleappraiserid_value");

                entity.Property(e => e.PtasSeconddate).HasColumnName("ptas_seconddate");

                entity.Property(e => e.PtasSubmitforapproval).HasColumnName("ptas_submitforapproval");

                entity.Property(e => e.PtasTrconly).HasColumnName("ptas_trconly");

                entity.Property(e => e.PtasTrcwithpreviousyearrefunds).HasColumnName("ptas_trcwithpreviousyearrefunds");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasAssessmentrollcorrectionCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_assessmentrollcorrection_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAssessmentrollcorrectionCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_assessmentrollcorrection_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasAssessmentrollcorrectionModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_assessmentrollcorrection_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasAssessmentrollcorrectionModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_assessmentrollcorrection_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasAssessmentrollcorrection)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_assessmentrollcorrection_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasAssessmentrollcorrectionOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_assessmentrollcorrection_owninguser");

                entity.HasOne(d => d.PtasApprovalappraiseridValueNavigation)
                    .WithMany(p => p.PtasAssessmentrollcorrectionPtasApprovalappraiseridValueNavigation)
                    .HasForeignKey(d => d.PtasApprovalappraiseridValue)
                    .HasConstraintName("FK_systemuser_ptas_assessmentrollcorrection_ptas_approvalappraiserid");

                entity.HasOne(d => d.PtasAssessmenthistoryidValueNavigation)
                    .WithMany(p => p.PtasAssessmentrollcorrectionNavigation)
                    .HasForeignKey(d => d.PtasAssessmenthistoryidValue)
                    .HasConstraintName("FK_ptas_personalpropertyhistory_ptas_assessmentrollcorrection_ptas_assessmenthistoryid");

                entity.HasOne(d => d.PtasAssessmentyearidValueNavigation)
                    .WithMany(p => p.PtasAssessmentrollcorrection)
                    .HasForeignKey(d => d.PtasAssessmentyearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_assessmentrollcorrection_ptas_assessmentyearid");

                entity.HasOne(d => d.PtasLevycodeidValueNavigation)
                    .WithMany(p => p.PtasAssessmentrollcorrection)
                    .HasForeignKey(d => d.PtasLevycodeidValue)
                    .HasConstraintName("FK_ptas_levycode_ptas_assessmentrollcorrection_ptas_levycodeid");

                entity.HasOne(d => d.PtasPersonalpropertyaccountidValueNavigation)
                    .WithMany(p => p.PtasAssessmentrollcorrection)
                    .HasForeignKey(d => d.PtasPersonalpropertyaccountidValue)
                    .HasConstraintName("FK_ptas_personalproperty_ptas_assessmentrollcorrection_ptas_personalpropertyaccountid");

                entity.HasOne(d => d.PtasPostedbyidValueNavigation)
                    .WithMany(p => p.PtasAssessmentrollcorrectionPtasPostedbyidValueNavigation)
                    .HasForeignKey(d => d.PtasPostedbyidValue)
                    .HasConstraintName("FK_systemuser_ptas_assessmentrollcorrection_ptas_postedbyid");

                entity.HasOne(d => d.PtasReasoncodeidValueNavigation)
                    .WithMany(p => p.PtasAssessmentrollcorrection)
                    .HasForeignKey(d => d.PtasReasoncodeidValue)
                    .HasConstraintName("FK_ptas_arcreasoncode_ptas_assessmentrollcorrection_ptas_reasoncodeid");

                entity.HasOne(d => d.PtasResponsibleappraiseridValueNavigation)
                    .WithMany(p => p.PtasAssessmentrollcorrectionPtasResponsibleappraiseridValueNavigation)
                    .HasForeignKey(d => d.PtasResponsibleappraiseridValue)
                    .HasConstraintName("FK_systemuser_ptas_assessmentrollcorrection_ptas_responsibleappraiserid");
            });

            modelBuilder.Entity<PtasBillingclassification>(entity =>
            {
                entity.ToTable("ptas_billingclassification", "dynamics");

                entity.Property(e => e.PtasBillingclassificationid)
                    .HasColumnName("ptas_billingclassificationid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasBillingclassificationgroup).HasColumnName("ptas_billingclassificationgroup");

                entity.Property(e => e.PtasBillingtype).HasColumnName("ptas_billingtype");

                entity.Property(e => e.PtasDataorigin).HasColumnName("ptas_dataorigin");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasEcommercelabel).HasColumnName("ptas_ecommercelabel");

                entity.Property(e => e.PtasInterestcode).HasColumnName("ptas_interestcode");

                entity.Property(e => e.PtasLevycodeidValue).HasColumnName("_ptas_levycodeid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasPenaltycode).HasColumnName("ptas_penaltycode");

                entity.Property(e => e.PtasYearidValue).HasColumnName("_ptas_yearid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasBillingclassificationCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_billingclassification_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasBillingclassificationCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_billingclassification_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasBillingclassificationModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_billingclassification_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasBillingclassificationModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_billingclassification_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasBillingclassification)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_billingclassification_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasBillingclassificationOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_billingclassification_owninguser");

                entity.HasOne(d => d.PtasLevycodeidValueNavigation)
                    .WithMany(p => p.PtasBillingclassification)
                    .HasForeignKey(d => d.PtasLevycodeidValue)
                    .HasConstraintName("FK_ptas_levycode_ptas_billingclassification_ptas_levycodeid");

                entity.HasOne(d => d.PtasYearidValueNavigation)
                    .WithMany(p => p.PtasBillingclassification)
                    .HasForeignKey(d => d.PtasYearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_billingclassification_ptas_yearid");
            });

            modelBuilder.Entity<PtasBillingcode>(entity =>
            {
                entity.ToTable("ptas_billingcode", "dynamics");

                entity.Property(e => e.PtasBillingcodeid)
                    .HasColumnName("ptas_billingcodeid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAllowamountchanges).HasColumnName("ptas_allowamountchanges");

                entity.Property(e => e.PtasAllowledgeraccountchanges).HasColumnName("ptas_allowledgeraccountchanges");

                entity.Property(e => e.PtasApproved).HasColumnName("ptas_approved");

                entity.Property(e => e.PtasBillingbasedon).HasColumnName("ptas_billingbasedon");

                entity.Property(e => e.PtasBillingclassificationidValue).HasColumnName("_ptas_billingclassificationid_value");

                entity.Property(e => e.PtasBillingcodeattribute).HasColumnName("ptas_billingcodeattribute");

                entity.Property(e => e.PtasBillingcodedetermines).HasColumnName("ptas_billingcodedetermines");

                entity.Property(e => e.PtasBillwhenzero).HasColumnName("ptas_billwhenzero");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasEffectivedate).HasColumnName("ptas_effectivedate");

                entity.Property(e => e.PtasFundidValue).HasColumnName("_ptas_fundid_value");

                entity.Property(e => e.PtasLevycodeidValue).HasColumnName("_ptas_levycodeid_value");

                entity.Property(e => e.PtasLevycodetype).HasColumnName("ptas_levycodetype");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasRate)
                    .HasColumnName("ptas_rate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRaterollyearspecific).HasColumnName("ptas_raterollyearspecific");

                entity.Property(e => e.PtasRatetype).HasColumnName("ptas_ratetype");

                entity.Property(e => e.PtasValidfrom)
                    .HasColumnName("ptas_validfrom")
                    .HasColumnType("datetime");

                entity.Property(e => e.PtasYearidValue).HasColumnName("_ptas_yearid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasBillingcodeCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_billingcode_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasBillingcodeCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_billingcode_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasBillingcodeModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_billingcode_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasBillingcodeModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_billingcode_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasBillingcode)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_billingcode_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasBillingcodeOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_billingcode_owninguser");

                entity.HasOne(d => d.PtasBillingclassificationidValueNavigation)
                    .WithMany(p => p.PtasBillingcode)
                    .HasForeignKey(d => d.PtasBillingclassificationidValue)
                    .HasConstraintName("FK_ptas_billingclassification_ptas_billingcode_ptas_billingclassificationid");

                entity.HasOne(d => d.PtasFundidValueNavigation)
                    .WithMany(p => p.PtasBillingcode)
                    .HasForeignKey(d => d.PtasFundidValue)
                    .HasConstraintName("FK_ptas_fund_ptas_billingcode_ptas_fundid");

                entity.HasOne(d => d.PtasLevycodeidValueNavigation)
                    .WithMany(p => p.PtasBillingcode)
                    .HasForeignKey(d => d.PtasLevycodeidValue)
                    .HasConstraintName("FK_ptas_levycode_ptas_billingcode_ptas_levycodeid");

                entity.HasOne(d => d.PtasYearidValueNavigation)
                    .WithMany(p => p.PtasBillingcode)
                    .HasForeignKey(d => d.PtasYearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_billingcode_ptas_yearid");
            });

            modelBuilder.Entity<PtasBookmark>(entity =>
            {
                entity.ToTable("ptas_bookmark", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_bookmark_modifiedon");

                entity.Property(e => e.PtasBookmarkid)
                    .HasColumnName("ptas_bookmarkid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasBookmarkdate).HasColumnName("ptas_bookmarkdate");

                entity.Property(e => e.PtasBookmarknote).HasColumnName("ptas_bookmarknote");

                entity.Property(e => e.PtasBookmarktype).HasColumnName("ptas_bookmarktype");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasParceldetailidValue).HasColumnName("_ptas_parceldetailid_value");

                entity.Property(e => e.PtasTag1Value).HasColumnName("_ptas_tag1_value");

                entity.Property(e => e.PtasTag2Value).HasColumnName("_ptas_tag2_value");

                entity.Property(e => e.PtasTag3Value).HasColumnName("_ptas_tag3_value");

                entity.Property(e => e.PtasTag4Value).HasColumnName("_ptas_tag4_value");

                entity.Property(e => e.PtasTag5Value).HasColumnName("_ptas_tag5_value");

                entity.Property(e => e.PtasTags).HasColumnName("ptas_tags");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasBookmarkCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_bookmark_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasBookmarkCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_bookmark_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasBookmarkModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_bookmark_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasBookmarkModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_bookmark_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasBookmark)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_bookmark_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasBookmarkOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_bookmark_owninguser");

                entity.HasOne(d => d.PtasParceldetailidValueNavigation)
                    .WithMany(p => p.PtasBookmark)
                    .HasForeignKey(d => d.PtasParceldetailidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_bookmark_ptas_parceldetailid");

                entity.HasOne(d => d.PtasTag1ValueNavigation)
                    .WithMany(p => p.PtasBookmarkPtasTag1ValueNavigation)
                    .HasForeignKey(d => d.PtasTag1Value)
                    .HasConstraintName("FK_ptas_bookmarktag_ptas_bookmark_ptas_tag1");

                entity.HasOne(d => d.PtasTag2ValueNavigation)
                    .WithMany(p => p.PtasBookmarkPtasTag2ValueNavigation)
                    .HasForeignKey(d => d.PtasTag2Value)
                    .HasConstraintName("FK_ptas_bookmarktag_ptas_bookmark_ptas_tag2");

                entity.HasOne(d => d.PtasTag3ValueNavigation)
                    .WithMany(p => p.PtasBookmarkPtasTag3ValueNavigation)
                    .HasForeignKey(d => d.PtasTag3Value)
                    .HasConstraintName("FK_ptas_bookmarktag_ptas_bookmark_ptas_tag3");

                entity.HasOne(d => d.PtasTag4ValueNavigation)
                    .WithMany(p => p.PtasBookmarkPtasTag4ValueNavigation)
                    .HasForeignKey(d => d.PtasTag4Value)
                    .HasConstraintName("FK_ptas_bookmarktag_ptas_bookmark_ptas_tag4");

                entity.HasOne(d => d.PtasTag5ValueNavigation)
                    .WithMany(p => p.PtasBookmarkPtasTag5ValueNavigation)
                    .HasForeignKey(d => d.PtasTag5Value)
                    .HasConstraintName("FK_ptas_bookmarktag_ptas_bookmark_ptas_tag5");
            });

            modelBuilder.Entity<PtasBookmarktag>(entity =>
            {
                entity.ToTable("ptas_bookmarktag", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_bookmarktag_modifiedon");

                entity.Property(e => e.PtasBookmarktagid)
                    .HasColumnName("ptas_bookmarktagid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasBookmarktagCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_bookmarktag_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasBookmarktagCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_bookmarktag_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasBookmarktagModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_bookmarktag_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasBookmarktagModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_bookmarktag_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasBookmarktag)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_bookmarktag_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasBookmarktagOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_bookmarktag_owninguser");
            });

            modelBuilder.Entity<PtasBuildingdetail>(entity =>
            {
                entity.ToTable("ptas_buildingdetail", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_buildingdetail_modifiedon");

                entity.HasIndex(e => new { e.PtasParceldetailidValue, e.Statecode })
                    .HasName("idx_StateCodeParceldetailId_value");

                entity.Property(e => e.PtasBuildingdetailid)
                    .HasColumnName("ptas_buildingdetailid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.Ptas12baths).HasColumnName("ptas_12baths");

                entity.Property(e => e.Ptas1stflrSqft).HasColumnName("ptas_1stflr_sqft");

                entity.Property(e => e.Ptas2ndflrSqft).HasColumnName("ptas_2ndflr_sqft");

                entity.Property(e => e.Ptas34baths).HasColumnName("ptas_34baths");

                entity.Property(e => e.PtasAdditionalcost)
                    .HasColumnName("ptas_additionalcost")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAdditionalcostBase)
                    .HasColumnName("ptas_additionalcost_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAdditionallivingquarters).HasColumnName("ptas_additionallivingquarters");

                entity.Property(e => e.PtasAddlFireplace).HasColumnName("ptas_addl_fireplace");

                entity.Property(e => e.PtasAddr1CityidValue).HasColumnName("_ptas_addr1_cityid_value");

                entity.Property(e => e.PtasAddr1Compositeaddress).HasColumnName("ptas_addr1_compositeaddress");

                entity.Property(e => e.PtasAddr1CompositeaddressOneline).HasColumnName("ptas_addr1_compositeaddress_oneline");

                entity.Property(e => e.PtasAddr1CountryidValue).HasColumnName("_ptas_addr1_countryid_value");

                entity.Property(e => e.PtasAddr1Directionprefix).HasColumnName("ptas_addr1_directionprefix");

                entity.Property(e => e.PtasAddr1Directionsuffix).HasColumnName("ptas_addr1_directionsuffix");

                entity.Property(e => e.PtasAddr1Line2).HasColumnName("ptas_addr1_line2");

                entity.Property(e => e.PtasAddr1StateidValue).HasColumnName("_ptas_addr1_stateid_value");

                entity.Property(e => e.PtasAddr1StreetnameidValue).HasColumnName("_ptas_addr1_streetnameid_value");

                entity.Property(e => e.PtasAddr1Streetnumber).HasColumnName("ptas_addr1_streetnumber");

                entity.Property(e => e.PtasAddr1Streetnumberfraction).HasColumnName("ptas_addr1_streetnumberfraction");

                entity.Property(e => e.PtasAddr1StreettypeidValue).HasColumnName("_ptas_addr1_streettypeid_value");

                entity.Property(e => e.PtasAddr1ZipcodeidValue).HasColumnName("_ptas_addr1_zipcodeid_value");

                entity.Property(e => e.PtasAlternatekey).HasColumnName("ptas_alternatekey");

                entity.Property(e => e.PtasAttachedgarageSqft).HasColumnName("ptas_attachedgarage_sqft");

                entity.Property(e => e.PtasBasementgarageSqft).HasColumnName("ptas_basementgarage_sqft");

                entity.Property(e => e.PtasBedroomnbr).HasColumnName("ptas_bedroomnbr");

                entity.Property(e => e.PtasBuildingdescription).HasColumnName("ptas_buildingdescription");

                entity.Property(e => e.PtasBuildinggrade).HasColumnName("ptas_buildinggrade");

                entity.Property(e => e.PtasBuildinggrossSqft).HasColumnName("ptas_buildinggross_sqft");

                entity.Property(e => e.PtasBuildingnbr).HasColumnName("ptas_buildingnbr");

                entity.Property(e => e.PtasBuildingnetSqft).HasColumnName("ptas_buildingnet_sqft");

                entity.Property(e => e.PtasBuildingnumber).HasColumnName("ptas_buildingnumber");

                entity.Property(e => e.PtasBuildingobsolescence).HasColumnName("ptas_buildingobsolescence");

                entity.Property(e => e.PtasBuildingquality).HasColumnName("ptas_buildingquality");

                entity.Property(e => e.PtasBuildingsectionuseidValue).HasColumnName("_ptas_buildingsectionuseid_value");

                entity.Property(e => e.PtasBuiltgreen).HasColumnName("ptas_builtgreen");

                entity.Property(e => e.PtasClearheightft).HasColumnName("ptas_clearheightft");

                entity.Property(e => e.PtasConstructionclass).HasColumnName("ptas_constructionclass");

                entity.Property(e => e.PtasCranecapacity).HasColumnName("ptas_cranecapacity");

                entity.Property(e => e.PtasCraneloading).HasColumnName("ptas_craneloading");

                entity.Property(e => e.PtasDaylightbasement).HasColumnName("ptas_daylightbasement");

                entity.Property(e => e.PtasDeckSqft).HasColumnName("ptas_deck_sqft");

                entity.Property(e => e.PtasDockloading).HasColumnName("ptas_dockloading");

                entity.Property(e => e.PtasEffectiveyear).HasColumnName("ptas_effectiveyear");

                entity.Property(e => e.PtasEffectiveyearidValue).HasColumnName("_ptas_effectiveyearid_value");

                entity.Property(e => e.PtasElevators).HasColumnName("ptas_elevators");

                entity.Property(e => e.PtasEnclosedporchSqft).HasColumnName("ptas_enclosedporch_sqft");

                entity.Property(e => e.PtasEnergyrating).HasColumnName("ptas_energyrating");

                entity.Property(e => e.PtasFinbsmtSqft).HasColumnName("ptas_finbsmt_sqft");

                entity.Property(e => e.PtasFrStdFireplace).HasColumnName("ptas_fr_std_fireplace");

                entity.Property(e => e.PtasFullbathnbr).HasColumnName("ptas_fullbathnbr");

                entity.Property(e => e.PtasFullsitusaddress).HasColumnName("ptas_fullsitusaddress");

                entity.Property(e => e.PtasGradevariance).HasColumnName("ptas_gradevariance");

                entity.Property(e => e.PtasHalfflrSqft).HasColumnName("ptas_halfflr_sqft");

                entity.Property(e => e.PtasHeatingsystem).HasColumnName("ptas_heatingsystem");

                entity.Property(e => e.PtasHistguid).HasColumnName("ptas_histguid");

                entity.Property(e => e.PtasHistyear).HasColumnName("ptas_histyear");

                entity.Property(e => e.PtasInvertedfloorplan).HasColumnName("ptas_invertedfloorplan");

                entity.Property(e => e.PtasLeaseholdbuildingm1).HasColumnName("ptas_leaseholdbuildingm1");

                entity.Property(e => e.PtasLeasingclass).HasColumnName("ptas_leasingclass");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasMasterbuildingidValue).HasColumnName("_ptas_masterbuildingid_value");

                entity.Property(e => e.PtasMigrationnote).HasColumnName("ptas_migrationnote");

                entity.Property(e => e.PtasMultiFireplace).HasColumnName("ptas_multi_fireplace");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNumberofaggregate).HasColumnName("ptas_numberofaggregate");

                entity.Property(e => e.PtasNumberofcommonwalls).HasColumnName("ptas_numberofcommonwalls");

                entity.Property(e => e.PtasNumberofelevators).HasColumnName("ptas_numberofelevators");

                entity.Property(e => e.PtasNumberofstories).HasColumnName("ptas_numberofstories");

                entity.Property(e => e.PtasNumberofstoriesdecimal)
                    .HasColumnName("ptas_numberofstoriesdecimal")
                    .HasColumnType("money");

                entity.Property(e => e.PtasOnsiteparking).HasColumnName("ptas_onsiteparking");

                entity.Property(e => e.PtasOpenporchSqft).HasColumnName("ptas_openporch_sqft");

                entity.Property(e => e.PtasParceldetailidValue).HasColumnName("_ptas_parceldetailid_value");

                entity.Property(e => e.PtasParcelheadername).HasColumnName("ptas_parcelheadername");

                entity.Property(e => e.PtasParcelheadertext).HasColumnName("ptas_parcelheadertext");

                entity.Property(e => e.PtasParcelheadertext2).HasColumnName("ptas_parcelheadertext2");

                entity.Property(e => e.PtasPercentbrickorstone).HasColumnName("ptas_percentbrickorstone");

                entity.Property(e => e.PtasPercentcomplete).HasColumnName("ptas_percentcomplete");

                entity.Property(e => e.PtasPercentnetcondition).HasColumnName("ptas_percentnetcondition");

                entity.Property(e => e.PtasPropertytypeidValue).HasColumnName("_ptas_propertytypeid_value");

                entity.Property(e => e.PtasResBasementgrade).HasColumnName("ptas_res_basementgrade");

                entity.Property(e => e.PtasResBuildingcondition).HasColumnName("ptas_res_buildingcondition");

                entity.Property(e => e.PtasResHeatsource).HasColumnName("ptas_res_heatsource");

                entity.Property(e => e.PtasResidentialheatingsystem).HasColumnName("ptas_residentialheatingsystem");

                entity.Property(e => e.PtasRestored).HasColumnName("ptas_restored");

                entity.Property(e => e.PtasRooftopdeck).HasColumnName("ptas_rooftopdeck");

                entity.Property(e => e.PtasShape).HasColumnName("ptas_shape");

                entity.Property(e => e.PtasShowrecordchanges).HasColumnName("ptas_showrecordchanges");

                entity.Property(e => e.PtasSingleFireplace).HasColumnName("ptas_single_fireplace");

                entity.Property(e => e.PtasSitusaddress).HasColumnName("ptas_situsaddress");

                entity.Property(e => e.PtasSketchidValue).HasColumnName("_ptas_sketchid_value");

                entity.Property(e => e.PtasSlabthickness).HasColumnName("ptas_slabthickness");

                entity.Property(e => e.PtasSnapshotdatetime).HasColumnName("ptas_snapshotdatetime");

                entity.Property(e => e.PtasSnapshottype).HasColumnName("ptas_snapshottype");

                entity.Property(e => e.PtasSolarpanels).HasColumnName("ptas_solarpanels");

                entity.Property(e => e.PtasSprinklers).HasColumnName("ptas_sprinklers");

                entity.Property(e => e.PtasStyle).HasColumnName("ptas_style");

                entity.Property(e => e.PtasTaxaccountValue).HasColumnName("_ptas_taxaccount_value");

                entity.Property(e => e.PtasTotalbsmtSqft).HasColumnName("ptas_totalbsmt_sqft");

                entity.Property(e => e.PtasTotallivingSqft).HasColumnName("ptas_totalliving_sqft");

                entity.Property(e => e.PtasUnfinishedFullSqft).HasColumnName("ptas_unfinished_full_sqft");

                entity.Property(e => e.PtasUnfinishedHalfSqft).HasColumnName("ptas_unfinished_half_sqft");

                entity.Property(e => e.PtasUnitdescription).HasColumnName("ptas_unitdescription");

                entity.Property(e => e.PtasUnits).HasColumnName("ptas_units");

                entity.Property(e => e.PtasUpperflrSqft).HasColumnName("ptas_upperflr_sqft");

                entity.Property(e => e.PtasViewutilizationrating).HasColumnName("ptas_viewutilizationrating");

                entity.Property(e => e.PtasYearbuilt).HasColumnName("ptas_yearbuilt");

                entity.Property(e => e.PtasYearbuiltidValue).HasColumnName("_ptas_yearbuiltid_value");

                entity.Property(e => e.PtasYearrenovated).HasColumnName("ptas_yearrenovated");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasBuildingdetailCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_buildingdetail_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasBuildingdetailCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_buildingdetail_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasBuildingdetailModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_buildingdetail_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasBuildingdetailModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_buildingdetail_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasBuildingdetail)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_buildingdetail_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasBuildingdetailOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_buildingdetail_owninguser");

                entity.HasOne(d => d.PtasAddr1CityidValueNavigation)
                    .WithMany(p => p.PtasBuildingdetail)
                    .HasForeignKey(d => d.PtasAddr1CityidValue)
                    .HasConstraintName("FK_ptas_city_ptas_buildingdetail_ptas_addr1_cityid");

                entity.HasOne(d => d.PtasAddr1CountryidValueNavigation)
                    .WithMany(p => p.PtasBuildingdetail)
                    .HasForeignKey(d => d.PtasAddr1CountryidValue)
                    .HasConstraintName("FK_ptas_country_ptas_buildingdetail_ptas_addr1_countryid");

                entity.HasOne(d => d.PtasAddr1StateidValueNavigation)
                    .WithMany(p => p.PtasBuildingdetail)
                    .HasForeignKey(d => d.PtasAddr1StateidValue)
                    .HasConstraintName("FK_ptas_stateorprovince_ptas_buildingdetail_ptas_addr1_stateid");

                entity.HasOne(d => d.PtasAddr1StreetnameidValueNavigation)
                    .WithMany(p => p.PtasBuildingdetail)
                    .HasForeignKey(d => d.PtasAddr1StreetnameidValue)
                    .HasConstraintName("FK_ptas_streetname_ptas_buildingdetail_ptas_addr1_streetnameid");

                entity.HasOne(d => d.PtasAddr1StreettypeidValueNavigation)
                    .WithMany(p => p.PtasBuildingdetail)
                    .HasForeignKey(d => d.PtasAddr1StreettypeidValue)
                    .HasConstraintName("FK_ptas_streettype_ptas_buildingdetail_ptas_addr1_streettypeid");

                entity.HasOne(d => d.PtasAddr1ZipcodeidValueNavigation)
                    .WithMany(p => p.PtasBuildingdetail)
                    .HasForeignKey(d => d.PtasAddr1ZipcodeidValue)
                    .HasConstraintName("FK_ptas_zipcode_ptas_buildingdetail_ptas_addr1_zipcodeid");

                entity.HasOne(d => d.PtasBuildingsectionuseidValueNavigation)
                    .WithMany(p => p.PtasBuildingdetail)
                    .HasForeignKey(d => d.PtasBuildingsectionuseidValue)
                    .HasConstraintName("FK_ptas_buildingsectionuse_ptas_buildingdetail_ptas_buildingsectionuseid");

                entity.HasOne(d => d.PtasEffectiveyearidValueNavigation)
                    .WithMany(p => p.PtasBuildingdetailPtasEffectiveyearidValueNavigation)
                    .HasForeignKey(d => d.PtasEffectiveyearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_buildingdetail_ptas_effectiveyearid");

                entity.HasOne(d => d.PtasMasterbuildingidValueNavigation)
                    .WithMany(p => p.InversePtasMasterbuildingidValueNavigation)
                    .HasForeignKey(d => d.PtasMasterbuildingidValue)
                    .HasConstraintName("FK_ptas_buildingdetail_ptas_buildingdetail_ptas_masterbuildingid");

                entity.HasOne(d => d.PtasParceldetailidValueNavigation)
                    .WithMany(p => p.PtasBuildingdetail)
                    .HasForeignKey(d => d.PtasParceldetailidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_buildingdetail_ptas_parceldetailid");

                entity.HasOne(d => d.PtasPropertytypeidValueNavigation)
                    .WithMany(p => p.PtasBuildingdetail)
                    .HasForeignKey(d => d.PtasPropertytypeidValue)
                    .HasConstraintName("FK_ptas_propertytype_ptas_buildingdetail_ptas_propertytypeid");

                entity.HasOne(d => d.PtasSketchidValueNavigation)
                    .WithMany(p => p.PtasBuildingdetail)
                    .HasForeignKey(d => d.PtasSketchidValue)
                    .HasConstraintName("FK_ptas_sketch_ptas_buildingdetail_ptas_sketchid");

                entity.HasOne(d => d.PtasTaxaccountValueNavigation)
                    .WithMany(p => p.PtasBuildingdetail)
                    .HasForeignKey(d => d.PtasTaxaccountValue)
                    .HasConstraintName("FK_ptas_taxaccount_ptas_buildingdetail_ptas_taxaccount");

                entity.HasOne(d => d.PtasYearbuiltidValueNavigation)
                    .WithMany(p => p.PtasBuildingdetailPtasYearbuiltidValueNavigation)
                    .HasForeignKey(d => d.PtasYearbuiltidValue)
                    .HasConstraintName("FK_ptas_year_ptas_buildingdetail_ptas_yearbuiltid");
            });

            modelBuilder.Entity<PtasBuildingdetailCommercialuse>(entity =>
            {
                entity.ToTable("ptas_buildingdetail_commercialuse", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_buildingdetail_commercialuse_modifiedon");

                entity.Property(e => e.PtasBuildingdetailCommercialuseid)
                    .HasColumnName("ptas_buildingdetail_commercialuseid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAddr1CompositeaddressOneline).HasColumnName("ptas_addr1_compositeaddress_oneline");

                entity.Property(e => e.PtasAnchorstore).HasColumnName("ptas_anchorstore");

                entity.Property(e => e.PtasBuildingdetailidValue).HasColumnName("_ptas_buildingdetailid_value");

                entity.Property(e => e.PtasBuildingsectionuseidValue).HasColumnName("_ptas_buildingsectionuseid_value");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasFloornumbertxt).HasColumnName("ptas_floornumbertxt");

                entity.Property(e => e.PtasGrosssqft).HasColumnName("ptas_grosssqft");

                entity.Property(e => e.PtasHistguid).HasColumnName("ptas_histguid");

                entity.Property(e => e.PtasHistyear).HasColumnName("ptas_histyear");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasMastersectionuseidValue).HasColumnName("_ptas_mastersectionuseid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNetsqft).HasColumnName("ptas_netsqft");

                entity.Property(e => e.PtasNumberofstories).HasColumnName("ptas_numberofstories");

                entity.Property(e => e.PtasParcelheadername).HasColumnName("ptas_parcelheadername");

                entity.Property(e => e.PtasParcelheadertext).HasColumnName("ptas_parcelheadertext");

                entity.Property(e => e.PtasParcelheadertext2).HasColumnName("ptas_parcelheadertext2");

                entity.Property(e => e.PtasProjectidValue).HasColumnName("_ptas_projectid_value");

                entity.Property(e => e.PtasShowrecordchanges).HasColumnName("ptas_showrecordchanges");

                entity.Property(e => e.PtasSnapshotdatetime).HasColumnName("ptas_snapshotdatetime");

                entity.Property(e => e.PtasSnapshottype).HasColumnName("ptas_snapshottype");

                entity.Property(e => e.PtasSpecialtyareaidValue).HasColumnName("_ptas_specialtyareaid_value");

                entity.Property(e => e.PtasSpecialtynbhdidValue).HasColumnName("_ptas_specialtynbhdid_value");

                entity.Property(e => e.PtasStoryheight).HasColumnName("ptas_storyheight");

                entity.Property(e => e.PtasUnitidValue).HasColumnName("_ptas_unitid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasBuildingdetailCommercialuseCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_buildingdetail_commercialuse_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasBuildingdetailCommercialuseCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_buildingdetail_commercialuse_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasBuildingdetailCommercialuseModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_buildingdetail_commercialuse_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasBuildingdetailCommercialuseModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_buildingdetail_commercialuse_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasBuildingdetailCommercialuse)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_buildingdetail_commercialuse_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasBuildingdetailCommercialuseOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_buildingdetail_commercialuse_owninguser");

                entity.HasOne(d => d.PtasBuildingdetailidValueNavigation)
                    .WithMany(p => p.PtasBuildingdetailCommercialuse)
                    .HasForeignKey(d => d.PtasBuildingdetailidValue)
                    .HasConstraintName("FK_ptas_buildingdetail_ptas_buildingdetail_commercialuse_ptas_buildingdetailid");

                entity.HasOne(d => d.PtasBuildingsectionuseidValueNavigation)
                    .WithMany(p => p.PtasBuildingdetailCommercialuse)
                    .HasForeignKey(d => d.PtasBuildingsectionuseidValue)
                    .HasConstraintName("FK_ptas_buildingsectionuse_ptas_buildingdetail_commercialuse_ptas_buildingsectionuseid");

                entity.HasOne(d => d.PtasMastersectionuseidValueNavigation)
                    .WithMany(p => p.InversePtasMastersectionuseidValueNavigation)
                    .HasForeignKey(d => d.PtasMastersectionuseidValue)
                    .HasConstraintName("FK_ptas_buildingdetail_commercialuse_ptas_buildingdetail_commercialuse_ptas_mastersectionuseid");

                entity.HasOne(d => d.PtasProjectidValueNavigation)
                    .WithMany(p => p.PtasBuildingdetailCommercialuse)
                    .HasForeignKey(d => d.PtasProjectidValue)
                    .HasConstraintName("FK_ptas_condocomplex_ptas_buildingdetail_commercialuse_ptas_projectid");

                entity.HasOne(d => d.PtasSpecialtyareaidValueNavigation)
                    .WithMany(p => p.PtasBuildingdetailCommercialuse)
                    .HasForeignKey(d => d.PtasSpecialtyareaidValue)
                    .HasConstraintName("FK_ptas_specialtyarea_ptas_buildingdetail_commercialuse_ptas_specialtyareaid");

                entity.HasOne(d => d.PtasSpecialtynbhdidValueNavigation)
                    .WithMany(p => p.PtasBuildingdetailCommercialuse)
                    .HasForeignKey(d => d.PtasSpecialtynbhdidValue)
                    .HasConstraintName("FK_ptas_specialtyneighborhood_ptas_buildingdetail_commercialuse_ptas_specialtynbhdid");

                entity.HasOne(d => d.PtasUnitidValueNavigation)
                    .WithMany(p => p.PtasBuildingdetailCommercialuse)
                    .HasForeignKey(d => d.PtasUnitidValue)
                    .HasConstraintName("FK_ptas_condounit_ptas_buildingdetail_commercialuse_ptas_unitid");
            });

            modelBuilder.Entity<PtasBuildingdetailCommercialuseSnapshot>(entity =>
            {
                entity.HasKey(e => e.PtasBuildingdetailCommercialuseid);

                entity.ToTable("ptas_buildingdetail_commercialuse_snapshot", "dynamics");

                entity.Property(e => e.PtasBuildingdetailCommercialuseid)
                    .HasColumnName("ptas_buildingdetail_commercialuseid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAddr1CompositeaddressOneline).HasColumnName("ptas_addr1_compositeaddress_oneline");

                entity.Property(e => e.PtasAnchorstore).HasColumnName("ptas_anchorstore");

                entity.Property(e => e.PtasBuildingdetailidValue).HasColumnName("_ptas_buildingdetailid_value");

                entity.Property(e => e.PtasBuildingsectionuseidValue).HasColumnName("_ptas_buildingsectionuseid_value");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasFloornumbertxt).HasColumnName("ptas_floornumbertxt");

                entity.Property(e => e.PtasGrosssqft).HasColumnName("ptas_grosssqft");

                entity.Property(e => e.PtasHistguid).HasColumnName("ptas_histguid");

                entity.Property(e => e.PtasHistyear).HasColumnName("ptas_histyear");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasMastersectionuseidValue).HasColumnName("_ptas_mastersectionuseid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNetsqft).HasColumnName("ptas_netsqft");

                entity.Property(e => e.PtasNumberofstories).HasColumnName("ptas_numberofstories");

                entity.Property(e => e.PtasParcelheadername).HasColumnName("ptas_parcelheadername");

                entity.Property(e => e.PtasParcelheadertext).HasColumnName("ptas_parcelheadertext");

                entity.Property(e => e.PtasParcelheadertext2).HasColumnName("ptas_parcelheadertext2");

                entity.Property(e => e.PtasProjectidValue).HasColumnName("_ptas_projectid_value");

                entity.Property(e => e.PtasShowrecordchanges).HasColumnName("ptas_showrecordchanges");

                entity.Property(e => e.PtasSnapshotdatetime).HasColumnName("ptas_snapshotdatetime");

                entity.Property(e => e.PtasSnapshottype).HasColumnName("ptas_snapshottype");

                entity.Property(e => e.PtasSpecialtyareaidValue).HasColumnName("_ptas_specialtyareaid_value");

                entity.Property(e => e.PtasSpecialtynbhdidValue).HasColumnName("_ptas_specialtynbhdid_value");

                entity.Property(e => e.PtasStoryheight).HasColumnName("ptas_storyheight");

                entity.Property(e => e.PtasUnitidValue).HasColumnName("_ptas_unitid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasBuildingdetailPtasMediarepository>(entity =>
            {
                entity.ToTable("ptas_buildingdetail_ptas_mediarepository", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_buildingdetail_ptas_mediarepository_modifiedon");

                entity.Property(e => e.PtasBuildingdetailPtasMediarepositoryid)
                    .HasColumnName("ptas_buildingdetail_ptas_mediarepositoryid")
                    .ValueGeneratedNever();

                entity.Property(e => e.Modifiedon)
                    .HasColumnName("modifiedon")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.PtasBuildingdetailid).HasColumnName("ptas_buildingdetailid");

                entity.Property(e => e.PtasMediarepositoryid).HasColumnName("ptas_mediarepositoryid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasBuildingdetailSnapshot>(entity =>
            {
                entity.HasKey(e => e.PtasBuildingdetailid);

                entity.ToTable("ptas_buildingdetail_snapshot", "dynamics");

                entity.Property(e => e.PtasBuildingdetailid)
                    .HasColumnName("ptas_buildingdetailid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.Ptas12baths).HasColumnName("ptas_12baths");

                entity.Property(e => e.Ptas1stflrSqft).HasColumnName("ptas_1stflr_sqft");

                entity.Property(e => e.Ptas2ndflrSqft).HasColumnName("ptas_2ndflr_sqft");

                entity.Property(e => e.Ptas34baths).HasColumnName("ptas_34baths");

                entity.Property(e => e.PtasAdditionalcost)
                    .HasColumnName("ptas_additionalcost")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAdditionalcostBase)
                    .HasColumnName("ptas_additionalcost_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAdditionallivingquarters).HasColumnName("ptas_additionallivingquarters");

                entity.Property(e => e.PtasAddlFireplace).HasColumnName("ptas_addl_fireplace");

                entity.Property(e => e.PtasAddr1CityidValue).HasColumnName("_ptas_addr1_cityid_value");

                entity.Property(e => e.PtasAddr1Compositeaddress).HasColumnName("ptas_addr1_compositeaddress");

                entity.Property(e => e.PtasAddr1CompositeaddressOneline).HasColumnName("ptas_addr1_compositeaddress_oneline");

                entity.Property(e => e.PtasAddr1CountryidValue).HasColumnName("_ptas_addr1_countryid_value");

                entity.Property(e => e.PtasAddr1Directionprefix).HasColumnName("ptas_addr1_directionprefix");

                entity.Property(e => e.PtasAddr1Directionsuffix).HasColumnName("ptas_addr1_directionsuffix");

                entity.Property(e => e.PtasAddr1Line2).HasColumnName("ptas_addr1_line2");

                entity.Property(e => e.PtasAddr1StateidValue).HasColumnName("_ptas_addr1_stateid_value");

                entity.Property(e => e.PtasAddr1StreetnameidValue).HasColumnName("_ptas_addr1_streetnameid_value");

                entity.Property(e => e.PtasAddr1Streetnumber).HasColumnName("ptas_addr1_streetnumber");

                entity.Property(e => e.PtasAddr1Streetnumberfraction).HasColumnName("ptas_addr1_streetnumberfraction");

                entity.Property(e => e.PtasAddr1StreettypeidValue).HasColumnName("_ptas_addr1_streettypeid_value");

                entity.Property(e => e.PtasAddr1ZipcodeidValue).HasColumnName("_ptas_addr1_zipcodeid_value");

                entity.Property(e => e.PtasAlternatekey).HasColumnName("ptas_alternatekey");

                entity.Property(e => e.PtasAttachedgarageSqft).HasColumnName("ptas_attachedgarage_sqft");

                entity.Property(e => e.PtasBasementgarageSqft).HasColumnName("ptas_basementgarage_sqft");

                entity.Property(e => e.PtasBedroomnbr).HasColumnName("ptas_bedroomnbr");

                entity.Property(e => e.PtasBuildingdescription).HasColumnName("ptas_buildingdescription");

                entity.Property(e => e.PtasBuildinggrade).HasColumnName("ptas_buildinggrade");

                entity.Property(e => e.PtasBuildinggrossSqft).HasColumnName("ptas_buildinggross_sqft");

                entity.Property(e => e.PtasBuildingnbr).HasColumnName("ptas_buildingnbr");

                entity.Property(e => e.PtasBuildingnetSqft).HasColumnName("ptas_buildingnet_sqft");

                entity.Property(e => e.PtasBuildingnumber).HasColumnName("ptas_buildingnumber");

                entity.Property(e => e.PtasBuildingobsolescence).HasColumnName("ptas_buildingobsolescence");

                entity.Property(e => e.PtasBuildingquality).HasColumnName("ptas_buildingquality");

                entity.Property(e => e.PtasBuildingsectionuseidValue).HasColumnName("_ptas_buildingsectionuseid_value");

                entity.Property(e => e.PtasBuiltgreen).HasColumnName("ptas_builtgreen");

                entity.Property(e => e.PtasClearheightft).HasColumnName("ptas_clearheightft");

                entity.Property(e => e.PtasConstructionclass).HasColumnName("ptas_constructionclass");

                entity.Property(e => e.PtasCranecapacity).HasColumnName("ptas_cranecapacity");

                entity.Property(e => e.PtasCraneloading).HasColumnName("ptas_craneloading");

                entity.Property(e => e.PtasDaylightbasement).HasColumnName("ptas_daylightbasement");

                entity.Property(e => e.PtasDeckSqft).HasColumnName("ptas_deck_sqft");

                entity.Property(e => e.PtasDockloading).HasColumnName("ptas_dockloading");

                entity.Property(e => e.PtasEffectiveyear).HasColumnName("ptas_effectiveyear");

                entity.Property(e => e.PtasEffectiveyearidValue).HasColumnName("_ptas_effectiveyearid_value");

                entity.Property(e => e.PtasElevators).HasColumnName("ptas_elevators");

                entity.Property(e => e.PtasEnclosedporchSqft).HasColumnName("ptas_enclosedporch_sqft");

                entity.Property(e => e.PtasEnergyrating).HasColumnName("ptas_energyrating");

                entity.Property(e => e.PtasFinbsmtSqft).HasColumnName("ptas_finbsmt_sqft");

                entity.Property(e => e.PtasFrStdFireplace).HasColumnName("ptas_fr_std_fireplace");

                entity.Property(e => e.PtasFullbathnbr).HasColumnName("ptas_fullbathnbr");

                entity.Property(e => e.PtasFullsitusaddress).HasColumnName("ptas_fullsitusaddress");

                entity.Property(e => e.PtasGradevariance).HasColumnName("ptas_gradevariance");

                entity.Property(e => e.PtasHalfflrSqft).HasColumnName("ptas_halfflr_sqft");

                entity.Property(e => e.PtasHeatingsystem).HasColumnName("ptas_heatingsystem");

                entity.Property(e => e.PtasHistguid).HasColumnName("ptas_histguid");

                entity.Property(e => e.PtasHistyear).HasColumnName("ptas_histyear");

                entity.Property(e => e.PtasInvertedfloorplan).HasColumnName("ptas_invertedfloorplan");

                entity.Property(e => e.PtasLeaseholdbuildingm1).HasColumnName("ptas_leaseholdbuildingm1");

                entity.Property(e => e.PtasLeasingclass).HasColumnName("ptas_leasingclass");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasMasterbuildingidValue).HasColumnName("_ptas_masterbuildingid_value");

                entity.Property(e => e.PtasMigrationnote).HasColumnName("ptas_migrationnote");

                entity.Property(e => e.PtasMultiFireplace).HasColumnName("ptas_multi_fireplace");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNumberofaggregate).HasColumnName("ptas_numberofaggregate");

                entity.Property(e => e.PtasNumberofcommonwalls).HasColumnName("ptas_numberofcommonwalls");

                entity.Property(e => e.PtasNumberofelevators).HasColumnName("ptas_numberofelevators");

                entity.Property(e => e.PtasNumberofstories).HasColumnName("ptas_numberofstories");

                entity.Property(e => e.PtasNumberofstoriesdecimal)
                    .HasColumnName("ptas_numberofstoriesdecimal")
                    .HasColumnType("money");

                entity.Property(e => e.PtasOnsiteparking).HasColumnName("ptas_onsiteparking");

                entity.Property(e => e.PtasOpenporchSqft).HasColumnName("ptas_openporch_sqft");

                entity.Property(e => e.PtasParceldetailidValue).HasColumnName("_ptas_parceldetailid_value");

                entity.Property(e => e.PtasParcelheadername).HasColumnName("ptas_parcelheadername");

                entity.Property(e => e.PtasParcelheadertext).HasColumnName("ptas_parcelheadertext");

                entity.Property(e => e.PtasParcelheadertext2).HasColumnName("ptas_parcelheadertext2");

                entity.Property(e => e.PtasPercentbrickorstone).HasColumnName("ptas_percentbrickorstone");

                entity.Property(e => e.PtasPercentcomplete).HasColumnName("ptas_percentcomplete");

                entity.Property(e => e.PtasPercentnetcondition).HasColumnName("ptas_percentnetcondition");

                entity.Property(e => e.PtasPropertytypeidValue).HasColumnName("_ptas_propertytypeid_value");

                entity.Property(e => e.PtasResBasementgrade).HasColumnName("ptas_res_basementgrade");

                entity.Property(e => e.PtasResBuildingcondition).HasColumnName("ptas_res_buildingcondition");

                entity.Property(e => e.PtasResHeatsource).HasColumnName("ptas_res_heatsource");

                entity.Property(e => e.PtasResidentialheatingsystem).HasColumnName("ptas_residentialheatingsystem");

                entity.Property(e => e.PtasRestored).HasColumnName("ptas_restored");

                entity.Property(e => e.PtasRooftopdeck).HasColumnName("ptas_rooftopdeck");

                entity.Property(e => e.PtasShape).HasColumnName("ptas_shape");

                entity.Property(e => e.PtasShowrecordchanges).HasColumnName("ptas_showrecordchanges");

                entity.Property(e => e.PtasSingleFireplace).HasColumnName("ptas_single_fireplace");

                entity.Property(e => e.PtasSitusaddress).HasColumnName("ptas_situsaddress");

                entity.Property(e => e.PtasSketchidValue).HasColumnName("_ptas_sketchid_value");

                entity.Property(e => e.PtasSlabthickness).HasColumnName("ptas_slabthickness");

                entity.Property(e => e.PtasSnapshotdatetime).HasColumnName("ptas_snapshotdatetime");

                entity.Property(e => e.PtasSnapshottype).HasColumnName("ptas_snapshottype");

                entity.Property(e => e.PtasSolarpanels).HasColumnName("ptas_solarpanels");

                entity.Property(e => e.PtasSprinklers).HasColumnName("ptas_sprinklers");

                entity.Property(e => e.PtasStyle).HasColumnName("ptas_style");

                entity.Property(e => e.PtasTaxaccountValue).HasColumnName("_ptas_taxaccount_value");

                entity.Property(e => e.PtasTotalbsmtSqft).HasColumnName("ptas_totalbsmt_sqft");

                entity.Property(e => e.PtasTotallivingSqft).HasColumnName("ptas_totalliving_sqft");

                entity.Property(e => e.PtasUnfinishedFullSqft).HasColumnName("ptas_unfinished_full_sqft");

                entity.Property(e => e.PtasUnfinishedHalfSqft).HasColumnName("ptas_unfinished_half_sqft");

                entity.Property(e => e.PtasUnitdescription).HasColumnName("ptas_unitdescription");

                entity.Property(e => e.PtasUnits).HasColumnName("ptas_units");

                entity.Property(e => e.PtasUpperflrSqft).HasColumnName("ptas_upperflr_sqft");

                entity.Property(e => e.PtasViewutilizationrating).HasColumnName("ptas_viewutilizationrating");

                entity.Property(e => e.PtasYearbuilt).HasColumnName("ptas_yearbuilt");

                entity.Property(e => e.PtasYearbuiltidValue).HasColumnName("_ptas_yearbuiltid_value");

                entity.Property(e => e.PtasYearrenovated).HasColumnName("ptas_yearrenovated");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasBuildingsectionfeature>(entity =>
            {
                entity.ToTable("ptas_buildingsectionfeature", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_buildingsectionfeature_modifiedon");

                entity.Property(e => e.PtasBuildingsectionfeatureid)
                    .HasColumnName("ptas_buildingsectionfeatureid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAddr1CompositeaddressOneline).HasColumnName("ptas_addr1_compositeaddress_oneline");

                entity.Property(e => e.PtasBuildingValue).HasColumnName("_ptas_building_value");

                entity.Property(e => e.PtasBuildingsectionuseidValue).HasColumnName("_ptas_buildingsectionuseid_value");

                entity.Property(e => e.PtasDirectnavigation).HasColumnName("ptas_directnavigation");

                entity.Property(e => e.PtasFeaturegrosssqft).HasColumnName("ptas_featuregrosssqft");

                entity.Property(e => e.PtasFeaturenetsqft).HasColumnName("ptas_featurenetsqft");

                entity.Property(e => e.PtasFeaturetype).HasColumnName("ptas_featuretype");

                entity.Property(e => e.PtasHistguid).HasColumnName("ptas_histguid");

                entity.Property(e => e.PtasHistyear).HasColumnName("ptas_histyear");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasMasterfeatureidValue).HasColumnName("_ptas_masterfeatureid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasParcelheadername).HasColumnName("ptas_parcelheadername");

                entity.Property(e => e.PtasParcelheadertext).HasColumnName("ptas_parcelheadertext");

                entity.Property(e => e.PtasParcelheadertext2).HasColumnName("ptas_parcelheadertext2");

                entity.Property(e => e.PtasShowrecordchanges).HasColumnName("ptas_showrecordchanges");

                entity.Property(e => e.PtasSnapshotdatetime).HasColumnName("ptas_snapshotdatetime");

                entity.Property(e => e.PtasSnapshottype).HasColumnName("ptas_snapshottype");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasBuildingsectionfeatureCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_buildingsectionfeature_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasBuildingsectionfeatureCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_buildingsectionfeature_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasBuildingsectionfeatureModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_buildingsectionfeature_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasBuildingsectionfeatureModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_buildingsectionfeature_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasBuildingsectionfeature)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_buildingsectionfeature_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasBuildingsectionfeatureOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_buildingsectionfeature_owninguser");

                entity.HasOne(d => d.PtasBuildingValueNavigation)
                    .WithMany(p => p.PtasBuildingsectionfeature)
                    .HasForeignKey(d => d.PtasBuildingValue)
                    .HasConstraintName("FK_ptas_buildingdetail_ptas_buildingsectionfeature_ptas_building");

                entity.HasOne(d => d.PtasBuildingsectionuseidValueNavigation)
                    .WithMany(p => p.PtasBuildingsectionfeature)
                    .HasForeignKey(d => d.PtasBuildingsectionuseidValue)
                    .HasConstraintName("FK_ptas_buildingdetail_commercialuse_ptas_buildingsectionfeature_ptas_buildingsectionuseid");

                entity.HasOne(d => d.PtasMasterfeatureidValueNavigation)
                    .WithMany(p => p.InversePtasMasterfeatureidValueNavigation)
                    .HasForeignKey(d => d.PtasMasterfeatureidValue)
                    .HasConstraintName("FK_ptas_buildingsectionfeature_ptas_buildingsectionfeature_ptas_masterfeatureid");
            });

            modelBuilder.Entity<PtasBuildingsectionfeatureSnapshot>(entity =>
            {
                entity.HasKey(e => e.PtasBuildingsectionfeatureid);

                entity.ToTable("ptas_buildingsectionfeature_snapshot", "dynamics");

                entity.Property(e => e.PtasBuildingsectionfeatureid)
                    .HasColumnName("ptas_buildingsectionfeatureid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAddr1CompositeaddressOneline).HasColumnName("ptas_addr1_compositeaddress_oneline");

                entity.Property(e => e.PtasBuildingValue).HasColumnName("_ptas_building_value");

                entity.Property(e => e.PtasBuildingsectionuseidValue).HasColumnName("_ptas_buildingsectionuseid_value");

                entity.Property(e => e.PtasDirectnavigation).HasColumnName("ptas_directnavigation");

                entity.Property(e => e.PtasFeaturegrosssqft).HasColumnName("ptas_featuregrosssqft");

                entity.Property(e => e.PtasFeaturenetsqft).HasColumnName("ptas_featurenetsqft");

                entity.Property(e => e.PtasFeaturetype).HasColumnName("ptas_featuretype");

                entity.Property(e => e.PtasHistguid).HasColumnName("ptas_histguid");

                entity.Property(e => e.PtasHistyear).HasColumnName("ptas_histyear");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasMasterfeatureidValue).HasColumnName("_ptas_masterfeatureid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasParcelheadername).HasColumnName("ptas_parcelheadername");

                entity.Property(e => e.PtasParcelheadertext).HasColumnName("ptas_parcelheadertext");

                entity.Property(e => e.PtasParcelheadertext2).HasColumnName("ptas_parcelheadertext2");

                entity.Property(e => e.PtasShowrecordchanges).HasColumnName("ptas_showrecordchanges");

                entity.Property(e => e.PtasSnapshotdatetime).HasColumnName("ptas_snapshotdatetime");

                entity.Property(e => e.PtasSnapshottype).HasColumnName("ptas_snapshottype");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasBuildingsectionuse>(entity =>
            {
                entity.ToTable("ptas_buildingsectionuse", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_buildingsectionuse_modifiedon");

                entity.Property(e => e.PtasBuildingsectionuseid)
                    .HasColumnName("ptas_buildingsectionuseid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasAbbreviation).HasColumnName("ptas_abbreviation");

                entity.Property(e => e.PtasItemid).HasColumnName("ptas_itemid");

                entity.Property(e => e.PtasMainframecode).HasColumnName("ptas_mainframecode");

                entity.Property(e => e.PtasMarshallswiftdescription).HasColumnName("ptas_marshallswiftdescription");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasTypeid).HasColumnName("ptas_typeid");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasBuildingsectionuseCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_buildingsectionuse_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasBuildingsectionuseCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_buildingsectionuse_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasBuildingsectionuseModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_buildingsectionuse_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasBuildingsectionuseModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_buildingsectionuse_modifiedonbehalfby");
            });

            modelBuilder.Entity<PtasCamanotes>(entity =>
            {
                entity.ToTable("ptas_camanotes", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_camanotes_modifiedon");

                entity.HasIndex(e => new { e.PtasParcelidValue, e.Statecode })
                    .HasName("idx_Parcelid_valueStatecode");

                entity.Property(e => e.PtasCamanotesid)
                    .HasColumnName("ptas_camanotesid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAttachedentitydisplayname).HasColumnName("ptas_attachedentitydisplayname");

                entity.Property(e => e.PtasAttachedentitypk).HasColumnName("ptas_attachedentitypk");

                entity.Property(e => e.PtasAttachedentityschemaname).HasColumnName("ptas_attachedentityschemaname");

                entity.Property(e => e.PtasExcisetaxnmbr).HasColumnName("ptas_excisetaxnmbr");

                entity.Property(e => e.PtasFullsitusaddress).HasColumnName("ptas_fullsitusaddress");

                entity.Property(e => e.PtasHasmedia).HasColumnName("ptas_hasmedia");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasMigratednoteid).HasColumnName("ptas_migratednoteid");

                entity.Property(e => e.PtasMigratednotetype).HasColumnName("ptas_migratednotetype");

                entity.Property(e => e.PtasMinornumber).HasColumnName("ptas_minornumber");

                entity.Property(e => e.PtasMinorparcelidValue).HasColumnName("_ptas_minorparcelid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNotetext).HasColumnName("ptas_notetext");

                entity.Property(e => e.PtasNotetype).HasColumnName("ptas_notetype");

                entity.Property(e => e.PtasParcelidValue).HasColumnName("_ptas_parcelid_value");

                entity.Property(e => e.PtasPintotop).HasColumnName("ptas_pintotop");

                entity.Property(e => e.PtasPropertyreviewidValue).HasColumnName("_ptas_propertyreviewid_value");

                entity.Property(e => e.PtasSitusaddress).HasColumnName("ptas_situsaddress");

                entity.Property(e => e.PtasValuationyearidValue).HasColumnName("_ptas_valuationyearid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasCamanotesPtasMediarepository>(entity =>
            {
                entity.ToTable("ptas_camanotes_ptas_mediarepository", "dynamics");

                entity.Property(e => e.PtasCamanotesPtasMediarepositoryid)
                    .HasColumnName("ptas_camanotes_ptas_mediarepositoryid")
                    .ValueGeneratedNever();

                entity.Property(e => e.Modifiedon)
                    .HasColumnName("modifiedon")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.PtasCamanotesid).HasColumnName("ptas_camanotesid");

                entity.Property(e => e.PtasMediarepositoryid).HasColumnName("ptas_mediarepositoryid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasCaprate>(entity =>
            {
                entity.ToTable("ptas_caprate", "dynamics");

                entity.Property(e => e.PtasCaprateid)
                    .HasColumnName("ptas_caprateid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasReason).HasColumnName("ptas_reason");

                entity.Property(e => e.PtasSum)
                    .HasColumnName("ptas_sum")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTaxcomponent)
                    .HasColumnName("ptas_taxcomponent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTaxyearValue).HasColumnName("_ptas_taxyear_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasCaprateCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_caprate_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasCaprateCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_caprate_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasCaprateModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_caprate_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasCaprateModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_caprate_modifiedonbehalfby");

                entity.HasOne(d => d.PtasTaxyearValueNavigation)
                    .WithMany(p => p.PtasCaprate)
                    .HasForeignKey(d => d.PtasTaxyearValue)
                    .HasConstraintName("FK_ptas_year_ptas_caprate_ptas_taxyear");
            });

            modelBuilder.Entity<PtasChangereason>(entity =>
            {
                entity.ToTable("ptas_changereason", "dynamics");

                entity.Property(e => e.PtasChangereasonid)
                    .HasColumnName("ptas_changereasonid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasChangereason1).HasColumnName("ptas_changereason");

                entity.Property(e => e.PtasPriority).HasColumnName("ptas_priority");

                entity.Property(e => e.PtasVerbiagetoprint).HasColumnName("ptas_verbiagetoprint");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasChangereasonCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_changereason_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasChangereasonCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_changereason_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasChangereasonModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_changereason_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasChangereasonModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_changereason_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasChangereason)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_changereason_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasChangereasonOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_changereason_owninguser");
            });

            modelBuilder.Entity<PtasCity>(entity =>
            {
                entity.ToTable("ptas_city", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_city_modifiedon");

                entity.Property(e => e.PtasCityid)
                    .HasColumnName("ptas_cityid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasCityCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_city_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasCityCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_city_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasCityModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_city_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasCityModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_city_modifiedonbehalfby");
            });

            modelBuilder.Entity<PtasCityCounty>(entity =>
            {
                entity.ToTable("ptas_city_county", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_city_county_modifiedon");

                entity.Property(e => e.PtasCityCountyid)
                    .HasColumnName("ptas_city_countyid")
                    .ValueGeneratedNever();

                entity.Property(e => e.Modifiedon)
                    .HasColumnName("modifiedon")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.PtasCityid).HasColumnName("ptas_cityid");

                entity.Property(e => e.PtasCountyid).HasColumnName("ptas_countyid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasCityStateorprovince>(entity =>
            {
                entity.ToTable("ptas_city_stateorprovince", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_city_stateorprovince_modifiedon");

                entity.Property(e => e.PtasCityStateorprovinceid)
                    .HasColumnName("ptas_city_stateorprovinceid")
                    .ValueGeneratedNever();

                entity.Property(e => e.Modifiedon)
                    .HasColumnName("modifiedon")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.PtasCityid).HasColumnName("ptas_cityid");

                entity.Property(e => e.PtasStateorprovinceid).HasColumnName("ptas_stateorprovinceid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasCityZipcode>(entity =>
            {
                entity.ToTable("ptas_city_zipcode", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_city_zipcode_modifiedon");

                entity.Property(e => e.PtasCityZipcodeid)
                    .HasColumnName("ptas_city_zipcodeid")
                    .ValueGeneratedNever();

                entity.Property(e => e.Modifiedon)
                    .HasColumnName("modifiedon")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.PtasCityid).HasColumnName("ptas_cityid");

                entity.Property(e => e.PtasZipcodeid).HasColumnName("ptas_zipcodeid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasCondocomplex>(entity =>
            {
                entity.ToTable("ptas_condocomplex", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_condocomplex_modifiedon");

                entity.HasIndex(e => new { e.PtasParcelidValue, e.Statecode })
                    .HasName("idx_StatecodeParcelid_value");

                entity.Property(e => e.PtasCondocomplexid)
                    .HasColumnName("ptas_condocomplexid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAccessoryidValue).HasColumnName("_ptas_accessoryid_value");

                entity.Property(e => e.PtasAddmanualadjustment).HasColumnName("ptas_addmanualadjustment");

                entity.Property(e => e.PtasAddr1CityidValue).HasColumnName("_ptas_addr1_cityid_value");

                entity.Property(e => e.PtasAddr1CompositeaddressOneline).HasColumnName("ptas_addr1_compositeaddress_oneline");

                entity.Property(e => e.PtasAddr1CountryidValue).HasColumnName("_ptas_addr1_countryid_value");

                entity.Property(e => e.PtasAddr1Line1).HasColumnName("ptas_addr1_line1");

                entity.Property(e => e.PtasAddr1StateidValue).HasColumnName("_ptas_addr1_stateid_value");

                entity.Property(e => e.PtasAddr1ZipcodeValue).HasColumnName("_ptas_addr1_zipcode_value");

                entity.Property(e => e.PtasAddrestaurantincome).HasColumnName("ptas_addrestaurantincome");

                entity.Property(e => e.PtasAddretailincome).HasColumnName("ptas_addretailincome");

                entity.Property(e => e.PtasAmenitypackage).HasColumnName("ptas_amenitypackage");

                entity.Property(e => e.PtasApartmentconversion).HasColumnName("ptas_apartmentconversion");

                entity.Property(e => e.PtasAssociatedparcel2idValue).HasColumnName("_ptas_associatedparcel2id_value");

                entity.Property(e => e.PtasAssociatedparcel3idValue).HasColumnName("_ptas_associatedparcel3id_value");

                entity.Property(e => e.PtasAssociatedparcelidValue).HasColumnName("_ptas_associatedparcelid_value");

                entity.Property(e => e.PtasAveragesize).HasColumnName("ptas_averagesize");

                entity.Property(e => e.PtasAvnrasqft)
                    .HasColumnName("ptas_avnrasqft")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAvnrasqftBase)
                    .HasColumnName("ptas_avnrasqft_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasBathroomtype).HasColumnName("ptas_bathroomtype");

                entity.Property(e => e.PtasBathtosleepingroomratio)
                    .HasColumnName("ptas_bathtosleepingroomratio")
                    .HasColumnType("money");

                entity.Property(e => e.PtasBikestorage).HasColumnName("ptas_bikestorage");

                entity.Property(e => e.PtasBikestoragedescription).HasColumnName("ptas_bikestoragedescription");

                entity.Property(e => e.PtasBuildingcondition).HasColumnName("ptas_buildingcondition");

                entity.Property(e => e.PtasBuildingquality).HasColumnName("ptas_buildingquality");

                entity.Property(e => e.PtasCalculateparkingincome).HasColumnName("ptas_calculateparkingincome");

                entity.Property(e => e.PtasChargingstalls).HasColumnName("ptas_chargingstalls");

                entity.Property(e => e.PtasCleaningincluded).HasColumnName("ptas_cleaningincluded");

                entity.Property(e => e.PtasComplexdescription).HasColumnName("ptas_complexdescription");

                entity.Property(e => e.PtasConstructionclass).HasColumnName("ptas_constructionclass");

                entity.Property(e => e.PtasContactdescription).HasColumnName("ptas_contactdescription");

                entity.Property(e => e.PtasContactname).HasColumnName("ptas_contactname");

                entity.Property(e => e.PtasContaminationprojectValue).HasColumnName("_ptas_contaminationproject_value");

                entity.Property(e => e.PtasCoveredoutdoorstoragelinearft).HasColumnName("ptas_coveredoutdoorstoragelinearft");

                entity.Property(e => e.PtasDeck).HasColumnName("ptas_deck");

                entity.Property(e => e.PtasDeckdescription).HasColumnName("ptas_deckdescription");

                entity.Property(e => e.PtasDnrland).HasColumnName("ptas_dnrland");

                entity.Property(e => e.PtasEconomicunitidValue).HasColumnName("_ptas_economicunitid_value");

                entity.Property(e => e.PtasEffectiveyear).HasColumnName("ptas_effectiveyear");

                entity.Property(e => e.PtasElevators).HasColumnName("ptas_elevators");

                entity.Property(e => e.PtasEmail).HasColumnName("ptas_email");

                entity.Property(e => e.PtasEnergycertification).HasColumnName("ptas_energycertification");

                entity.Property(e => e.PtasFax).HasColumnName("ptas_fax");

                entity.Property(e => e.PtasFireplace).HasColumnName("ptas_fireplace");

                entity.Property(e => e.PtasFullsitusaddress).HasColumnName("ptas_fullsitusaddress");

                entity.Property(e => e.PtasGroundleases).HasColumnName("ptas_groundleases");

                entity.Property(e => e.PtasGym).HasColumnName("ptas_gym");

                entity.Property(e => e.PtasGymdescription).HasColumnName("ptas_gymdescription");

                entity.Property(e => e.PtasInternetincluded).HasColumnName("ptas_internetincluded");

                entity.Property(e => e.PtasKitchensinunit).HasColumnName("ptas_kitchensinunit");

                entity.Property(e => e.PtasKitchentosleepingroomratio)
                    .HasColumnName("ptas_kitchentosleepingroomratio")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLandperunit).HasColumnName("ptas_landperunit");

                entity.Property(e => e.PtasLandtype).HasColumnName("ptas_landtype");

                entity.Property(e => e.PtasLaundry).HasColumnName("ptas_laundry");

                entity.Property(e => e.PtasLbratio)
                    .HasColumnName("ptas_lbratio")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLeasingclass).HasColumnName("ptas_leasingclass");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasLegacyrpcomplexid).HasColumnName("ptas_legacyrpcomplexid");

                entity.Property(e => e.PtasLowincomehousing).HasColumnName("ptas_lowincomehousing");

                entity.Property(e => e.PtasMajorcondocomplexidValue).HasColumnName("_ptas_majorcondocomplexid_value");

                entity.Property(e => e.PtasManualadjustmentvalue).HasColumnName("ptas_manualadjustmentvalue");

                entity.Property(e => e.PtasMarinaexistinguse).HasColumnName("ptas_marinaexistinguse");

                entity.Property(e => e.PtasMarinasubtype).HasColumnName("ptas_marinasubtype");

                entity.Property(e => e.PtasMasterprojectidValue).HasColumnName("_ptas_masterprojectid_value");

                entity.Property(e => e.PtasMaxnumberofcondounits).HasColumnName("ptas_maxnumberofcondounits");

                entity.Property(e => e.PtasMfte).HasColumnName("ptas_mfte");

                entity.Property(e => e.PtasMfteenddate).HasColumnName("ptas_mfteenddate");

                entity.Property(e => e.PtasMftestartdate).HasColumnName("ptas_mftestartdate");

                entity.Property(e => e.PtasMooragecovered).HasColumnName("ptas_mooragecovered");

                entity.Property(e => e.PtasMoorageopen).HasColumnName("ptas_moorageopen");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNraperroom).HasColumnName("ptas_nraperroom");

                entity.Property(e => e.PtasNumberofanchors).HasColumnName("ptas_numberofanchors");

                entity.Property(e => e.PtasNumberofbathrooms).HasColumnName("ptas_numberofbathrooms");

                entity.Property(e => e.PtasNumberofbuildings).HasColumnName("ptas_numberofbuildings");

                entity.Property(e => e.PtasNumberofcommonkitchens).HasColumnName("ptas_numberofcommonkitchens");

                entity.Property(e => e.PtasNumberofcondounitsremaining).HasColumnName("ptas_numberofcondounitsremaining");

                entity.Property(e => e.PtasNumberofjunioranchors).HasColumnName("ptas_numberofjunioranchors");

                entity.Property(e => e.PtasNumberofstorageunits).HasColumnName("ptas_numberofstorageunits");

                entity.Property(e => e.PtasNumberofstories).HasColumnName("ptas_numberofstories");

                entity.Property(e => e.PtasNumberofunits).HasColumnName("ptas_numberofunits");

                entity.Property(e => e.PtasOthersecuritydescription).HasColumnName("ptas_othersecuritydescription");

                entity.Property(e => e.PtasParcelheadername).HasColumnName("ptas_parcelheadername");

                entity.Property(e => e.PtasParcelheadertext).HasColumnName("ptas_parcelheadertext");

                entity.Property(e => e.PtasParcelheadertext2).HasColumnName("ptas_parcelheadertext2");

                entity.Property(e => e.PtasParcelidValue).HasColumnName("_ptas_parcelid_value");

                entity.Property(e => e.PtasParkingdistrictidValue).HasColumnName("_ptas_parkingdistrictid_value");

                entity.Property(e => e.PtasParkingoperatingexpensepct)
                    .HasColumnName("ptas_parkingoperatingexpensepct")
                    .HasColumnType("money");

                entity.Property(e => e.PtasParkingratio)
                    .HasColumnName("ptas_parkingratio")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPercentanchors).HasColumnName("ptas_percentanchors");

                entity.Property(e => e.PtasPercentcomplete).HasColumnName("ptas_percentcomplete");

                entity.Property(e => e.PtasPercentlandvaluedecimal)
                    .HasColumnName("ptas_percentlandvaluedecimal")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPercentoffinishedbuildout).HasColumnName("ptas_percentoffinishedbuildout");

                entity.Property(e => e.PtasPercentownershipdecimal)
                    .HasColumnName("ptas_percentownershipdecimal")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPercentremediationcost).HasColumnName("ptas_percentremediationcost");

                entity.Property(e => e.PtasPercenttotalvaluedecimal)
                    .HasColumnName("ptas_percenttotalvaluedecimal")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPercentwithview).HasColumnName("ptas_percentwithview");

                entity.Property(e => e.PtasPhone1).HasColumnName("ptas_phone1");

                entity.Property(e => e.PtasPool).HasColumnName("ptas_pool");

                entity.Property(e => e.PtasProjectappeal).HasColumnName("ptas_projectappeal");

                entity.Property(e => e.PtasProjectlocation).HasColumnName("ptas_projectlocation");

                entity.Property(e => e.PtasProjectnotes).HasColumnName("ptas_projectnotes");

                entity.Property(e => e.PtasProjectsubtype).HasColumnName("ptas_projectsubtype");

                entity.Property(e => e.PtasProjecttype).HasColumnName("ptas_projecttype");

                entity.Property(e => e.PtasProjectunittype).HasColumnName("ptas_projectunittype");

                entity.Property(e => e.PtasProximitytolightrail).HasColumnName("ptas_proximitytolightrail");

                entity.Property(e => e.PtasProximitytouw).HasColumnName("ptas_proximitytouw");

                entity.Property(e => e.PtasRailspuraccess).HasColumnName("ptas_railspuraccess");

                entity.Property(e => e.PtasRentalmethod).HasColumnName("ptas_rentalmethod");

                entity.Property(e => e.PtasRetirementprojectsubtype).HasColumnName("ptas_retirementprojectsubtype");

                entity.Property(e => e.PtasSecuritysystem).HasColumnName("ptas_securitysystem");

                entity.Property(e => e.PtasSecuritytype).HasColumnName("ptas_securitytype");

                entity.Property(e => e.PtasShowrecordchanges).HasColumnName("ptas_showrecordchanges");

                entity.Property(e => e.PtasShowsectionuses).HasColumnName("ptas_showsectionuses");

                entity.Property(e => e.PtasSingletenancy).HasColumnName("ptas_singletenancy");

                entity.Property(e => e.PtasSitusaddress).HasColumnName("ptas_situsaddress");

                entity.Property(e => e.PtasSnapshotdatetime).HasColumnName("ptas_snapshotdatetime");

                entity.Property(e => e.PtasSnapshottype).HasColumnName("ptas_snapshottype");

                entity.Property(e => e.PtasStorage).HasColumnName("ptas_storage");

                entity.Property(e => e.PtasStoragedescription).HasColumnName("ptas_storagedescription");

                entity.Property(e => e.PtasTemperaturecontrol).HasColumnName("ptas_temperaturecontrol");

                entity.Property(e => e.PtasTenantpaidheat).HasColumnName("ptas_tenantpaidheat");

                entity.Property(e => e.PtasTotalassessedvalue)
                    .HasColumnName("ptas_totalassessedvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalassessedvalueBase)
                    .HasColumnName("ptas_totalassessedvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalgrosssquarefeet).HasColumnName("ptas_totalgrosssquarefeet");

                entity.Property(e => e.PtasTotallinearft).HasColumnName("ptas_totallinearft");

                entity.Property(e => e.PtasTotalnetsquarefeet).HasColumnName("ptas_totalnetsquarefeet");

                entity.Property(e => e.PtasTotalsize).HasColumnName("ptas_totalsize");

                entity.Property(e => e.PtasUsevalueaddcaprate).HasColumnName("ptas_usevalueaddcaprate");

                entity.Property(e => e.PtasUtilitiesincluded).HasColumnName("ptas_utilitiesincluded");

                entity.Property(e => e.PtasValaddcaprate)
                    .HasColumnName("ptas_valaddcaprate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasValueadddescription).HasColumnName("ptas_valueadddescription");

                entity.Property(e => e.PtasValueadjustmentdescription).HasColumnName("ptas_valueadjustmentdescription");

                entity.Property(e => e.PtasValuedistributionmethod).HasColumnName("ptas_valuedistributionmethod");

                entity.Property(e => e.PtasValuedofcoveredsecuredstalls).HasColumnName("ptas_valuedofcoveredsecuredstalls");

                entity.Property(e => e.PtasValuedofcoveredunsecuredstalls).HasColumnName("ptas_valuedofcoveredunsecuredstalls");

                entity.Property(e => e.PtasValuedofdailystalls).HasColumnName("ptas_valuedofdailystalls");

                entity.Property(e => e.PtasValuedofmonthlystalls).HasColumnName("ptas_valuedofmonthlystalls");

                entity.Property(e => e.PtasValuedofopensecured).HasColumnName("ptas_valuedofopensecured");

                entity.Property(e => e.PtasValuedofopenunsecured).HasColumnName("ptas_valuedofopenunsecured");

                entity.Property(e => e.PtasValuedoftotalstalls).HasColumnName("ptas_valuedoftotalstalls");

                entity.Property(e => e.PtasYearbuilt).HasColumnName("ptas_yearbuilt");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasCondocomplexCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_condocomplex_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasCondocomplexCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_condocomplex_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasCondocomplexModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_condocomplex_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasCondocomplexModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_condocomplex_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasCondocomplex)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_condocomplex_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasCondocomplexOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_condocomplex_owninguser");

                entity.HasOne(d => d.PtasAccessoryidValueNavigation)
                    .WithMany(p => p.PtasCondocomplex)
                    .HasForeignKey(d => d.PtasAccessoryidValue)
                    .HasConstraintName("FK_ptas_accessorydetail_ptas_condocomplex_ptas_accessoryid");

                entity.HasOne(d => d.PtasAddr1CityidValueNavigation)
                    .WithMany(p => p.PtasCondocomplex)
                    .HasForeignKey(d => d.PtasAddr1CityidValue)
                    .HasConstraintName("FK_ptas_city_ptas_condocomplex_ptas_addr1_cityid");

                entity.HasOne(d => d.PtasAddr1CountryidValueNavigation)
                    .WithMany(p => p.PtasCondocomplex)
                    .HasForeignKey(d => d.PtasAddr1CountryidValue)
                    .HasConstraintName("FK_ptas_country_ptas_condocomplex_ptas_addr1_countryid");

                entity.HasOne(d => d.PtasAddr1StateidValueNavigation)
                    .WithMany(p => p.PtasCondocomplex)
                    .HasForeignKey(d => d.PtasAddr1StateidValue)
                    .HasConstraintName("FK_ptas_stateorprovince_ptas_condocomplex_ptas_addr1_stateid");

                entity.HasOne(d => d.PtasAddr1ZipcodeValueNavigation)
                    .WithMany(p => p.PtasCondocomplex)
                    .HasForeignKey(d => d.PtasAddr1ZipcodeValue)
                    .HasConstraintName("FK_ptas_zipcode_ptas_condocomplex_ptas_addr1_zipcode");

                entity.HasOne(d => d.PtasAssociatedparcel2idValueNavigation)
                    .WithMany(p => p.PtasCondocomplexPtasAssociatedparcel2idValueNavigation)
                    .HasForeignKey(d => d.PtasAssociatedparcel2idValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_condocomplex_ptas_associatedparcel2id");

                entity.HasOne(d => d.PtasAssociatedparcel3idValueNavigation)
                    .WithMany(p => p.PtasCondocomplexPtasAssociatedparcel3idValueNavigation)
                    .HasForeignKey(d => d.PtasAssociatedparcel3idValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_condocomplex_ptas_associatedparcel3id");

                entity.HasOne(d => d.PtasAssociatedparcelidValueNavigation)
                    .WithMany(p => p.PtasCondocomplexPtasAssociatedparcelidValueNavigation)
                    .HasForeignKey(d => d.PtasAssociatedparcelidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_condocomplex_ptas_associatedparcelid");

                entity.HasOne(d => d.PtasContaminationprojectValueNavigation)
                    .WithMany(p => p.PtasCondocomplex)
                    .HasForeignKey(d => d.PtasContaminationprojectValue)
                    .HasConstraintName("FK_ptas_contaminationproject_ptas_condocomplex_ptas_contaminationproject");

                entity.HasOne(d => d.PtasEconomicunitidValueNavigation)
                    .WithMany(p => p.PtasCondocomplex)
                    .HasForeignKey(d => d.PtasEconomicunitidValue)
                    .HasConstraintName("FK_ptas_economicunit_ptas_condocomplex_ptas_economicunitid");

                entity.HasOne(d => d.PtasMajorcondocomplexidValueNavigation)
                    .WithMany(p => p.InversePtasMajorcondocomplexidValueNavigation)
                    .HasForeignKey(d => d.PtasMajorcondocomplexidValue)
                    .HasConstraintName("FK_ptas_condocomplex_ptas_condocomplex_ptas_majorcondocomplexid");

                entity.HasOne(d => d.PtasMasterprojectidValueNavigation)
                    .WithMany(p => p.InversePtasMasterprojectidValueNavigation)
                    .HasForeignKey(d => d.PtasMasterprojectidValue)
                    .HasConstraintName("FK_ptas_condocomplex_ptas_condocomplex_ptas_masterprojectid");

                entity.HasOne(d => d.PtasParcelidValueNavigation)
                    .WithMany(p => p.PtasCondocomplexPtasParcelidValueNavigation)
                    .HasForeignKey(d => d.PtasParcelidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_condocomplex_ptas_parcelid");

                entity.HasOne(d => d.PtasParkingdistrictidValueNavigation)
                    .WithMany(p => p.PtasCondocomplex)
                    .HasForeignKey(d => d.PtasParkingdistrictidValue)
                    .HasConstraintName("FK_ptas_parkingdistrict_ptas_condocomplex_ptas_parkingdistrictid");
            });

            modelBuilder.Entity<PtasCondocomplexPtasMediarepository>(entity =>
            {
                entity.ToTable("ptas_condocomplex_ptas_mediarepository", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_condocomplex_ptas_mediarepository_modifiedon");

                entity.Property(e => e.PtasCondocomplexPtasMediarepositoryid)
                    .HasColumnName("ptas_condocomplex_ptas_mediarepositoryid")
                    .ValueGeneratedNever();

                entity.Property(e => e.Modifiedon)
                    .HasColumnName("modifiedon")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.PtasCondocomplexid).HasColumnName("ptas_condocomplexid");

                entity.Property(e => e.PtasMediarepositoryid).HasColumnName("ptas_mediarepositoryid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasCondocomplexSnapshot>(entity =>
            {
                entity.HasKey(e => e.PtasCondocomplexid);

                entity.ToTable("ptas_condocomplex_snapshot", "dynamics");

                entity.Property(e => e.PtasCondocomplexid)
                    .HasColumnName("ptas_condocomplexid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAccessoryidValue).HasColumnName("_ptas_accessoryid_value");

                entity.Property(e => e.PtasAddmanualadjustment).HasColumnName("ptas_addmanualadjustment");

                entity.Property(e => e.PtasAddr1CityidValue).HasColumnName("_ptas_addr1_cityid_value");

                entity.Property(e => e.PtasAddr1CompositeaddressOneline).HasColumnName("ptas_addr1_compositeaddress_oneline");

                entity.Property(e => e.PtasAddr1CountryidValue).HasColumnName("_ptas_addr1_countryid_value");

                entity.Property(e => e.PtasAddr1Line1).HasColumnName("ptas_addr1_line1");

                entity.Property(e => e.PtasAddr1StateidValue).HasColumnName("_ptas_addr1_stateid_value");

                entity.Property(e => e.PtasAddr1ZipcodeValue).HasColumnName("_ptas_addr1_zipcode_value");

                entity.Property(e => e.PtasAddrestaurantincome).HasColumnName("ptas_addrestaurantincome");

                entity.Property(e => e.PtasAddretailincome).HasColumnName("ptas_addretailincome");

                entity.Property(e => e.PtasAmenitypackage).HasColumnName("ptas_amenitypackage");

                entity.Property(e => e.PtasApartmentconversion).HasColumnName("ptas_apartmentconversion");

                entity.Property(e => e.PtasAssociatedparcel2idValue).HasColumnName("_ptas_associatedparcel2id_value");

                entity.Property(e => e.PtasAssociatedparcel3idValue).HasColumnName("_ptas_associatedparcel3id_value");

                entity.Property(e => e.PtasAssociatedparcelidValue).HasColumnName("_ptas_associatedparcelid_value");

                entity.Property(e => e.PtasAveragesize).HasColumnName("ptas_averagesize");

                entity.Property(e => e.PtasAvnrasqft)
                    .HasColumnName("ptas_avnrasqft")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAvnrasqftBase)
                    .HasColumnName("ptas_avnrasqft_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasBathroomtype).HasColumnName("ptas_bathroomtype");

                entity.Property(e => e.PtasBathtosleepingroomratio)
                    .HasColumnName("ptas_bathtosleepingroomratio")
                    .HasColumnType("money");

                entity.Property(e => e.PtasBikestorage).HasColumnName("ptas_bikestorage");

                entity.Property(e => e.PtasBikestoragedescription).HasColumnName("ptas_bikestoragedescription");

                entity.Property(e => e.PtasBuildingcondition).HasColumnName("ptas_buildingcondition");

                entity.Property(e => e.PtasBuildingquality).HasColumnName("ptas_buildingquality");

                entity.Property(e => e.PtasCalculateparkingincome).HasColumnName("ptas_calculateparkingincome");

                entity.Property(e => e.PtasChargingstalls).HasColumnName("ptas_chargingstalls");

                entity.Property(e => e.PtasCleaningincluded).HasColumnName("ptas_cleaningincluded");

                entity.Property(e => e.PtasComplexdescription).HasColumnName("ptas_complexdescription");

                entity.Property(e => e.PtasConstructionclass).HasColumnName("ptas_constructionclass");

                entity.Property(e => e.PtasContactdescription).HasColumnName("ptas_contactdescription");

                entity.Property(e => e.PtasContactname).HasColumnName("ptas_contactname");

                entity.Property(e => e.PtasContaminationprojectValue).HasColumnName("_ptas_contaminationproject_value");

                entity.Property(e => e.PtasCoveredoutdoorstoragelinearft).HasColumnName("ptas_coveredoutdoorstoragelinearft");

                entity.Property(e => e.PtasDeck).HasColumnName("ptas_deck");

                entity.Property(e => e.PtasDeckdescription).HasColumnName("ptas_deckdescription");

                entity.Property(e => e.PtasDnrland).HasColumnName("ptas_dnrland");

                entity.Property(e => e.PtasEconomicunitidValue).HasColumnName("_ptas_economicunitid_value");

                entity.Property(e => e.PtasEffectiveyear).HasColumnName("ptas_effectiveyear");

                entity.Property(e => e.PtasElevators).HasColumnName("ptas_elevators");

                entity.Property(e => e.PtasEmail).HasColumnName("ptas_email");

                entity.Property(e => e.PtasEnergycertification).HasColumnName("ptas_energycertification");

                entity.Property(e => e.PtasFax).HasColumnName("ptas_fax");

                entity.Property(e => e.PtasFireplace).HasColumnName("ptas_fireplace");

                entity.Property(e => e.PtasFullsitusaddress).HasColumnName("ptas_fullsitusaddress");

                entity.Property(e => e.PtasGroundleases).HasColumnName("ptas_groundleases");

                entity.Property(e => e.PtasGym).HasColumnName("ptas_gym");

                entity.Property(e => e.PtasGymdescription).HasColumnName("ptas_gymdescription");

                entity.Property(e => e.PtasInternetincluded).HasColumnName("ptas_internetincluded");

                entity.Property(e => e.PtasKitchensinunit).HasColumnName("ptas_kitchensinunit");

                entity.Property(e => e.PtasKitchentosleepingroomratio)
                    .HasColumnName("ptas_kitchentosleepingroomratio")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLandperunit).HasColumnName("ptas_landperunit");

                entity.Property(e => e.PtasLandtype).HasColumnName("ptas_landtype");

                entity.Property(e => e.PtasLaundry).HasColumnName("ptas_laundry");

                entity.Property(e => e.PtasLbratio)
                    .HasColumnName("ptas_lbratio")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLeasingclass).HasColumnName("ptas_leasingclass");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasLegacyrpcomplexid).HasColumnName("ptas_legacyrpcomplexid");

                entity.Property(e => e.PtasLowincomehousing).HasColumnName("ptas_lowincomehousing");

                entity.Property(e => e.PtasMajorcondocomplexidValue).HasColumnName("_ptas_majorcondocomplexid_value");

                entity.Property(e => e.PtasManualadjustmentvalue).HasColumnName("ptas_manualadjustmentvalue");

                entity.Property(e => e.PtasMarinaexistinguse).HasColumnName("ptas_marinaexistinguse");

                entity.Property(e => e.PtasMarinasubtype).HasColumnName("ptas_marinasubtype");

                entity.Property(e => e.PtasMasterprojectidValue).HasColumnName("_ptas_masterprojectid_value");

                entity.Property(e => e.PtasMaxnumberofcondounits).HasColumnName("ptas_maxnumberofcondounits");

                entity.Property(e => e.PtasMfte).HasColumnName("ptas_mfte");

                entity.Property(e => e.PtasMfteenddate).HasColumnName("ptas_mfteenddate");

                entity.Property(e => e.PtasMftestartdate).HasColumnName("ptas_mftestartdate");

                entity.Property(e => e.PtasMooragecovered).HasColumnName("ptas_mooragecovered");

                entity.Property(e => e.PtasMoorageopen).HasColumnName("ptas_moorageopen");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNraperroom).HasColumnName("ptas_nraperroom");

                entity.Property(e => e.PtasNumberofanchors).HasColumnName("ptas_numberofanchors");

                entity.Property(e => e.PtasNumberofbathrooms).HasColumnName("ptas_numberofbathrooms");

                entity.Property(e => e.PtasNumberofbuildings).HasColumnName("ptas_numberofbuildings");

                entity.Property(e => e.PtasNumberofcommonkitchens).HasColumnName("ptas_numberofcommonkitchens");

                entity.Property(e => e.PtasNumberofcondounitsremaining).HasColumnName("ptas_numberofcondounitsremaining");

                entity.Property(e => e.PtasNumberofjunioranchors).HasColumnName("ptas_numberofjunioranchors");

                entity.Property(e => e.PtasNumberofstorageunits).HasColumnName("ptas_numberofstorageunits");

                entity.Property(e => e.PtasNumberofstories).HasColumnName("ptas_numberofstories");

                entity.Property(e => e.PtasNumberofunits).HasColumnName("ptas_numberofunits");

                entity.Property(e => e.PtasOthersecuritydescription).HasColumnName("ptas_othersecuritydescription");

                entity.Property(e => e.PtasParcelheadername).HasColumnName("ptas_parcelheadername");

                entity.Property(e => e.PtasParcelheadertext).HasColumnName("ptas_parcelheadertext");

                entity.Property(e => e.PtasParcelheadertext2).HasColumnName("ptas_parcelheadertext2");

                entity.Property(e => e.PtasParcelidValue).HasColumnName("_ptas_parcelid_value");

                entity.Property(e => e.PtasParkingdistrictidValue).HasColumnName("_ptas_parkingdistrictid_value");

                entity.Property(e => e.PtasParkingoperatingexpensepct)
                    .HasColumnName("ptas_parkingoperatingexpensepct")
                    .HasColumnType("money");

                entity.Property(e => e.PtasParkingratio)
                    .HasColumnName("ptas_parkingratio")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPercentanchors).HasColumnName("ptas_percentanchors");

                entity.Property(e => e.PtasPercentcomplete).HasColumnName("ptas_percentcomplete");

                entity.Property(e => e.PtasPercentlandvaluedecimal)
                    .HasColumnName("ptas_percentlandvaluedecimal")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPercentoffinishedbuildout).HasColumnName("ptas_percentoffinishedbuildout");

                entity.Property(e => e.PtasPercentownershipdecimal)
                    .HasColumnName("ptas_percentownershipdecimal")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPercentremediationcost).HasColumnName("ptas_percentremediationcost");

                entity.Property(e => e.PtasPercenttotalvaluedecimal)
                    .HasColumnName("ptas_percenttotalvaluedecimal")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPercentwithview).HasColumnName("ptas_percentwithview");

                entity.Property(e => e.PtasPhone1).HasColumnName("ptas_phone1");

                entity.Property(e => e.PtasPool).HasColumnName("ptas_pool");

                entity.Property(e => e.PtasProjectappeal).HasColumnName("ptas_projectappeal");

                entity.Property(e => e.PtasProjectlocation).HasColumnName("ptas_projectlocation");

                entity.Property(e => e.PtasProjectnotes).HasColumnName("ptas_projectnotes");

                entity.Property(e => e.PtasProjectsubtype).HasColumnName("ptas_projectsubtype");

                entity.Property(e => e.PtasProjecttype).HasColumnName("ptas_projecttype");

                entity.Property(e => e.PtasProjectunittype).HasColumnName("ptas_projectunittype");

                entity.Property(e => e.PtasProximitytolightrail).HasColumnName("ptas_proximitytolightrail");

                entity.Property(e => e.PtasProximitytouw).HasColumnName("ptas_proximitytouw");

                entity.Property(e => e.PtasRailspuraccess).HasColumnName("ptas_railspuraccess");

                entity.Property(e => e.PtasRentalmethod).HasColumnName("ptas_rentalmethod");

                entity.Property(e => e.PtasRetirementprojectsubtype).HasColumnName("ptas_retirementprojectsubtype");

                entity.Property(e => e.PtasSecuritysystem).HasColumnName("ptas_securitysystem");

                entity.Property(e => e.PtasSecuritytype).HasColumnName("ptas_securitytype");

                entity.Property(e => e.PtasShowrecordchanges).HasColumnName("ptas_showrecordchanges");

                entity.Property(e => e.PtasShowsectionuses).HasColumnName("ptas_showsectionuses");

                entity.Property(e => e.PtasSingletenancy).HasColumnName("ptas_singletenancy");

                entity.Property(e => e.PtasSitusaddress).HasColumnName("ptas_situsaddress");

                entity.Property(e => e.PtasSnapshotdatetime).HasColumnName("ptas_snapshotdatetime");

                entity.Property(e => e.PtasSnapshottype).HasColumnName("ptas_snapshottype");

                entity.Property(e => e.PtasStorage).HasColumnName("ptas_storage");

                entity.Property(e => e.PtasStoragedescription).HasColumnName("ptas_storagedescription");

                entity.Property(e => e.PtasTemperaturecontrol).HasColumnName("ptas_temperaturecontrol");

                entity.Property(e => e.PtasTenantpaidheat).HasColumnName("ptas_tenantpaidheat");

                entity.Property(e => e.PtasTotalassessedvalue)
                    .HasColumnName("ptas_totalassessedvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalassessedvalueBase)
                    .HasColumnName("ptas_totalassessedvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalgrosssquarefeet).HasColumnName("ptas_totalgrosssquarefeet");

                entity.Property(e => e.PtasTotallinearft).HasColumnName("ptas_totallinearft");

                entity.Property(e => e.PtasTotalnetsquarefeet).HasColumnName("ptas_totalnetsquarefeet");

                entity.Property(e => e.PtasTotalsize).HasColumnName("ptas_totalsize");

                entity.Property(e => e.PtasUsevalueaddcaprate).HasColumnName("ptas_usevalueaddcaprate");

                entity.Property(e => e.PtasUtilitiesincluded).HasColumnName("ptas_utilitiesincluded");

                entity.Property(e => e.PtasValaddcaprate)
                    .HasColumnName("ptas_valaddcaprate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasValueadddescription).HasColumnName("ptas_valueadddescription");

                entity.Property(e => e.PtasValueadjustmentdescription).HasColumnName("ptas_valueadjustmentdescription");

                entity.Property(e => e.PtasValuedistributionmethod).HasColumnName("ptas_valuedistributionmethod");

                entity.Property(e => e.PtasValuedofcoveredsecuredstalls).HasColumnName("ptas_valuedofcoveredsecuredstalls");

                entity.Property(e => e.PtasValuedofcoveredunsecuredstalls).HasColumnName("ptas_valuedofcoveredunsecuredstalls");

                entity.Property(e => e.PtasValuedofdailystalls).HasColumnName("ptas_valuedofdailystalls");

                entity.Property(e => e.PtasValuedofmonthlystalls).HasColumnName("ptas_valuedofmonthlystalls");

                entity.Property(e => e.PtasValuedofopensecured).HasColumnName("ptas_valuedofopensecured");

                entity.Property(e => e.PtasValuedofopenunsecured).HasColumnName("ptas_valuedofopenunsecured");

                entity.Property(e => e.PtasValuedoftotalstalls).HasColumnName("ptas_valuedoftotalstalls");

                entity.Property(e => e.PtasYearbuilt).HasColumnName("ptas_yearbuilt");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasCondounit>(entity =>
            {
                entity.ToTable("ptas_condounit", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_condounit_modifiedon");

                entity.HasIndex(e => new { e.PtasParcelidValue, e.Statecode, e.PtasUnittype, e.PtasCondo, e.PtasComplexidValue })
                    .HasName("idx_Parcelid_value");

                entity.Property(e => e.PtasCondounitid)
                    .HasColumnName("ptas_condounitid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAccessoryflatvalue)
                    .HasColumnName("ptas_accessoryflatvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAccessoryflatvalueBase)
                    .HasColumnName("ptas_accessoryflatvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAccountstatus).HasColumnName("ptas_accountstatus");

                entity.Property(e => e.PtasAccounttype).HasColumnName("ptas_accounttype");

                entity.Property(e => e.PtasAddr1CityidValue).HasColumnName("_ptas_addr1_cityid_value");

                entity.Property(e => e.PtasAddr1Compositeaddress).HasColumnName("ptas_addr1_compositeaddress");

                entity.Property(e => e.PtasAddr1CompositeaddressOneline).HasColumnName("ptas_addr1_compositeaddress_oneline");

                entity.Property(e => e.PtasAddr1CountryidValue).HasColumnName("_ptas_addr1_countryid_value");

                entity.Property(e => e.PtasAddr1Directionprefix).HasColumnName("ptas_addr1_directionprefix");

                entity.Property(e => e.PtasAddr1Directionsuffix).HasColumnName("ptas_addr1_directionsuffix");

                entity.Property(e => e.PtasAddr1Line2).HasColumnName("ptas_addr1_line2");

                entity.Property(e => e.PtasAddr1StateidValue).HasColumnName("_ptas_addr1_stateid_value");

                entity.Property(e => e.PtasAddr1StreetnameidValue).HasColumnName("_ptas_addr1_streetnameid_value");

                entity.Property(e => e.PtasAddr1Streetnumber).HasColumnName("ptas_addr1_streetnumber");

                entity.Property(e => e.PtasAddr1Streetnumberfraction).HasColumnName("ptas_addr1_streetnumberfraction");

                entity.Property(e => e.PtasAddr1StreettypeidValue).HasColumnName("_ptas_addr1_streettypeid_value");

                entity.Property(e => e.PtasAddr1ZipcodeidValue).HasColumnName("_ptas_addr1_zipcodeid_value");

                entity.Property(e => e.PtasAddressusage).HasColumnName("ptas_addressusage");

                entity.Property(e => e.PtasAttic).HasColumnName("ptas_attic");

                entity.Property(e => e.PtasBuildingidValue).HasColumnName("_ptas_buildingid_value");

                entity.Property(e => e.PtasBuildingnbr).HasColumnName("ptas_buildingnbr");

                entity.Property(e => e.PtasBuildingnumber).HasColumnName("ptas_buildingnumber");

                entity.Property(e => e.PtasCarportsqft).HasColumnName("ptas_carportsqft");

                entity.Property(e => e.PtasComplexidValue).HasColumnName("_ptas_complexid_value");

                entity.Property(e => e.PtasCondo).HasColumnName("ptas_condo");

                entity.Property(e => e.PtasCondounitcondition).HasColumnName("ptas_condounitcondition");

                entity.Property(e => e.PtasDecksqft).HasColumnName("ptas_decksqft");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasDockValue).HasColumnName("_ptas_dock_value");

                entity.Property(e => e.PtasEffectiveyear).HasColumnName("ptas_effectiveyear");

                entity.Property(e => e.PtasEndporchsqft).HasColumnName("ptas_endporchsqft");

                entity.Property(e => e.PtasEndunit).HasColumnName("ptas_endunit");

                entity.Property(e => e.PtasEnergyrating).HasColumnName("ptas_energyrating");

                entity.Property(e => e.PtasFinishedbasement).HasColumnName("ptas_finishedbasement");

                entity.Property(e => e.PtasFireplace).HasColumnName("ptas_fireplace");

                entity.Property(e => e.PtasFirstfloor).HasColumnName("ptas_firstfloor");

                entity.Property(e => e.PtasFloatinghomecondition).HasColumnName("ptas_floatinghomecondition");

                entity.Property(e => e.PtasFloatinghomefinishedbasementgrade).HasColumnName("ptas_floatinghomefinishedbasementgrade");

                entity.Property(e => e.PtasFloatinghomegrade).HasColumnName("ptas_floatinghomegrade");

                entity.Property(e => e.PtasFloatinghomeownershiptype).HasColumnName("ptas_floatinghomeownershiptype");

                entity.Property(e => e.PtasFloatinghometype).HasColumnName("ptas_floatinghometype");

                entity.Property(e => e.PtasFloornumber).HasColumnName("ptas_floornumber");

                entity.Property(e => e.PtasFlotationtype).HasColumnName("ptas_flotationtype");

                entity.Property(e => e.PtasFullsitusaddress).HasColumnName("ptas_fullsitusaddress");

                entity.Property(e => e.PtasHeatingsystem).HasColumnName("ptas_heatingsystem");

                entity.Property(e => e.PtasImprovementsvalue)
                    .HasColumnName("ptas_improvementsvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasImprovementsvalueBase)
                    .HasColumnName("ptas_improvementsvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasInspectionreason).HasColumnName("ptas_inspectionreason");

                entity.Property(e => e.PtasLandvalue)
                    .HasColumnName("ptas_landvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLandvalueBase)
                    .HasColumnName("ptas_landvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLeasingclass).HasColumnName("ptas_leasingclass");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasLegacyunitid).HasColumnName("ptas_legacyunitid");

                entity.Property(e => e.PtasLength).HasColumnName("ptas_length");

                entity.Property(e => e.PtasLicensenumber).HasColumnName("ptas_licensenumber");

                entity.Property(e => e.PtasLinearft).HasColumnName("ptas_linearft");

                entity.Property(e => e.PtasMailingaddresstaxaccount).HasColumnName("ptas_mailingaddresstaxaccount");

                entity.Property(e => e.PtasMakeandmodel).HasColumnName("ptas_makeandmodel");

                entity.Property(e => e.PtasMasterunitidValue).HasColumnName("_ptas_masterunitid_value");

                entity.Property(e => e.PtasMinornumber).HasColumnName("ptas_minornumber");

                entity.Property(e => e.PtasMobilehomeclass).HasColumnName("ptas_mobilehomeclass");

                entity.Property(e => e.PtasMobilehomecondition).HasColumnName("ptas_mobilehomecondition");

                entity.Property(e => e.PtasMobilehomesize).HasColumnName("ptas_mobilehomesize");

                entity.Property(e => e.PtasMobilehometype).HasColumnName("ptas_mobilehometype");

                entity.Property(e => e.PtasMooragetype).HasColumnName("ptas_mooragetype");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNeedtorevisit).HasColumnName("ptas_needtorevisit");

                entity.Property(e => e.PtasNewconstructionvalue)
                    .HasColumnName("ptas_newconstructionvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasNewconstructionvalueBase)
                    .HasColumnName("ptas_newconstructionvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasNotetext).HasColumnName("ptas_notetext");

                entity.Property(e => e.PtasNumberof12baths).HasColumnName("ptas_numberof12baths");

                entity.Property(e => e.PtasNumberof34baths).HasColumnName("ptas_numberof34baths");

                entity.Property(e => e.PtasNumberofbasementparkingspaces).HasColumnName("ptas_numberofbasementparkingspaces");

                entity.Property(e => e.PtasNumberofbasementtandemspaces).HasColumnName("ptas_numberofbasementtandemspaces");

                entity.Property(e => e.PtasNumberofbedrooms).HasColumnName("ptas_numberofbedrooms");

                entity.Property(e => e.PtasNumberofcarportspaces).HasColumnName("ptas_numberofcarportspaces");

                entity.Property(e => e.PtasNumberoffullbaths).HasColumnName("ptas_numberoffullbaths");

                entity.Property(e => e.PtasNumberofgarageparkingspaces).HasColumnName("ptas_numberofgarageparkingspaces");

                entity.Property(e => e.PtasNumberofgaragetandemspaces).HasColumnName("ptas_numberofgaragetandemspaces");

                entity.Property(e => e.PtasNumberofhydraulicparkingspaces).HasColumnName("ptas_numberofhydraulicparkingspaces");

                entity.Property(e => e.PtasNumberofopenparkingspaces).HasColumnName("ptas_numberofopenparkingspaces");

                entity.Property(e => e.PtasNumberofstories).HasColumnName("ptas_numberofstories");

                entity.Property(e => e.PtasOpenporchsqft).HasColumnName("ptas_openporchsqft");

                entity.Property(e => e.PtasOtherparking).HasColumnName("ptas_otherparking");

                entity.Property(e => e.PtasOtherrooms).HasColumnName("ptas_otherrooms");

                entity.Property(e => e.PtasParcelheadername).HasColumnName("ptas_parcelheadername");

                entity.Property(e => e.PtasParcelheadertext).HasColumnName("ptas_parcelheadertext");

                entity.Property(e => e.PtasParcelheadertext2).HasColumnName("ptas_parcelheadertext2");

                entity.Property(e => e.PtasParcelidValue).HasColumnName("_ptas_parcelid_value");

                entity.Property(e => e.PtasPercentcomplete).HasColumnName("ptas_percentcomplete");

                entity.Property(e => e.PtasPercentlandvaluedecimal)
                    .HasColumnName("ptas_percentlandvaluedecimal")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPercentnetcondition).HasColumnName("ptas_percentnetcondition");

                entity.Property(e => e.PtasPercentownershipdecimal)
                    .HasColumnName("ptas_percentownershipdecimal")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPercenttotalvaluedecimal)
                    .HasColumnName("ptas_percenttotalvaluedecimal")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPropertytypeidValue).HasColumnName("_ptas_propertytypeid_value");

                entity.Property(e => e.PtasRegressionexclusionreason).HasColumnName("ptas_regressionexclusionreason");

                entity.Property(e => e.PtasRegressionexclusionreasons).HasColumnName("ptas_regressionexclusionreasons");

                entity.Property(e => e.PtasResponsibilityidValue).HasColumnName("_ptas_responsibilityid_value");

                entity.Property(e => e.PtasResunitquality).HasColumnName("ptas_resunitquality");

                entity.Property(e => e.PtasRoomadditionalsqft).HasColumnName("ptas_roomadditionalsqft");

                entity.Property(e => e.PtasSeattleid).HasColumnName("ptas_seattleid");

                entity.Property(e => e.PtasSecondfloor).HasColumnName("ptas_secondfloor");

                entity.Property(e => e.PtasSelectbyidValue).HasColumnName("_ptas_selectbyid_value");

                entity.Property(e => e.PtasSelectdate).HasColumnName("ptas_selectdate");

                entity.Property(e => e.PtasSelectmethod).HasColumnName("ptas_selectmethod");

                entity.Property(e => e.PtasSelectreason).HasColumnName("ptas_selectreason");

                entity.Property(e => e.PtasSerialnumbervin).HasColumnName("ptas_serialnumbervin");

                entity.Property(e => e.PtasShowinspectionhistory).HasColumnName("ptas_showinspectionhistory");

                entity.Property(e => e.PtasShowrecordchanges).HasColumnName("ptas_showrecordchanges");

                entity.Property(e => e.PtasSitusaddress).HasColumnName("ptas_situsaddress");

                entity.Property(e => e.PtasSize).HasColumnName("ptas_size");

                entity.Property(e => e.PtasSketchidValue).HasColumnName("_ptas_sketchid_value");

                entity.Property(e => e.PtasSkirtlinearft).HasColumnName("ptas_skirtlinearft");

                entity.Property(e => e.PtasSkirttype).HasColumnName("ptas_skirttype");

                entity.Property(e => e.PtasSliplocation).HasColumnName("ptas_sliplocation");

                entity.Property(e => e.PtasSmallhomeadjustment)
                    .HasColumnName("ptas_smallhomeadjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSnapshotdatetime).HasColumnName("ptas_snapshotdatetime");

                entity.Property(e => e.PtasSnapshottype).HasColumnName("ptas_snapshottype");

                entity.Property(e => e.PtasSpecialtyareaidValue).HasColumnName("_ptas_specialtyareaid_value");

                entity.Property(e => e.PtasSpecialtynbhdidValue).HasColumnName("_ptas_specialtynbhdid_value");

                entity.Property(e => e.PtasSprinklers).HasColumnName("ptas_sprinklers");

                entity.Property(e => e.PtasStartassessmentyearidValue).HasColumnName("_ptas_startassessmentyearid_value");

                entity.Property(e => e.PtasStoryheight).HasColumnName("ptas_storyheight");

                entity.Property(e => e.PtasTaxaccountidValue).HasColumnName("_ptas_taxaccountid_value");

                entity.Property(e => e.PtasTaxaccountowner).HasColumnName("ptas_taxaccountowner");

                entity.Property(e => e.PtasTipoutarea).HasColumnName("ptas_tipoutarea");

                entity.Property(e => e.PtasTopfloor).HasColumnName("ptas_topfloor");

                entity.Property(e => e.PtasTotalbasement).HasColumnName("ptas_totalbasement");

                entity.Property(e => e.PtasTotalliving).HasColumnName("ptas_totalliving");

                entity.Property(e => e.PtasTotalvalue)
                    .HasColumnName("ptas_totalvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalvalueBase)
                    .HasColumnName("ptas_totalvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasUnitinspected).HasColumnName("ptas_unitinspected");

                entity.Property(e => e.PtasUnitinspectedbyidValue).HasColumnName("_ptas_unitinspectedbyid_value");

                entity.Property(e => e.PtasUnitinspecteddate).HasColumnName("ptas_unitinspecteddate");

                entity.Property(e => e.PtasUnitlocation).HasColumnName("ptas_unitlocation");

                entity.Property(e => e.PtasUnitnumbertext).HasColumnName("ptas_unitnumbertext");

                entity.Property(e => e.PtasUnitofmeasure).HasColumnName("ptas_unitofmeasure");

                entity.Property(e => e.PtasUnitqualityos).HasColumnName("ptas_unitqualityos");

                entity.Property(e => e.PtasUnittype).HasColumnName("ptas_unittype");

                entity.Property(e => e.PtasViewcityorterritorial).HasColumnName("ptas_viewcityorterritorial");

                entity.Property(e => e.PtasViewlakeorriver).HasColumnName("ptas_viewlakeorriver");

                entity.Property(e => e.PtasViewlakewashingtonorlakesammamish).HasColumnName("ptas_viewlakewashingtonorlakesammamish");

                entity.Property(e => e.PtasViewmountain).HasColumnName("ptas_viewmountain");

                entity.Property(e => e.PtasViewpugetsound).HasColumnName("ptas_viewpugetsound");

                entity.Property(e => e.PtasWidth).HasColumnName("ptas_width");

                entity.Property(e => e.PtasYearbuilt).HasColumnName("ptas_yearbuilt");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasCondounitCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_condounit_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasCondounitCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_condounit_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasCondounitModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_condounit_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasCondounitModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_condounit_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasCondounit)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_condounit_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasCondounitOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_condounit_owninguser");

                entity.HasOne(d => d.PtasAddr1CityidValueNavigation)
                    .WithMany(p => p.PtasCondounit)
                    .HasForeignKey(d => d.PtasAddr1CityidValue)
                    .HasConstraintName("FK_ptas_city_ptas_condounit_ptas_addr1_cityid");

                entity.HasOne(d => d.PtasAddr1CountryidValueNavigation)
                    .WithMany(p => p.PtasCondounit)
                    .HasForeignKey(d => d.PtasAddr1CountryidValue)
                    .HasConstraintName("FK_ptas_country_ptas_condounit_ptas_addr1_countryid");

                entity.HasOne(d => d.PtasAddr1StateidValueNavigation)
                    .WithMany(p => p.PtasCondounit)
                    .HasForeignKey(d => d.PtasAddr1StateidValue)
                    .HasConstraintName("FK_ptas_stateorprovince_ptas_condounit_ptas_addr1_stateid");

                entity.HasOne(d => d.PtasAddr1StreetnameidValueNavigation)
                    .WithMany(p => p.PtasCondounit)
                    .HasForeignKey(d => d.PtasAddr1StreetnameidValue)
                    .HasConstraintName("FK_ptas_streetname_ptas_condounit_ptas_addr1_streetnameid");

                entity.HasOne(d => d.PtasAddr1StreettypeidValueNavigation)
                    .WithMany(p => p.PtasCondounit)
                    .HasForeignKey(d => d.PtasAddr1StreettypeidValue)
                    .HasConstraintName("FK_ptas_streettype_ptas_condounit_ptas_addr1_streettypeid");

                entity.HasOne(d => d.PtasAddr1ZipcodeidValueNavigation)
                    .WithMany(p => p.PtasCondounit)
                    .HasForeignKey(d => d.PtasAddr1ZipcodeidValue)
                    .HasConstraintName("FK_ptas_zipcode_ptas_condounit_ptas_addr1_zipcodeid");

                entity.HasOne(d => d.PtasBuildingidValueNavigation)
                    .WithMany(p => p.PtasCondounit)
                    .HasForeignKey(d => d.PtasBuildingidValue)
                    .HasConstraintName("FK_ptas_buildingdetail_ptas_condounit_ptas_buildingid");

                entity.HasOne(d => d.PtasComplexidValueNavigation)
                    .WithMany(p => p.PtasCondounit)
                    .HasForeignKey(d => d.PtasComplexidValue)
                    .HasConstraintName("FK_ptas_condocomplex_ptas_condounit_ptas_complexid");

                entity.HasOne(d => d.PtasDockValueNavigation)
                    .WithMany(p => p.PtasCondounit)
                    .HasForeignKey(d => d.PtasDockValue)
                    .HasConstraintName("FK_ptas_projectdock_ptas_condounit_ptas_dock");

                entity.HasOne(d => d.PtasMasterunitidValueNavigation)
                    .WithMany(p => p.InversePtasMasterunitidValueNavigation)
                    .HasForeignKey(d => d.PtasMasterunitidValue)
                    .HasConstraintName("FK_ptas_condounit_ptas_condounit_ptas_masterunitid");

                entity.HasOne(d => d.PtasParcelidValueNavigation)
                    .WithMany(p => p.PtasCondounit)
                    .HasForeignKey(d => d.PtasParcelidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_condounit_ptas_parcelid");

                entity.HasOne(d => d.PtasPropertytypeidValueNavigation)
                    .WithMany(p => p.PtasCondounit)
                    .HasForeignKey(d => d.PtasPropertytypeidValue)
                    .HasConstraintName("FK_ptas_propertytype_ptas_condounit_ptas_propertytypeid");

                entity.HasOne(d => d.PtasResponsibilityidValueNavigation)
                    .WithMany(p => p.PtasCondounit)
                    .HasForeignKey(d => d.PtasResponsibilityidValue)
                    .HasConstraintName("FK_ptas_responsibility_ptas_condounit_ptas_responsibilityid");

                entity.HasOne(d => d.PtasSelectbyidValueNavigation)
                    .WithMany(p => p.PtasCondounitPtasSelectbyidValueNavigation)
                    .HasForeignKey(d => d.PtasSelectbyidValue)
                    .HasConstraintName("FK_systemuser_ptas_condounit_ptas_selectbyid");

                entity.HasOne(d => d.PtasSketchidValueNavigation)
                    .WithMany(p => p.PtasCondounit)
                    .HasForeignKey(d => d.PtasSketchidValue)
                    .HasConstraintName("FK_ptas_sketch_ptas_condounit_ptas_sketchid");

                entity.HasOne(d => d.PtasSpecialtyareaidValueNavigation)
                    .WithMany(p => p.PtasCondounit)
                    .HasForeignKey(d => d.PtasSpecialtyareaidValue)
                    .HasConstraintName("FK_ptas_specialtyarea_ptas_condounit_ptas_specialtyareaid");

                entity.HasOne(d => d.PtasSpecialtynbhdidValueNavigation)
                    .WithMany(p => p.PtasCondounit)
                    .HasForeignKey(d => d.PtasSpecialtynbhdidValue)
                    .HasConstraintName("FK_ptas_specialtyneighborhood_ptas_condounit_ptas_specialtynbhdid");

                entity.HasOne(d => d.PtasStartassessmentyearidValueNavigation)
                    .WithMany(p => p.PtasCondounit)
                    .HasForeignKey(d => d.PtasStartassessmentyearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_condounit_ptas_startassessmentyearid");

                entity.HasOne(d => d.PtasTaxaccountidValueNavigation)
                    .WithMany(p => p.PtasCondounit)
                    .HasForeignKey(d => d.PtasTaxaccountidValue)
                    .HasConstraintName("FK_ptas_taxaccount_ptas_condounit_ptas_taxaccountid");

                entity.HasOne(d => d.PtasUnitinspectedbyidValueNavigation)
                    .WithMany(p => p.PtasCondounitPtasUnitinspectedbyidValueNavigation)
                    .HasForeignKey(d => d.PtasUnitinspectedbyidValue)
                    .HasConstraintName("FK_systemuser_ptas_condounit_ptas_unitinspectedbyid");
            });

            modelBuilder.Entity<PtasCondounitPtasMediarepository>(entity =>
            {
                entity.ToTable("ptas_condounit_ptas_mediarepository", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_condounit_ptas_mediarepository_modifiedon");

                entity.Property(e => e.PtasCondounitPtasMediarepositoryid)
                    .HasColumnName("ptas_condounit_ptas_mediarepositoryid")
                    .ValueGeneratedNever();

                entity.Property(e => e.Modifiedon)
                    .HasColumnName("modifiedon")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.PtasCondounitid).HasColumnName("ptas_condounitid");

                entity.Property(e => e.PtasMediarepositoryid).HasColumnName("ptas_mediarepositoryid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasCondounitSnapshot>(entity =>
            {
                entity.HasKey(e => e.PtasCondounitid);

                entity.ToTable("ptas_condounit_snapshot", "dynamics");

                entity.Property(e => e.PtasCondounitid)
                    .HasColumnName("ptas_condounitid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAccessoryflatvalue)
                    .HasColumnName("ptas_accessoryflatvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAccessoryflatvalueBase)
                    .HasColumnName("ptas_accessoryflatvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAccountstatus).HasColumnName("ptas_accountstatus");

                entity.Property(e => e.PtasAccounttype).HasColumnName("ptas_accounttype");

                entity.Property(e => e.PtasAddr1CityidValue).HasColumnName("_ptas_addr1_cityid_value");

                entity.Property(e => e.PtasAddr1Compositeaddress).HasColumnName("ptas_addr1_compositeaddress");

                entity.Property(e => e.PtasAddr1CompositeaddressOneline).HasColumnName("ptas_addr1_compositeaddress_oneline");

                entity.Property(e => e.PtasAddr1CountryidValue).HasColumnName("_ptas_addr1_countryid_value");

                entity.Property(e => e.PtasAddr1Directionprefix).HasColumnName("ptas_addr1_directionprefix");

                entity.Property(e => e.PtasAddr1Directionsuffix).HasColumnName("ptas_addr1_directionsuffix");

                entity.Property(e => e.PtasAddr1Line2).HasColumnName("ptas_addr1_line2");

                entity.Property(e => e.PtasAddr1StateidValue).HasColumnName("_ptas_addr1_stateid_value");

                entity.Property(e => e.PtasAddr1StreetnameidValue).HasColumnName("_ptas_addr1_streetnameid_value");

                entity.Property(e => e.PtasAddr1Streetnumber).HasColumnName("ptas_addr1_streetnumber");

                entity.Property(e => e.PtasAddr1Streetnumberfraction).HasColumnName("ptas_addr1_streetnumberfraction");

                entity.Property(e => e.PtasAddr1StreettypeidValue).HasColumnName("_ptas_addr1_streettypeid_value");

                entity.Property(e => e.PtasAddr1ZipcodeidValue).HasColumnName("_ptas_addr1_zipcodeid_value");

                entity.Property(e => e.PtasAddressusage).HasColumnName("ptas_addressusage");

                entity.Property(e => e.PtasAttic).HasColumnName("ptas_attic");

                entity.Property(e => e.PtasBuildingidValue).HasColumnName("_ptas_buildingid_value");

                entity.Property(e => e.PtasBuildingnbr).HasColumnName("ptas_buildingnbr");

                entity.Property(e => e.PtasBuildingnumber).HasColumnName("ptas_buildingnumber");

                entity.Property(e => e.PtasCarportsqft).HasColumnName("ptas_carportsqft");

                entity.Property(e => e.PtasComplexidValue).HasColumnName("_ptas_complexid_value");

                entity.Property(e => e.PtasCondo).HasColumnName("ptas_condo");

                entity.Property(e => e.PtasCondounitcondition).HasColumnName("ptas_condounitcondition");

                entity.Property(e => e.PtasDecksqft).HasColumnName("ptas_decksqft");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasDockValue).HasColumnName("_ptas_dock_value");

                entity.Property(e => e.PtasEffectiveyear).HasColumnName("ptas_effectiveyear");

                entity.Property(e => e.PtasEndporchsqft).HasColumnName("ptas_endporchsqft");

                entity.Property(e => e.PtasEndunit).HasColumnName("ptas_endunit");

                entity.Property(e => e.PtasEnergyrating).HasColumnName("ptas_energyrating");

                entity.Property(e => e.PtasFinishedbasement).HasColumnName("ptas_finishedbasement");

                entity.Property(e => e.PtasFireplace).HasColumnName("ptas_fireplace");

                entity.Property(e => e.PtasFirstfloor).HasColumnName("ptas_firstfloor");

                entity.Property(e => e.PtasFloatinghomecondition).HasColumnName("ptas_floatinghomecondition");

                entity.Property(e => e.PtasFloatinghomefinishedbasementgrade).HasColumnName("ptas_floatinghomefinishedbasementgrade");

                entity.Property(e => e.PtasFloatinghomegrade).HasColumnName("ptas_floatinghomegrade");

                entity.Property(e => e.PtasFloatinghomeownershiptype).HasColumnName("ptas_floatinghomeownershiptype");

                entity.Property(e => e.PtasFloatinghometype).HasColumnName("ptas_floatinghometype");

                entity.Property(e => e.PtasFloornumber).HasColumnName("ptas_floornumber");

                entity.Property(e => e.PtasFlotationtype).HasColumnName("ptas_flotationtype");

                entity.Property(e => e.PtasFullsitusaddress).HasColumnName("ptas_fullsitusaddress");

                entity.Property(e => e.PtasHeatingsystem).HasColumnName("ptas_heatingsystem");

                entity.Property(e => e.PtasImprovementsvalue)
                    .HasColumnName("ptas_improvementsvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasImprovementsvalueBase)
                    .HasColumnName("ptas_improvementsvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasInspectionreason).HasColumnName("ptas_inspectionreason");

                entity.Property(e => e.PtasLandvalue)
                    .HasColumnName("ptas_landvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLandvalueBase)
                    .HasColumnName("ptas_landvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLeasingclass).HasColumnName("ptas_leasingclass");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasLegacyunitid).HasColumnName("ptas_legacyunitid");

                entity.Property(e => e.PtasLength).HasColumnName("ptas_length");

                entity.Property(e => e.PtasLicensenumber).HasColumnName("ptas_licensenumber");

                entity.Property(e => e.PtasLinearft).HasColumnName("ptas_linearft");

                entity.Property(e => e.PtasMailingaddresstaxaccount).HasColumnName("ptas_mailingaddresstaxaccount");

                entity.Property(e => e.PtasMakeandmodel).HasColumnName("ptas_makeandmodel");

                entity.Property(e => e.PtasMasterunitidValue).HasColumnName("_ptas_masterunitid_value");

                entity.Property(e => e.PtasMinornumber).HasColumnName("ptas_minornumber");

                entity.Property(e => e.PtasMobilehomeclass).HasColumnName("ptas_mobilehomeclass");

                entity.Property(e => e.PtasMobilehomecondition).HasColumnName("ptas_mobilehomecondition");

                entity.Property(e => e.PtasMobilehomesize).HasColumnName("ptas_mobilehomesize");

                entity.Property(e => e.PtasMobilehometype).HasColumnName("ptas_mobilehometype");

                entity.Property(e => e.PtasMooragetype).HasColumnName("ptas_mooragetype");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNeedtorevisit).HasColumnName("ptas_needtorevisit");

                entity.Property(e => e.PtasNewconstructionvalue)
                    .HasColumnName("ptas_newconstructionvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasNewconstructionvalueBase)
                    .HasColumnName("ptas_newconstructionvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasNotetext).HasColumnName("ptas_notetext");

                entity.Property(e => e.PtasNumberof12baths).HasColumnName("ptas_numberof12baths");

                entity.Property(e => e.PtasNumberof34baths).HasColumnName("ptas_numberof34baths");

                entity.Property(e => e.PtasNumberofbasementparkingspaces).HasColumnName("ptas_numberofbasementparkingspaces");

                entity.Property(e => e.PtasNumberofbasementtandemspaces).HasColumnName("ptas_numberofbasementtandemspaces");

                entity.Property(e => e.PtasNumberofbedrooms).HasColumnName("ptas_numberofbedrooms");

                entity.Property(e => e.PtasNumberofcarportspaces).HasColumnName("ptas_numberofcarportspaces");

                entity.Property(e => e.PtasNumberoffullbaths).HasColumnName("ptas_numberoffullbaths");

                entity.Property(e => e.PtasNumberofgarageparkingspaces).HasColumnName("ptas_numberofgarageparkingspaces");

                entity.Property(e => e.PtasNumberofgaragetandemspaces).HasColumnName("ptas_numberofgaragetandemspaces");

                entity.Property(e => e.PtasNumberofhydraulicparkingspaces).HasColumnName("ptas_numberofhydraulicparkingspaces");

                entity.Property(e => e.PtasNumberofopenparkingspaces).HasColumnName("ptas_numberofopenparkingspaces");

                entity.Property(e => e.PtasNumberofstories).HasColumnName("ptas_numberofstories");

                entity.Property(e => e.PtasOpenporchsqft).HasColumnName("ptas_openporchsqft");

                entity.Property(e => e.PtasOtherparking).HasColumnName("ptas_otherparking");

                entity.Property(e => e.PtasOtherrooms).HasColumnName("ptas_otherrooms");

                entity.Property(e => e.PtasParcelheadername).HasColumnName("ptas_parcelheadername");

                entity.Property(e => e.PtasParcelheadertext).HasColumnName("ptas_parcelheadertext");

                entity.Property(e => e.PtasParcelheadertext2).HasColumnName("ptas_parcelheadertext2");

                entity.Property(e => e.PtasParcelidValue).HasColumnName("_ptas_parcelid_value");

                entity.Property(e => e.PtasPercentcomplete).HasColumnName("ptas_percentcomplete");

                entity.Property(e => e.PtasPercentlandvaluedecimal)
                    .HasColumnName("ptas_percentlandvaluedecimal")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPercentnetcondition).HasColumnName("ptas_percentnetcondition");

                entity.Property(e => e.PtasPercentownershipdecimal)
                    .HasColumnName("ptas_percentownershipdecimal")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPercenttotalvaluedecimal)
                    .HasColumnName("ptas_percenttotalvaluedecimal")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPropertytypeidValue).HasColumnName("_ptas_propertytypeid_value");

                entity.Property(e => e.PtasRegressionexclusionreason).HasColumnName("ptas_regressionexclusionreason");

                entity.Property(e => e.PtasRegressionexclusionreasons).HasColumnName("ptas_regressionexclusionreasons");

                entity.Property(e => e.PtasResponsibilityidValue).HasColumnName("_ptas_responsibilityid_value");

                entity.Property(e => e.PtasResunitquality).HasColumnName("ptas_resunitquality");

                entity.Property(e => e.PtasRoomadditionalsqft).HasColumnName("ptas_roomadditionalsqft");

                entity.Property(e => e.PtasSeattleid).HasColumnName("ptas_seattleid");

                entity.Property(e => e.PtasSecondfloor).HasColumnName("ptas_secondfloor");

                entity.Property(e => e.PtasSelectbyidValue).HasColumnName("_ptas_selectbyid_value");

                entity.Property(e => e.PtasSelectdate).HasColumnName("ptas_selectdate");

                entity.Property(e => e.PtasSelectmethod).HasColumnName("ptas_selectmethod");

                entity.Property(e => e.PtasSelectreason).HasColumnName("ptas_selectreason");

                entity.Property(e => e.PtasSerialnumbervin).HasColumnName("ptas_serialnumbervin");

                entity.Property(e => e.PtasShowinspectionhistory).HasColumnName("ptas_showinspectionhistory");

                entity.Property(e => e.PtasShowrecordchanges).HasColumnName("ptas_showrecordchanges");

                entity.Property(e => e.PtasSitusaddress).HasColumnName("ptas_situsaddress");

                entity.Property(e => e.PtasSize).HasColumnName("ptas_size");

                entity.Property(e => e.PtasSketchidValue).HasColumnName("_ptas_sketchid_value");

                entity.Property(e => e.PtasSkirtlinearft).HasColumnName("ptas_skirtlinearft");

                entity.Property(e => e.PtasSkirttype).HasColumnName("ptas_skirttype");

                entity.Property(e => e.PtasSliplocation).HasColumnName("ptas_sliplocation");

                entity.Property(e => e.PtasSmallhomeadjustment)
                    .HasColumnName("ptas_smallhomeadjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSnapshotdatetime).HasColumnName("ptas_snapshotdatetime");

                entity.Property(e => e.PtasSnapshottype).HasColumnName("ptas_snapshottype");

                entity.Property(e => e.PtasSpecialtyareaidValue).HasColumnName("_ptas_specialtyareaid_value");

                entity.Property(e => e.PtasSpecialtynbhdidValue).HasColumnName("_ptas_specialtynbhdid_value");

                entity.Property(e => e.PtasSprinklers).HasColumnName("ptas_sprinklers");

                entity.Property(e => e.PtasStartassessmentyearidValue).HasColumnName("_ptas_startassessmentyearid_value");

                entity.Property(e => e.PtasStoryheight).HasColumnName("ptas_storyheight");

                entity.Property(e => e.PtasTaxaccountidValue).HasColumnName("_ptas_taxaccountid_value");

                entity.Property(e => e.PtasTaxaccountowner).HasColumnName("ptas_taxaccountowner");

                entity.Property(e => e.PtasTipoutarea).HasColumnName("ptas_tipoutarea");

                entity.Property(e => e.PtasTopfloor).HasColumnName("ptas_topfloor");

                entity.Property(e => e.PtasTotalbasement).HasColumnName("ptas_totalbasement");

                entity.Property(e => e.PtasTotalliving).HasColumnName("ptas_totalliving");

                entity.Property(e => e.PtasTotalvalue)
                    .HasColumnName("ptas_totalvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalvalueBase)
                    .HasColumnName("ptas_totalvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasUnitinspected).HasColumnName("ptas_unitinspected");

                entity.Property(e => e.PtasUnitinspectedbyidValue).HasColumnName("_ptas_unitinspectedbyid_value");

                entity.Property(e => e.PtasUnitinspecteddate).HasColumnName("ptas_unitinspecteddate");

                entity.Property(e => e.PtasUnitlocation).HasColumnName("ptas_unitlocation");

                entity.Property(e => e.PtasUnitnumbertext).HasColumnName("ptas_unitnumbertext");

                entity.Property(e => e.PtasUnitofmeasure).HasColumnName("ptas_unitofmeasure");

                entity.Property(e => e.PtasUnitqualityos).HasColumnName("ptas_unitqualityos");

                entity.Property(e => e.PtasUnittype).HasColumnName("ptas_unittype");

                entity.Property(e => e.PtasViewcityorterritorial).HasColumnName("ptas_viewcityorterritorial");

                entity.Property(e => e.PtasViewlakeorriver).HasColumnName("ptas_viewlakeorriver");

                entity.Property(e => e.PtasViewlakewashingtonorlakesammamish).HasColumnName("ptas_viewlakewashingtonorlakesammamish");

                entity.Property(e => e.PtasViewmountain).HasColumnName("ptas_viewmountain");

                entity.Property(e => e.PtasViewpugetsound).HasColumnName("ptas_viewpugetsound");

                entity.Property(e => e.PtasWidth).HasColumnName("ptas_width");

                entity.Property(e => e.PtasYearbuilt).HasColumnName("ptas_yearbuilt");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasContaminatedlandreduction>(entity =>
            {
                entity.ToTable("ptas_contaminatedlandreduction", "dynamics");

                entity.Property(e => e.PtasContaminatedlandreductionid)
                    .HasColumnName("ptas_contaminatedlandreductionid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAssessedvaluereduction)
                    .HasColumnName("ptas_assessedvaluereduction")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAssessedvaluereductionBase)
                    .HasColumnName("ptas_assessedvaluereduction_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAssessmentyearidValue).HasColumnName("_ptas_assessmentyearid_value");

                entity.Property(e => e.PtasBaselandvalue)
                    .HasColumnName("ptas_baselandvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasBaselandvalueBase)
                    .HasColumnName("ptas_baselandvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasContaminatedprojectidValue).HasColumnName("_ptas_contaminatedprojectid_value");

                entity.Property(e => e.PtasImprovementvalue)
                    .HasColumnName("ptas_improvementvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasImprovementvalueBase)
                    .HasColumnName("ptas_improvementvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLandreducedvalue)
                    .HasColumnName("ptas_landreducedvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLandreducedvalueBase)
                    .HasColumnName("ptas_landreducedvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLandreducedvaluerounded)
                    .HasColumnName("ptas_landreducedvaluerounded")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLandreducedvalueroundedBase)
                    .HasColumnName("ptas_landreducedvaluerounded_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasParcelidValue).HasColumnName("_ptas_parcelid_value");

                entity.Property(e => e.PtasPercentremediationcost)
                    .HasColumnName("ptas_percentremediationcost")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPresentcost)
                    .HasColumnName("ptas_presentcost")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPresentcostBase)
                    .HasColumnName("ptas_presentcost_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalvalue)
                    .HasColumnName("ptas_totalvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalvalueBase)
                    .HasColumnName("ptas_totalvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasContaminatedlandreductionCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_contaminatedlandreduction_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasContaminatedlandreductionCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_contaminatedlandreduction_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasContaminatedlandreductionModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_contaminatedlandreduction_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasContaminatedlandreductionModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_contaminatedlandreduction_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasContaminatedlandreduction)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_contaminatedlandreduction_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasContaminatedlandreductionOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_contaminatedlandreduction_owninguser");

                entity.HasOne(d => d.PtasAssessmentyearidValueNavigation)
                    .WithMany(p => p.PtasContaminatedlandreduction)
                    .HasForeignKey(d => d.PtasAssessmentyearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_contaminatedlandreduction_ptas_assessmentyearid");

                entity.HasOne(d => d.PtasContaminatedprojectidValueNavigation)
                    .WithMany(p => p.PtasContaminatedlandreduction)
                    .HasForeignKey(d => d.PtasContaminatedprojectidValue)
                    .HasConstraintName("FK_ptas_contaminationproject_ptas_contaminatedlandreduction_ptas_contaminatedprojectid");

                entity.HasOne(d => d.PtasParcelidValueNavigation)
                    .WithMany(p => p.PtasContaminatedlandreduction)
                    .HasForeignKey(d => d.PtasParcelidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_contaminatedlandreduction_ptas_parcelid");
            });

            modelBuilder.Entity<PtasContaminationproject>(entity =>
            {
                entity.ToTable("ptas_contaminationproject", "dynamics");

                entity.Property(e => e.PtasContaminationprojectid)
                    .HasColumnName("ptas_contaminationprojectid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.Ptas10yeartreasuryrate)
                    .HasColumnName("ptas_10yeartreasuryrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEstimatetimetocure).HasColumnName("ptas_estimatetimetocure");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasPresentcost)
                    .HasColumnName("ptas_presentcost")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPresentcostBase)
                    .HasColumnName("ptas_presentcost_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalremediationcost)
                    .HasColumnName("ptas_totalremediationcost")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalremediationcostBase)
                    .HasColumnName("ptas_totalremediationcost_base")
                    .HasColumnType("money");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasContaminationprojectCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_contaminationproject_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasContaminationprojectCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_contaminationproject_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasContaminationprojectModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_contaminationproject_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasContaminationprojectModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_contaminationproject_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasContaminationproject)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_contaminationproject_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasContaminationprojectOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_contaminationproject_owninguser");
            });

            modelBuilder.Entity<PtasCountry>(entity =>
            {
                entity.ToTable("ptas_country", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_country_modifiedon");

                entity.Property(e => e.PtasCountryid)
                    .HasColumnName("ptas_countryid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasAbbreviation).HasColumnName("ptas_abbreviation");

                entity.Property(e => e.PtasAlpha2).HasColumnName("ptas_alpha2");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNumericcode).HasColumnName("ptas_numericcode");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasCountryCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_country_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasCountryCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_country_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasCountryModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_country_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasCountryModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_country_modifiedonbehalfby");
            });

            modelBuilder.Entity<PtasCounty>(entity =>
            {
                entity.ToTable("ptas_county", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_county_modifiedon");

                entity.Property(e => e.PtasCountyid)
                    .HasColumnName("ptas_countyid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasCountyCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_county_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasCountyCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_county_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasCountyModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_county_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasCountyModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_county_modifiedonbehalfby");
            });

            modelBuilder.Entity<PtasCountyStateorprovince>(entity =>
            {
                entity.ToTable("ptas_county_stateorprovince", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_county_stateorprovince_modifiedon");

                entity.Property(e => e.PtasCountyStateorprovinceid)
                    .HasColumnName("ptas_county_stateorprovinceid")
                    .ValueGeneratedNever();

                entity.Property(e => e.Modifiedon)
                    .HasColumnName("modifiedon")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.PtasCountyid).HasColumnName("ptas_countyid");

                entity.Property(e => e.PtasStateorprovinceid).HasColumnName("ptas_stateorprovinceid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasCountyZipcode>(entity =>
            {
                entity.ToTable("ptas_county_zipcode", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_county_zipcode_modifiedon");

                entity.Property(e => e.PtasCountyZipcodeid)
                    .HasColumnName("ptas_county_zipcodeid")
                    .ValueGeneratedNever();

                entity.Property(e => e.Modifiedon)
                    .HasColumnName("modifiedon")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.PtasCountyid).HasColumnName("ptas_countyid");

                entity.Property(e => e.PtasZipcodeid).HasColumnName("ptas_zipcodeid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasCountylevydetails>(entity =>
            {
                entity.ToTable("ptas_countylevydetails", "dynamics");

                entity.Property(e => e.PtasCountylevydetailsid)
                    .HasColumnName("ptas_countylevydetailsid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.Ptas100timberassessedval)
                    .HasColumnName("ptas_100timberassessedval")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas100timberassessedvalBase)
                    .HasColumnName("ptas_100timberassessedval_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas80timberassessedval)
                    .HasColumnName("ptas_80timberassessedval")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas80timberassessedvalBase)
                    .HasColumnName("ptas_80timberassessedval_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAnnexassessedval)
                    .HasColumnName("ptas_annexassessedval")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAnnexassessedvalBase)
                    .HasColumnName("ptas_annexassessedval_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCountyidValue).HasColumnName("_ptas_countyid_value");

                entity.Property(e => e.PtasCountypercenttaxdistrict)
                    .HasColumnName("ptas_countypercenttaxdistrict")
                    .HasColumnType("money");

                entity.Property(e => e.PtasExcessassessedval)
                    .HasColumnName("ptas_excessassessedval")
                    .HasColumnType("money");

                entity.Property(e => e.PtasExcessassessedvalBase)
                    .HasColumnName("ptas_excessassessedval_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLevylimitworksheetdetailidValue).HasColumnName("_ptas_levylimitworksheetdetailid_value");

                entity.Property(e => e.PtasLocalnewcons)
                    .HasColumnName("ptas_localnewcons")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLocalnewconsBase)
                    .HasColumnName("ptas_localnewcons_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasRefundamt)
                    .HasColumnName("ptas_refundamt")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRefundamtBase)
                    .HasColumnName("ptas_refundamt_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasReglevyassessedval)
                    .HasColumnName("ptas_reglevyassessedval")
                    .HasColumnType("money");

                entity.Property(e => e.PtasReglevyassessedvalBase)
                    .HasColumnName("ptas_reglevyassessedval_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTaxdistrictidValue).HasColumnName("_ptas_taxdistrictid_value");

                entity.Property(e => e.PtasUtilityval)
                    .HasColumnName("ptas_utilityval")
                    .HasColumnType("money");

                entity.Property(e => e.PtasUtilityvalBase)
                    .HasColumnName("ptas_utilityval_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasYearidValue).HasColumnName("_ptas_yearid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasCurrentuseapplication>(entity =>
            {
                entity.ToTable("ptas_currentuseapplication", "dynamics");

                entity.Property(e => e.PtasCurrentuseapplicationid)
                    .HasColumnName("ptas_currentuseapplicationid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAcresappliedfor)
                    .HasColumnName("ptas_acresappliedfor")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAdditionalinformationrequestedon).HasColumnName("ptas_additionalinformationrequestedon");

                entity.Property(e => e.PtasAdditionalinformationrequired).HasColumnName("ptas_additionalinformationrequired");

                entity.Property(e => e.PtasApplicationdate).HasColumnName("ptas_applicationdate");

                entity.Property(e => e.PtasApprovaldenialdate).HasColumnName("ptas_approvaldenialdate");

                entity.Property(e => e.PtasCouncilfile).HasColumnName("ptas_councilfile");

                entity.Property(e => e.PtasCurrentusegroupValue).HasColumnName("_ptas_currentusegroup_value");

                entity.Property(e => e.PtasCurrentusetype).HasColumnName("ptas_currentusetype");

                entity.Property(e => e.PtasEntireparcels).HasColumnName("ptas_entireparcels");

                entity.Property(e => e.PtasFaAcreagecrops)
                    .HasColumnName("ptas_fa_acreagecrops")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFaAcreageemployeehousing)
                    .HasColumnName("ptas_fa_acreageemployeehousing")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFaAcreageequestrianuses)
                    .HasColumnName("ptas_fa_acreageequestrianuses")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFaAcreagefarmbuildingsgreenhouses)
                    .HasColumnName("ptas_fa_acreagefarmbuildingsgreenhouses")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFaAcreagegrazing)
                    .HasColumnName("ptas_fa_acreagegrazing")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFaAcreagehorticulture)
                    .HasColumnName("ptas_fa_acreagehorticulture")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFaAcreagelivestock)
                    .HasColumnName("ptas_fa_acreagelivestock")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFaAcreageother)
                    .HasColumnName("ptas_fa_acreageother")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFaAcreageresidence)
                    .HasColumnName("ptas_fa_acreageresidence")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFaAcreagewoodlotareas)
                    .HasColumnName("ptas_fa_acreagewoodlotareas")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFaAcresusedtogrowplantsincontainers)
                    .HasColumnName("ptas_fa_acresusedtogrowplantsincontainers")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFaAcresusedtogrowplantsintheground)
                    .HasColumnName("ptas_fa_acresusedtogrowplantsintheground")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFaAcresusedtostorepurchasedplants)
                    .HasColumnName("ptas_fa_acresusedtostorepurchasedplants")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFaAverageincomeperacre)
                    .HasColumnName("ptas_fa_averageincomeperacre")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFaAverageincomeperacreBase)
                    .HasColumnName("ptas_fa_averageincomeperacre_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFaAverageinvestmentperacre)
                    .HasColumnName("ptas_fa_averageinvestmentperacre")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFaAverageinvestmentperacreBase)
                    .HasColumnName("ptas_fa_averageinvestmentperacre_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFaAveragerentalfeeperacre)
                    .HasColumnName("ptas_fa_averagerentalfeeperacre")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFaAveragerentalfeeperacreBase)
                    .HasColumnName("ptas_fa_averagerentalfeeperacre_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFaCropsdry)
                    .HasColumnName("ptas_fa_cropsdry")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFaCropsirrigated)
                    .HasColumnName("ptas_fa_cropsirrigated")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFaDescriptionofhorticulturalactivity).HasColumnName("ptas_fa_descriptionofhorticulturalactivity");

                entity.Property(e => e.PtasFaDescriptionofland).HasColumnName("ptas_fa_descriptionofland");

                entity.Property(e => e.PtasFaDescriptionofotheracres).HasColumnName("ptas_fa_descriptionofotheracres");

                entity.Property(e => e.PtasFaDetailsoflandspresentuse).HasColumnName("ptas_fa_detailsoflandspresentuse");

                entity.Property(e => e.PtasFaDetailsofotherpermitteduses).HasColumnName("ptas_fa_detailsofotherpermitteduses");

                entity.Property(e => e.PtasFaGrazinglandcultivated).HasColumnName("ptas_fa_grazinglandcultivated");

                entity.Property(e => e.PtasFaHorticulturelessthanfiveacres).HasColumnName("ptas_fa_horticulturelessthanfiveacres");

                entity.Property(e => e.PtasFaImprovementsontheparcels).HasColumnName("ptas_fa_improvementsontheparcels");

                entity.Property(e => e.PtasFaLandpermittedforanyotheruse).HasColumnName("ptas_fa_landpermittedforanyotheruse");

                entity.Property(e => e.PtasFaPercentofacreageforretail)
                    .HasColumnName("ptas_fa_percentofacreageforretail")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFaPercentoflandinpavement)
                    .HasColumnName("ptas_fa_percentoflandinpavement")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFaPrimaryresidenceofowneronparcel).HasColumnName("ptas_fa_primaryresidenceofowneronparcel");

                entity.Property(e => e.PtasFaResidenceinvolvementinagriculturalop).HasColumnName("ptas_fa_residenceinvolvementinagriculturalop");

                entity.Property(e => e.PtasFaSellingplantsfromanothergrower).HasColumnName("ptas_fa_sellingplantsfromanothergrower");

                entity.Property(e => e.PtasFaTotalacreage)
                    .HasColumnName("ptas_fa_totalacreage")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFaTypesofcrops).HasColumnName("ptas_fa_typesofcrops");

                entity.Property(e => e.PtasFaTypesofequestrianuses).HasColumnName("ptas_fa_typesofequestrianuses");

                entity.Property(e => e.PtasFaTypesoflivestock).HasColumnName("ptas_fa_typesoflivestock");

                entity.Property(e => e.PtasFaWoodlotforgrazinglivestock).HasColumnName("ptas_fa_woodlotforgrazinglivestock");

                entity.Property(e => e.PtasHomesiteapproved).HasColumnName("ptas_homesiteapproved");

                entity.Property(e => e.PtasHomesitedenied).HasColumnName("ptas_homesitedenied");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasOsApplicantisother).HasColumnName("ptas_os_applicantisother");

                entity.Property(e => e.PtasOsApplicantisotherdetails).HasColumnName("ptas_os_applicantisotherdetails");

                entity.Property(e => e.PtasOsApplicantispropertyowner).HasColumnName("ptas_os_applicantispropertyowner");

                entity.Property(e => e.PtasOsApplicantpurchasingthroughcontract).HasColumnName("ptas_os_applicantpurchasingthroughcontract");

                entity.Property(e => e.PtasOsCityValue).HasColumnName("_ptas_os_city_value");

                entity.Property(e => e.PtasOsCurrentpublicuse).HasColumnName("ptas_os_currentpublicuse");

                entity.Property(e => e.PtasOsExistingimprovementsonparcels).HasColumnName("ptas_os_existingimprovementsonparcels");

                entity.Property(e => e.PtasOsFutureimprovementsonparcels).HasColumnName("ptas_os_futureimprovementsonparcels");

                entity.Property(e => e.PtasOsIncurrentuseprogram).HasColumnName("ptas_os_incurrentuseprogram");

                entity.Property(e => e.PtasOsLimitinglandagreements).HasColumnName("ptas_os_limitinglandagreements");

                entity.Property(e => e.PtasOsLocatedinincorporatedcity).HasColumnName("ptas_os_locatedinincorporatedcity");

                entity.Property(e => e.PtasOsOtherpermitteduses).HasColumnName("ptas_os_otherpermitteduses");

                entity.Property(e => e.PtasOsPresentandproposedlanduses).HasColumnName("ptas_os_presentandproposedlanduses");

                entity.Property(e => e.PtasOsProposedpublicuse).HasColumnName("ptas_os_proposedpublicuse");

                entity.Property(e => e.PtasOsResourcecategoryjustification).HasColumnName("ptas_os_resourcecategoryjustification");

                entity.Property(e => e.PtasOsRoadpropertyisaccessedfrom).HasColumnName("ptas_os_roadpropertyisaccessedfrom");

                entity.Property(e => e.PtasOsTotalbonuspoints).HasColumnName("ptas_os_totalbonuspoints");

                entity.Property(e => e.PtasOsTotalpoints).HasColumnName("ptas_os_totalpoints");

                entity.Property(e => e.PtasOsTotalstandardpoints).HasColumnName("ptas_os_totalstandardpoints");

                entity.Property(e => e.PtasOwnernotifieddate).HasColumnName("ptas_ownernotifieddate");

                entity.Property(e => e.PtasParcelsappliedfor).HasColumnName("ptas_parcelsappliedfor");

                entity.Property(e => e.PtasPortionofparcels).HasColumnName("ptas_portionofparcels");

                entity.Property(e => e.PtasPrimaryapplicantValue).HasColumnName("_ptas_primaryapplicant_value");

                entity.Property(e => e.PtasProcessingfeereceived)
                    .HasColumnName("ptas_processingfeereceived")
                    .HasColumnType("money");

                entity.Property(e => e.PtasProcessingfeereceivedBase)
                    .HasColumnName("ptas_processingfeereceived_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasProcessingfeereceiveddate).HasColumnName("ptas_processingfeereceiveddate");

                entity.Property(e => e.PtasProcessingfeesenttotreasury).HasColumnName("ptas_processingfeesenttotreasury");

                entity.Property(e => e.PtasTaxcodeareaValue).HasColumnName("_ptas_taxcodearea_value");

                entity.Property(e => e.PtasTfDescribeimprovementsontheparcels).HasColumnName("ptas_tf_describeimprovementsontheparcels");

                entity.Property(e => e.PtasTfDescriptionofland).HasColumnName("ptas_tf_descriptionofland");

                entity.Property(e => e.PtasTfDescriptionoftimbermanagementplan).HasColumnName("ptas_tf_descriptionoftimbermanagementplan");

                entity.Property(e => e.PtasTfDetailsofotherpermitteduses).HasColumnName("ptas_tf_detailsofotherpermitteduses");

                entity.Property(e => e.PtasTfExistingtimbermanagementplan).HasColumnName("ptas_tf_existingtimbermanagementplan");

                entity.Property(e => e.PtasTfLandpermittedforanyotheruse).HasColumnName("ptas_tf_landpermittedforanyotheruse");

                entity.Property(e => e.PtasTfLandsubdividedorplatfiled).HasColumnName("ptas_tf_landsubdividedorplatfiled");

                entity.Property(e => e.PtasTfLandsubjecttoassessmentinrcw7604610).HasColumnName("ptas_tf_landsubjecttoassessmentinrcw7604610");

                entity.Property(e => e.PtasTfLandusedforgrazing).HasColumnName("ptas_tf_landusedforgrazing");

                entity.Property(e => e.PtasTfNumberofgrazingacres)
                    .HasColumnName("ptas_tf_numberofgrazingacres")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTfParcelsmanagedassingleoperation).HasColumnName("ptas_tf_parcelsmanagedassingleoperation");

                entity.Property(e => e.PtasTfRelationshipofparcelowners).HasColumnName("ptas_tf_relationshipofparcelowners");

                entity.Property(e => e.PtasTfSummaryofcurrentandpastexperience).HasColumnName("ptas_tf_summaryofcurrentandpastexperience");

                entity.Property(e => e.PtasTfTitle76rcwcompliant).HasColumnName("ptas_tf_title76rcwcompliant");

                entity.Property(e => e.PtasTfWhynotcomplianttitle76rcw).HasColumnName("ptas_tf_whynotcomplianttitle76rcw");

                entity.Property(e => e.PtasTfWhynotsubjecttoassessmentrcw7604610).HasColumnName("ptas_tf_whynotsubjecttoassessmentrcw7604610");

                entity.Property(e => e.PtasTotalnumberofacres)
                    .HasColumnName("ptas_totalnumberofacres")
                    .HasColumnType("money");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasCurrentuseapplicationCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentuseapplication_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasCurrentuseapplicationCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentuseapplication_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasCurrentuseapplicationModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentuseapplication_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasCurrentuseapplicationModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentuseapplication_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasCurrentuseapplication)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_currentuseapplication_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasCurrentuseapplicationOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_currentuseapplication_owninguser");

                entity.HasOne(d => d.PtasCurrentusegroupValueNavigation)
                    .WithMany(p => p.PtasCurrentuseapplication)
                    .HasForeignKey(d => d.PtasCurrentusegroupValue)
                    .HasConstraintName("FK_ptas_currentusegroup_ptas_currentuseapplication_ptas_currentusegroup");

                entity.HasOne(d => d.PtasOsCityValueNavigation)
                    .WithMany(p => p.PtasCurrentuseapplication)
                    .HasForeignKey(d => d.PtasOsCityValue)
                    .HasConstraintName("FK_ptas_jurisdiction_ptas_currentuseapplication_ptas_os_city");

                entity.HasOne(d => d.PtasPrimaryapplicantValueNavigation)
                    .WithMany(p => p.PtasCurrentuseapplication)
                    .HasForeignKey(d => d.PtasPrimaryapplicantValue)
                    .HasConstraintName("FK_contact_ptas_currentuseapplication_ptas_primaryapplicant");

                entity.HasOne(d => d.PtasTaxcodeareaValueNavigation)
                    .WithMany(p => p.PtasCurrentuseapplication)
                    .HasForeignKey(d => d.PtasTaxcodeareaValue)
                    .HasConstraintName("FK_ptas_area_ptas_currentuseapplication_ptas_taxcodearea");
            });

            modelBuilder.Entity<PtasCurrentuseapplicationparcel>(entity =>
            {
                entity.ToTable("ptas_currentuseapplicationparcel", "dynamics");

                entity.Property(e => e.PtasCurrentuseapplicationparcelid)
                    .HasColumnName("ptas_currentuseapplicationparcelid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAcresappliedfor)
                    .HasColumnName("ptas_acresappliedfor")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAcresappliedforfarmandagriculture)
                    .HasColumnName("ptas_acresappliedforfarmandagriculture")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAcresappliedforopenspace)
                    .HasColumnName("ptas_acresappliedforopenspace")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAcresappliedfortimberandforestland)
                    .HasColumnName("ptas_acresappliedfortimberandforestland")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAddr1CityidValue).HasColumnName("_ptas_addr1_cityid_value");

                entity.Property(e => e.PtasAddr1Compositeaddress).HasColumnName("ptas_addr1_compositeaddress");

                entity.Property(e => e.PtasAddr1CompositeaddressOneline).HasColumnName("ptas_addr1_compositeaddress_oneline");

                entity.Property(e => e.PtasAddr1CountryidValue).HasColumnName("_ptas_addr1_countryid_value");

                entity.Property(e => e.PtasAddr1Directionprefix).HasColumnName("ptas_addr1_directionprefix");

                entity.Property(e => e.PtasAddr1Directionsuffix).HasColumnName("ptas_addr1_directionsuffix");

                entity.Property(e => e.PtasAddr1Line2).HasColumnName("ptas_addr1_line2");

                entity.Property(e => e.PtasAddr1StateidValue).HasColumnName("_ptas_addr1_stateid_value");

                entity.Property(e => e.PtasAddr1StreetnameidValue).HasColumnName("_ptas_addr1_streetnameid_value");

                entity.Property(e => e.PtasAddr1Streetnumber).HasColumnName("ptas_addr1_streetnumber");

                entity.Property(e => e.PtasAddr1Streetnumberfraction).HasColumnName("ptas_addr1_streetnumberfraction");

                entity.Property(e => e.PtasAddr1StreettypeidValue).HasColumnName("_ptas_addr1_streettypeid_value");

                entity.Property(e => e.PtasAddr1ZipcodeidValue).HasColumnName("_ptas_addr1_zipcodeid_value");

                entity.Property(e => e.PtasBacktaxesdue).HasColumnName("ptas_backtaxesdue");

                entity.Property(e => e.PtasBacktaxesowed)
                    .HasColumnName("ptas_backtaxesowed")
                    .HasColumnType("money");

                entity.Property(e => e.PtasBacktaxesowedBase)
                    .HasColumnName("ptas_backtaxesowed_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasBacktaxesreason).HasColumnName("ptas_backtaxesreason");

                entity.Property(e => e.PtasCouncilfile).HasColumnName("ptas_councilfile");

                entity.Property(e => e.PtasCrossreferenceparcelidValue).HasColumnName("_ptas_crossreferenceparcelid_value");

                entity.Property(e => e.PtasCurrentuseapplicationValue).HasColumnName("_ptas_currentuseapplication_value");

                entity.Property(e => e.PtasCurrentusegroupidValue).HasColumnName("_ptas_currentusegroupid_value");

                entity.Property(e => e.PtasDateparcelacquired).HasColumnName("ptas_dateparcelacquired");

                entity.Property(e => e.PtasEmailaddress).HasColumnName("ptas_emailaddress");

                entity.Property(e => e.PtasFarmandagriculture).HasColumnName("ptas_farmandagriculture");

                entity.Property(e => e.PtasFolio).HasColumnName("ptas_folio");

                entity.Property(e => e.PtasLastsitevisit).HasColumnName("ptas_lastsitevisit");

                entity.Property(e => e.PtasMonitoringlettersenton).HasColumnName("ptas_monitoringlettersenton");

                entity.Property(e => e.PtasMonitoringlettersentwaitingfortaxpayer).HasColumnName("ptas_monitoringlettersentwaitingfortaxpayer");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasOpenspace).HasColumnName("ptas_openspace");

                entity.Property(e => e.PtasParcelValue).HasColumnName("_ptas_parcel_value");

                entity.Property(e => e.PtasParcelowner).HasColumnName("ptas_parcelowner");

                entity.Property(e => e.PtasPbrstype).HasColumnName("ptas_pbrstype");

                entity.Property(e => e.PtasPhonenumber).HasColumnName("ptas_phonenumber");

                entity.Property(e => e.PtasSitevisitrequired).HasColumnName("ptas_sitevisitrequired");

                entity.Property(e => e.PtasSitevisittaskidValue).HasColumnName("_ptas_sitevisittaskid_value");

                entity.Property(e => e.PtasTimberandforestland).HasColumnName("ptas_timberandforestland");

                entity.Property(e => e.PtasTotalacres)
                    .HasColumnName("ptas_totalacres")
                    .HasColumnType("money");

                entity.Property(e => e.PtasUpdatedforestmanagementplandue).HasColumnName("ptas_updatedforestmanagementplandue");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasCurrentuseapplicationparcelCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentuseapplicationparcel_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasCurrentuseapplicationparcelCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentuseapplicationparcel_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasCurrentuseapplicationparcelModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentuseapplicationparcel_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasCurrentuseapplicationparcelModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentuseapplicationparcel_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasCurrentuseapplicationparcel)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_currentuseapplicationparcel_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasCurrentuseapplicationparcelOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_currentuseapplicationparcel_owninguser");

                entity.HasOne(d => d.PtasAddr1CityidValueNavigation)
                    .WithMany(p => p.PtasCurrentuseapplicationparcel)
                    .HasForeignKey(d => d.PtasAddr1CityidValue)
                    .HasConstraintName("FK_ptas_city_ptas_currentuseapplicationparcel_ptas_addr1_cityid");

                entity.HasOne(d => d.PtasAddr1CountryidValueNavigation)
                    .WithMany(p => p.PtasCurrentuseapplicationparcel)
                    .HasForeignKey(d => d.PtasAddr1CountryidValue)
                    .HasConstraintName("FK_ptas_country_ptas_currentuseapplicationparcel_ptas_addr1_countryid");

                entity.HasOne(d => d.PtasAddr1StateidValueNavigation)
                    .WithMany(p => p.PtasCurrentuseapplicationparcel)
                    .HasForeignKey(d => d.PtasAddr1StateidValue)
                    .HasConstraintName("FK_ptas_stateorprovince_ptas_currentuseapplicationparcel_ptas_addr1_stateid");

                entity.HasOne(d => d.PtasAddr1StreetnameidValueNavigation)
                    .WithMany(p => p.PtasCurrentuseapplicationparcel)
                    .HasForeignKey(d => d.PtasAddr1StreetnameidValue)
                    .HasConstraintName("FK_ptas_streetname_ptas_currentuseapplicationparcel_ptas_addr1_streetnameid");

                entity.HasOne(d => d.PtasAddr1StreettypeidValueNavigation)
                    .WithMany(p => p.PtasCurrentuseapplicationparcel)
                    .HasForeignKey(d => d.PtasAddr1StreettypeidValue)
                    .HasConstraintName("FK_ptas_streettype_ptas_currentuseapplicationparcel_ptas_addr1_streettypeid");

                entity.HasOne(d => d.PtasAddr1ZipcodeidValueNavigation)
                    .WithMany(p => p.PtasCurrentuseapplicationparcel)
                    .HasForeignKey(d => d.PtasAddr1ZipcodeidValue)
                    .HasConstraintName("FK_ptas_zipcode_ptas_currentuseapplicationparcel_ptas_addr1_zipcodeid");

                entity.HasOne(d => d.PtasCrossreferenceparcelidValueNavigation)
                    .WithMany(p => p.PtasCurrentuseapplicationparcelPtasCrossreferenceparcelidValueNavigation)
                    .HasForeignKey(d => d.PtasCrossreferenceparcelidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_currentuseapplicationparcel_ptas_crossreferenceparcelid");

                entity.HasOne(d => d.PtasCurrentuseapplicationValueNavigation)
                    .WithMany(p => p.PtasCurrentuseapplicationparcel)
                    .HasForeignKey(d => d.PtasCurrentuseapplicationValue)
                    .HasConstraintName("FK_ptas_currentuseapplication_ptas_currentuseapplicationparcel_ptas_currentuseapplication");

                entity.HasOne(d => d.PtasCurrentusegroupidValueNavigation)
                    .WithMany(p => p.PtasCurrentuseapplicationparcel)
                    .HasForeignKey(d => d.PtasCurrentusegroupidValue)
                    .HasConstraintName("FK_ptas_currentusegroup_ptas_currentuseapplicationparcel_ptas_currentusegroupid");

                entity.HasOne(d => d.PtasParcelValueNavigation)
                    .WithMany(p => p.PtasCurrentuseapplicationparcelPtasParcelValueNavigation)
                    .HasForeignKey(d => d.PtasParcelValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_currentuseapplicationparcel_ptas_parcel");

                entity.HasOne(d => d.PtasSitevisittaskidValueNavigation)
                    .WithMany(p => p.PtasCurrentuseapplicationparcel)
                    .HasForeignKey(d => d.PtasSitevisittaskidValue)
                    .HasConstraintName("FK_ptas_currentusetask_ptas_currentuseapplicationparcel_ptas_sitevisittaskid");
            });

            modelBuilder.Entity<PtasCurrentusebacktaxstatement>(entity =>
            {
                entity.ToTable("ptas_currentusebacktaxstatement", "dynamics");

                entity.Property(e => e.PtasCurrentusebacktaxstatementid)
                    .HasColumnName("ptas_currentusebacktaxstatementid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.Ptas20penalty)
                    .HasColumnName("ptas_20penalty")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas20penaltyBase)
                    .HasColumnName("ptas_20penalty_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAdd20penalty).HasColumnName("ptas_add20penalty");

                entity.Property(e => e.PtasBacktaxprocessed).HasColumnName("ptas_backtaxprocessed");

                entity.Property(e => e.PtasCompensatingtax)
                    .HasColumnName("ptas_compensatingtax")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCompensatingtaxBase)
                    .HasColumnName("ptas_compensatingtax_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrentuseparcelidValue).HasColumnName("_ptas_currentuseparcelid_value");

                entity.Property(e => e.PtasCurrentusevalue)
                    .HasColumnName("ptas_currentusevalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrentusevalueBase)
                    .HasColumnName("ptas_currentusevalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDateofremoval).HasColumnName("ptas_dateofremoval");

                entity.Property(e => e.PtasForestlandvalue)
                    .HasColumnName("ptas_forestlandvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasForestlandvalueBase)
                    .HasColumnName("ptas_forestlandvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasGrandtotaltaxinterestandpenalty)
                    .HasColumnName("ptas_grandtotaltaxinterestandpenalty")
                    .HasColumnType("money");

                entity.Property(e => e.PtasGrandtotaltaxinterestandpenaltyBase)
                    .HasColumnName("ptas_grandtotaltaxinterestandpenalty_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasInterestrate).HasColumnName("ptas_interestrate");

                entity.Property(e => e.PtasLevyrate)
                    .HasColumnName("ptas_levyrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasMarketvalue)
                    .HasColumnName("ptas_marketvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasMarketvalueBase)
                    .HasColumnName("ptas_marketvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNumberofdaysincurrentuse).HasColumnName("ptas_numberofdaysincurrentuse");

                entity.Property(e => e.PtasNumberofdaysinyear).HasColumnName("ptas_numberofdaysinyear");

                entity.Property(e => e.PtasNumberofdaysremainingafterremoval).HasColumnName("ptas_numberofdaysremainingafterremoval");

                entity.Property(e => e.PtasNumberofmonths).HasColumnName("ptas_numberofmonths");

                entity.Property(e => e.PtasNumberofyearsofbacktaxes).HasColumnName("ptas_numberofyearsofbacktaxes");

                entity.Property(e => e.PtasProrationfactorremainder)
                    .HasColumnName("ptas_prorationfactorremainder")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRemainderadditionaltax)
                    .HasColumnName("ptas_remainderadditionaltax")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRemainderadditionaltaxBase)
                    .HasColumnName("ptas_remainderadditionaltax_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRemainderproratedcurrentusevalue)
                    .HasColumnName("ptas_remainderproratedcurrentusevalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRemainderproratedcurrentusevalueBase)
                    .HasColumnName("ptas_remainderproratedcurrentusevalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRemainderproratedmarketvalue)
                    .HasColumnName("ptas_remainderproratedmarketvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRemainderproratedmarketvalueBase)
                    .HasColumnName("ptas_remainderproratedmarketvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotaladditionaltax)
                    .HasColumnName("ptas_totaladditionaltax")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotaladditionaltaxBase)
                    .HasColumnName("ptas_totaladditionaltax_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotaladditionaltaxinterestandpenalty)
                    .HasColumnName("ptas_totaladditionaltaxinterestandpenalty")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotaladditionaltaxinterestandpenaltyBase)
                    .HasColumnName("ptas_totaladditionaltaxinterestandpenalty_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalinterest)
                    .HasColumnName("ptas_totalinterest")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalinterestBase)
                    .HasColumnName("ptas_totalinterest_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalprioryearstaxandinterest)
                    .HasColumnName("ptas_totalprioryearstaxandinterest")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalprioryearstaxandinterestBase)
                    .HasColumnName("ptas_totalprioryearstaxandinterest_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasYtdadditionaltax)
                    .HasColumnName("ptas_ytdadditionaltax")
                    .HasColumnType("money");

                entity.Property(e => e.PtasYtdadditionaltaxBase)
                    .HasColumnName("ptas_ytdadditionaltax_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasYtdproratedcurrentusevalue)
                    .HasColumnName("ptas_ytdproratedcurrentusevalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasYtdproratedcurrentusevalueBase)
                    .HasColumnName("ptas_ytdproratedcurrentusevalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasYtdproratedmarketvalue)
                    .HasColumnName("ptas_ytdproratedmarketvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasYtdproratedmarketvalueBase)
                    .HasColumnName("ptas_ytdproratedmarketvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasYtdprorationfactor)
                    .HasColumnName("ptas_ytdprorationfactor")
                    .HasColumnType("money");

                entity.Property(e => e.PtasYtdtaxandinterest)
                    .HasColumnName("ptas_ytdtaxandinterest")
                    .HasColumnType("money");

                entity.Property(e => e.PtasYtdtaxandinterestBase)
                    .HasColumnName("ptas_ytdtaxandinterest_base")
                    .HasColumnType("money");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasCurrentusebacktaxstatementCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusebacktaxstatement_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasCurrentusebacktaxstatementCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusebacktaxstatement_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasCurrentusebacktaxstatementModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusebacktaxstatement_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasCurrentusebacktaxstatementModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusebacktaxstatement_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasCurrentusebacktaxstatement)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_currentusebacktaxstatement_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasCurrentusebacktaxstatementOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusebacktaxstatement_owninguser");

                entity.HasOne(d => d.PtasCurrentuseparcelidValueNavigation)
                    .WithMany(p => p.PtasCurrentusebacktaxstatement)
                    .HasForeignKey(d => d.PtasCurrentuseparcelidValue)
                    .HasConstraintName("FK_ptas_currentuseapplicationparcel_ptas_currentusebacktaxstatement_ptas_currentuseparcelid");
            });

            modelBuilder.Entity<PtasCurrentusebacktaxyear>(entity =>
            {
                entity.ToTable("ptas_currentusebacktaxyear", "dynamics");

                entity.Property(e => e.PtasCurrentusebacktaxyearid)
                    .HasColumnName("ptas_currentusebacktaxyearid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAdditionaltaxdue)
                    .HasColumnName("ptas_additionaltaxdue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAdditionaltaxdueBase)
                    .HasColumnName("ptas_additionaltaxdue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrentusebacktaxstatementidValue).HasColumnName("_ptas_currentusebacktaxstatementid_value");

                entity.Property(e => e.PtasCurrentusevalue)
                    .HasColumnName("ptas_currentusevalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrentusevalueBase)
                    .HasColumnName("ptas_currentusevalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDifference)
                    .HasColumnName("ptas_difference")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDifferenceBase)
                    .HasColumnName("ptas_difference_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasInterestpct).HasColumnName("ptas_interestpct");

                entity.Property(e => e.PtasLevyrate)
                    .HasColumnName("ptas_levyrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasMarketvalue)
                    .HasColumnName("ptas_marketvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasMarketvalueBase)
                    .HasColumnName("ptas_marketvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasTaxyearidValue).HasColumnName("_ptas_taxyearid_value");

                entity.Property(e => e.PtasTotalinterest)
                    .HasColumnName("ptas_totalinterest")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalinterestBase)
                    .HasColumnName("ptas_totalinterest_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotaltaxandinterest)
                    .HasColumnName("ptas_totaltaxandinterest")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotaltaxandinterestBase)
                    .HasColumnName("ptas_totaltaxandinterest_base")
                    .HasColumnType("money");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasCurrentusebacktaxyearCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusebacktaxyear_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasCurrentusebacktaxyearCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusebacktaxyear_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasCurrentusebacktaxyearModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusebacktaxyear_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasCurrentusebacktaxyearModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusebacktaxyear_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasCurrentusebacktaxyear)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_currentusebacktaxyear_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasCurrentusebacktaxyearOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusebacktaxyear_owninguser");

                entity.HasOne(d => d.PtasCurrentusebacktaxstatementidValueNavigation)
                    .WithMany(p => p.PtasCurrentusebacktaxyear)
                    .HasForeignKey(d => d.PtasCurrentusebacktaxstatementidValue)
                    .HasConstraintName("FK_ptas_currentusebacktaxstatement_ptas_currentusebacktaxyear_ptas_currentusebacktaxstatementid");

                entity.HasOne(d => d.PtasTaxyearidValueNavigation)
                    .WithMany(p => p.PtasCurrentusebacktaxyear)
                    .HasForeignKey(d => d.PtasTaxyearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_currentusebacktaxyear_ptas_taxyearid");
            });

            modelBuilder.Entity<PtasCurrentusefarmyieldhistory>(entity =>
            {
                entity.ToTable("ptas_currentusefarmyieldhistory", "dynamics");

                entity.Property(e => e.PtasCurrentusefarmyieldhistoryid)
                    .HasColumnName("ptas_currentusefarmyieldhistoryid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasCurrentuseapplicationValue).HasColumnName("_ptas_currentuseapplication_value");

                entity.Property(e => e.PtasGrossincomeperacre)
                    .HasColumnName("ptas_grossincomeperacre")
                    .HasColumnType("money");

                entity.Property(e => e.PtasGrossincomeperacreBase)
                    .HasColumnName("ptas_grossincomeperacre_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasGrossrentalfeeperacre)
                    .HasColumnName("ptas_grossrentalfeeperacre")
                    .HasColumnType("money");

                entity.Property(e => e.PtasGrossrentalfeeperacreBase)
                    .HasColumnName("ptas_grossrentalfeeperacre_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasInvestmentperacre)
                    .HasColumnName("ptas_investmentperacre")
                    .HasColumnType("money");

                entity.Property(e => e.PtasInvestmentperacreBase)
                    .HasColumnName("ptas_investmentperacre_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasYearValue).HasColumnName("_ptas_year_value");

                entity.Property(e => e.PtasYieldmeasurement).HasColumnName("ptas_yieldmeasurement");

                entity.Property(e => e.PtasYieldperacre).HasColumnName("ptas_yieldperacre");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasCurrentusefarmyieldhistoryCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusefarmyieldhistory_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasCurrentusefarmyieldhistoryCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusefarmyieldhistory_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasCurrentusefarmyieldhistoryModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusefarmyieldhistory_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasCurrentusefarmyieldhistoryModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusefarmyieldhistory_modifiedonbehalfby");

                entity.HasOne(d => d.PtasCurrentuseapplicationValueNavigation)
                    .WithMany(p => p.PtasCurrentusefarmyieldhistory)
                    .HasForeignKey(d => d.PtasCurrentuseapplicationValue)
                    .HasConstraintName("FK_ptas_currentuseapplication_ptas_currentusefarmyieldhistory_ptas_currentuseapplication");

                entity.HasOne(d => d.PtasYearValueNavigation)
                    .WithMany(p => p.PtasCurrentusefarmyieldhistory)
                    .HasForeignKey(d => d.PtasYearValue)
                    .HasConstraintName("FK_ptas_year_ptas_currentusefarmyieldhistory_ptas_year");
            });

            modelBuilder.Entity<PtasCurrentusegroup>(entity =>
            {
                entity.ToTable("ptas_currentusegroup", "dynamics");

                entity.Property(e => e.PtasCurrentusegroupid)
                    .HasColumnName("ptas_currentusegroupid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasCurrentusegroupCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusegroup_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasCurrentusegroupCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusegroup_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasCurrentusegroupModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusegroup_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasCurrentusegroupModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusegroup_modifiedonbehalfby");
            });

            modelBuilder.Entity<PtasCurrentuselanduse>(entity =>
            {
                entity.ToTable("ptas_currentuselanduse", "dynamics");

                entity.Property(e => e.PtasCurrentuselanduseid)
                    .HasColumnName("ptas_currentuselanduseid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasAcres)
                    .HasColumnName("ptas_acres")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAgriculturalusetypeValue).HasColumnName("_ptas_agriculturalusetype_value");

                entity.Property(e => e.PtasCapratesum)
                    .HasColumnName("ptas_capratesum")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrentuseapplicationValue).HasColumnName("_ptas_currentuseapplication_value");

                entity.Property(e => e.PtasCurrentuselandvalue)
                    .HasColumnName("ptas_currentuselandvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrentuselandvalueBase)
                    .HasColumnName("ptas_currentuselandvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrentuseparcelidValue).HasColumnName("_ptas_currentuseparcelid_value");

                entity.Property(e => e.PtasLandusetype).HasColumnName("ptas_landusetype");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasParcelValue).HasColumnName("_ptas_parcel_value");

                entity.Property(e => e.PtasTaxreductionpercentage).HasColumnName("ptas_taxreductionpercentage");

                entity.Property(e => e.PtasTimberusetypeValue).HasColumnName("_ptas_timberusetype_value");

                entity.Property(e => e.PtasValueperacre)
                    .HasColumnName("ptas_valueperacre")
                    .HasColumnType("money");

                entity.Property(e => e.PtasValueperacreBase)
                    .HasColumnName("ptas_valueperacre_base")
                    .HasColumnType("money");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasCurrentuselanduseCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentuselanduse_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasCurrentuselanduseCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentuselanduse_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasCurrentuselanduseModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentuselanduse_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasCurrentuselanduseModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentuselanduse_modifiedonbehalfby");

                entity.HasOne(d => d.PtasAgriculturalusetypeValueNavigation)
                    .WithMany(p => p.PtasCurrentuselanduse)
                    .HasForeignKey(d => d.PtasAgriculturalusetypeValue)
                    .HasConstraintName("FK_ptas_agriculturalusetype_ptas_currentuselanduse_ptas_agriculturalusetype");

                entity.HasOne(d => d.PtasCurrentuseapplicationValueNavigation)
                    .WithMany(p => p.PtasCurrentuselanduse)
                    .HasForeignKey(d => d.PtasCurrentuseapplicationValue)
                    .HasConstraintName("FK_ptas_currentuseapplication_ptas_currentuselanduse_ptas_currentuseapplication");

                entity.HasOne(d => d.PtasCurrentuseparcelidValueNavigation)
                    .WithMany(p => p.PtasCurrentuselanduse)
                    .HasForeignKey(d => d.PtasCurrentuseparcelidValue)
                    .HasConstraintName("FK_ptas_currentuseapplicationparcel_ptas_currentuselanduse_ptas_currentuseparcelid");

                entity.HasOne(d => d.PtasParcelValueNavigation)
                    .WithMany(p => p.PtasCurrentuselanduse)
                    .HasForeignKey(d => d.PtasParcelValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_currentuselanduse_ptas_parcel");

                entity.HasOne(d => d.PtasTimberusetypeValueNavigation)
                    .WithMany(p => p.PtasCurrentuselanduse)
                    .HasForeignKey(d => d.PtasTimberusetypeValue)
                    .HasConstraintName("FK_ptas_timberusetype_ptas_currentuselanduse_ptas_timberusetype");
            });

            modelBuilder.Entity<PtasCurrentusenote>(entity =>
            {
                entity.ToTable("ptas_currentusenote", "dynamics");

                entity.Property(e => e.PtasCurrentusenoteid)
                    .HasColumnName("ptas_currentusenoteid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAlternatekey).HasColumnName("ptas_alternatekey");

                entity.Property(e => e.PtasCurrentuseapplicationValue).HasColumnName("_ptas_currentuseapplication_value");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNotebody).HasColumnName("ptas_notebody");

                entity.Property(e => e.PtasNotedate).HasColumnName("ptas_notedate");

                entity.Property(e => e.PtasParcelValue).HasColumnName("_ptas_parcel_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasCurrentusenoteCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusenote_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasCurrentusenoteCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusenote_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasCurrentusenoteModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusenote_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasCurrentusenoteModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusenote_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasCurrentusenote)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_currentusenote_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasCurrentusenoteOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusenote_owninguser");

                entity.HasOne(d => d.PtasCurrentuseapplicationValueNavigation)
                    .WithMany(p => p.PtasCurrentusenote)
                    .HasForeignKey(d => d.PtasCurrentuseapplicationValue)
                    .HasConstraintName("FK_ptas_currentuseapplication_ptas_currentusenote_ptas_currentuseapplication");

                entity.HasOne(d => d.PtasParcelValueNavigation)
                    .WithMany(p => p.PtasCurrentusenote)
                    .HasForeignKey(d => d.PtasParcelValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_currentusenote_ptas_parcel");
            });

            modelBuilder.Entity<PtasCurrentuseparcel2>(entity =>
            {
                entity.ToTable("ptas_currentuseparcel2", "dynamics");

                entity.Property(e => e.PtasCurrentuseparcel2id)
                    .HasColumnName("ptas_currentuseparcel2id")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasCurrentuseparcel2CreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentuseparcel2_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasCurrentuseparcel2CreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentuseparcel2_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasCurrentuseparcel2ModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentuseparcel2_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasCurrentuseparcel2ModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentuseparcel2_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasCurrentuseparcel2)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_currentuseparcel2_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasCurrentuseparcel2OwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_currentuseparcel2_owninguser");
            });

            modelBuilder.Entity<PtasCurrentuseparcelCurrentuseapplication>(entity =>
            {
                entity.ToTable("ptas_currentuseparcel_currentuseapplication", "dynamics");

                entity.Property(e => e.PtasCurrentuseparcelCurrentuseapplicationid)
                    .HasColumnName("ptas_currentuseparcel_currentuseapplicationid")
                    .ValueGeneratedNever();

                entity.Property(e => e.PtasCurrentuseapplicationid).HasColumnName("ptas_currentuseapplicationid");

                entity.Property(e => e.PtasCurrentuseapplicationparcelid).HasColumnName("ptas_currentuseapplicationparcelid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasCurrentusepbrsresource>(entity =>
            {
                entity.ToTable("ptas_currentusepbrsresource", "dynamics");

                entity.Property(e => e.PtasCurrentusepbrsresourceid)
                    .HasColumnName("ptas_currentusepbrsresourceid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasCurrentuseapplicationValue).HasColumnName("_ptas_currentuseapplication_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasParcelValue).HasColumnName("_ptas_parcel_value");

                entity.Property(e => e.PtasPbrsresourcetypeValue).HasColumnName("_ptas_pbrsresourcetype_value");

                entity.Property(e => e.PtasPointvalue).HasColumnName("ptas_pointvalue");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasCurrentusepbrsresourceCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusepbrsresource_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasCurrentusepbrsresourceCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusepbrsresource_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasCurrentusepbrsresourceModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusepbrsresource_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasCurrentusepbrsresourceModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusepbrsresource_modifiedonbehalfby");

                entity.HasOne(d => d.PtasCurrentuseapplicationValueNavigation)
                    .WithMany(p => p.PtasCurrentusepbrsresource)
                    .HasForeignKey(d => d.PtasCurrentuseapplicationValue)
                    .HasConstraintName("FK_ptas_currentuseapplication_ptas_currentusepbrsresource_ptas_currentuseapplication");

                entity.HasOne(d => d.PtasParcelValueNavigation)
                    .WithMany(p => p.PtasCurrentusepbrsresource)
                    .HasForeignKey(d => d.PtasParcelValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_currentusepbrsresource_ptas_parcel");

                entity.HasOne(d => d.PtasPbrsresourcetypeValueNavigation)
                    .WithMany(p => p.PtasCurrentusepbrsresource)
                    .HasForeignKey(d => d.PtasPbrsresourcetypeValue)
                    .HasConstraintName("FK_ptas_pbrsresourcetype_ptas_currentusepbrsresource_ptas_pbrsresourcetype");
            });

            modelBuilder.Entity<PtasCurrentusepbrsresources>(entity =>
            {
                entity.ToTable("ptas_currentusepbrsresources", "dynamics");

                entity.Property(e => e.PtasCurrentusepbrsresourcesid)
                    .HasColumnName("ptas_currentusepbrsresourcesid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasCurrentusetask>(entity =>
            {
                entity.ToTable("ptas_currentusetask", "dynamics");

                entity.Property(e => e.PtasCurrentusetaskid)
                    .HasColumnName("ptas_currentusetaskid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasCurrentuseparcelidValue).HasColumnName("_ptas_currentuseparcelid_value");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasEnddate).HasColumnName("ptas_enddate");

                entity.Property(e => e.PtasMarkasresolved).HasColumnName("ptas_markasresolved");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasStartdate).HasColumnName("ptas_startdate");

                entity.Property(e => e.PtasTasktype).HasColumnName("ptas_tasktype");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasCurrentusetaskCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusetask_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasCurrentusetaskCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusetask_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasCurrentusetaskModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusetask_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasCurrentusetaskModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusetask_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasCurrentusetask)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_currentusetask_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasCurrentusetaskOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusetask_owninguser");

                entity.HasOne(d => d.PtasCurrentuseparcelidValueNavigation)
                    .WithMany(p => p.PtasCurrentusetask)
                    .HasForeignKey(d => d.PtasCurrentuseparcelidValue)
                    .HasConstraintName("FK_ptas_currentuseapplicationparcel_ptas_currentusetask_ptas_currentuseparcelid");
            });

            modelBuilder.Entity<PtasCurrentusevaluehistory>(entity =>
            {
                entity.ToTable("ptas_currentusevaluehistory", "dynamics");

                entity.Property(e => e.PtasCurrentusevaluehistoryid)
                    .HasColumnName("ptas_currentusevaluehistoryid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAssessedimprovementsvalue)
                    .HasColumnName("ptas_assessedimprovementsvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAssessedimprovementsvalueBase)
                    .HasColumnName("ptas_assessedimprovementsvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAssessedlandvalue)
                    .HasColumnName("ptas_assessedlandvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAssessedlandvalueBase)
                    .HasColumnName("ptas_assessedlandvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAssessedtotalvalue)
                    .HasColumnName("ptas_assessedtotalvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAssessedtotalvalueBase)
                    .HasColumnName("ptas_assessedtotalvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCuexcludedareavalue)
                    .HasColumnName("ptas_cuexcludedareavalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCuexcludedareavalueBase)
                    .HasColumnName("ptas_cuexcludedareavalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCuexcludedreaacres)
                    .HasColumnName("ptas_cuexcludedreaacres")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCufarmagricultureacres)
                    .HasColumnName("ptas_cufarmagricultureacres")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCufarmagriculturelandvalue)
                    .HasColumnName("ptas_cufarmagriculturelandvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCufarmagriculturelandvalueBase)
                    .HasColumnName("ptas_cufarmagriculturelandvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCuforestacres)
                    .HasColumnName("ptas_cuforestacres")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCuforestlandvalue)
                    .HasColumnName("ptas_cuforestlandvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCuforestlandvalueBase)
                    .HasColumnName("ptas_cuforestlandvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCuhomesiteacres)
                    .HasColumnName("ptas_cuhomesiteacres")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCuhomesitesvalue)
                    .HasColumnName("ptas_cuhomesitesvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCuhomesitesvalueBase)
                    .HasColumnName("ptas_cuhomesitesvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCuimprovementsvalue)
                    .HasColumnName("ptas_cuimprovementsvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCuimprovementsvalueBase)
                    .HasColumnName("ptas_cuimprovementsvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCulandvalue)
                    .HasColumnName("ptas_culandvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCulandvalueBase)
                    .HasColumnName("ptas_culandvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCuopenspaceacres)
                    .HasColumnName("ptas_cuopenspaceacres")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCuopenspacelandvalue)
                    .HasColumnName("ptas_cuopenspacelandvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCuopenspacelandvalueBase)
                    .HasColumnName("ptas_cuopenspacelandvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrentuseparcelidValue).HasColumnName("_ptas_currentuseparcelid_value");

                entity.Property(e => e.PtasCurrentusestatus).HasColumnName("ptas_currentusestatus");

                entity.Property(e => e.PtasCutimberacres)
                    .HasColumnName("ptas_cutimberacres")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCutimberlandvalue)
                    .HasColumnName("ptas_cutimberlandvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCutimberlandvalueBase)
                    .HasColumnName("ptas_cutimberlandvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEffectivedate).HasColumnName("ptas_effectivedate");

                entity.Property(e => e.PtasLevycodeidValue).HasColumnName("_ptas_levycodeid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasOverrideassessedvalues).HasColumnName("ptas_overrideassessedvalues");

                entity.Property(e => e.PtasTaxyearidValue).HasColumnName("_ptas_taxyearid_value");

                entity.Property(e => e.PtasTotalcuacres)
                    .HasColumnName("ptas_totalcuacres")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalcuvalue)
                    .HasColumnName("ptas_totalcuvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalcuvalueBase)
                    .HasColumnName("ptas_totalcuvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalparcelacres)
                    .HasColumnName("ptas_totalparcelacres")
                    .HasColumnType("money");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasCurrentusevaluehistoryCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusevaluehistory_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasCurrentusevaluehistoryCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusevaluehistory_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasCurrentusevaluehistoryModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusevaluehistory_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasCurrentusevaluehistoryModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusevaluehistory_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasCurrentusevaluehistory)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_currentusevaluehistory_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasCurrentusevaluehistoryOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_currentusevaluehistory_owninguser");

                entity.HasOne(d => d.PtasCurrentuseparcelidValueNavigation)
                    .WithMany(p => p.PtasCurrentusevaluehistory)
                    .HasForeignKey(d => d.PtasCurrentuseparcelidValue)
                    .HasConstraintName("FK_ptas_currentuseapplicationparcel_ptas_currentusevaluehistory_ptas_currentuseparcelid");

                entity.HasOne(d => d.PtasLevycodeidValueNavigation)
                    .WithMany(p => p.PtasCurrentusevaluehistory)
                    .HasForeignKey(d => d.PtasLevycodeidValue)
                    .HasConstraintName("FK_ptas_levycode_ptas_currentusevaluehistory_ptas_levycodeid");

                entity.HasOne(d => d.PtasTaxyearidValueNavigation)
                    .WithMany(p => p.PtasCurrentusevaluehistory)
                    .HasForeignKey(d => d.PtasTaxyearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_currentusevaluehistory_ptas_taxyearid");
            });

            modelBuilder.Entity<PtasDepreciationtable>(entity =>
            {
                entity.ToTable("ptas_depreciationtable", "dynamics");

                entity.Property(e => e.PtasDepreciationtableid)
                    .HasColumnName("ptas_depreciationtableid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasInterestrate)
                    .HasColumnName("ptas_interestrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasMinpercentgoodfactor)
                    .HasColumnName("ptas_minpercentgoodfactor")
                    .HasColumnType("money");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasDepreciationtableCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_depreciationtable_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasDepreciationtableCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_depreciationtable_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasDepreciationtableModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_depreciationtable_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasDepreciationtableModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_depreciationtable_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasDepreciationtable)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_depreciationtable_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasDepreciationtableOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_depreciationtable_owninguser");
            });

            modelBuilder.Entity<PtasDesignationtype>(entity =>
            {
                entity.ToTable("ptas_designationtype", "dynamics");

                entity.Property(e => e.PtasDesignationtypeid)
                    .HasColumnName("ptas_designationtypeid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasDesignationtypeCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_designationtype_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasDesignationtypeCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_designationtype_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasDesignationtypeModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_designationtype_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasDesignationtypeModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_designationtype_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasDesignationtype)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_designationtype_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasDesignationtypeOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_designationtype_owninguser");
            });

            modelBuilder.Entity<PtasDistrict>(entity =>
            {
                entity.ToTable("ptas_district", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_district_modifiedon");

                entity.Property(e => e.PtasDistrictid)
                    .HasColumnName("ptas_districtid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasDistrictname).HasColumnName("ptas_districtname");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasDistrictCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_district_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasDistrictCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_district_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasDistrictModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_district_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasDistrictModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_district_modifiedonbehalfby");
            });

            modelBuilder.Entity<PtasEbscostcenter>(entity =>
            {
                entity.ToTable("ptas_ebscostcenter", "dynamics");

                entity.Property(e => e.PtasEbscostcenterid)
                    .HasColumnName("ptas_ebscostcenterid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasEbscostcenterCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_ebscostcenter_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasEbscostcenterCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_ebscostcenter_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasEbscostcenterModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_ebscostcenter_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasEbscostcenterModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_ebscostcenter_modifiedonbehalfby");
            });

            modelBuilder.Entity<PtasEbsfundnumber>(entity =>
            {
                entity.ToTable("ptas_ebsfundnumber", "dynamics");

                entity.Property(e => e.PtasEbsfundnumberid)
                    .HasColumnName("ptas_ebsfundnumberid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasEbsfundnumberCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_ebsfundnumber_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasEbsfundnumberCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_ebsfundnumber_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasEbsfundnumberModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_ebsfundnumber_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasEbsfundnumberModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_ebsfundnumber_modifiedonbehalfby");
            });

            modelBuilder.Entity<PtasEbsmainaccount>(entity =>
            {
                entity.ToTable("ptas_ebsmainaccount", "dynamics");

                entity.Property(e => e.PtasEbsmainaccountid)
                    .HasColumnName("ptas_ebsmainaccountid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasEbsmainaccountCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_ebsmainaccount_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasEbsmainaccountCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_ebsmainaccount_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasEbsmainaccountModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_ebsmainaccount_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasEbsmainaccountModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_ebsmainaccount_modifiedonbehalfby");
            });

            modelBuilder.Entity<PtasEbsproject>(entity =>
            {
                entity.ToTable("ptas_ebsproject", "dynamics");

                entity.Property(e => e.PtasEbsprojectid)
                    .HasColumnName("ptas_ebsprojectid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasEbsprojectCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_ebsproject_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasEbsprojectCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_ebsproject_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasEbsprojectModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_ebsproject_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasEbsprojectModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_ebsproject_modifiedonbehalfby");
            });

            modelBuilder.Entity<PtasEconomicunit>(entity =>
            {
                entity.ToTable("ptas_economicunit", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_economicunit_modifiedon");

                entity.Property(e => e.PtasEconomicunitid)
                    .HasColumnName("ptas_economicunitid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasLegacyrpeconomicunitid).HasColumnName("ptas_legacyrpeconomicunitid");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasEconomicunitCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_economicunit_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasEconomicunitCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_economicunit_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasEconomicunitModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_economicunit_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasEconomicunitModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_economicunit_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasEconomicunit)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_economicunit_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasEconomicunitOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_economicunit_owninguser");
            });

            modelBuilder.Entity<PtasEconomicunitAccessorydetail>(entity =>
            {
                entity.ToTable("ptas_economicunit_accessorydetail", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_economicunit_accessorydetail_modifiedon");

                entity.Property(e => e.PtasEconomicunitAccessorydetailid)
                    .HasColumnName("ptas_economicunit_accessorydetailid")
                    .ValueGeneratedNever();

                entity.Property(e => e.Modifiedon)
                    .HasColumnName("modifiedon")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.PtasAccessorydetailid).HasColumnName("ptas_accessorydetailid");

                entity.Property(e => e.PtasEconomicunitid).HasColumnName("ptas_economicunitid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasEnvironmentalrestriction>(entity =>
            {
                entity.ToTable("ptas_environmentalrestriction", "dynamics");

                entity.Property(e => e.PtasEnvironmentalrestrictionid)
                    .HasColumnName("ptas_environmentalrestrictionid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasContaminationspecialistneeded).HasColumnName("ptas_contaminationspecialistneeded");

                entity.Property(e => e.PtasDelineationstudy).HasColumnName("ptas_delineationstudy");

                entity.Property(e => e.PtasDollaradjustment)
                    .HasColumnName("ptas_dollaradjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDollaradjustmentBase)
                    .HasColumnName("ptas_dollaradjustment_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDollarpersqft)
                    .HasColumnName("ptas_dollarpersqft")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDollarpersqftBase)
                    .HasColumnName("ptas_dollarpersqft_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEnvironmentalrestrictionsource).HasColumnName("ptas_environmentalrestrictionsource");

                entity.Property(e => e.PtasEnvironmentalrestrictiontypeidValue).HasColumnName("_ptas_environmentalrestrictiontypeid_value");

                entity.Property(e => e.PtasLandidValue).HasColumnName("_ptas_landid_value");

                entity.Property(e => e.PtasLegacyrplandid).HasColumnName("ptas_legacyrplandid");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasPercentadjustment).HasColumnName("ptas_percentadjustment");

                entity.Property(e => e.PtasPercentaffected).HasColumnName("ptas_percentaffected");

                entity.Property(e => e.PtasPercentremediationcost).HasColumnName("ptas_percentremediationcost");

                entity.Property(e => e.PtasProjectname).HasColumnName("ptas_projectname");

                entity.Property(e => e.PtasSqft)
                    .HasColumnName("ptas_sqft")
                    .HasColumnType("money");

                entity.Property(e => e.PtasValuemethodenvironment).HasColumnName("ptas_valuemethodenvironment");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasEnvironmentalrestrictionCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_environmentalrestriction_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasEnvironmentalrestrictionCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_environmentalrestriction_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasEnvironmentalrestrictionModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_environmentalrestriction_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasEnvironmentalrestrictionModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_environmentalrestriction_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasEnvironmentalrestriction)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_environmentalrestriction_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasEnvironmentalrestrictionOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_environmentalrestriction_owninguser");

                entity.HasOne(d => d.PtasEnvironmentalrestrictiontypeidValueNavigation)
                    .WithMany(p => p.PtasEnvironmentalrestriction)
                    .HasForeignKey(d => d.PtasEnvironmentalrestrictiontypeidValue)
                    .HasConstraintName("FK_ptas_environmentalrestrictiontype_ptas_environmentalrestriction_ptas_environmentalrestrictiontypeid");

                entity.HasOne(d => d.PtasLandidValueNavigation)
                    .WithMany(p => p.PtasEnvironmentalrestriction)
                    .HasForeignKey(d => d.PtasLandidValue)
                    .HasConstraintName("FK_ptas_land_ptas_environmentalrestriction_ptas_landid");
            });

            modelBuilder.Entity<PtasEnvironmentalrestrictiontype>(entity =>
            {
                entity.ToTable("ptas_environmentalrestrictiontype", "dynamics");

                entity.Property(e => e.PtasEnvironmentalrestrictiontypeid)
                    .HasColumnName("ptas_environmentalrestrictiontypeid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasAbbreviation).HasColumnName("ptas_abbreviation");

                entity.Property(e => e.PtasItemid).HasColumnName("ptas_itemid");

                entity.Property(e => e.PtasLongdescription).HasColumnName("ptas_longdescription");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasTypeid).HasColumnName("ptas_typeid");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasEnvironmentalrestrictiontypeCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_environmentalrestrictiontype_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasEnvironmentalrestrictiontypeCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_environmentalrestrictiontype_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasEnvironmentalrestrictiontypeModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_environmentalrestrictiontype_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasEnvironmentalrestrictiontypeModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_environmentalrestrictiontype_modifiedonbehalfby");
            });

            modelBuilder.Entity<PtasExemption>(entity =>
            {
                entity.ToTable("ptas_exemption", "dynamics");

                entity.Property(e => e.PtasExemptionid)
                    .HasColumnName("ptas_exemptionid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAccountnumber).HasColumnName("ptas_accountnumber");

                entity.Property(e => e.PtasContactidValue).HasColumnName("_ptas_contactid_value");

                entity.Property(e => e.PtasEnddate)
                    .HasColumnName("ptas_enddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.PtasExcemptionsidValue).HasColumnName("_ptas_excemptionsid_value");

                entity.Property(e => e.PtasExemptionamount)
                    .HasColumnName("ptas_exemptionamount")
                    .HasColumnType("money");

                entity.Property(e => e.PtasExemptionamountBase)
                    .HasColumnName("ptas_exemptionamount_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasExemptioncategory).HasColumnName("ptas_exemptioncategory");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasParceldetailidValue).HasColumnName("_ptas_parceldetailid_value");

                entity.Property(e => e.PtasRenewalcancellationnotificationsenton).HasColumnName("ptas_renewalcancellationnotificationsenton");

                entity.Property(e => e.PtasRenewaldate)
                    .HasColumnName("ptas_renewaldate")
                    .HasColumnType("datetime");

                entity.Property(e => e.PtasRenewalnotificationsenton)
                    .HasColumnName("ptas_renewalnotificationsenton")
                    .HasColumnType("datetime");

                entity.Property(e => e.PtasRenewalremindernotificationsenton).HasColumnName("ptas_renewalremindernotificationsenton");

                entity.Property(e => e.PtasStartdate)
                    .HasColumnName("ptas_startdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasExemptionCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_exemption_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasExemptionCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_exemption_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasExemptionModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_exemption_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasExemptionModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_exemption_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasExemption)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_exemption_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasExemptionOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_exemption_owninguser");

                entity.HasOne(d => d.PtasContactidValueNavigation)
                    .WithMany(p => p.PtasExemption)
                    .HasForeignKey(d => d.PtasContactidValue)
                    .HasConstraintName("FK_contact_ptas_exemption_ptas_contactid");

                entity.HasOne(d => d.PtasExcemptionsidValueNavigation)
                    .WithMany(p => p.PtasExemption)
                    .HasForeignKey(d => d.PtasExcemptionsidValue)
                    .HasConstraintName("FK_ptas_homeimprovement_ptas_exemption_ptas_excemptionsid");

                entity.HasOne(d => d.PtasParceldetailidValueNavigation)
                    .WithMany(p => p.PtasExemption)
                    .HasForeignKey(d => d.PtasParceldetailidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_exemption_ptas_parceldetailid");
            });

            modelBuilder.Entity<PtasFileattachmentmetadata>(entity =>
            {
                entity.ToTable("ptas_fileattachmentmetadata", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_fileattachmentmetadata_modifiedon");

                entity.Property(e => e.PtasFileattachmentmetadataid)
                    .HasColumnName("ptas_fileattachmentmetadataid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAccountnumber).HasColumnName("ptas_accountnumber");

                entity.Property(e => e.PtasArcidValue).HasColumnName("_ptas_arcid_value");

                entity.Property(e => e.PtasAttachmentidValue).HasColumnName("_ptas_attachmentid_value");

                entity.Property(e => e.PtasBloburl).HasColumnName("ptas_bloburl");

                entity.Property(e => e.PtasCreateseapp).HasColumnName("ptas_createseapp");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasDocumentdate).HasColumnName("ptas_documentdate");

                entity.Property(e => e.PtasDocumentlink).HasColumnName("ptas_documentlink");

                entity.Property(e => e.PtasDocumentsize).HasColumnName("ptas_documentsize");

                entity.Property(e => e.PtasDocumenttype).HasColumnName("ptas_documenttype");

                entity.Property(e => e.PtasFileextension).HasColumnName("ptas_fileextension");

                entity.Property(e => e.PtasFilelibrary).HasColumnName("ptas_filelibrary");

                entity.Property(e => e.PtasFilesource).HasColumnName("ptas_filesource");

                entity.Property(e => e.PtasFilingmethod).HasColumnName("ptas_filingmethod");

                entity.Property(e => e.PtasIcscheckedoutbyusername).HasColumnName("ptas_icscheckedoutbyusername");

                entity.Property(e => e.PtasIcscheckedoutdate).HasColumnName("ptas_icscheckedoutdate");

                entity.Property(e => e.PtasIcscreatedbyusername).HasColumnName("ptas_icscreatedbyusername");

                entity.Property(e => e.PtasIcsdocumentid).HasColumnName("ptas_icsdocumentid");

                entity.Property(e => e.PtasIcsentereddate).HasColumnName("ptas_icsentereddate");

                entity.Property(e => e.PtasIcsfileid).HasColumnName("ptas_icsfileid");

                entity.Property(e => e.PtasIcsfullindex).HasColumnName("ptas_icsfullindex");

                entity.Property(e => e.PtasIcsisinworkflow).HasColumnName("ptas_icsisinworkflow");

                entity.Property(e => e.PtasIcsmodifieddate).HasColumnName("ptas_icsmodifieddate");

                entity.Property(e => e.PtasInsertdate).HasColumnName("ptas_insertdate");

                entity.Property(e => e.PtasIsblob).HasColumnName("ptas_isblob");

                entity.Property(e => e.PtasIsilinx).HasColumnName("ptas_isilinx");

                entity.Property(e => e.PtasIssharepoint).HasColumnName("ptas_issharepoint");

                entity.Property(e => e.PtasListingstatus).HasColumnName("ptas_listingstatus");

                entity.Property(e => e.PtasLoadbyidValue).HasColumnName("_ptas_loadbyid_value");

                entity.Property(e => e.PtasLoaddate).HasColumnName("ptas_loaddate");

                entity.Property(e => e.PtasLoginuserid).HasColumnName("ptas_loginuserid");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasOriginalfilename).HasColumnName("ptas_originalfilename");

                entity.Property(e => e.PtasPagecount).HasColumnName("ptas_pagecount");

                entity.Property(e => e.PtasParcelidValue).HasColumnName("_ptas_parcelid_value");

                entity.Property(e => e.PtasPaymentperiod).HasColumnName("ptas_paymentperiod");

                entity.Property(e => e.PtasPersonalpropertyaccountidValue).HasColumnName("_ptas_personalpropertyaccountid_value");

                entity.Property(e => e.PtasPortaldocument).HasColumnName("ptas_portaldocument");

                entity.Property(e => e.PtasPortalsection).HasColumnName("ptas_portalsection");

                entity.Property(e => e.PtasPpdocumenttype).HasColumnName("ptas_ppdocumenttype");

                entity.Property(e => e.PtasRecid).HasColumnName("ptas_recid");

                entity.Property(e => e.PtasRedactionurl).HasColumnName("ptas_redactionurl");

                entity.Property(e => e.PtasRepositoryname).HasColumnName("ptas_repositoryname");

                entity.Property(e => e.PtasRevisedlisting).HasColumnName("ptas_revisedlisting");

                entity.Property(e => e.PtasRollyear).HasColumnName("ptas_rollyear");

                entity.Property(e => e.PtasRollyearidValue).HasColumnName("_ptas_rollyearid_value");

                entity.Property(e => e.PtasScandate).HasColumnName("ptas_scandate");

                entity.Property(e => e.PtasScandatetime).HasColumnName("ptas_scandatetime");

                entity.Property(e => e.PtasScannerid).HasColumnName("ptas_scannerid");

                entity.Property(e => e.PtasSeniorexemptionapplicationValue).HasColumnName("_ptas_seniorexemptionapplication_value");

                entity.Property(e => e.PtasSeniorexemptionapplicationdetailValue).HasColumnName("_ptas_seniorexemptionapplicationdetail_value");

                entity.Property(e => e.PtasSharepointurl).HasColumnName("ptas_sharepointurl");

                entity.Property(e => e.PtasTaxaccountidValue).HasColumnName("_ptas_taxaccountid_value");

                entity.Property(e => e.PtasTaxpayeridValue).HasColumnName("_ptas_taxpayerid_value");

                entity.Property(e => e.PtasTaxrollcorrectionidValue).HasColumnName("_ptas_taxrollcorrectionid_value");

                entity.Property(e => e.PtasTaxyearidValue).HasColumnName("_ptas_taxyearid_value");

                entity.Property(e => e.PtasUpdatedate).HasColumnName("ptas_updatedate");

                entity.Property(e => e.PtasYearidValue).HasColumnName("_ptas_yearid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasFileattachmentmetadataCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_fileattachmentmetadata_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasFileattachmentmetadataCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_fileattachmentmetadata_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasFileattachmentmetadataModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_fileattachmentmetadata_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasFileattachmentmetadataModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_fileattachmentmetadata_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasFileattachmentmetadata)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_fileattachmentmetadata_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasFileattachmentmetadataOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_fileattachmentmetadata_owninguser");

                entity.HasOne(d => d.PtasArcidValueNavigation)
                    .WithMany(p => p.PtasFileattachmentmetadata)
                    .HasForeignKey(d => d.PtasArcidValue)
                    .HasConstraintName("FK_ptas_assessmentrollcorrection_ptas_fileattachmentmetadata_ptas_arcid");

                entity.HasOne(d => d.PtasAttachmentidValueNavigation)
                    .WithMany(p => p.PtasFileattachmentmetadata)
                    .HasForeignKey(d => d.PtasAttachmentidValue)
                    .HasConstraintName("FK_ptas_homeimprovement_ptas_fileattachmentmetadata_ptas_attachmentid");

                entity.HasOne(d => d.PtasLoadbyidValueNavigation)
                    .WithMany(p => p.PtasFileattachmentmetadataPtasLoadbyidValueNavigation)
                    .HasForeignKey(d => d.PtasLoadbyidValue)
                    .HasConstraintName("FK_systemuser_ptas_fileattachmentmetadata_ptas_loadbyid");

                entity.HasOne(d => d.PtasParcelidValueNavigation)
                    .WithMany(p => p.PtasFileattachmentmetadata)
                    .HasForeignKey(d => d.PtasParcelidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_fileattachmentmetadata_ptas_parcelid");

                entity.HasOne(d => d.PtasPersonalpropertyaccountidValueNavigation)
                    .WithMany(p => p.PtasFileattachmentmetadata)
                    .HasForeignKey(d => d.PtasPersonalpropertyaccountidValue)
                    .HasConstraintName("FK_ptas_personalproperty_ptas_fileattachmentmetadata_ptas_personalpropertyaccountid");

                entity.HasOne(d => d.PtasRollyearidValueNavigation)
                    .WithMany(p => p.PtasFileattachmentmetadataPtasRollyearidValueNavigation)
                    .HasForeignKey(d => d.PtasRollyearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_fileattachmentmetadata_ptas_rollyearid");

                entity.HasOne(d => d.PtasSeniorexemptionapplicationValueNavigation)
                    .WithMany(p => p.PtasFileattachmentmetadata)
                    .HasForeignKey(d => d.PtasSeniorexemptionapplicationValue)
                    .HasConstraintName("FK_ptas_seapplication_ptas_fileattachmentmetadata_ptas_seniorexemptionapplication");

                entity.HasOne(d => d.PtasSeniorexemptionapplicationdetailValueNavigation)
                    .WithMany(p => p.PtasFileattachmentmetadata)
                    .HasForeignKey(d => d.PtasSeniorexemptionapplicationdetailValue)
                    .HasConstraintName("FK_ptas_seappdetail_ptas_fileattachmentmetadata_ptas_seniorexemptionapplicationdetail");

                entity.HasOne(d => d.PtasTaxaccountidValueNavigation)
                    .WithMany(p => p.PtasFileattachmentmetadataPtasTaxaccountidValueNavigation)
                    .HasForeignKey(d => d.PtasTaxaccountidValue)
                    .HasConstraintName("FK_ptas_taxaccount_ptas_fileattachmentmetadata_ptas_taxaccountid");

                entity.HasOne(d => d.PtasTaxpayeridValueNavigation)
                    .WithMany(p => p.PtasFileattachmentmetadataPtasTaxpayeridValueNavigation)
                    .HasForeignKey(d => d.PtasTaxpayeridValue)
                    .HasConstraintName("FK_ptas_taxaccount_ptas_fileattachmentmetadata_ptas_taxpayerid");

                entity.HasOne(d => d.PtasTaxrollcorrectionidValueNavigation)
                    .WithMany(p => p.PtasFileattachmentmetadata)
                    .HasForeignKey(d => d.PtasTaxrollcorrectionidValue)
                    .HasConstraintName("FK_ptas_taxrollcorrection_ptas_fileattachmentmetadata_ptas_taxrollcorrectionid");

                entity.HasOne(d => d.PtasTaxyearidValueNavigation)
                    .WithMany(p => p.PtasFileattachmentmetadataPtasTaxyearidValueNavigation)
                    .HasForeignKey(d => d.PtasTaxyearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_fileattachmentmetadata_ptas_taxyearid");

                entity.HasOne(d => d.PtasYearidValueNavigation)
                    .WithMany(p => p.PtasFileattachmentmetadataPtasYearidValueNavigation)
                    .HasForeignKey(d => d.PtasYearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_fileattachmentmetadata_ptas_yearid");
            });

            modelBuilder.Entity<PtasFund>(entity =>
            {
                entity.ToTable("ptas_fund", "dynamics");

                entity.Property(e => e.PtasFundid)
                    .HasColumnName("ptas_fundid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAllocation)
                    .HasColumnName("ptas_allocation")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAllocationtotal)
                    .HasColumnName("ptas_allocationtotal")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAllocationtotalDate).HasColumnName("ptas_allocationtotal_date");

                entity.Property(e => e.PtasAllocationtotalState).HasColumnName("ptas_allocationtotal_state");

                entity.Property(e => e.PtasCostcenter).HasColumnName("ptas_costcenter");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasEbscostcenteridValue).HasColumnName("_ptas_ebscostcenterid_value");

                entity.Property(e => e.PtasEbsfundnumber).HasColumnName("ptas_ebsfundnumber");

                entity.Property(e => e.PtasEbsfundnumberidValue).HasColumnName("_ptas_ebsfundnumberid_value");

                entity.Property(e => e.PtasEbsmainaccountidValue).HasColumnName("_ptas_ebsmainaccountid_value");

                entity.Property(e => e.PtasEbsprojectidValue).HasColumnName("_ptas_ebsprojectid_value");

                entity.Property(e => e.PtasFundallocationtotal)
                    .HasColumnName("ptas_fundallocationtotal")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFundtypeidValue).HasColumnName("_ptas_fundtypeid_value");

                entity.Property(e => e.PtasLevylidliftorbondValue).HasColumnName("_ptas_levylidliftorbond_value");

                entity.Property(e => e.PtasLimit).HasColumnName("ptas_limit");

                entity.Property(e => e.PtasMainaccount).HasColumnName("ptas_mainaccount");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasProject).HasColumnName("ptas_project");

                entity.Property(e => e.PtasTaxdistrictidValue).HasColumnName("_ptas_taxdistrictid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasFundCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_fund_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasFundCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_fund_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasFundModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_fund_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasFundModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_fund_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasFund)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_fund_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasFundOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_fund_owninguser");

                entity.HasOne(d => d.PtasEbscostcenteridValueNavigation)
                    .WithMany(p => p.PtasFund)
                    .HasForeignKey(d => d.PtasEbscostcenteridValue)
                    .HasConstraintName("FK_ptas_ebscostcenter_ptas_fund_ptas_ebscostcenterid");

                entity.HasOne(d => d.PtasEbsfundnumberidValueNavigation)
                    .WithMany(p => p.PtasFund)
                    .HasForeignKey(d => d.PtasEbsfundnumberidValue)
                    .HasConstraintName("FK_ptas_ebsfundnumber_ptas_fund_ptas_ebsfundnumberid");

                entity.HasOne(d => d.PtasEbsmainaccountidValueNavigation)
                    .WithMany(p => p.PtasFund)
                    .HasForeignKey(d => d.PtasEbsmainaccountidValue)
                    .HasConstraintName("FK_ptas_ebsmainaccount_ptas_fund_ptas_ebsmainaccountid");

                entity.HasOne(d => d.PtasEbsprojectidValueNavigation)
                    .WithMany(p => p.PtasFund)
                    .HasForeignKey(d => d.PtasEbsprojectidValue)
                    .HasConstraintName("FK_ptas_ebsproject_ptas_fund_ptas_ebsprojectid");

                entity.HasOne(d => d.PtasFundtypeidValueNavigation)
                    .WithMany(p => p.PtasFund)
                    .HasForeignKey(d => d.PtasFundtypeidValue)
                    .HasConstraintName("FK_ptas_fundtype_ptas_fund_ptas_fundtypeid");

                entity.HasOne(d => d.PtasLevylidliftorbondValueNavigation)
                    .WithMany(p => p.PtasFund)
                    .HasForeignKey(d => d.PtasLevylidliftorbondValue)
                    .HasConstraintName("FK_ptas_levylidliftbond_ptas_fund_ptas_levylidliftorbond");

                entity.HasOne(d => d.PtasTaxdistrictidValueNavigation)
                    .WithMany(p => p.PtasFund)
                    .HasForeignKey(d => d.PtasTaxdistrictidValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_fund_ptas_taxdistrictid");
            });

            modelBuilder.Entity<PtasFundallocation>(entity =>
            {
                entity.ToTable("ptas_fundallocation", "dynamics");

                entity.Property(e => e.PtasFundallocationid)
                    .HasColumnName("ptas_fundallocationid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAllocation)
                    .HasColumnName("ptas_allocation")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCostcenter).HasColumnName("ptas_costcenter");

                entity.Property(e => e.PtasEbscostcenteridValue).HasColumnName("_ptas_ebscostcenterid_value");

                entity.Property(e => e.PtasEbsfundnumber).HasColumnName("ptas_ebsfundnumber");

                entity.Property(e => e.PtasEbsfundnumberidValue).HasColumnName("_ptas_ebsfundnumberid_value");

                entity.Property(e => e.PtasEbsmainaccountidValue).HasColumnName("_ptas_ebsmainaccountid_value");

                entity.Property(e => e.PtasEbsprojectidValue).HasColumnName("_ptas_ebsprojectid_value");

                entity.Property(e => e.PtasFundidValue).HasColumnName("_ptas_fundid_value");

                entity.Property(e => e.PtasMainaccountnumber).HasColumnName("ptas_mainaccountnumber");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasProject).HasColumnName("ptas_project");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasFundallocationCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_fundallocation_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasFundallocationCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_fundallocation_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasFundallocationModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_fundallocation_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasFundallocationModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_fundallocation_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasFundallocation)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_fundallocation_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasFundallocationOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_fundallocation_owninguser");

                entity.HasOne(d => d.PtasEbscostcenteridValueNavigation)
                    .WithMany(p => p.PtasFundallocation)
                    .HasForeignKey(d => d.PtasEbscostcenteridValue)
                    .HasConstraintName("FK_ptas_ebscostcenter_ptas_fundallocation_ptas_ebscostcenterid");

                entity.HasOne(d => d.PtasEbsfundnumberidValueNavigation)
                    .WithMany(p => p.PtasFundallocation)
                    .HasForeignKey(d => d.PtasEbsfundnumberidValue)
                    .HasConstraintName("FK_ptas_ebsfundnumber_ptas_fundallocation_ptas_ebsfundnumberid");

                entity.HasOne(d => d.PtasEbsmainaccountidValueNavigation)
                    .WithMany(p => p.PtasFundallocation)
                    .HasForeignKey(d => d.PtasEbsmainaccountidValue)
                    .HasConstraintName("FK_ptas_ebsmainaccount_ptas_fundallocation_ptas_ebsmainaccountid");

                entity.HasOne(d => d.PtasEbsprojectidValueNavigation)
                    .WithMany(p => p.PtasFundallocation)
                    .HasForeignKey(d => d.PtasEbsprojectidValue)
                    .HasConstraintName("FK_ptas_ebsproject_ptas_fundallocation_ptas_ebsprojectid");

                entity.HasOne(d => d.PtasFundidValueNavigation)
                    .WithMany(p => p.PtasFundallocation)
                    .HasForeignKey(d => d.PtasFundidValue)
                    .HasConstraintName("FK_ptas_fund_ptas_fundallocation_ptas_fundid");
            });

            modelBuilder.Entity<PtasFundfactordetail>(entity =>
            {
                entity.ToTable("ptas_fundfactordetail", "dynamics");

                entity.Property(e => e.PtasFundfactordetailid)
                    .HasColumnName("ptas_fundfactordetailid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasBillingcodeidValue).HasColumnName("_ptas_billingcodeid_value");

                entity.Property(e => e.PtasCostcenter).HasColumnName("ptas_costcenter");

                entity.Property(e => e.PtasEbscostcenteridValue).HasColumnName("_ptas_ebscostcenterid_value");

                entity.Property(e => e.PtasEbsfundnumber).HasColumnName("ptas_ebsfundnumber");

                entity.Property(e => e.PtasEbsfundnumberidValue).HasColumnName("_ptas_ebsfundnumberid_value");

                entity.Property(e => e.PtasEbsmainaccountidValue).HasColumnName("_ptas_ebsmainaccountid_value");

                entity.Property(e => e.PtasEbsprojectidValue).HasColumnName("_ptas_ebsprojectid_value");

                entity.Property(e => e.PtasFactor)
                    .HasColumnName("ptas_factor")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFundallocationidValue).HasColumnName("_ptas_fundallocationid_value");

                entity.Property(e => e.PtasFundidValue).HasColumnName("_ptas_fundid_value");

                entity.Property(e => e.PtasLevycodeidValue).HasColumnName("_ptas_levycodeid_value");

                entity.Property(e => e.PtasMainaccount).HasColumnName("ptas_mainaccount");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasProject).HasColumnName("ptas_project");

                entity.Property(e => e.PtasPtasFundfactordetailidValue).HasColumnName("_ptas_ptas_fundfactordetailid_value");

                entity.Property(e => e.PtasRate)
                    .HasColumnName("ptas_rate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRatetype).HasColumnName("ptas_ratetype");

                entity.Property(e => e.PtasRatetypetext).HasColumnName("ptas_ratetypetext");

                entity.Property(e => e.PtasYearidValue).HasColumnName("_ptas_yearid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasFundfactordetailCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_fundfactordetail_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasFundfactordetailCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_fundfactordetail_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasFundfactordetailModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_fundfactordetail_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasFundfactordetailModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_fundfactordetail_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasFundfactordetail)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_fundfactordetail_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasFundfactordetailOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_fundfactordetail_owninguser");

                entity.HasOne(d => d.PtasBillingcodeidValueNavigation)
                    .WithMany(p => p.PtasFundfactordetail)
                    .HasForeignKey(d => d.PtasBillingcodeidValue)
                    .HasConstraintName("FK_ptas_billingcode_ptas_fundfactordetail_ptas_billingcodeid");

                entity.HasOne(d => d.PtasEbscostcenteridValueNavigation)
                    .WithMany(p => p.PtasFundfactordetail)
                    .HasForeignKey(d => d.PtasEbscostcenteridValue)
                    .HasConstraintName("FK_ptas_ebscostcenter_ptas_fundfactordetail_ptas_ebscostcenterid");

                entity.HasOne(d => d.PtasEbsfundnumberidValueNavigation)
                    .WithMany(p => p.PtasFundfactordetail)
                    .HasForeignKey(d => d.PtasEbsfundnumberidValue)
                    .HasConstraintName("FK_ptas_ebsfundnumber_ptas_fundfactordetail_ptas_ebsfundnumberid");

                entity.HasOne(d => d.PtasEbsmainaccountidValueNavigation)
                    .WithMany(p => p.PtasFundfactordetail)
                    .HasForeignKey(d => d.PtasEbsmainaccountidValue)
                    .HasConstraintName("FK_ptas_ebsmainaccount_ptas_fundfactordetail_ptas_ebsmainaccountid");

                entity.HasOne(d => d.PtasEbsprojectidValueNavigation)
                    .WithMany(p => p.PtasFundfactordetail)
                    .HasForeignKey(d => d.PtasEbsprojectidValue)
                    .HasConstraintName("FK_ptas_ebsproject_ptas_fundfactordetail_ptas_ebsprojectid");

                entity.HasOne(d => d.PtasFundallocationidValueNavigation)
                    .WithMany(p => p.PtasFundfactordetail)
                    .HasForeignKey(d => d.PtasFundallocationidValue)
                    .HasConstraintName("FK_ptas_fundallocation_ptas_fundfactordetail_ptas_fundallocationid");

                entity.HasOne(d => d.PtasFundidValueNavigation)
                    .WithMany(p => p.PtasFundfactordetail)
                    .HasForeignKey(d => d.PtasFundidValue)
                    .HasConstraintName("FK_ptas_fund_ptas_fundfactordetail_ptas_fundid");

                entity.HasOne(d => d.PtasLevycodeidValueNavigation)
                    .WithMany(p => p.PtasFundfactordetail)
                    .HasForeignKey(d => d.PtasLevycodeidValue)
                    .HasConstraintName("FK_ptas_levycode_ptas_fundfactordetail_ptas_levycodeid");

                entity.HasOne(d => d.PtasPtasFundfactordetailidValueNavigation)
                    .WithMany(p => p.PtasFundfactordetail)
                    .HasForeignKey(d => d.PtasPtasFundfactordetailidValue)
                    .HasConstraintName("FK_ptas_ratesheetdetail_ptas_fundfactordetail_ptas_ptas_fundfactordetailid");

                entity.HasOne(d => d.PtasYearidValueNavigation)
                    .WithMany(p => p.PtasFundfactordetail)
                    .HasForeignKey(d => d.PtasYearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_fundfactordetail_ptas_yearid");
            });

            modelBuilder.Entity<PtasFundtype>(entity =>
            {
                entity.ToTable("ptas_fundtype", "dynamics");

                entity.Property(e => e.PtasFundtypeid)
                    .HasColumnName("ptas_fundtypeid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasFunddescription).HasColumnName("ptas_funddescription");

                entity.Property(e => e.PtasFundnumber).HasColumnName("ptas_fundnumber");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasFundtypeCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_fundtype_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasFundtypeCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_fundtype_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasFundtypeModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_fundtype_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasFundtypeModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_fundtype_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasFundtype)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_fundtype_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasFundtypeOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_fundtype_owninguser");
            });

            modelBuilder.Entity<PtasGeoarea>(entity =>
            {
                entity.ToTable("ptas_geoarea", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_geoarea_modifiedon");

                entity.Property(e => e.PtasGeoareaid)
                    .HasColumnName("ptas_geoareaid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasAppraiseridValue).HasColumnName("_ptas_appraiserid_value");

                entity.Property(e => e.PtasAreanumber).HasColumnName("ptas_areanumber");

                entity.Property(e => e.PtasCommercialdistrict).HasColumnName("ptas_commercialdistrict");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasSeniorappraiseridValue).HasColumnName("_ptas_seniorappraiserid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasGeoareaCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_geoarea_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasGeoareaCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_geoarea_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasGeoareaModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_geoarea_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasGeoareaModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_geoarea_modifiedonbehalfby");

                entity.HasOne(d => d.PtasAppraiseridValueNavigation)
                    .WithMany(p => p.PtasGeoareaPtasAppraiseridValueNavigation)
                    .HasForeignKey(d => d.PtasAppraiseridValue)
                    .HasConstraintName("FK_systemuser_ptas_geoarea_ptas_appraiserid");

                entity.HasOne(d => d.PtasSeniorappraiseridValueNavigation)
                    .WithMany(p => p.PtasGeoareaPtasSeniorappraiseridValueNavigation)
                    .HasForeignKey(d => d.PtasSeniorappraiseridValue)
                    .HasConstraintName("FK_systemuser_ptas_geoarea_ptas_seniorappraiserid");
            });

            modelBuilder.Entity<PtasGeoneighborhood>(entity =>
            {
                entity.ToTable("ptas_geoneighborhood", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_geoneighborhood_modifiedon");

                entity.Property(e => e.PtasGeoneighborhoodid)
                    .HasColumnName("ptas_geoneighborhoodid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasGeoareaidValue).HasColumnName("_ptas_geoareaid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNbhdnumber).HasColumnName("ptas_nbhdnumber");

                entity.Property(e => e.PtasSubmarketValue).HasColumnName("_ptas_submarket_value");

                entity.Property(e => e.PtasSupergroupValue).HasColumnName("_ptas_supergroup_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasGeoneighborhoodCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_geoneighborhood_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasGeoneighborhoodCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_geoneighborhood_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasGeoneighborhoodModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_geoneighborhood_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasGeoneighborhoodModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_geoneighborhood_modifiedonbehalfby");

                entity.HasOne(d => d.PtasGeoareaidValueNavigation)
                    .WithMany(p => p.PtasGeoneighborhood)
                    .HasForeignKey(d => d.PtasGeoareaidValue)
                    .HasConstraintName("FK_ptas_geoarea_ptas_geoneighborhood_ptas_geoareaid");

                entity.HasOne(d => d.PtasSubmarketValueNavigation)
                    .WithMany(p => p.PtasGeoneighborhood)
                    .HasForeignKey(d => d.PtasSubmarketValue)
                    .HasConstraintName("FK_ptas_submarket_ptas_geoneighborhood_ptas_submarket");

                entity.HasOne(d => d.PtasSupergroupValueNavigation)
                    .WithMany(p => p.PtasGeoneighborhood)
                    .HasForeignKey(d => d.PtasSupergroupValue)
                    .HasConstraintName("FK_ptas_supergroup_ptas_geoneighborhood_ptas_supergroup");
            });

            modelBuilder.Entity<PtasGovtaxpayername>(entity =>
            {
                entity.ToTable("ptas_govtaxpayername", "dynamics");

                entity.Property(e => e.PtasGovtaxpayernameid)
                    .HasColumnName("ptas_govtaxpayernameid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasGovtaxpayernameCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_govtaxpayername_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasGovtaxpayernameCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_govtaxpayername_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasGovtaxpayernameModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_govtaxpayername_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasGovtaxpayernameModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_govtaxpayername_modifiedonbehalfby");
            });

            modelBuilder.Entity<PtasGradestratificationmapping>(entity =>
            {
                entity.ToTable("ptas_gradestratificationmapping", "dynamics");

                entity.Property(e => e.PtasGradestratificationmappingid)
                    .HasColumnName("ptas_gradestratificationmappingid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasBuildingquality).HasColumnName("ptas_buildingquality");

                entity.Property(e => e.PtasGrade).HasColumnName("ptas_grade");

                entity.Property(e => e.PtasLeasingclass).HasColumnName("ptas_leasingclass");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasSpecialtyneighborhoodidValue).HasColumnName("_ptas_specialtyneighborhoodid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasGradestratificationmappingCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_gradestratificationmapping_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasGradestratificationmappingCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_gradestratificationmapping_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasGradestratificationmappingModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_gradestratificationmapping_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasGradestratificationmappingModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_gradestratificationmapping_modifiedonbehalfby");

                entity.HasOne(d => d.PtasSpecialtyneighborhoodidValueNavigation)
                    .WithMany(p => p.PtasGradestratificationmapping)
                    .HasForeignKey(d => d.PtasSpecialtyneighborhoodidValue)
                    .HasConstraintName("FK_ptas_specialtyneighborhood_ptas_gradestratificationmapping_ptas_specialtyneighborhoodid");
            });

            modelBuilder.Entity<PtasHinotesPtasMediarepository>(entity =>
            {
                entity.ToTable("ptas_hinotes_ptas_mediarepository", "dynamics");

                entity.Property(e => e.PtasHinotesPtasMediarepositoryid)
                    .HasColumnName("ptas_hinotes_ptas_mediarepositoryid")
                    .ValueGeneratedNever();

                entity.Property(e => e.PtasHomeimprovementnotesid).HasColumnName("ptas_homeimprovementnotesid");

                entity.Property(e => e.PtasMediarepositoryid).HasColumnName("ptas_mediarepositoryid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasHomeimprovement>(entity =>
            {
                entity.ToTable("ptas_homeimprovement", "dynamics");

                entity.Property(e => e.PtasHomeimprovementid)
                    .HasColumnName("ptas_homeimprovementid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Emailaddress).HasColumnName("emailaddress");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasApplicationsignedbytaxpayer).HasColumnName("ptas_applicationsignedbytaxpayer");

                entity.Property(e => e.PtasApplicationsource).HasColumnName("ptas_applicationsource");

                entity.Property(e => e.PtasBuildingidValue).HasColumnName("_ptas_buildingid_value");

                entity.Property(e => e.PtasCompositemailingaddress).HasColumnName("ptas_compositemailingaddress");

                entity.Property(e => e.PtasConstructionbegindate).HasColumnName("ptas_constructionbegindate");

                entity.Property(e => e.PtasConstructionpropertyaddress).HasColumnName("ptas_constructionpropertyaddress");

                entity.Property(e => e.PtasDateapplicationreceived).HasColumnName("ptas_dateapplicationreceived");

                entity.Property(e => e.PtasDatepermitissued).HasColumnName("ptas_datepermitissued");

                entity.Property(e => e.PtasDescriptionoftheimprovement).HasColumnName("ptas_descriptionoftheimprovement");

                entity.Property(e => e.PtasEmailaddress).HasColumnName("ptas_emailaddress");

                entity.Property(e => e.PtasEstimatedcompletiondate).HasColumnName("ptas_estimatedcompletiondate");

                entity.Property(e => e.PtasEstimatedconstructioncost)
                    .HasColumnName("ptas_estimatedconstructioncost")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEstimatedconstructioncostBase)
                    .HasColumnName("ptas_estimatedconstructioncost_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasExemptionamount)
                    .HasColumnName("ptas_exemptionamount")
                    .HasColumnType("money");

                entity.Property(e => e.PtasExemptionamountBase)
                    .HasColumnName("ptas_exemptionamount_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasExemptionbeginyearidValue).HasColumnName("_ptas_exemptionbeginyearid_value");

                entity.Property(e => e.PtasExemptionendyearidValue).HasColumnName("_ptas_exemptionendyearid_value");

                entity.Property(e => e.PtasExemptionnumber).HasColumnName("ptas_exemptionnumber");

                entity.Property(e => e.PtasHipostcardsent).HasColumnName("ptas_hipostcardsent");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasParcelidValue).HasColumnName("_ptas_parcelid_value");

                entity.Property(e => e.PtasPermitidValue).HasColumnName("_ptas_permitid_value");

                entity.Property(e => e.PtasPermitjurisdictionidValue).HasColumnName("_ptas_permitjurisdictionid_value");

                entity.Property(e => e.PtasPhonenumber).HasColumnName("ptas_phonenumber");

                entity.Property(e => e.PtasPortalcontactidValue).HasColumnName("_ptas_portalcontactid_value");

                entity.Property(e => e.PtasTaxaccountidValue).HasColumnName("_ptas_taxaccountid_value");

                entity.Property(e => e.PtasTaxpayername).HasColumnName("ptas_taxpayername");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasHomeimprovementCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_homeimprovement_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasHomeimprovementCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_homeimprovement_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasHomeimprovementModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_homeimprovement_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasHomeimprovementModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_homeimprovement_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasHomeimprovement)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_homeimprovement_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasHomeimprovementOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_homeimprovement_owninguser");

                entity.HasOne(d => d.PtasBuildingidValueNavigation)
                    .WithMany(p => p.PtasHomeimprovement)
                    .HasForeignKey(d => d.PtasBuildingidValue)
                    .HasConstraintName("FK_ptas_buildingdetail_ptas_homeimprovement_ptas_buildingid");

                entity.HasOne(d => d.PtasExemptionbeginyearidValueNavigation)
                    .WithMany(p => p.PtasHomeimprovementPtasExemptionbeginyearidValueNavigation)
                    .HasForeignKey(d => d.PtasExemptionbeginyearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_homeimprovement_ptas_exemptionbeginyearid");

                entity.HasOne(d => d.PtasExemptionendyearidValueNavigation)
                    .WithMany(p => p.PtasHomeimprovementPtasExemptionendyearidValueNavigation)
                    .HasForeignKey(d => d.PtasExemptionendyearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_homeimprovement_ptas_exemptionendyearid");

                entity.HasOne(d => d.PtasParcelidValueNavigation)
                    .WithMany(p => p.PtasHomeimprovement)
                    .HasForeignKey(d => d.PtasParcelidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_homeimprovement_ptas_parcelid");

                entity.HasOne(d => d.PtasPermitidValueNavigation)
                    .WithMany(p => p.PtasHomeimprovement)
                    .HasForeignKey(d => d.PtasPermitidValue)
                    .HasConstraintName("FK_ptas_permit_ptas_homeimprovement_ptas_permitid");

                entity.HasOne(d => d.PtasPermitjurisdictionidValueNavigation)
                    .WithMany(p => p.PtasHomeimprovement)
                    .HasForeignKey(d => d.PtasPermitjurisdictionidValue)
                    .HasConstraintName("FK_ptas_jurisdiction_ptas_homeimprovement_ptas_permitjurisdictionid");

                entity.HasOne(d => d.PtasPortalcontactidValueNavigation)
                    .WithMany(p => p.PtasHomeimprovement)
                    .HasForeignKey(d => d.PtasPortalcontactidValue)
                    .HasConstraintName("FK_ptas_portalcontact_ptas_homeimprovement_ptas_portalcontactid");

                entity.HasOne(d => d.PtasTaxaccountidValueNavigation)
                    .WithMany(p => p.PtasHomeimprovement)
                    .HasForeignKey(d => d.PtasTaxaccountidValue)
                    .HasConstraintName("FK_ptas_taxaccount_ptas_homeimprovement_ptas_taxaccountid");
            });

            modelBuilder.Entity<PtasHomeimprovementnotes>(entity =>
            {
                entity.ToTable("ptas_homeimprovementnotes", "dynamics");

                entity.Property(e => e.PtasHomeimprovementnotesid)
                    .HasColumnName("ptas_homeimprovementnotesid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasHinotetext).HasColumnName("ptas_hinotetext");

                entity.Property(e => e.PtasHomeimprovementidValue).HasColumnName("_ptas_homeimprovementid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasHousingprogram>(entity =>
            {
                entity.ToTable("ptas_housingprogram", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_housingprogram_modifiedon");

                entity.Property(e => e.PtasHousingprogramid)
                    .HasColumnName("ptas_housingprogramid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasRenttype).HasColumnName("ptas_renttype");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasHousingprogramCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_housingprogram_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasHousingprogramCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_housingprogram_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasHousingprogramModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_housingprogram_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasHousingprogramModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_housingprogram_modifiedonbehalfby");
            });

            modelBuilder.Entity<PtasIndustry>(entity =>
            {
                entity.ToTable("ptas_industry", "dynamics");

                entity.Property(e => e.PtasIndustryid)
                    .HasColumnName("ptas_industryid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasIndustryCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_industry_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasIndustryCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_industry_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasIndustryModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_industry_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasIndustryModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_industry_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasIndustry)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_industry_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasIndustryOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_industry_owninguser");
            });

            modelBuilder.Entity<PtasIndustryPtasPersonalpropertycategory>(entity =>
            {
                entity.ToTable("ptas_industry_ptas_personalpropertycategory", "dynamics");

                entity.Property(e => e.PtasIndustryPtasPersonalpropertycategoryid)
                    .HasColumnName("ptas_industry_ptas_personalpropertycategoryid")
                    .ValueGeneratedNever();

                entity.Property(e => e.PtasIndustryid).HasColumnName("ptas_industryid");

                entity.Property(e => e.PtasPersonalpropertycategoryid).HasColumnName("ptas_personalpropertycategoryid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasInspectionhistory>(entity =>
            {
                entity.ToTable("ptas_inspectionhistory", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_inspectionhistory_modifiedon");

                entity.Property(e => e.PtasInspectionhistoryid)
                    .HasColumnName("ptas_inspectionhistoryid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAssessmentyear).HasColumnName("ptas_assessmentyear");

                entity.Property(e => e.PtasInspectedbyidValue).HasColumnName("_ptas_inspectedbyid_value");

                entity.Property(e => e.PtasInspectiondate).HasColumnName("ptas_inspectiondate");

                entity.Property(e => e.PtasInspectionreason).HasColumnName("ptas_inspectionreason");

                entity.Property(e => e.PtasInspectiontype).HasColumnName("ptas_inspectiontype");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasParcelidValue).HasColumnName("_ptas_parcelid_value");

                entity.Property(e => e.PtasUnitValue).HasColumnName("_ptas_unit_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasInspectionhistoryCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_inspectionhistory_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasInspectionhistoryCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_inspectionhistory_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasInspectionhistoryModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_inspectionhistory_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasInspectionhistoryModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_inspectionhistory_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasInspectionhistory)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_inspectionhistory_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasInspectionhistoryOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_inspectionhistory_owninguser");

                entity.HasOne(d => d.PtasInspectedbyidValueNavigation)
                    .WithMany(p => p.PtasInspectionhistoryPtasInspectedbyidValueNavigation)
                    .HasForeignKey(d => d.PtasInspectedbyidValue)
                    .HasConstraintName("FK_systemuser_ptas_inspectionhistory_ptas_inspectedbyid");

                entity.HasOne(d => d.PtasParcelidValueNavigation)
                    .WithMany(p => p.PtasInspectionhistory)
                    .HasForeignKey(d => d.PtasParcelidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_inspectionhistory_ptas_parcelid");

                entity.HasOne(d => d.PtasUnitValueNavigation)
                    .WithMany(p => p.PtasInspectionhistory)
                    .HasForeignKey(d => d.PtasUnitValue)
                    .HasConstraintName("FK_ptas_condounit_ptas_inspectionhistory_ptas_unit");
            });

            modelBuilder.Entity<PtasInspectionyear>(entity =>
            {
                entity.ToTable("ptas_inspectionyear", "dynamics");

                entity.Property(e => e.PtasInspectionyearid)
                    .HasColumnName("ptas_inspectionyearid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAreaValue).HasColumnName("_ptas_area_value");

                entity.Property(e => e.PtasGeoneighborhoodValue).HasColumnName("_ptas_geoneighborhood_value");

                entity.Property(e => e.PtasInspectiontype).HasColumnName("ptas_inspectiontype");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasReportpublished).HasColumnName("ptas_reportpublished");

                entity.Property(e => e.PtasSpecialtyneighborhoodValue).HasColumnName("_ptas_specialtyneighborhood_value");

                entity.Property(e => e.PtasYear).HasColumnName("ptas_year");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasInspectionyearCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_inspectionyear_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasInspectionyearCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_inspectionyear_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasInspectionyearModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_inspectionyear_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasInspectionyearModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_inspectionyear_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasInspectionyear)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_inspectionyear_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasInspectionyearOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_inspectionyear_owninguser");

                entity.HasOne(d => d.PtasAreaValueNavigation)
                    .WithMany(p => p.PtasInspectionyear)
                    .HasForeignKey(d => d.PtasAreaValue)
                    .HasConstraintName("FK_ptas_area_ptas_inspectionyear_ptas_area");

                entity.HasOne(d => d.PtasGeoneighborhoodValueNavigation)
                    .WithMany(p => p.PtasInspectionyear)
                    .HasForeignKey(d => d.PtasGeoneighborhoodValue)
                    .HasConstraintName("FK_ptas_geoneighborhood_ptas_inspectionyear_ptas_geoneighborhood");

                entity.HasOne(d => d.PtasSpecialtyneighborhoodValueNavigation)
                    .WithMany(p => p.PtasInspectionyear)
                    .HasForeignKey(d => d.PtasSpecialtyneighborhoodValue)
                    .HasConstraintName("FK_ptas_specialtyneighborhood_ptas_inspectionyear_ptas_specialtyneighborhood");
            });

            modelBuilder.Entity<PtasJurisdiction>(entity =>
            {
                entity.ToTable("ptas_jurisdiction", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_jurisdiction_modifiedon");

                entity.Property(e => e.PtasJurisdictionid)
                    .HasColumnName("ptas_jurisdictionid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasAbbreviation).HasColumnName("ptas_abbreviation");

                entity.Property(e => e.PtasAdvancenoticeforplansdays).HasColumnName("ptas_advancenoticeforplansdays");

                entity.Property(e => e.PtasAppraisalnotes).HasColumnName("ptas_appraisalnotes");

                entity.Property(e => e.PtasCommercialcontactidValue).HasColumnName("_ptas_commercialcontactid_value");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasId).HasColumnName("ptas_id");

                entity.Property(e => e.PtasMainphonenumber).HasColumnName("ptas_mainphonenumber");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNumber).HasColumnName("ptas_number");

                entity.Property(e => e.PtasPermitwebsiteconfigidValue).HasColumnName("_ptas_permitwebsiteconfigid_value");

                entity.Property(e => e.PtasPlanrequestemail).HasColumnName("ptas_planrequestemail");

                entity.Property(e => e.PtasPlanrequesturl).HasColumnName("ptas_planrequesturl");

                entity.Property(e => e.PtasResidentialcontactidValue).HasColumnName("_ptas_residentialcontactid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasJurisdictionCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_jurisdiction_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasJurisdictionCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_jurisdiction_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasJurisdictionModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_jurisdiction_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasJurisdictionModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_jurisdiction_modifiedonbehalfby");

                entity.HasOne(d => d.PtasCommercialcontactidValueNavigation)
                    .WithMany(p => p.PtasJurisdictionPtasCommercialcontactidValueNavigation)
                    .HasForeignKey(d => d.PtasCommercialcontactidValue)
                    .HasConstraintName("FK_ptas_jurisdictioncontact_ptas_jurisdiction_ptas_commercialcontactid");

                entity.HasOne(d => d.PtasPermitwebsiteconfigidValueNavigation)
                    .WithMany(p => p.PtasJurisdiction)
                    .HasForeignKey(d => d.PtasPermitwebsiteconfigidValue)
                    .HasConstraintName("FK_ptas_permitwebsiteconfig_ptas_jurisdiction_ptas_permitwebsiteconfigid");

                entity.HasOne(d => d.PtasResidentialcontactidValueNavigation)
                    .WithMany(p => p.PtasJurisdictionPtasResidentialcontactidValueNavigation)
                    .HasForeignKey(d => d.PtasResidentialcontactidValue)
                    .HasConstraintName("FK_ptas_jurisdictioncontact_ptas_jurisdiction_ptas_residentialcontactid");
            });

            modelBuilder.Entity<PtasJurisdictioncontact>(entity =>
            {
                entity.ToTable("ptas_jurisdictioncontact", "dynamics");

                entity.Property(e => e.PtasJurisdictioncontactid)
                    .HasColumnName("ptas_jurisdictioncontactid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAddress1).HasColumnName("ptas_address1");

                entity.Property(e => e.PtasAddress2).HasColumnName("ptas_address2");

                entity.Property(e => e.PtasAppraisalcontacttype).HasColumnName("ptas_appraisalcontacttype");

                entity.Property(e => e.PtasCity).HasColumnName("ptas_city");

                entity.Property(e => e.PtasEmail).HasColumnName("ptas_email");

                entity.Property(e => e.PtasFirstname).HasColumnName("ptas_firstname");

                entity.Property(e => e.PtasJobtitle).HasColumnName("ptas_jobtitle");

                entity.Property(e => e.PtasJurisdictionidValue).HasColumnName("_ptas_jurisdictionid_value");

                entity.Property(e => e.PtasLastname).HasColumnName("ptas_lastname");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNote).HasColumnName("ptas_note");

                entity.Property(e => e.PtasPhonenumber).HasColumnName("ptas_phonenumber");

                entity.Property(e => e.PtasState).HasColumnName("ptas_state");

                entity.Property(e => e.PtasZipcode).HasColumnName("ptas_zipcode");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasJurisdictioncontactCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_jurisdictioncontact_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasJurisdictioncontactCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_jurisdictioncontact_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasJurisdictioncontactModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_jurisdictioncontact_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasJurisdictioncontactModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_jurisdictioncontact_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasJurisdictioncontact)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_jurisdictioncontact_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasJurisdictioncontactOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_jurisdictioncontact_owninguser");

                entity.HasOne(d => d.PtasJurisdictionidValueNavigation)
                    .WithMany(p => p.PtasJurisdictioncontact)
                    .HasForeignKey(d => d.PtasJurisdictionidValue)
                    .HasConstraintName("FK_ptas_jurisdiction_ptas_jurisdictioncontact_ptas_jurisdictionid");
            });

            modelBuilder.Entity<PtasLand>(entity =>
            {
                entity.ToTable("ptas_land", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_land_modifiedon");

                entity.Property(e => e.PtasLandid)
                    .HasColumnName("ptas_landid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAddr1CompositeaddressOneline).HasColumnName("ptas_addr1_compositeaddress_oneline");

                entity.Property(e => e.PtasAsofvaluationdate).HasColumnName("ptas_asofvaluationdate");

                entity.Property(e => e.PtasAssessmentyear).HasColumnName("ptas_assessmentyear");

                entity.Property(e => e.PtasAutocalculate).HasColumnName("ptas_autocalculate");

                entity.Property(e => e.PtasBaselandvalue)
                    .HasColumnName("ptas_baselandvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasBaselandvalueBase)
                    .HasColumnName("ptas_baselandvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCalculateexcessland).HasColumnName("ptas_calculateexcessland");

                entity.Property(e => e.PtasCommerciallandvalue)
                    .HasColumnName("ptas_commerciallandvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCommerciallandvalueBase)
                    .HasColumnName("ptas_commerciallandvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDollarspersquarefoot)
                    .HasColumnName("ptas_dollarspersquarefoot")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDollarspersquarefootBase)
                    .HasColumnName("ptas_dollarspersquarefoot_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDrysqft).HasColumnName("ptas_drysqft");

                entity.Property(e => e.PtasDrysqftactual).HasColumnName("ptas_drysqftactual");

                entity.Property(e => e.PtasEconomicunitlandvalue)
                    .HasColumnName("ptas_economicunitlandvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEconomicunitlandvalueBase)
                    .HasColumnName("ptas_economicunitlandvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEffectivesqft).HasColumnName("ptas_effectivesqft");

                entity.Property(e => e.PtasExcessland).HasColumnName("ptas_excessland");

                entity.Property(e => e.PtasExcesslandsqft).HasColumnName("ptas_excesslandsqft");

                entity.Property(e => e.PtasFullsitusaddress).HasColumnName("ptas_fullsitusaddress");

                entity.Property(e => e.PtasGrosslandvalue)
                    .HasColumnName("ptas_grosslandvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasGrosslandvalueBase)
                    .HasColumnName("ptas_grosslandvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasHbuifimproved).HasColumnName("ptas_hbuifimproved");

                entity.Property(e => e.PtasHbuifvacant).HasColumnName("ptas_hbuifvacant");

                entity.Property(e => e.PtasLandacres)
                    .HasColumnName("ptas_landacres")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasLegacyrplandid).HasColumnName("ptas_legacyrplandid");

                entity.Property(e => e.PtasMasterlandidValue).HasColumnName("_ptas_masterlandid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasParcelheadername).HasColumnName("ptas_parcelheadername");

                entity.Property(e => e.PtasParcelheadertext).HasColumnName("ptas_parcelheadertext");

                entity.Property(e => e.PtasParcelheadertext2).HasColumnName("ptas_parcelheadertext2");

                entity.Property(e => e.PtasParking).HasColumnName("ptas_parking");

                entity.Property(e => e.PtasPercentbaselandvalue).HasColumnName("ptas_percentbaselandvalue");

                entity.Property(e => e.PtasPercentunusable).HasColumnName("ptas_percentunusable");

                entity.Property(e => e.PtasPresentuse).HasColumnName("ptas_presentuse");

                entity.Property(e => e.PtasRequiredlbratio).HasColumnName("ptas_requiredlbratio");

                entity.Property(e => e.PtasRoadaccess).HasColumnName("ptas_roadaccess");

                entity.Property(e => e.PtasSewersystem).HasColumnName("ptas_sewersystem");

                entity.Property(e => e.PtasShowlandvaluebreakdown).HasColumnName("ptas_showlandvaluebreakdown");

                entity.Property(e => e.PtasShowrecordchanges).HasColumnName("ptas_showrecordchanges");

                entity.Property(e => e.PtasSitusaddress).HasColumnName("ptas_situsaddress");

                entity.Property(e => e.PtasSnapshotdatetime).HasColumnName("ptas_snapshotdatetime");

                entity.Property(e => e.PtasSnapshottype).HasColumnName("ptas_snapshottype");

                entity.Property(e => e.PtasSplitzoning).HasColumnName("ptas_splitzoning");

                entity.Property(e => e.PtasSqfttotal).HasColumnName("ptas_sqfttotal");

                entity.Property(e => e.PtasStreetsurface).HasColumnName("ptas_streetsurface");

                entity.Property(e => e.PtasSubmergedsqft).HasColumnName("ptas_submergedsqft");

                entity.Property(e => e.PtasSubmergedsqftactual).HasColumnName("ptas_submergedsqftactual");

                entity.Property(e => e.PtasTaxyear).HasColumnName("ptas_taxyear");

                entity.Property(e => e.PtasTotalsitesperzoning).HasColumnName("ptas_totalsitesperzoning");

                entity.Property(e => e.PtasTotalsqftactual).HasColumnName("ptas_totalsqftactual");

                entity.Property(e => e.PtasUnbuildable).HasColumnName("ptas_unbuildable");

                entity.Property(e => e.PtasValuedate).HasColumnName("ptas_valuedate");

                entity.Property(e => e.PtasWatersystem).HasColumnName("ptas_watersystem");

                entity.Property(e => e.PtasZoning).HasColumnName("ptas_zoning");

                entity.Property(e => e.PtasZoningchangedate).HasColumnName("ptas_zoningchangedate");

                entity.Property(e => e.PtasZoningdescription).HasColumnName("ptas_zoningdescription");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasLandCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_land_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasLandCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_land_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasLandModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_land_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasLandModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_land_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasLand)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_land_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasLandOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_land_owninguser");

                entity.HasOne(d => d.PtasMasterlandidValueNavigation)
                    .WithMany(p => p.InversePtasMasterlandidValueNavigation)
                    .HasForeignKey(d => d.PtasMasterlandidValue)
                    .HasConstraintName("FK_ptas_land_ptas_land_ptas_masterlandid");
            });

            modelBuilder.Entity<PtasLandPtasMediarepository>(entity =>
            {
                entity.ToTable("ptas_land_ptas_mediarepository", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_land_ptas_mediarepository_modifiedon");

                entity.Property(e => e.PtasLandPtasMediarepositoryid)
                    .HasColumnName("ptas_land_ptas_mediarepositoryid")
                    .ValueGeneratedNever();

                entity.Property(e => e.Modifiedon)
                    .HasColumnName("modifiedon")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.PtasLandid).HasColumnName("ptas_landid");

                entity.Property(e => e.PtasMediarepositoryid).HasColumnName("ptas_mediarepositoryid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasLandSnapshot>(entity =>
            {
                entity.HasKey(e => e.PtasLandid);

                entity.ToTable("ptas_land_snapshot", "dynamics");

                entity.Property(e => e.PtasLandid)
                    .HasColumnName("ptas_landid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAddr1CompositeaddressOneline).HasColumnName("ptas_addr1_compositeaddress_oneline");

                entity.Property(e => e.PtasAsofvaluationdate).HasColumnName("ptas_asofvaluationdate");

                entity.Property(e => e.PtasAssessmentyear).HasColumnName("ptas_assessmentyear");

                entity.Property(e => e.PtasAutocalculate).HasColumnName("ptas_autocalculate");

                entity.Property(e => e.PtasBaselandvalue)
                    .HasColumnName("ptas_baselandvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasBaselandvalueBase)
                    .HasColumnName("ptas_baselandvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCalculateexcessland).HasColumnName("ptas_calculateexcessland");

                entity.Property(e => e.PtasCommerciallandvalue)
                    .HasColumnName("ptas_commerciallandvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCommerciallandvalueBase)
                    .HasColumnName("ptas_commerciallandvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDollarspersquarefoot)
                    .HasColumnName("ptas_dollarspersquarefoot")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDollarspersquarefootBase)
                    .HasColumnName("ptas_dollarspersquarefoot_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDrysqft).HasColumnName("ptas_drysqft");

                entity.Property(e => e.PtasDrysqftactual).HasColumnName("ptas_drysqftactual");

                entity.Property(e => e.PtasEconomicunitlandvalue)
                    .HasColumnName("ptas_economicunitlandvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEconomicunitlandvalueBase)
                    .HasColumnName("ptas_economicunitlandvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEffectivesqft).HasColumnName("ptas_effectivesqft");

                entity.Property(e => e.PtasExcessland).HasColumnName("ptas_excessland");

                entity.Property(e => e.PtasExcesslandsqft).HasColumnName("ptas_excesslandsqft");

                entity.Property(e => e.PtasFullsitusaddress).HasColumnName("ptas_fullsitusaddress");

                entity.Property(e => e.PtasGrosslandvalue)
                    .HasColumnName("ptas_grosslandvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasGrosslandvalueBase)
                    .HasColumnName("ptas_grosslandvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasHbuifimproved).HasColumnName("ptas_hbuifimproved");

                entity.Property(e => e.PtasHbuifvacant).HasColumnName("ptas_hbuifvacant");

                entity.Property(e => e.PtasLandacres)
                    .HasColumnName("ptas_landacres")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasLegacyrplandid).HasColumnName("ptas_legacyrplandid");

                entity.Property(e => e.PtasMasterlandidValue).HasColumnName("_ptas_masterlandid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasParcelheadername).HasColumnName("ptas_parcelheadername");

                entity.Property(e => e.PtasParcelheadertext).HasColumnName("ptas_parcelheadertext");

                entity.Property(e => e.PtasParcelheadertext2).HasColumnName("ptas_parcelheadertext2");

                entity.Property(e => e.PtasParking).HasColumnName("ptas_parking");

                entity.Property(e => e.PtasPercentbaselandvalue).HasColumnName("ptas_percentbaselandvalue");

                entity.Property(e => e.PtasPercentunusable).HasColumnName("ptas_percentunusable");

                entity.Property(e => e.PtasPresentuse).HasColumnName("ptas_presentuse");

                entity.Property(e => e.PtasRequiredlbratio).HasColumnName("ptas_requiredlbratio");

                entity.Property(e => e.PtasRoadaccess).HasColumnName("ptas_roadaccess");

                entity.Property(e => e.PtasSewersystem).HasColumnName("ptas_sewersystem");

                entity.Property(e => e.PtasShowlandvaluebreakdown).HasColumnName("ptas_showlandvaluebreakdown");

                entity.Property(e => e.PtasShowrecordchanges).HasColumnName("ptas_showrecordchanges");

                entity.Property(e => e.PtasSitusaddress).HasColumnName("ptas_situsaddress");

                entity.Property(e => e.PtasSnapshotdatetime).HasColumnName("ptas_snapshotdatetime");

                entity.Property(e => e.PtasSnapshottype).HasColumnName("ptas_snapshottype");

                entity.Property(e => e.PtasSplitzoning).HasColumnName("ptas_splitzoning");

                entity.Property(e => e.PtasSqfttotal).HasColumnName("ptas_sqfttotal");

                entity.Property(e => e.PtasStreetsurface).HasColumnName("ptas_streetsurface");

                entity.Property(e => e.PtasSubmergedsqft).HasColumnName("ptas_submergedsqft");

                entity.Property(e => e.PtasSubmergedsqftactual).HasColumnName("ptas_submergedsqftactual");

                entity.Property(e => e.PtasTaxyear).HasColumnName("ptas_taxyear");

                entity.Property(e => e.PtasTotalsitesperzoning).HasColumnName("ptas_totalsitesperzoning");

                entity.Property(e => e.PtasTotalsqftactual).HasColumnName("ptas_totalsqftactual");

                entity.Property(e => e.PtasUnbuildable).HasColumnName("ptas_unbuildable");

                entity.Property(e => e.PtasValuedate).HasColumnName("ptas_valuedate");

                entity.Property(e => e.PtasWatersystem).HasColumnName("ptas_watersystem");

                entity.Property(e => e.PtasZoning).HasColumnName("ptas_zoning");

                entity.Property(e => e.PtasZoningchangedate).HasColumnName("ptas_zoningchangedate");

                entity.Property(e => e.PtasZoningdescription).HasColumnName("ptas_zoningdescription");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasLanduse>(entity =>
            {
                entity.ToTable("ptas_landuse", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_landuse_modifiedon");

                entity.Property(e => e.PtasLanduseid)
                    .HasColumnName("ptas_landuseid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasAbbreviation).HasColumnName("ptas_abbreviation");

                entity.Property(e => e.PtasItemid).HasColumnName("ptas_itemid");

                entity.Property(e => e.PtasLandusetype).HasColumnName("ptas_landusetype");

                entity.Property(e => e.PtasLongdescription).HasColumnName("ptas_longdescription");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasTypeid).HasColumnName("ptas_typeid");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasLanduseCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_landuse_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasLanduseCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_landuse_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasLanduseModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_landuse_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasLanduseModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_landuse_modifiedonbehalfby");
            });

            modelBuilder.Entity<PtasLandvaluebreakdown>(entity =>
            {
                entity.ToTable("ptas_landvaluebreakdown", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_landvaluebreakdown_modifiedon");

                entity.Property(e => e.PtasLandvaluebreakdownid)
                    .HasColumnName("ptas_landvaluebreakdownid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasLandidValue).HasColumnName("_ptas_landid_value");

                entity.Property(e => e.PtasMasterlandvaluebreakdownidValue).HasColumnName("_ptas_masterlandvaluebreakdownid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasParceldetailidValue).HasColumnName("_ptas_parceldetailid_value");

                entity.Property(e => e.PtasPercent)
                    .HasColumnName("ptas_percent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSnapshotdatetime).HasColumnName("ptas_snapshotdatetime");

                entity.Property(e => e.PtasSnapshottype).HasColumnName("ptas_snapshottype");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasLandvaluebreakdownCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_landvaluebreakdown_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasLandvaluebreakdownCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_landvaluebreakdown_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasLandvaluebreakdownModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_landvaluebreakdown_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasLandvaluebreakdownModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_landvaluebreakdown_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasLandvaluebreakdown)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_landvaluebreakdown_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasLandvaluebreakdownOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_landvaluebreakdown_owninguser");

                entity.HasOne(d => d.PtasLandidValueNavigation)
                    .WithMany(p => p.PtasLandvaluebreakdown)
                    .HasForeignKey(d => d.PtasLandidValue)
                    .HasConstraintName("FK_ptas_land_ptas_landvaluebreakdown_ptas_landid");

                entity.HasOne(d => d.PtasMasterlandvaluebreakdownidValueNavigation)
                    .WithMany(p => p.InversePtasMasterlandvaluebreakdownidValueNavigation)
                    .HasForeignKey(d => d.PtasMasterlandvaluebreakdownidValue)
                    .HasConstraintName("FK_ptas_landvaluebreakdown_ptas_landvaluebreakdown_ptas_masterlandvaluebreakdownid");

                entity.HasOne(d => d.PtasParceldetailidValueNavigation)
                    .WithMany(p => p.PtasLandvaluebreakdown)
                    .HasForeignKey(d => d.PtasParceldetailidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_landvaluebreakdown_ptas_parceldetailid");
            });

            modelBuilder.Entity<PtasLandvaluebreakdownSnapshot>(entity =>
            {
                entity.HasKey(e => e.PtasLandvaluebreakdownid);

                entity.ToTable("ptas_landvaluebreakdown_snapshot", "dynamics");

                entity.Property(e => e.PtasLandvaluebreakdownid)
                    .HasColumnName("ptas_landvaluebreakdownid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasLandidValue).HasColumnName("_ptas_landid_value");

                entity.Property(e => e.PtasMasterlandvaluebreakdownidValue).HasColumnName("_ptas_masterlandvaluebreakdownid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasParceldetailidValue).HasColumnName("_ptas_parceldetailid_value");

                entity.Property(e => e.PtasPercent)
                    .HasColumnName("ptas_percent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSnapshotdatetime).HasColumnName("ptas_snapshotdatetime");

                entity.Property(e => e.PtasSnapshottype).HasColumnName("ptas_snapshottype");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasLandvaluecalculation>(entity =>
            {
                entity.ToTable("ptas_landvaluecalculation", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_landvaluecalculation_modifiedon");

                entity.Property(e => e.PtasLandvaluecalculationid)
                    .HasColumnName("ptas_landvaluecalculationid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAccessrights).HasColumnName("ptas_accessrights");

                entity.Property(e => e.PtasAddr1CompositeaddressOneline).HasColumnName("ptas_addr1_compositeaddress_oneline");

                entity.Property(e => e.PtasAdjustedvalue)
                    .HasColumnName("ptas_adjustedvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAdjustedvalueBase)
                    .HasColumnName("ptas_adjustedvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAirportnoise).HasColumnName("ptas_airportnoise");

                entity.Property(e => e.PtasCharacteristictype).HasColumnName("ptas_characteristictype");

                entity.Property(e => e.PtasDelineationstudy).HasColumnName("ptas_delineationstudy");

                entity.Property(e => e.PtasDepthfactor).HasColumnName("ptas_depthfactor");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasDesignationtype).HasColumnName("ptas_designationtype");

                entity.Property(e => e.PtasDesignationtypeidValue).HasColumnName("_ptas_designationtypeid_value");

                entity.Property(e => e.PtasDollaradjustment)
                    .HasColumnName("ptas_dollaradjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDollaradjustmentBase)
                    .HasColumnName("ptas_dollaradjustment_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDollarperlinearft)
                    .HasColumnName("ptas_dollarperlinearft")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDollarperlinearftBase)
                    .HasColumnName("ptas_dollarperlinearft_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDollarpersqft)
                    .HasColumnName("ptas_dollarpersqft")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDollarpersqftBase)
                    .HasColumnName("ptas_dollarpersqft_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDollarperunit)
                    .HasColumnName("ptas_dollarperunit")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDollarperunitBase)
                    .HasColumnName("ptas_dollarperunit_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEnvironmentalrestriction).HasColumnName("ptas_environmentalrestriction");

                entity.Property(e => e.PtasEnvressource).HasColumnName("ptas_envressource");

                entity.Property(e => e.PtasEnvrestypeidValue).HasColumnName("_ptas_envrestypeid_value");

                entity.Property(e => e.PtasGrosslandvalue)
                    .HasColumnName("ptas_grosslandvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasGrosslandvalueBase)
                    .HasColumnName("ptas_grosslandvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLandidValue).HasColumnName("_ptas_landid_value");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymigrationcode).HasColumnName("ptas_legacymigrationcode");

                entity.Property(e => e.PtasLegacymigrationinfo).HasColumnName("ptas_legacymigrationinfo");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasLinearfootage).HasColumnName("ptas_linearfootage");

                entity.Property(e => e.PtasMasterlandcharacteristicidValue).HasColumnName("_ptas_masterlandcharacteristicid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNoiselevel).HasColumnName("ptas_noiselevel");

                entity.Property(e => e.PtasNuisancetype).HasColumnName("ptas_nuisancetype");

                entity.Property(e => e.PtasNuisancetypeidValue).HasColumnName("_ptas_nuisancetypeid_value");

                entity.Property(e => e.PtasNumberofunits).HasColumnName("ptas_numberofunits");

                entity.Property(e => e.PtasParcelheadername).HasColumnName("ptas_parcelheadername");

                entity.Property(e => e.PtasParcelheadertext).HasColumnName("ptas_parcelheadertext");

                entity.Property(e => e.PtasParcelheadertext2).HasColumnName("ptas_parcelheadertext2");

                entity.Property(e => e.PtasPercentadjustment).HasColumnName("ptas_percentadjustment");

                entity.Property(e => e.PtasPercentaffected).HasColumnName("ptas_percentaffected");

                entity.Property(e => e.PtasPoorquality).HasColumnName("ptas_poorquality");

                entity.Property(e => e.PtasProximityinfluence).HasColumnName("ptas_proximityinfluence");

                entity.Property(e => e.PtasQuality).HasColumnName("ptas_quality");

                entity.Property(e => e.PtasQuantitytype).HasColumnName("ptas_quantitytype");

                entity.Property(e => e.PtasReallocate).HasColumnName("ptas_reallocate");

                entity.Property(e => e.PtasRestrictedaccess).HasColumnName("ptas_restrictedaccess");

                entity.Property(e => e.PtasSitevalue)
                    .HasColumnName("ptas_sitevalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSitevalueBase)
                    .HasColumnName("ptas_sitevalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSnapshotdateandtime).HasColumnName("ptas_snapshotdateandtime");

                entity.Property(e => e.PtasSnapshottype).HasColumnName("ptas_snapshottype");

                entity.Property(e => e.PtasSquarefootage).HasColumnName("ptas_squarefootage");

                entity.Property(e => e.PtasTidelandorshoreland).HasColumnName("ptas_tidelandorshoreland");

                entity.Property(e => e.PtasTransfertype).HasColumnName("ptas_transfertype");

                entity.Property(e => e.PtasValuemethodcalculation).HasColumnName("ptas_valuemethodcalculation");

                entity.Property(e => e.PtasValuetype).HasColumnName("ptas_valuetype");

                entity.Property(e => e.PtasViewtype).HasColumnName("ptas_viewtype");

                entity.Property(e => e.PtasViewtypeidValue).HasColumnName("_ptas_viewtypeid_value");

                entity.Property(e => e.PtasWaterfrontbank).HasColumnName("ptas_waterfrontbank");

                entity.Property(e => e.PtasWaterfrontlocation).HasColumnName("ptas_waterfrontlocation");

                entity.Property(e => e.PtasWaterfronttype).HasColumnName("ptas_waterfronttype");

                entity.Property(e => e.PtasZoningchangedate).HasColumnName("ptas_zoningchangedate");

                entity.Property(e => e.PtasZoningtypeidValue).HasColumnName("_ptas_zoningtypeid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasLandvaluecalculationCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_landvaluecalculation_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasLandvaluecalculationCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_landvaluecalculation_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasLandvaluecalculationModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_landvaluecalculation_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasLandvaluecalculationModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_landvaluecalculation_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasLandvaluecalculation)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_landvaluecalculation_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasLandvaluecalculationOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_landvaluecalculation_owninguser");

                entity.HasOne(d => d.PtasDesignationtypeidValueNavigation)
                    .WithMany(p => p.PtasLandvaluecalculation)
                    .HasForeignKey(d => d.PtasDesignationtypeidValue)
                    .HasConstraintName("FK_ptas_designationtype_ptas_landvaluecalculation_ptas_designationtypeid");

                entity.HasOne(d => d.PtasEnvrestypeidValueNavigation)
                    .WithMany(p => p.PtasLandvaluecalculation)
                    .HasForeignKey(d => d.PtasEnvrestypeidValue)
                    .HasConstraintName("FK_ptas_environmentalrestrictiontype_ptas_landvaluecalculation_ptas_envrestypeid");

                entity.HasOne(d => d.PtasLandidValueNavigation)
                    .WithMany(p => p.PtasLandvaluecalculation)
                    .HasForeignKey(d => d.PtasLandidValue)
                    .HasConstraintName("FK_ptas_land_ptas_landvaluecalculation_ptas_landid");

                entity.HasOne(d => d.PtasMasterlandcharacteristicidValueNavigation)
                    .WithMany(p => p.InversePtasMasterlandcharacteristicidValueNavigation)
                    .HasForeignKey(d => d.PtasMasterlandcharacteristicidValue)
                    .HasConstraintName("FK_ptas_landvaluecalculation_ptas_landvaluecalculation_ptas_masterlandcharacteristicid");

                entity.HasOne(d => d.PtasNuisancetypeidValueNavigation)
                    .WithMany(p => p.PtasLandvaluecalculation)
                    .HasForeignKey(d => d.PtasNuisancetypeidValue)
                    .HasConstraintName("FK_ptas_nuisancetype_ptas_landvaluecalculation_ptas_nuisancetypeid");

                entity.HasOne(d => d.PtasViewtypeidValueNavigation)
                    .WithMany(p => p.PtasLandvaluecalculation)
                    .HasForeignKey(d => d.PtasViewtypeidValue)
                    .HasConstraintName("FK_ptas_viewtype_ptas_landvaluecalculation_ptas_viewtypeid");

                entity.HasOne(d => d.PtasZoningtypeidValueNavigation)
                    .WithMany(p => p.PtasLandvaluecalculation)
                    .HasForeignKey(d => d.PtasZoningtypeidValue)
                    .HasConstraintName("FK_ptas_zoning_ptas_landvaluecalculation_ptas_zoningtypeid");
            });

            modelBuilder.Entity<PtasLandvaluecalculationSnapshot>(entity =>
            {
                entity.HasKey(e => e.PtasLandvaluecalculationid);

                entity.ToTable("ptas_landvaluecalculation_snapshot", "dynamics");

                entity.Property(e => e.PtasLandvaluecalculationid)
                    .HasColumnName("ptas_landvaluecalculationid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAccessrights).HasColumnName("ptas_accessrights");

                entity.Property(e => e.PtasAddr1CompositeaddressOneline).HasColumnName("ptas_addr1_compositeaddress_oneline");

                entity.Property(e => e.PtasAdjustedvalue)
                    .HasColumnName("ptas_adjustedvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAdjustedvalueBase)
                    .HasColumnName("ptas_adjustedvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAirportnoise).HasColumnName("ptas_airportnoise");

                entity.Property(e => e.PtasCharacteristictype).HasColumnName("ptas_characteristictype");

                entity.Property(e => e.PtasDelineationstudy).HasColumnName("ptas_delineationstudy");

                entity.Property(e => e.PtasDepthfactor).HasColumnName("ptas_depthfactor");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasDesignationtype).HasColumnName("ptas_designationtype");

                entity.Property(e => e.PtasDesignationtypeidValue).HasColumnName("_ptas_designationtypeid_value");

                entity.Property(e => e.PtasDollaradjustment)
                    .HasColumnName("ptas_dollaradjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDollaradjustmentBase)
                    .HasColumnName("ptas_dollaradjustment_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDollarperlinearft)
                    .HasColumnName("ptas_dollarperlinearft")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDollarperlinearftBase)
                    .HasColumnName("ptas_dollarperlinearft_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDollarpersqft)
                    .HasColumnName("ptas_dollarpersqft")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDollarpersqftBase)
                    .HasColumnName("ptas_dollarpersqft_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDollarperunit)
                    .HasColumnName("ptas_dollarperunit")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDollarperunitBase)
                    .HasColumnName("ptas_dollarperunit_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEnvironmentalrestriction).HasColumnName("ptas_environmentalrestriction");

                entity.Property(e => e.PtasEnvressource).HasColumnName("ptas_envressource");

                entity.Property(e => e.PtasEnvrestypeidValue).HasColumnName("_ptas_envrestypeid_value");

                entity.Property(e => e.PtasGrosslandvalue)
                    .HasColumnName("ptas_grosslandvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasGrosslandvalueBase)
                    .HasColumnName("ptas_grosslandvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLandidValue).HasColumnName("_ptas_landid_value");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymigrationcode).HasColumnName("ptas_legacymigrationcode");

                entity.Property(e => e.PtasLegacymigrationinfo).HasColumnName("ptas_legacymigrationinfo");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasLinearfootage).HasColumnName("ptas_linearfootage");

                entity.Property(e => e.PtasMasterlandcharacteristicidValue).HasColumnName("_ptas_masterlandcharacteristicid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNoiselevel).HasColumnName("ptas_noiselevel");

                entity.Property(e => e.PtasNuisancetype).HasColumnName("ptas_nuisancetype");

                entity.Property(e => e.PtasNuisancetypeidValue).HasColumnName("_ptas_nuisancetypeid_value");

                entity.Property(e => e.PtasNumberofunits).HasColumnName("ptas_numberofunits");

                entity.Property(e => e.PtasParcelheadername).HasColumnName("ptas_parcelheadername");

                entity.Property(e => e.PtasParcelheadertext).HasColumnName("ptas_parcelheadertext");

                entity.Property(e => e.PtasParcelheadertext2).HasColumnName("ptas_parcelheadertext2");

                entity.Property(e => e.PtasPercentadjustment).HasColumnName("ptas_percentadjustment");

                entity.Property(e => e.PtasPercentaffected).HasColumnName("ptas_percentaffected");

                entity.Property(e => e.PtasPoorquality).HasColumnName("ptas_poorquality");

                entity.Property(e => e.PtasProximityinfluence).HasColumnName("ptas_proximityinfluence");

                entity.Property(e => e.PtasQuality).HasColumnName("ptas_quality");

                entity.Property(e => e.PtasQuantitytype).HasColumnName("ptas_quantitytype");

                entity.Property(e => e.PtasReallocate).HasColumnName("ptas_reallocate");

                entity.Property(e => e.PtasRestrictedaccess).HasColumnName("ptas_restrictedaccess");

                entity.Property(e => e.PtasSitevalue)
                    .HasColumnName("ptas_sitevalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSitevalueBase)
                    .HasColumnName("ptas_sitevalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSnapshotdateandtime).HasColumnName("ptas_snapshotdateandtime");

                entity.Property(e => e.PtasSnapshottype).HasColumnName("ptas_snapshottype");

                entity.Property(e => e.PtasSquarefootage).HasColumnName("ptas_squarefootage");

                entity.Property(e => e.PtasTidelandorshoreland).HasColumnName("ptas_tidelandorshoreland");

                entity.Property(e => e.PtasTransfertype).HasColumnName("ptas_transfertype");

                entity.Property(e => e.PtasValuemethodcalculation).HasColumnName("ptas_valuemethodcalculation");

                entity.Property(e => e.PtasValuetype).HasColumnName("ptas_valuetype");

                entity.Property(e => e.PtasViewtype).HasColumnName("ptas_viewtype");

                entity.Property(e => e.PtasViewtypeidValue).HasColumnName("_ptas_viewtypeid_value");

                entity.Property(e => e.PtasWaterfrontbank).HasColumnName("ptas_waterfrontbank");

                entity.Property(e => e.PtasWaterfrontlocation).HasColumnName("ptas_waterfrontlocation");

                entity.Property(e => e.PtasWaterfronttype).HasColumnName("ptas_waterfronttype");

                entity.Property(e => e.PtasZoningchangedate).HasColumnName("ptas_zoningchangedate");

                entity.Property(e => e.PtasZoningtypeidValue).HasColumnName("_ptas_zoningtypeid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasLegaldescriptions>(entity =>
            {
                entity.ToTable("ptas_legaldescriptions", "dynamics");

                entity.Property(e => e.PtasLegaldescriptionsid)
                    .HasColumnName("ptas_legaldescriptionsid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasLevycode>(entity =>
            {
                entity.ToTable("ptas_levycode", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_levycode_modifiedon");

                entity.Property(e => e.PtasLevycodeid)
                    .HasColumnName("ptas_levycodeid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.Ptas9998590checktotal)
                    .HasColumnName("ptas_9998590checktotal")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrent1constitutionallimit)
                    .HasColumnName("ptas_current1constitutionallimit")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasFiredistrictidValue).HasColumnName("_ptas_firedistrictid_value");

                entity.Property(e => e.PtasLevydodetype).HasColumnName("ptas_levydodetype");

                entity.Property(e => e.PtasLocallevytotallimit)
                    .HasColumnName("ptas_locallevytotallimit")
                    .HasColumnType("money");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasOverunderconstitutional)
                    .HasColumnName("ptas_overunderconstitutional")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotallevyrateconstitutional)
                    .HasColumnName("ptas_totallevyrateconstitutional")
                    .HasColumnType("money");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasLevycodeCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_levycode_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasLevycodeCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_levycode_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasLevycodeModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_levycode_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasLevycodeModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_levycode_modifiedonbehalfby");

                entity.HasOne(d => d.PtasFiredistrictidValueNavigation)
                    .WithMany(p => p.PtasLevycode)
                    .HasForeignKey(d => d.PtasFiredistrictidValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_levycode_ptas_firedistrictid");
            });

            modelBuilder.Entity<PtasLevycodePtasFund>(entity =>
            {
                entity.ToTable("ptas_levycode_ptas_fund", "dynamics");

                entity.Property(e => e.PtasLevycodePtasFundid)
                    .HasColumnName("ptas_levycode_ptas_fundid")
                    .ValueGeneratedNever();

                entity.Property(e => e.PtasFundid).HasColumnName("ptas_fundid");

                entity.Property(e => e.PtasLevycodeid).HasColumnName("ptas_levycodeid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasLevycodechange>(entity =>
            {
                entity.ToTable("ptas_levycodechange", "dynamics");

                entity.Property(e => e.PtasLevycodechangeid)
                    .HasColumnName("ptas_levycodechangeid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAnnexationtrackeridValue).HasColumnName("_ptas_annexationtrackerid_value");

                entity.Property(e => e.PtasChangefromlevycodeidValue).HasColumnName("_ptas_changefromlevycodeid_value");

                entity.Property(e => e.PtasChangetolevycodeidValue).HasColumnName("_ptas_changetolevycodeid_value");

                entity.Property(e => e.PtasCreatecitytownlimit).HasColumnName("ptas_createcitytownlimit");

                entity.Property(e => e.PtasCreatefirelimit).HasColumnName("ptas_createfirelimit");

                entity.Property(e => e.PtasCreatelibrarylimit).HasColumnName("ptas_createlibrarylimit");

                entity.Property(e => e.PtasFromcemeteryidValue).HasColumnName("_ptas_fromcemeteryid_value");

                entity.Property(e => e.PtasFromcitytownroadidValue).HasColumnName("_ptas_fromcitytownroadid_value");

                entity.Property(e => e.PtasFromemsidValue).HasColumnName("_ptas_fromemsid_value");

                entity.Property(e => e.PtasFromfireidValue).HasColumnName("_ptas_fromfireid_value");

                entity.Property(e => e.PtasFromfloodidValue).HasColumnName("_ptas_fromfloodid_value");

                entity.Property(e => e.PtasFromhospitalidValue).HasColumnName("_ptas_fromhospitalid_value");

                entity.Property(e => e.PtasFromlibrarycapitalidValue).HasColumnName("_ptas_fromlibrarycapitalid_value");

                entity.Property(e => e.PtasFromlibraryidValue).HasColumnName("_ptas_fromlibraryid_value");

                entity.Property(e => e.PtasFromother1idValue).HasColumnName("_ptas_fromother1id_value");

                entity.Property(e => e.PtasFromother2idValue).HasColumnName("_ptas_fromother2id_value");

                entity.Property(e => e.PtasFromparkidValue).HasColumnName("_ptas_fromparkid_value");

                entity.Property(e => e.PtasFrompiercecountylibrarysystemidValue).HasColumnName("_ptas_frompiercecountylibrarysystemid_value");

                entity.Property(e => e.PtasFromregionalsoundtransitidValue).HasColumnName("_ptas_fromregionalsoundtransitid_value");

                entity.Property(e => e.PtasFromschoolidValue).HasColumnName("_ptas_fromschoolid_value");

                entity.Property(e => e.PtasFromseweridValue).HasColumnName("_ptas_fromsewerid_value");

                entity.Property(e => e.PtasFromwateridValue).HasColumnName("_ptas_fromwaterid_value");

                entity.Property(e => e.PtasFromyearidValue).HasColumnName("_ptas_fromyearid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasParcelidValue).HasColumnName("_ptas_parcelid_value");

                entity.Property(e => e.PtasTocemeteryidValue).HasColumnName("_ptas_tocemeteryid_value");

                entity.Property(e => e.PtasTocitytownroadidValue).HasColumnName("_ptas_tocitytownroadid_value");

                entity.Property(e => e.PtasToemsidValue).HasColumnName("_ptas_toemsid_value");

                entity.Property(e => e.PtasTofireidValue).HasColumnName("_ptas_tofireid_value");

                entity.Property(e => e.PtasTofloodidValue).HasColumnName("_ptas_tofloodid_value");

                entity.Property(e => e.PtasTohospitalidValue).HasColumnName("_ptas_tohospitalid_value");

                entity.Property(e => e.PtasTolibrarycapitalidValue).HasColumnName("_ptas_tolibrarycapitalid_value");

                entity.Property(e => e.PtasTolibraryidValue).HasColumnName("_ptas_tolibraryid_value");

                entity.Property(e => e.PtasToother1idValue).HasColumnName("_ptas_toother1id_value");

                entity.Property(e => e.PtasToother2idValue).HasColumnName("_ptas_toother2id_value");

                entity.Property(e => e.PtasToparkidValue).HasColumnName("_ptas_toparkid_value");

                entity.Property(e => e.PtasTopiercecountylibrarysystemidValue).HasColumnName("_ptas_topiercecountylibrarysystemid_value");

                entity.Property(e => e.PtasToregionalsoundtransitidValue).HasColumnName("_ptas_toregionalsoundtransitid_value");

                entity.Property(e => e.PtasToschoolidValue).HasColumnName("_ptas_toschoolid_value");

                entity.Property(e => e.PtasToseweridValue).HasColumnName("_ptas_tosewerid_value");

                entity.Property(e => e.PtasTowateridValue).HasColumnName("_ptas_towaterid_value");

                entity.Property(e => e.PtasToyearidValue).HasColumnName("_ptas_toyearid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasLevycodechangeCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_levycodechange_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasLevycodechangeCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_levycodechange_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasLevycodechangeModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_levycodechange_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasLevycodechangeModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_levycodechange_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasLevycodechange)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_levycodechange_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasLevycodechangeOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_levycodechange_owninguser");

                entity.HasOne(d => d.PtasAnnexationtrackeridValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasAnnexationtrackeridValueNavigation)
                    .HasForeignKey(d => d.PtasAnnexationtrackeridValue)
                    .HasConstraintName("FK_ptas_annexationtracker_ptas_levycodechange_ptas_annexationtrackerid");

                entity.HasOne(d => d.PtasChangefromlevycodeidValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasChangefromlevycodeidValueNavigation)
                    .HasForeignKey(d => d.PtasChangefromlevycodeidValue)
                    .HasConstraintName("FK_ptas_levycode_ptas_levycodechange_ptas_changefromlevycodeid");

                entity.HasOne(d => d.PtasChangetolevycodeidValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasChangetolevycodeidValueNavigation)
                    .HasForeignKey(d => d.PtasChangetolevycodeidValue)
                    .HasConstraintName("FK_ptas_levycode_ptas_levycodechange_ptas_changetolevycodeid");

                entity.HasOne(d => d.PtasFromcemeteryidValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasFromcemeteryidValueNavigation)
                    .HasForeignKey(d => d.PtasFromcemeteryidValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_levycodechange_ptas_fromcemeteryid");

                entity.HasOne(d => d.PtasFromcitytownroadidValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasFromcitytownroadidValueNavigation)
                    .HasForeignKey(d => d.PtasFromcitytownroadidValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_levycodechange_ptas_fromcitytownroadid");

                entity.HasOne(d => d.PtasFromemsidValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasFromemsidValueNavigation)
                    .HasForeignKey(d => d.PtasFromemsidValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_levycodechange_ptas_fromemsid");

                entity.HasOne(d => d.PtasFromfireidValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasFromfireidValueNavigation)
                    .HasForeignKey(d => d.PtasFromfireidValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_levycodechange_ptas_fromfireid");

                entity.HasOne(d => d.PtasFromfloodidValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasFromfloodidValueNavigation)
                    .HasForeignKey(d => d.PtasFromfloodidValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_levycodechange_ptas_fromfloodid");

                entity.HasOne(d => d.PtasFromhospitalidValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasFromhospitalidValueNavigation)
                    .HasForeignKey(d => d.PtasFromhospitalidValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_levycodechange_ptas_fromhospitalid");

                entity.HasOne(d => d.PtasFromlibrarycapitalidValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasFromlibrarycapitalidValueNavigation)
                    .HasForeignKey(d => d.PtasFromlibrarycapitalidValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_levycodechange_ptas_fromlibrarycapitalid");

                entity.HasOne(d => d.PtasFromlibraryidValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasFromlibraryidValueNavigation)
                    .HasForeignKey(d => d.PtasFromlibraryidValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_levycodechange_ptas_fromlibraryid");

                entity.HasOne(d => d.PtasFromother1idValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasFromother1idValueNavigation)
                    .HasForeignKey(d => d.PtasFromother1idValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_levycodechange_ptas_fromother1id");

                entity.HasOne(d => d.PtasFromother2idValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasFromother2idValueNavigation)
                    .HasForeignKey(d => d.PtasFromother2idValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_levycodechange_ptas_fromother2id");

                entity.HasOne(d => d.PtasFromparkidValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasFromparkidValueNavigation)
                    .HasForeignKey(d => d.PtasFromparkidValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_levycodechange_ptas_fromparkid");

                entity.HasOne(d => d.PtasFrompiercecountylibrarysystemidValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasFrompiercecountylibrarysystemidValueNavigation)
                    .HasForeignKey(d => d.PtasFrompiercecountylibrarysystemidValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_levycodechange_ptas_frompiercecountylibrarysystemid");

                entity.HasOne(d => d.PtasFromregionalsoundtransitidValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasFromregionalsoundtransitidValueNavigation)
                    .HasForeignKey(d => d.PtasFromregionalsoundtransitidValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_levycodechange_ptas_fromregionalsoundtransitid");

                entity.HasOne(d => d.PtasFromschoolidValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasFromschoolidValueNavigation)
                    .HasForeignKey(d => d.PtasFromschoolidValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_levycodechange_ptas_fromschoolid");

                entity.HasOne(d => d.PtasFromseweridValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasFromseweridValueNavigation)
                    .HasForeignKey(d => d.PtasFromseweridValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_levycodechange_ptas_fromsewerid");

                entity.HasOne(d => d.PtasFromwateridValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasFromwateridValueNavigation)
                    .HasForeignKey(d => d.PtasFromwateridValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_levycodechange_ptas_fromwaterid");

                entity.HasOne(d => d.PtasFromyearidValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasFromyearidValueNavigation)
                    .HasForeignKey(d => d.PtasFromyearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_levycodechange_ptas_fromyearid");

                entity.HasOne(d => d.PtasParcelidValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasParcelidValueNavigation)
                    .HasForeignKey(d => d.PtasParcelidValue)
                    .HasConstraintName("FK_ptas_annexationtracker_ptas_levycodechange_ptas_parcelid");

                entity.HasOne(d => d.PtasTocemeteryidValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasTocemeteryidValueNavigation)
                    .HasForeignKey(d => d.PtasTocemeteryidValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_levycodechange_ptas_tocemeteryid");

                entity.HasOne(d => d.PtasTocitytownroadidValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasTocitytownroadidValueNavigation)
                    .HasForeignKey(d => d.PtasTocitytownroadidValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_levycodechange_ptas_tocitytownroadid");

                entity.HasOne(d => d.PtasToemsidValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasToemsidValueNavigation)
                    .HasForeignKey(d => d.PtasToemsidValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_levycodechange_ptas_toemsid");

                entity.HasOne(d => d.PtasTofireidValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasTofireidValueNavigation)
                    .HasForeignKey(d => d.PtasTofireidValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_levycodechange_ptas_tofireid");

                entity.HasOne(d => d.PtasTofloodidValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasTofloodidValueNavigation)
                    .HasForeignKey(d => d.PtasTofloodidValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_levycodechange_ptas_tofloodid");

                entity.HasOne(d => d.PtasTohospitalidValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasTohospitalidValueNavigation)
                    .HasForeignKey(d => d.PtasTohospitalidValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_levycodechange_ptas_tohospitalid");

                entity.HasOne(d => d.PtasTolibrarycapitalidValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasTolibrarycapitalidValueNavigation)
                    .HasForeignKey(d => d.PtasTolibrarycapitalidValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_levycodechange_ptas_tolibrarycapitalid");

                entity.HasOne(d => d.PtasTolibraryidValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasTolibraryidValueNavigation)
                    .HasForeignKey(d => d.PtasTolibraryidValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_levycodechange_ptas_tolibraryid");

                entity.HasOne(d => d.PtasToother1idValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasToother1idValueNavigation)
                    .HasForeignKey(d => d.PtasToother1idValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_levycodechange_ptas_toother1id");

                entity.HasOne(d => d.PtasToother2idValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasToother2idValueNavigation)
                    .HasForeignKey(d => d.PtasToother2idValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_levycodechange_ptas_toother2id");

                entity.HasOne(d => d.PtasToparkidValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasToparkidValueNavigation)
                    .HasForeignKey(d => d.PtasToparkidValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_levycodechange_ptas_toparkid");

                entity.HasOne(d => d.PtasTopiercecountylibrarysystemidValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasTopiercecountylibrarysystemidValueNavigation)
                    .HasForeignKey(d => d.PtasTopiercecountylibrarysystemidValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_levycodechange_ptas_topiercecountylibrarysystemid");

                entity.HasOne(d => d.PtasToregionalsoundtransitidValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasToregionalsoundtransitidValueNavigation)
                    .HasForeignKey(d => d.PtasToregionalsoundtransitidValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_levycodechange_ptas_toregionalsoundtransitid");

                entity.HasOne(d => d.PtasToschoolidValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasToschoolidValueNavigation)
                    .HasForeignKey(d => d.PtasToschoolidValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_levycodechange_ptas_toschoolid");

                entity.HasOne(d => d.PtasToseweridValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasToseweridValueNavigation)
                    .HasForeignKey(d => d.PtasToseweridValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_levycodechange_ptas_tosewerid");

                entity.HasOne(d => d.PtasTowateridValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasTowateridValueNavigation)
                    .HasForeignKey(d => d.PtasTowateridValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_levycodechange_ptas_towaterid");

                entity.HasOne(d => d.PtasToyearidValueNavigation)
                    .WithMany(p => p.PtasLevycodechangePtasToyearidValueNavigation)
                    .HasForeignKey(d => d.PtasToyearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_levycodechange_ptas_toyearid");
            });

            modelBuilder.Entity<PtasLevycoderates>(entity =>
            {
                entity.ToTable("ptas_levycoderates", "dynamics");

                entity.Property(e => e.PtasLevycoderatesid)
                    .HasColumnName("ptas_levycoderatesid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasLevycodeidValue).HasColumnName("_ptas_levycodeid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasRate)
                    .HasColumnName("ptas_rate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTaxdistrictidValue).HasColumnName("_ptas_taxdistrictid_value");

                entity.Property(e => e.PtasYearidValue).HasColumnName("_ptas_yearid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasLevylidliftbond>(entity =>
            {
                entity.ToTable("ptas_levylidliftbond", "dynamics");

                entity.Property(e => e.PtasLevylidliftbondid)
                    .HasColumnName("ptas_levylidliftbondid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasCumulativeamount)
                    .HasColumnName("ptas_cumulativeamount")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCumulativeamountBase)
                    .HasColumnName("ptas_cumulativeamount_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFarmequipmentexempt).HasColumnName("ptas_farmequipmentexempt");

                entity.Property(e => e.PtasFirstyearidValue).HasColumnName("_ptas_firstyearid_value");

                entity.Property(e => e.PtasLastyearidValue).HasColumnName("_ptas_lastyearid_value");

                entity.Property(e => e.PtasMaximumamount)
                    .HasColumnName("ptas_maximumamount")
                    .HasColumnType("money");

                entity.Property(e => e.PtasMaximumamountBase)
                    .HasColumnName("ptas_maximumamount_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasMaximumlimitfactor)
                    .HasColumnName("ptas_maximumlimitfactor")
                    .HasColumnType("money");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasSeniorexempt).HasColumnName("ptas_seniorexempt");

                entity.Property(e => e.PtasTaxdistrictidValue).HasColumnName("_ptas_taxdistrictid_value");

                entity.Property(e => e.PtasType).HasColumnName("ptas_type");

                entity.Property(e => e.PtasUseexcesslevy).HasColumnName("ptas_useexcesslevy");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasLevylidliftbondCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_levylidliftbond_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasLevylidliftbondCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_levylidliftbond_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasLevylidliftbondModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_levylidliftbond_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasLevylidliftbondModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_levylidliftbond_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasLevylidliftbond)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_levylidliftbond_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasLevylidliftbondOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_levylidliftbond_owninguser");

                entity.HasOne(d => d.PtasFirstyearidValueNavigation)
                    .WithMany(p => p.PtasLevylidliftbondPtasFirstyearidValueNavigation)
                    .HasForeignKey(d => d.PtasFirstyearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_levylidliftbond_ptas_firstyearid");

                entity.HasOne(d => d.PtasLastyearidValueNavigation)
                    .WithMany(p => p.PtasLevylidliftbondPtasLastyearidValueNavigation)
                    .HasForeignKey(d => d.PtasLastyearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_levylidliftbond_ptas_lastyearid");

                entity.HasOne(d => d.PtasTaxdistrictidValueNavigation)
                    .WithMany(p => p.PtasLevylidliftbond)
                    .HasForeignKey(d => d.PtasTaxdistrictidValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_levylidliftbond_ptas_taxdistrictid");
            });

            modelBuilder.Entity<PtasLevyordinancerequest>(entity =>
            {
                entity.ToTable("ptas_levyordinancerequest", "dynamics");

                entity.Property(e => e.PtasLevyordinancerequestid)
                    .HasColumnName("ptas_levyordinancerequestid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAllowablereglevyrequest)
                    .HasColumnName("ptas_allowablereglevyrequest")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAllowablereglevyrequestBase)
                    .HasColumnName("ptas_allowablereglevyrequest_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDollarincreaselimitfactor)
                    .HasColumnName("ptas_dollarincreaselimitfactor")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDollarincreaselimitfactorBase)
                    .HasColumnName("ptas_dollarincreaselimitfactor_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDollarincreaseoverlastyearsactuallevy)
                    .HasColumnName("ptas_dollarincreaseoverlastyearsactuallevy")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDollarincreaseoverlastyearsactuallevyBase)
                    .HasColumnName("ptas_dollarincreaseoverlastyearsactuallevy_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFirstyearamounts)
                    .HasColumnName("ptas_firstyearamounts")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFirstyearamountsBase)
                    .HasColumnName("ptas_firstyearamounts_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLastyearsactuallevy)
                    .HasColumnName("ptas_lastyearsactuallevy")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLastyearsactuallevyBase)
                    .HasColumnName("ptas_lastyearsactuallevy_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLevylimitworksheetdetailidValue).HasColumnName("_ptas_levylimitworksheetdetailid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasPercentincreaseoverlastyearsactuallevy)
                    .HasColumnName("ptas_percentincreaseoverlastyearsactuallevy")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRefund)
                    .HasColumnName("ptas_refund")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRefundBase)
                    .HasColumnName("ptas_refund_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasReglevyamt)
                    .HasColumnName("ptas_reglevyamt")
                    .HasColumnType("money");

                entity.Property(e => e.PtasReglevyamtBase)
                    .HasColumnName("ptas_reglevyamt_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRegularlevyrequested)
                    .HasColumnName("ptas_regularlevyrequested")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRegularlevyrequestedBase)
                    .HasColumnName("ptas_regularlevyrequested_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTaxdistrictidValue).HasColumnName("_ptas_taxdistrictid_value");

                entity.Property(e => e.PtasTotalamtrequested)
                    .HasColumnName("ptas_totalamtrequested")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalamtrequestedBase)
                    .HasColumnName("ptas_totalamtrequested_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotaldollaroverlastyearsactuallevy)
                    .HasColumnName("ptas_totaldollaroverlastyearsactuallevy")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotaldollaroverlastyearsactuallevyBase)
                    .HasColumnName("ptas_totaldollaroverlastyearsactuallevy_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalgobonds)
                    .HasColumnName("ptas_totalgobonds")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalgobondsBase)
                    .HasColumnName("ptas_totalgobonds_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotallidliftincreases)
                    .HasColumnName("ptas_totallidliftincreases")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotallidliftincreasesBase)
                    .HasColumnName("ptas_totallidliftincreases_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotallimitedbonds)
                    .HasColumnName("ptas_totallimitedbonds")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotallimitedbondsBase)
                    .HasColumnName("ptas_totallimitedbonds_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalpercentoverlastyearsactuallevy)
                    .HasColumnName("ptas_totalpercentoverlastyearsactuallevy")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalpercentoverlastyearsactuallevyBase)
                    .HasColumnName("ptas_totalpercentoverlastyearsactuallevy_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalregularlevy)
                    .HasColumnName("ptas_totalregularlevy")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalregularlevyBase)
                    .HasColumnName("ptas_totalregularlevy_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalreqreglevies)
                    .HasColumnName("ptas_totalreqreglevies")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalreqregleviesBase)
                    .HasColumnName("ptas_totalreqreglevies_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalrequestedlidlifts)
                    .HasColumnName("ptas_totalrequestedlidlifts")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalrequestedlidliftsBase)
                    .HasColumnName("ptas_totalrequestedlidlifts_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalrequestedreserve)
                    .HasColumnName("ptas_totalrequestedreserve")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalrequestedreserveBase)
                    .HasColumnName("ptas_totalrequestedreserve_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalrequestedspeciallevies)
                    .HasColumnName("ptas_totalrequestedspeciallevies")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalrequestedspecialleviesBase)
                    .HasColumnName("ptas_totalrequestedspeciallevies_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotaltaxesrequested)
                    .HasColumnName("ptas_totaltaxesrequested")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotaltaxesrequestedBase)
                    .HasColumnName("ptas_totaltaxesrequested_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasYearidValue).HasColumnName("_ptas_yearid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasLevyordinancerequestCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_levyordinancerequest_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasLevyordinancerequestCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_levyordinancerequest_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasLevyordinancerequestModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_levyordinancerequest_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasLevyordinancerequestModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_levyordinancerequest_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasLevyordinancerequest)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_levyordinancerequest_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasLevyordinancerequestOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_levyordinancerequest_owninguser");

                entity.HasOne(d => d.PtasLevylimitworksheetdetailidValueNavigation)
                    .WithMany(p => p.PtasLevyordinancerequest)
                    .HasForeignKey(d => d.PtasLevylimitworksheetdetailidValue)
                    .HasConstraintName("FK_ptas_levyworksheetdetails_ptas_levyordinancerequest_ptas_levylimitworksheetdetailid");

                entity.HasOne(d => d.PtasTaxdistrictidValueNavigation)
                    .WithMany(p => p.PtasLevyordinancerequest)
                    .HasForeignKey(d => d.PtasTaxdistrictidValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_levyordinancerequest_ptas_taxdistrictid");

                entity.HasOne(d => d.PtasYearidValueNavigation)
                    .WithMany(p => p.PtasLevyordinancerequest)
                    .HasForeignKey(d => d.PtasYearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_levyordinancerequest_ptas_yearid");
            });

            modelBuilder.Entity<PtasLevyworksheetdetails>(entity =>
            {
                entity.ToTable("ptas_levyworksheetdetails", "dynamics");

                entity.Property(e => e.PtasLevyworksheetdetailsid)
                    .HasColumnName("ptas_levyworksheetdetailsid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAllowablelevy)
                    .HasColumnName("ptas_allowablelevy")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAllowablelevyBase)
                    .HasColumnName("ptas_allowablelevy_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAmtrequested)
                    .HasColumnName("ptas_amtrequested")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAmtrequestedBase)
                    .HasColumnName("ptas_amtrequested_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAnnexassessedval)
                    .HasColumnName("ptas_annexassessedval")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAnnexassessedvalBase)
                    .HasColumnName("ptas_annexassessedval_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAnnexlevy)
                    .HasColumnName("ptas_annexlevy")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAnnexlevyBase)
                    .HasColumnName("ptas_annexlevy_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAnnexrate)
                    .HasColumnName("ptas_annexrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasBankedcapacity)
                    .HasColumnName("ptas_bankedcapacity")
                    .HasColumnType("money");

                entity.Property(e => e.PtasBankedcapacityBase)
                    .HasColumnName("ptas_bankedcapacity_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCertified).HasColumnName("ptas_certified");

                entity.Property(e => e.PtasCertreglevyamt)
                    .HasColumnName("ptas_certreglevyamt")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCertreglevyamtBase)
                    .HasColumnName("ptas_certreglevyamt_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCertreglevyrate)
                    .HasColumnName("ptas_certreglevyrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasConsolidatedlevy).HasColumnName("ptas_consolidatedlevy");

                entity.Property(e => e.PtasCurrentyearactualregamt)
                    .HasColumnName("ptas_currentyearactualregamt")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrentyearactualregamtBase)
                    .HasColumnName("ptas_currentyearactualregamt_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrentyearactualregrate)
                    .HasColumnName("ptas_currentyearactualregrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrentyearallowlessrefund)
                    .HasColumnName("ptas_currentyearallowlessrefund")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrentyearallowlessrefundBase)
                    .HasColumnName("ptas_currentyearallowlessrefund_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrentyearallowlevy)
                    .HasColumnName("ptas_currentyearallowlevy")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrentyearallowlevyBase)
                    .HasColumnName("ptas_currentyearallowlevy_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrentyearallowreason).HasColumnName("ptas_currentyearallowreason");

                entity.Property(e => e.PtasDistreqdollarincrease)
                    .HasColumnName("ptas_distreqdollarincrease")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDistreqdollarincreaseBase)
                    .HasColumnName("ptas_distreqdollarincrease_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDistreqpercentincrease)
                    .HasColumnName("ptas_distreqpercentincrease")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDistrictannexlevy)
                    .HasColumnName("ptas_districtannexlevy")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDistrictannexlevyBase)
                    .HasColumnName("ptas_districtannexlevy_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDollarincrease)
                    .HasColumnName("ptas_dollarincrease")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDollarincreaseBase)
                    .HasColumnName("ptas_dollarincrease_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasExcessassessedval)
                    .HasColumnName("ptas_excessassessedval")
                    .HasColumnType("money");

                entity.Property(e => e.PtasExcessassessedvalBase)
                    .HasColumnName("ptas_excessassessedval_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFiredistrictacuallevy)
                    .HasColumnName("ptas_firedistrictacuallevy")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFirstyearlidliftlabel).HasColumnName("ptas_firstyearlidliftlabel");

                entity.Property(e => e.PtasFirstyearlidlifts)
                    .HasColumnName("ptas_firstyearlidlifts")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFirstyearlidliftsBase)
                    .HasColumnName("ptas_firstyearlidlifts_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasHighestlawlevy)
                    .HasColumnName("ptas_highestlawlevy")
                    .HasColumnType("money");

                entity.Property(e => e.PtasHighestlawlevyBase)
                    .HasColumnName("ptas_highestlawlevy_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasHighestlevyreason).HasColumnName("ptas_highestlevyreason");

                entity.Property(e => e.PtasHighestlevyyearidValue).HasColumnName("_ptas_highestlevyyearid_value");

                entity.Property(e => e.PtasImplicitpricedeflator)
                    .HasColumnName("ptas_implicitpricedeflator")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncreasestateutilityval)
                    .HasColumnName("ptas_increasestateutilityval")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncreasestateutilityvalBase)
                    .HasColumnName("ptas_increasestateutilityval_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIpdallowablelevy)
                    .HasColumnName("ptas_ipdallowablelevy")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIpdallowablelevyBase)
                    .HasColumnName("ptas_ipdallowablelevy_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIpdannexlevy)
                    .HasColumnName("ptas_ipdannexlevy")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIpdannexlevyBase)
                    .HasColumnName("ptas_ipdannexlevy_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIpdannexrate)
                    .HasColumnName("ptas_ipdannexrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIpddollarincrease)
                    .HasColumnName("ptas_ipddollarincrease")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIpddollarincreaseBase)
                    .HasColumnName("ptas_ipddollarincrease_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIpdlevylimitfactor)
                    .HasColumnName("ptas_ipdlevylimitfactor")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIpdlevylimitfactorBase)
                    .HasColumnName("ptas_ipdlevylimitfactor_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIpdpercentincrease)
                    .HasColumnName("ptas_ipdpercentincrease")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIpdreglevyrate)
                    .HasColumnName("ptas_ipdreglevyrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIpdtotallimitfactor)
                    .HasColumnName("ptas_ipdtotallimitfactor")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIpdtotallimitfactorBase)
                    .HasColumnName("ptas_ipdtotallimitfactor_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIpdtotallimitfactorlidlifts)
                    .HasColumnName("ptas_ipdtotallimitfactorlidlifts")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIpdtotallimitfactorlidliftsBase)
                    .HasColumnName("ptas_ipdtotallimitfactorlidlifts_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIpdtotalrcw8455)
                    .HasColumnName("ptas_ipdtotalrcw8455")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIpdtotalrcw8455Base)
                    .HasColumnName("ptas_ipdtotalrcw8455_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIpdtotalrcw8455refunds)
                    .HasColumnName("ptas_ipdtotalrcw8455refunds")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIpdtotalrcw8455refundsBase)
                    .HasColumnName("ptas_ipdtotalrcw8455refunds_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLastyearactuallevy)
                    .HasColumnName("ptas_lastyearactuallevy")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLastyearactuallevyBase)
                    .HasColumnName("ptas_lastyearactuallevy_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLastyearregrate)
                    .HasColumnName("ptas_lastyearregrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLastyearutilityval)
                    .HasColumnName("ptas_lastyearutilityval")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLastyearutilityvalBase)
                    .HasColumnName("ptas_lastyearutilityval_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLevybasislimitfactor)
                    .HasColumnName("ptas_levybasislimitfactor")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLevybasislimitfactorBase)
                    .HasColumnName("ptas_levybasislimitfactor_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLevycorrection).HasColumnName("ptas_levycorrection");

                entity.Property(e => e.PtasLevycorrectionamt)
                    .HasColumnName("ptas_levycorrectionamt")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLevycorrectionamtBase)
                    .HasColumnName("ptas_levycorrectionamt_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLevycorrectionyearidValue).HasColumnName("_ptas_levycorrectionyearid_value");

                entity.Property(e => e.PtasLibrarydistrictactuallevy)
                    .HasColumnName("ptas_librarydistrictactuallevy")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLimitfactor)
                    .HasColumnName("ptas_limitfactor")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLocalnewcons)
                    .HasColumnName("ptas_localnewcons")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLocalnewconsBase)
                    .HasColumnName("ptas_localnewcons_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasMaxstatutorylevy)
                    .HasColumnName("ptas_maxstatutorylevy")
                    .HasColumnType("money");

                entity.Property(e => e.PtasMaxstatutorylevyBase)
                    .HasColumnName("ptas_maxstatutorylevy_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasMaxstatutoryrate)
                    .HasColumnName("ptas_maxstatutoryrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNewconslevy)
                    .HasColumnName("ptas_newconslevy")
                    .HasColumnType("money");

                entity.Property(e => e.PtasNewconslevyBase)
                    .HasColumnName("ptas_newconslevy_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasOverridelevyamountandrate).HasColumnName("ptas_overridelevyamountandrate");

                entity.Property(e => e.PtasOverridelimitfactor).HasColumnName("ptas_overridelimitfactor");

                entity.Property(e => e.PtasOverwritefirstyearlabel).HasColumnName("ptas_overwritefirstyearlabel");

                entity.Property(e => e.PtasPercentincrease)
                    .HasColumnName("ptas_percentincrease")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRatebasedallowlevy)
                    .HasColumnName("ptas_ratebasedallowlevy")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRefundamt)
                    .HasColumnName("ptas_refundamt")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRefundamtBase)
                    .HasColumnName("ptas_refundamt_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRefunds)
                    .HasColumnName("ptas_refunds")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRefundsBase)
                    .HasColumnName("ptas_refunds_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRegassessedval)
                    .HasColumnName("ptas_regassessedval")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRegassessedvalBase)
                    .HasColumnName("ptas_regassessedval_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRegexpenserate)
                    .HasColumnName("ptas_regexpenserate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRegularlevyrate)
                    .HasColumnName("ptas_regularlevyrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTaxdistrictidValue).HasColumnName("_ptas_taxdistrictid_value");

                entity.Property(e => e.PtasTaxdistricttype).HasColumnName("ptas_taxdistricttype");

                entity.Property(e => e.PtasTotalliftrate)
                    .HasColumnName("ptas_totalliftrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotallimitfactorlevy)
                    .HasColumnName("ptas_totallimitfactorlevy")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotallimitfactorlevyBase)
                    .HasColumnName("ptas_totallimitfactorlevy_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotallimitfactorlidlifts)
                    .HasColumnName("ptas_totallimitfactorlidlifts")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotallimitfactorlidliftsBase)
                    .HasColumnName("ptas_totallimitfactorlidlifts_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalnewcons)
                    .HasColumnName("ptas_totalnewcons")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalnewconsBase)
                    .HasColumnName("ptas_totalnewcons_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalrcw8455levy)
                    .HasColumnName("ptas_totalrcw8455levy")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalrcw8455levyBase)
                    .HasColumnName("ptas_totalrcw8455levy_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalrcw8455refunds)
                    .HasColumnName("ptas_totalrcw8455refunds")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalrcw8455refundsBase)
                    .HasColumnName("ptas_totalrcw8455refunds_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasUtilityval)
                    .HasColumnName("ptas_utilityval")
                    .HasColumnType("money");

                entity.Property(e => e.PtasUtilityvalBase)
                    .HasColumnName("ptas_utilityval_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasYearidValue).HasColumnName("_ptas_yearid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasLevyworksheetdetailsLevycoderates>(entity =>
            {
                entity.ToTable("ptas_levyworksheetdetails_levycoderates", "dynamics");

                entity.Property(e => e.PtasLevyworksheetdetailsLevycoderatesid)
                    .HasColumnName("ptas_levyworksheetdetails_levycoderatesid")
                    .ValueGeneratedNever();

                entity.Property(e => e.PtasLevycoderatesid).HasColumnName("ptas_levycoderatesid");

                entity.Property(e => e.PtasLevyworksheetdetailsid).HasColumnName("ptas_levyworksheetdetailsid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasLowincomehousingprogram>(entity =>
            {
                entity.ToTable("ptas_lowincomehousingprogram", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_lowincomehousingprogram_modifiedon");

                entity.Property(e => e.PtasLowincomehousingprogramid)
                    .HasColumnName("ptas_lowincomehousingprogramid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasCondocomplexidValue).HasColumnName("_ptas_condocomplexid_value");

                entity.Property(e => e.PtasHousingprogramidValue).HasColumnName("_ptas_housingprogramid_value");

                entity.Property(e => e.PtasMasterlowincomehousingidValue).HasColumnName("_ptas_masterlowincomehousingid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasProgramenddate).HasColumnName("ptas_programenddate");

                entity.Property(e => e.PtasProgramstartdate).HasColumnName("ptas_programstartdate");

                entity.Property(e => e.PtasSnapshotdatetime).HasColumnName("ptas_snapshotdatetime");

                entity.Property(e => e.PtasSnapshottype).HasColumnName("ptas_snapshottype");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasLowincomehousingprogramCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_lowincomehousingprogram_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasLowincomehousingprogramCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_lowincomehousingprogram_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasLowincomehousingprogramModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_lowincomehousingprogram_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasLowincomehousingprogramModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_lowincomehousingprogram_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasLowincomehousingprogram)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_lowincomehousingprogram_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasLowincomehousingprogramOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_lowincomehousingprogram_owninguser");

                entity.HasOne(d => d.PtasCondocomplexidValueNavigation)
                    .WithMany(p => p.PtasLowincomehousingprogram)
                    .HasForeignKey(d => d.PtasCondocomplexidValue)
                    .HasConstraintName("FK_ptas_condocomplex_ptas_lowincomehousingprogram_ptas_condocomplexid");

                entity.HasOne(d => d.PtasHousingprogramidValueNavigation)
                    .WithMany(p => p.PtasLowincomehousingprogram)
                    .HasForeignKey(d => d.PtasHousingprogramidValue)
                    .HasConstraintName("FK_ptas_housingprogram_ptas_lowincomehousingprogram_ptas_housingprogramid");

                entity.HasOne(d => d.PtasMasterlowincomehousingidValueNavigation)
                    .WithMany(p => p.InversePtasMasterlowincomehousingidValueNavigation)
                    .HasForeignKey(d => d.PtasMasterlowincomehousingidValue)
                    .HasConstraintName("FK_ptas_lowincomehousingprogram_ptas_lowincomehousingprogram_ptas_masterlowincomehousingid");
            });

            modelBuilder.Entity<PtasLowincomehousingprogramSnapshot>(entity =>
            {
                entity.HasKey(e => e.PtasLowincomehousingprogramid);

                entity.ToTable("ptas_lowincomehousingprogram_snapshot", "dynamics");

                entity.Property(e => e.PtasLowincomehousingprogramid)
                    .HasColumnName("ptas_lowincomehousingprogramid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasCondocomplexidValue).HasColumnName("_ptas_condocomplexid_value");

                entity.Property(e => e.PtasHousingprogramidValue).HasColumnName("_ptas_housingprogramid_value");

                entity.Property(e => e.PtasMasterlowincomehousingidValue).HasColumnName("_ptas_masterlowincomehousingid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasProgramenddate).HasColumnName("ptas_programenddate");

                entity.Property(e => e.PtasProgramstartdate).HasColumnName("ptas_programstartdate");

                entity.Property(e => e.PtasSnapshotdatetime).HasColumnName("ptas_snapshotdatetime");

                entity.Property(e => e.PtasSnapshottype).HasColumnName("ptas_snapshottype");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasLowincomehousingunits>(entity =>
            {
                entity.ToTable("ptas_lowincomehousingunits", "dynamics");

                entity.Property(e => e.PtasLowincomehousingunitsid)
                    .HasColumnName("ptas_lowincomehousingunitsid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAssessmentyearidValue).HasColumnName("_ptas_assessmentyearid_value");

                entity.Property(e => e.PtasIacCapitalizationRate)
                    .HasColumnName("ptas_iac_capitalization_rate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIacEffectivegrossincome)
                    .HasColumnName("ptas_iac_effectivegrossincome")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIacEffectivegrossincomeBase)
                    .HasColumnName("ptas_iac_effectivegrossincome_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIacExpenseamount)
                    .HasColumnName("ptas_iac_expenseamount")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIacExpenseamountBase)
                    .HasColumnName("ptas_iac_expenseamount_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIacExpensespct)
                    .HasColumnName("ptas_iac_expensespct")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIacExpensespctBase)
                    .HasColumnName("ptas_iac_expensespct_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIacIndicatedvalue)
                    .HasColumnName("ptas_iac_indicatedvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIacIndicatedvalueBase)
                    .HasColumnName("ptas_iac_indicatedvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIacNetoperatingincome)
                    .HasColumnName("ptas_iac_netoperatingincome")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIacNetoperatingincomeBase)
                    .HasColumnName("ptas_iac_netoperatingincome_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIacOtherincome)
                    .HasColumnName("ptas_iac_otherincome")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIacOtherincomeBase)
                    .HasColumnName("ptas_iac_otherincome_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIacPotentialgrossincome)
                    .HasColumnName("ptas_iac_potentialgrossincome")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIacPotentialgrossincomeBase)
                    .HasColumnName("ptas_iac_potentialgrossincome_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIacTotalgrossincome)
                    .HasColumnName("ptas_iac_totalgrossincome")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIacTotalgrossincomeBase)
                    .HasColumnName("ptas_iac_totalgrossincome_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIacVacancyandcreditlossamount)
                    .HasColumnName("ptas_iac_vacancyandcreditlossamount")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIacVacancyandcreditlossamountBase)
                    .HasColumnName("ptas_iac_vacancyandcreditlossamount_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIacVacancyandcreditlosspercent)
                    .HasColumnName("ptas_iac_vacancyandcreditlosspercent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIndicatedrent1bedroom)
                    .HasColumnName("ptas_indicatedrent_1bedroom")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIndicatedrent1bedroomBase)
                    .HasColumnName("ptas_indicatedrent_1bedroom_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIndicatedrent2bedroom)
                    .HasColumnName("ptas_indicatedrent_2bedroom")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIndicatedrent2bedroom2bath)
                    .HasColumnName("ptas_indicatedrent_2bedroom2bath")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIndicatedrent2bedroom2bathBase)
                    .HasColumnName("ptas_indicatedrent_2bedroom2bath_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIndicatedrent2bedroomBase)
                    .HasColumnName("ptas_indicatedrent_2bedroom_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIndicatedrent3bedroom)
                    .HasColumnName("ptas_indicatedrent_3bedroom")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIndicatedrent3bedroom2bath)
                    .HasColumnName("ptas_indicatedrent_3bedroom2bath")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIndicatedrent3bedroom2bathBase)
                    .HasColumnName("ptas_indicatedrent_3bedroom2bath_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIndicatedrent3bedroom3bath)
                    .HasColumnName("ptas_indicatedrent_3bedroom3bath")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIndicatedrent3bedroom3bathBase)
                    .HasColumnName("ptas_indicatedrent_3bedroom3bath_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIndicatedrent3bedroomBase)
                    .HasColumnName("ptas_indicatedrent_3bedroom_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIndicatedrent4bedroom)
                    .HasColumnName("ptas_indicatedrent_4bedroom")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIndicatedrent4bedroomBase)
                    .HasColumnName("ptas_indicatedrent_4bedroom_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIndicatedrent5plusbedroom)
                    .HasColumnName("ptas_indicatedrent_5plusbedroom")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIndicatedrent5plusbedroomBase)
                    .HasColumnName("ptas_indicatedrent_5plusbedroom_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIndicatedrentSleepingroom)
                    .HasColumnName("ptas_indicatedrent_sleepingroom")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIndicatedrentSleepingroomBase)
                    .HasColumnName("ptas_indicatedrent_sleepingroom_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIndicatedrentStudio)
                    .HasColumnName("ptas_indicatedrent_studio")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIndicatedrentStudioBase)
                    .HasColumnName("ptas_indicatedrent_studio_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLowincomehousingprogramidValue).HasColumnName("_ptas_lowincomehousingprogramid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNbrof100setasideunits).HasColumnName("ptas_nbrof100setasideunits");

                entity.Property(e => e.PtasNbrof120setasideunits).HasColumnName("ptas_nbrof120setasideunits");

                entity.Property(e => e.PtasNbrof20setasideunits).HasColumnName("ptas_nbrof20setasideunits");

                entity.Property(e => e.PtasNbrof30setasideunits).HasColumnName("ptas_nbrof30setasideunits");

                entity.Property(e => e.PtasNbrof35setasideunits).HasColumnName("ptas_nbrof35setasideunits");

                entity.Property(e => e.PtasNbrof40setasideunits).HasColumnName("ptas_nbrof40setasideunits");

                entity.Property(e => e.PtasNbrof45setasideunits).HasColumnName("ptas_nbrof45setasideunits");

                entity.Property(e => e.PtasNbrof50setasideunits).HasColumnName("ptas_nbrof50setasideunits");

                entity.Property(e => e.PtasNbrof60setasideunits).HasColumnName("ptas_nbrof60setasideunits");

                entity.Property(e => e.PtasNbrof70setasideunits).HasColumnName("ptas_nbrof70setasideunits");

                entity.Property(e => e.PtasNbrof80setasideunits).HasColumnName("ptas_nbrof80setasideunits");

                entity.Property(e => e.PtasNumberofmarketunits).HasColumnName("ptas_numberofmarketunits");

                entity.Property(e => e.PtasNumof1bedunits).HasColumnName("ptas_numof1bedunits");

                entity.Property(e => e.PtasNumof2bedunits).HasColumnName("ptas_numof2bedunits");

                entity.Property(e => e.PtasNumof3bedunits).HasColumnName("ptas_numof3bedunits");

                entity.Property(e => e.PtasNumof4bedunits).HasColumnName("ptas_numof4bedunits");

                entity.Property(e => e.PtasNumof5bedplusunits).HasColumnName("ptas_numof5bedplusunits");

                entity.Property(e => e.PtasNumofstudiounits).HasColumnName("ptas_numofstudiounits");

                entity.Property(e => e.PtasPercentofunitsat100)
                    .HasColumnName("ptas_percentofunitsat100")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPercentofunitsat120)
                    .HasColumnName("ptas_percentofunitsat120")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPercentofunitsat20)
                    .HasColumnName("ptas_percentofunitsat20")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPercentofunitsat30)
                    .HasColumnName("ptas_percentofunitsat30")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPercentofunitsat35)
                    .HasColumnName("ptas_percentofunitsat35")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPercentofunitsat40)
                    .HasColumnName("ptas_percentofunitsat40")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPercentofunitsat45)
                    .HasColumnName("ptas_percentofunitsat45")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPercentofunitsat50)
                    .HasColumnName("ptas_percentofunitsat50")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPercentofunitsat60)
                    .HasColumnName("ptas_percentofunitsat60")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPercentofunitsat70)
                    .HasColumnName("ptas_percentofunitsat70")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPercentofunitsat80)
                    .HasColumnName("ptas_percentofunitsat80")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPercentofunitsatmarket)
                    .HasColumnName("ptas_percentofunitsatmarket")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPercentofunitsatrestrictedrent)
                    .HasColumnName("ptas_percentofunitsatrestrictedrent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasProjectidValue).HasColumnName("_ptas_projectid_value");

                entity.Property(e => e.PtasRestrictedrent1bed)
                    .HasColumnName("ptas_restrictedrent_1bed")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRestrictedrent1bedBase)
                    .HasColumnName("ptas_restrictedrent_1bed_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRestrictedrent2bed)
                    .HasColumnName("ptas_restrictedrent_2bed")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRestrictedrent2bedBase)
                    .HasColumnName("ptas_restrictedrent_2bed_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRestrictedrent3bed)
                    .HasColumnName("ptas_restrictedrent_3bed")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRestrictedrent3bedBase)
                    .HasColumnName("ptas_restrictedrent_3bed_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRestrictedrent4bed)
                    .HasColumnName("ptas_restrictedrent_4bed")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRestrictedrent4bedBase)
                    .HasColumnName("ptas_restrictedrent_4bed_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRestrictedrent5bedplus)
                    .HasColumnName("ptas_restrictedrent_5bedplus")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRestrictedrent5bedplusBase)
                    .HasColumnName("ptas_restrictedrent_5bedplus_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRestrictedrentSleepingroom)
                    .HasColumnName("ptas_restrictedrent_sleepingroom")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRestrictedrentSleepingroomBase)
                    .HasColumnName("ptas_restrictedrent_sleepingroom_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRestrictedrentStudio)
                    .HasColumnName("ptas_restrictedrent_studio")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRestrictedrentStudioBase)
                    .HasColumnName("ptas_restrictedrent_studio_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRra1bedroom1bathrent)
                    .HasColumnName("ptas_rra_1bedroom1bathrent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRra1bedroom1bathrentBase)
                    .HasColumnName("ptas_rra_1bedroom1bathrent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRra2bedroom1bathrent)
                    .HasColumnName("ptas_rra_2bedroom1bathrent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRra2bedroom1bathrentBase)
                    .HasColumnName("ptas_rra_2bedroom1bathrent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRra2bedroom2bathrent)
                    .HasColumnName("ptas_rra_2bedroom2bathrent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRra2bedroom2bathrentBase)
                    .HasColumnName("ptas_rra_2bedroom2bathrent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRra3bedroom1bathrent)
                    .HasColumnName("ptas_rra_3bedroom1bathrent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRra3bedroom1bathrentBase)
                    .HasColumnName("ptas_rra_3bedroom1bathrent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRra3bedroom2bathrent)
                    .HasColumnName("ptas_rra_3bedroom2bathrent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRra3bedroom2bathrentBase)
                    .HasColumnName("ptas_rra_3bedroom2bathrent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRra3bedroom3bathrent)
                    .HasColumnName("ptas_rra_3bedroom3bathrent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRra3bedroom3bathrentBase)
                    .HasColumnName("ptas_rra_3bedroom3bathrent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRra4bedroomrent)
                    .HasColumnName("ptas_rra_4bedroomrent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRra4bedroomrentBase)
                    .HasColumnName("ptas_rra_4bedroomrent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRra5bedroomplusrent)
                    .HasColumnName("ptas_rra_5bedroomplusrent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRra5bedroomplusrentBase)
                    .HasColumnName("ptas_rra_5bedroomplusrent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRraCommercialrent)
                    .HasColumnName("ptas_rra_commercialrent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRraCommercialrentBase)
                    .HasColumnName("ptas_rra_commercialrent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRraCommercialrentsqft).HasColumnName("ptas_rra_commercialrentsqft");

                entity.Property(e => e.PtasRraNbrof1bedroom1bathunits).HasColumnName("ptas_rra_nbrof1bedroom1bathunits");

                entity.Property(e => e.PtasRraNbrof2bedroom1bathunits).HasColumnName("ptas_rra_nbrof2bedroom1bathunits");

                entity.Property(e => e.PtasRraNbrof2bedroom2bathunits).HasColumnName("ptas_rra_nbrof2bedroom2bathunits");

                entity.Property(e => e.PtasRraNbrof3bedroom1bathunits).HasColumnName("ptas_rra_nbrof3bedroom1bathunits");

                entity.Property(e => e.PtasRraNbrof3bedroom2bathunits).HasColumnName("ptas_rra_nbrof3bedroom2bathunits");

                entity.Property(e => e.PtasRraNbrof3bedroom3bathunits).HasColumnName("ptas_rra_nbrof3bedroom3bathunits");

                entity.Property(e => e.PtasRraNbrof4bedroomunits).HasColumnName("ptas_rra_nbrof4bedroomunits");

                entity.Property(e => e.PtasRraNbrof5bedroomplusunits).HasColumnName("ptas_rra_nbrof5bedroomplusunits");

                entity.Property(e => e.PtasRraNbrofopen1bedroomunits).HasColumnName("ptas_rra_nbrofopen1bedroomunits");

                entity.Property(e => e.PtasRraNbrofopen2bedroomunits).HasColumnName("ptas_rra_nbrofopen2bedroomunits");

                entity.Property(e => e.PtasRraNbrofsleepingroomunits).HasColumnName("ptas_rra_nbrofsleepingroomunits");

                entity.Property(e => e.PtasRraNbrofstudiounits).HasColumnName("ptas_rra_nbrofstudiounits");

                entity.Property(e => e.PtasRraOpen1bedroomrent)
                    .HasColumnName("ptas_rra_open1bedroomrent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRraOpen1bedroomrentBase)
                    .HasColumnName("ptas_rra_open1bedroomrent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRraOpen2bedroomrent)
                    .HasColumnName("ptas_rra_open2bedroomrent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRraOpen2bedroomrentBase)
                    .HasColumnName("ptas_rra_open2bedroomrent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRraOtherincomeperunit)
                    .HasColumnName("ptas_rra_otherincomeperunit")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRraOtherincomeperunitBase)
                    .HasColumnName("ptas_rra_otherincomeperunit_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRraSleepingroomrent)
                    .HasColumnName("ptas_rra_sleepingroomrent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRraSleepingroomrentBase)
                    .HasColumnName("ptas_rra_sleepingroomrent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRraStudiorent)
                    .HasColumnName("ptas_rra_studiorent")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRraStudiorentBase)
                    .HasColumnName("ptas_rra_studiorent_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRucAssessmentdate).HasColumnName("ptas_ruc_assessmentdate");

                entity.Property(e => e.PtasRucDiscountrate)
                    .HasColumnName("ptas_ruc_discountrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRucDiscountrateBase)
                    .HasColumnName("ptas_ruc_discountrate_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRucLeaseholdreversionvalue)
                    .HasColumnName("ptas_ruc_leaseholdreversionvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRucLeaseholdreversionvalueBase)
                    .HasColumnName("ptas_ruc_leaseholdreversionvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRucPresentvalueofleasholdreversion)
                    .HasColumnName("ptas_ruc_presentvalueofleasholdreversion")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRucPresentvalueofleasholdreversionBase)
                    .HasColumnName("ptas_ruc_presentvalueofleasholdreversion_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRucRestrictedleasedfeevalue)
                    .HasColumnName("ptas_ruc_restrictedleasedfeevalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRucRestrictedleasedfeevalueBase)
                    .HasColumnName("ptas_ruc_restrictedleasedfeevalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRucTerminationdateplustwoyears).HasColumnName("ptas_ruc_terminationdateplustwoyears");

                entity.Property(e => e.PtasRucTotalrestrictedusevalue)
                    .HasColumnName("ptas_ruc_totalrestrictedusevalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRucTotalrestrictedusevalueBase)
                    .HasColumnName("ptas_ruc_totalrestrictedusevalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRucUnrestrictedmarketvalue)
                    .HasColumnName("ptas_ruc_unrestrictedmarketvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRucUnrestrictedmarketvalueBase)
                    .HasColumnName("ptas_ruc_unrestrictedmarketvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalnumberofrestrictedrentunits).HasColumnName("ptas_totalnumberofrestrictedrentunits");

                entity.Property(e => e.PtasTotalnumberofunits).HasColumnName("ptas_totalnumberofunits");

                entity.Property(e => e.PtasUtilityprogram).HasColumnName("ptas_utilityprogram");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasLowincomeparameters>(entity =>
            {
                entity.ToTable("ptas_lowincomeparameters", "dynamics");

                entity.Property(e => e.PtasLowincomeparametersid)
                    .HasColumnName("ptas_lowincomeparametersid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAssessmentyearidValue).HasColumnName("_ptas_assessmentyearid_value");

                entity.Property(e => e.PtasCaprateloadrate)
                    .HasColumnName("ptas_caprateloadrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDiscountrate)
                    .HasColumnName("ptas_discountrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasExpensemultiplier)
                    .HasColumnName("ptas_expensemultiplier")
                    .HasColumnType("money");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasRentmultiplier)
                    .HasColumnName("ptas_rentmultiplier")
                    .HasColumnType("money");

                entity.Property(e => e.PtasVclmultiplier)
                    .HasColumnName("ptas_vclmultiplier")
                    .HasColumnType("money");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasMajornumberdetail>(entity =>
            {
                entity.ToTable("ptas_majornumberdetail", "dynamics");

                entity.Property(e => e.PtasMajornumberdetailid)
                    .HasColumnName("ptas_majornumberdetailid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasFirstpage).HasColumnName("ptas_firstpage");

                entity.Property(e => e.PtasLastpage).HasColumnName("ptas_lastpage");

                entity.Property(e => e.PtasLegacyisn).HasColumnName("ptas_legacyisn");

                entity.Property(e => e.PtasMajornumberValue).HasColumnName("_ptas_majornumber_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasPeindex).HasColumnName("ptas_peindex");

                entity.Property(e => e.PtasProjectdescription).HasColumnName("ptas_projectdescription");

                entity.Property(e => e.PtasQstrorder).HasColumnName("ptas_qstrorder");

                entity.Property(e => e.PtasRange).HasColumnName("ptas_range");

                entity.Property(e => e.PtasSection).HasColumnName("ptas_section");

                entity.Property(e => e.PtasTownship).HasColumnName("ptas_township");

                entity.Property(e => e.PtasVolume).HasColumnName("ptas_volume");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasMajornumberdetailCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_majornumberdetail_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasMajornumberdetailCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_majornumberdetail_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasMajornumberdetailModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_majornumberdetail_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasMajornumberdetailModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_majornumberdetail_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasMajornumberdetail)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_majornumberdetail_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasMajornumberdetailOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_majornumberdetail_owninguser");

                entity.HasOne(d => d.PtasMajornumberValueNavigation)
                    .WithMany(p => p.PtasMajornumberdetail)
                    .HasForeignKey(d => d.PtasMajornumberValue)
                    .HasConstraintName("FK_ptas_majornumberindex_ptas_majornumberdetail_ptas_majornumber");
            });

            modelBuilder.Entity<PtasMajornumberindex>(entity =>
            {
                entity.ToTable("ptas_majornumberindex", "dynamics");

                entity.Property(e => e.PtasMajornumberindexid)
                    .HasColumnName("ptas_majornumberindexid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasIsreserved).HasColumnName("ptas_isreserved");

                entity.Property(e => e.PtasLegacyisn).HasColumnName("ptas_legacyisn");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasPlatorcondoname).HasColumnName("ptas_platorcondoname");

                entity.Property(e => e.PtasProjecttype).HasColumnName("ptas_projecttype");

                entity.Property(e => e.PtasReserveddescription).HasColumnName("ptas_reserveddescription");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasMajornumberindexCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_majornumberindex_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasMajornumberindexCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_majornumberindex_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasMajornumberindexModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_majornumberindex_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasMajornumberindexModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_majornumberindex_modifiedonbehalfby");
            });

            modelBuilder.Entity<PtasMasspayaccumulator>(entity =>
            {
                entity.ToTable("ptas_masspayaccumulator", "dynamics");

                entity.Property(e => e.PtasMasspayaccumulatorid)
                    .HasColumnName("ptas_masspayaccumulatorid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAddordelete).HasColumnName("ptas_addordelete");

                entity.Property(e => e.PtasAgentcodeidValue).HasColumnName("_ptas_agentcodeid_value");

                entity.Property(e => e.PtasCompanyname).HasColumnName("ptas_companyname");

                entity.Property(e => e.PtasCompanynumber).HasColumnName("ptas_companynumber");

                entity.Property(e => e.PtasCountyid).HasColumnName("ptas_countyid");

                entity.Property(e => e.PtasError).HasColumnName("ptas_error");

                entity.Property(e => e.PtasErrorreason).HasColumnName("ptas_errorreason");

                entity.Property(e => e.PtasFilename).HasColumnName("ptas_filename");

                entity.Property(e => e.PtasLoannumber).HasColumnName("ptas_loannumber");

                entity.Property(e => e.PtasLoanoriginationdate)
                    .HasColumnName("ptas_loanoriginationdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasPrimary).HasColumnName("ptas_primary");

                entity.Property(e => e.PtasRundate)
                    .HasColumnName("ptas_rundate")
                    .HasColumnType("datetime");

                entity.Property(e => e.PtasTaxaccountnumberidValue).HasColumnName("_ptas_taxaccountnumberid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasMasspayaccumulatorCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_masspayaccumulator_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasMasspayaccumulatorCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_masspayaccumulator_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasMasspayaccumulatorModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_masspayaccumulator_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasMasspayaccumulatorModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_masspayaccumulator_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasMasspayaccumulator)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_masspayaccumulator_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasMasspayaccumulatorOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_masspayaccumulator_owninguser");

                entity.HasOne(d => d.PtasAgentcodeidValueNavigation)
                    .WithMany(p => p.PtasMasspayaccumulator)
                    .HasForeignKey(d => d.PtasAgentcodeidValue)
                    .HasConstraintName("FK_ptas_masspayer_ptas_masspayaccumulator_ptas_agentcodeid");

                entity.HasOne(d => d.PtasTaxaccountnumberidValueNavigation)
                    .WithMany(p => p.PtasMasspayaccumulator)
                    .HasForeignKey(d => d.PtasTaxaccountnumberidValue)
                    .HasConstraintName("FK_ptas_taxaccount_ptas_masspayaccumulator_ptas_taxaccountnumberid");
            });

            modelBuilder.Entity<PtasMasspayaction>(entity =>
            {
                entity.ToTable("ptas_masspayaction", "dynamics");

                entity.Property(e => e.PtasMasspayactionid)
                    .HasColumnName("ptas_masspayactionid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAgentcodeidValue).HasColumnName("_ptas_agentcodeid_value");

                entity.Property(e => e.PtasClearmasspayerontaxaccount).HasColumnName("ptas_clearmasspayerontaxaccount");

                entity.Property(e => e.PtasDeletemasspayaccumulatorrecords).HasColumnName("ptas_deletemasspayaccumulatorrecords");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasMasspayactionCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_masspayaction_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasMasspayactionCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_masspayaction_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasMasspayactionModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_masspayaction_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasMasspayactionModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_masspayaction_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasMasspayaction)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_masspayaction_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasMasspayactionOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_masspayaction_owninguser");

                entity.HasOne(d => d.PtasAgentcodeidValueNavigation)
                    .WithMany(p => p.PtasMasspayaction)
                    .HasForeignKey(d => d.PtasAgentcodeidValue)
                    .HasConstraintName("FK_ptas_masspayer_ptas_masspayaction_ptas_agentcodeid");
            });

            modelBuilder.Entity<PtasMasspayer>(entity =>
            {
                entity.ToTable("ptas_masspayer", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_masspayer_modifiedon");

                entity.Property(e => e.PtasMasspayerid)
                    .HasColumnName("ptas_masspayerid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasCode).HasColumnName("ptas_code");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasMasspayerCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_masspayer_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasMasspayerCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_masspayer_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasMasspayerModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_masspayer_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasMasspayerModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_masspayer_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasMasspayer)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_masspayer_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasMasspayerOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_masspayer_owninguser");
            });

            modelBuilder.Entity<PtasMediarepository>(entity =>
            {
                entity.ToTable("ptas_mediarepository", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_mediarepository_modifiedon");

                entity.Property(e => e.PtasMediarepositoryid)
                    .HasColumnName("ptas_mediarepositoryid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAccessoryguid).HasColumnName("ptas_accessoryguid");

                entity.Property(e => e.PtasBlobpath).HasColumnName("ptas_blobpath");

                entity.Property(e => e.PtasBuildingguid).HasColumnName("ptas_buildingguid");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasFileextension).HasColumnName("ptas_fileextension");

                entity.Property(e => e.PtasImagetype).HasColumnName("ptas_imagetype");

                entity.Property(e => e.PtasLandguid).HasColumnName("ptas_landguid");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasMediadate).HasColumnName("ptas_mediadate");

                entity.Property(e => e.PtasMediatype).HasColumnName("ptas_mediatype");

                entity.Property(e => e.PtasMediauploaded).HasColumnName("ptas_mediauploaded");

                entity.Property(e => e.PtasMigrationnote).HasColumnName("ptas_migrationnote");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasOrder).HasColumnName("ptas_order");

                entity.Property(e => e.PtasPermitguid).HasColumnName("ptas_permitguid");

                entity.Property(e => e.PtasPosttoweb).HasColumnName("ptas_posttoweb");

                entity.Property(e => e.PtasPrimary).HasColumnName("ptas_primary");

                entity.Property(e => e.PtasPrimaryentity).HasColumnName("ptas_primaryentity");

                entity.Property(e => e.PtasPrimaryguid).HasColumnName("ptas_primaryguid");

                entity.Property(e => e.PtasRelatedobjectmediatype).HasColumnName("ptas_relatedobjectmediatype");

                entity.Property(e => e.PtasRootfolder).HasColumnName("ptas_rootfolder");

                entity.Property(e => e.PtasSaleidValue).HasColumnName("_ptas_saleid_value");

                entity.Property(e => e.PtasUnitguid).HasColumnName("ptas_unitguid");

                entity.Property(e => e.PtasUpdatedbyuser).HasColumnName("ptas_updatedbyuser");

                entity.Property(e => e.PtasUsagetype).HasColumnName("ptas_usagetype");

                entity.Property(e => e.PtasYearidValue).HasColumnName("_ptas_yearid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasMediarepositoryCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_mediarepository_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasMediarepositoryCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_mediarepository_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasMediarepositoryModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_mediarepository_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasMediarepositoryModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_mediarepository_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasMediarepository)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_mediarepository_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasMediarepositoryOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_mediarepository_owninguser");

                entity.HasOne(d => d.PtasSaleidValueNavigation)
                    .WithMany(p => p.PtasMediarepository)
                    .HasForeignKey(d => d.PtasSaleidValue)
                    .HasConstraintName("FK_ptas_sales_ptas_mediarepository_ptas_saleid");

                entity.HasOne(d => d.PtasYearidValueNavigation)
                    .WithMany(p => p.PtasMediarepository)
                    .HasForeignKey(d => d.PtasYearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_mediarepository_ptas_yearid");
            });

            modelBuilder.Entity<PtasMedicareplan>(entity =>
            {
                entity.ToTable("ptas_medicareplan", "dynamics");

                entity.Property(e => e.PtasMedicareplanid)
                    .HasColumnName("ptas_medicareplanid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasApproved).HasColumnName("ptas_approved");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasOrganizationname).HasColumnName("ptas_organizationname");

                entity.Property(e => e.PtasYearidValue).HasColumnName("_ptas_yearid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasMedicareplanCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_medicareplan_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasMedicareplanCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_medicareplan_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasMedicareplanModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_medicareplan_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasMedicareplanModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_medicareplan_modifiedonbehalfby");

                entity.HasOne(d => d.PtasYearidValueNavigation)
                    .WithMany(p => p.PtasMedicareplan)
                    .HasForeignKey(d => d.PtasYearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_medicareplan_ptas_yearid");
            });

            modelBuilder.Entity<PtasNaicscode>(entity =>
            {
                entity.ToTable("ptas_naicscode", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_naicscode_modifiedon");

                entity.Property(e => e.PtasNaicscodeid)
                    .HasColumnName("ptas_naicscodeid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasCode).HasColumnName("ptas_code");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasNaicscodeCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_naicscode_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasNaicscodeCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_naicscode_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasNaicscodeModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_naicscode_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasNaicscodeModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_naicscode_modifiedonbehalfby");
            });

            modelBuilder.Entity<PtasNeighborhood>(entity =>
            {
                entity.ToTable("ptas_neighborhood", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_neighborhood_modifiedon");

                entity.Property(e => e.PtasNeighborhoodid)
                    .HasColumnName("ptas_neighborhoodid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasAreaidValue).HasColumnName("_ptas_areaid_value");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasNeighborhoodCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_neighborhood_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasNeighborhoodCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_neighborhood_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasNeighborhoodModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_neighborhood_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasNeighborhoodModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_neighborhood_modifiedonbehalfby");

                entity.HasOne(d => d.PtasAreaidValueNavigation)
                    .WithMany(p => p.PtasNeighborhood)
                    .HasForeignKey(d => d.PtasAreaidValue)
                    .HasConstraintName("FK_ptas_area_ptas_neighborhood_ptas_areaid");
            });

            modelBuilder.Entity<PtasNotificationconfiguration>(entity =>
            {
                entity.ToTable("ptas_notificationconfiguration", "dynamics");

                entity.Property(e => e.PtasNotificationconfigurationid)
                    .HasColumnName("ptas_notificationconfigurationid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasEnddate).HasColumnName("ptas_enddate");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasPropertytype).HasColumnName("ptas_propertytype");

                entity.Property(e => e.PtasStartdate).HasColumnName("ptas_startdate");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasNotificationconfigurationCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_notificationconfiguration_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasNotificationconfigurationCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_notificationconfiguration_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasNotificationconfigurationModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_notificationconfiguration_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasNotificationconfigurationModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_notificationconfiguration_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasNotificationconfiguration)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_notificationconfiguration_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasNotificationconfigurationOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_notificationconfiguration_owninguser");
            });

            modelBuilder.Entity<PtasNuisancetype>(entity =>
            {
                entity.ToTable("ptas_nuisancetype", "dynamics");

                entity.Property(e => e.PtasNuisancetypeid)
                    .HasColumnName("ptas_nuisancetypeid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasNuisancetypeCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_nuisancetype_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasNuisancetypeCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_nuisancetype_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasNuisancetypeModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_nuisancetype_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasNuisancetypeModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_nuisancetype_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasNuisancetype)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_nuisancetype_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasNuisancetypeOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_nuisancetype_owninguser");
            });

            modelBuilder.Entity<PtasOmit>(entity =>
            {
                entity.ToTable("ptas_omit", "dynamics");

                entity.Property(e => e.PtasOmitid)
                    .HasColumnName("ptas_omitid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAssessedvalue)
                    .HasColumnName("ptas_assessedvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAssessedvalueBase)
                    .HasColumnName("ptas_assessedvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAssessmentyearidValue).HasColumnName("_ptas_assessmentyearid_value");

                entity.Property(e => e.PtasLevycodeidValue).HasColumnName("_ptas_levycodeid_value");

                entity.Property(e => e.PtasMfinterfacedate).HasColumnName("ptas_mfinterfacedate");

                entity.Property(e => e.PtasMfinterfaceflag).HasColumnName("ptas_mfinterfaceflag");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasOmitlevycodeidValue).HasColumnName("_ptas_omitlevycodeid_value");

                entity.Property(e => e.PtasOmittedassessmentyearidValue).HasColumnName("_ptas_omittedassessmentyearid_value");

                entity.Property(e => e.PtasOmitvalue)
                    .HasColumnName("ptas_omitvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasOmitvalueBase)
                    .HasColumnName("ptas_omitvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPenalty).HasColumnName("ptas_penalty");

                entity.Property(e => e.PtasPersonalpropertyaccountidValue).HasColumnName("_ptas_personalpropertyaccountid_value");

                entity.Property(e => e.PtasSuppliesvalue)
                    .HasColumnName("ptas_suppliesvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSuppliesvalueBase)
                    .HasColumnName("ptas_suppliesvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTransactionnumber).HasColumnName("ptas_transactionnumber");

                entity.Property(e => e.PtasValuationdate).HasColumnName("ptas_valuationdate");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasOmitCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_omit_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasOmitCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_omit_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasOmitModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_omit_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasOmitModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_omit_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasOmit)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_omit_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasOmitOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_omit_owninguser");

                entity.HasOne(d => d.PtasAssessmentyearidValueNavigation)
                    .WithMany(p => p.PtasOmitPtasAssessmentyearidValueNavigation)
                    .HasForeignKey(d => d.PtasAssessmentyearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_omit_ptas_assessmentyearid");

                entity.HasOne(d => d.PtasLevycodeidValueNavigation)
                    .WithMany(p => p.PtasOmitPtasLevycodeidValueNavigation)
                    .HasForeignKey(d => d.PtasLevycodeidValue)
                    .HasConstraintName("FK_ptas_levycode_ptas_omit_ptas_levycodeid");

                entity.HasOne(d => d.PtasOmitlevycodeidValueNavigation)
                    .WithMany(p => p.PtasOmitPtasOmitlevycodeidValueNavigation)
                    .HasForeignKey(d => d.PtasOmitlevycodeidValue)
                    .HasConstraintName("FK_ptas_levycode_ptas_omit_ptas_omitlevycodeid");

                entity.HasOne(d => d.PtasOmittedassessmentyearidValueNavigation)
                    .WithMany(p => p.PtasOmitPtasOmittedassessmentyearidValueNavigation)
                    .HasForeignKey(d => d.PtasOmittedassessmentyearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_omit_ptas_omittedassessmentyearid");

                entity.HasOne(d => d.PtasPersonalpropertyaccountidValueNavigation)
                    .WithMany(p => p.PtasOmit)
                    .HasForeignKey(d => d.PtasPersonalpropertyaccountidValue)
                    .HasConstraintName("FK_ptas_personalproperty_ptas_omit_ptas_personalpropertyaccountid");
            });

            modelBuilder.Entity<PtasParceldetail>(entity =>
            {
                entity.ToTable("ptas_parceldetail", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_parceldetail_modifiedon");

                entity.HasIndex(e => e.PtasName);

                entity.HasIndex(e => new { e.PtasMajor, e.PtasMinor })
                    .HasName("Idx_ptas_parceldetail_ptas_major_ptas_minor");

                entity.HasIndex(e => new { e.PtasMasterparcelidValue, e.PtasSnapshottype, e.Statecode })
                    .HasName("idx_MasterParcelSnapshottypeStatecode");

                entity.Property(e => e.PtasParceldetailid)
                    .HasColumnName("ptas_parceldetailid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAbstractparcelresultidValue).HasColumnName("_ptas_abstractparcelresultid_value");

                entity.Property(e => e.PtasAccessorycount).HasColumnName("ptas_accessorycount");

                entity.Property(e => e.PtasAccounttype).HasColumnName("ptas_accounttype");

                entity.Property(e => e.PtasAcctnbr).HasColumnName("ptas_acctnbr");

                entity.Property(e => e.PtasAddr1CityidValue).HasColumnName("_ptas_addr1_cityid_value");

                entity.Property(e => e.PtasAddr1Compositeaddress).HasColumnName("ptas_addr1_compositeaddress");

                entity.Property(e => e.PtasAddr1CompositeaddressOneline).HasColumnName("ptas_addr1_compositeaddress_oneline");

                entity.Property(e => e.PtasAddr1CountryidValue).HasColumnName("_ptas_addr1_countryid_value");

                entity.Property(e => e.PtasAddr1Directionprefix).HasColumnName("ptas_addr1_directionprefix");

                entity.Property(e => e.PtasAddr1Directionsuffix).HasColumnName("ptas_addr1_directionsuffix");

                entity.Property(e => e.PtasAddr1Line2).HasColumnName("ptas_addr1_line2");

                entity.Property(e => e.PtasAddr1StateidValue).HasColumnName("_ptas_addr1_stateid_value");

                entity.Property(e => e.PtasAddr1StreetnameidValue).HasColumnName("_ptas_addr1_streetnameid_value");

                entity.Property(e => e.PtasAddr1Streetnumber).HasColumnName("ptas_addr1_streetnumber");

                entity.Property(e => e.PtasAddr1Streetnumberfraction).HasColumnName("ptas_addr1_streetnumberfraction");

                entity.Property(e => e.PtasAddr1StreettypeidValue).HasColumnName("_ptas_addr1_streettypeid_value");

                entity.Property(e => e.PtasAddr1ZipcodeidValue).HasColumnName("_ptas_addr1_zipcodeid_value");

                entity.Property(e => e.PtasAddress).HasColumnName("ptas_address");

                entity.Property(e => e.PtasAlternatekey).HasColumnName("ptas_alternatekey");

                entity.Property(e => e.PtasApplgroup).HasColumnName("ptas_applgroup");

                entity.Property(e => e.PtasAreaidValue).HasColumnName("_ptas_areaid_value");

                entity.Property(e => e.PtasAssignedappraiseridValue).HasColumnName("_ptas_assignedappraiserid_value");

                entity.Property(e => e.PtasBenefitacres)
                    .HasColumnName("ptas_benefitacres")
                    .HasColumnType("money");

                entity.Property(e => e.PtasBldgnbr).HasColumnName("ptas_bldgnbr");

                entity.Property(e => e.PtasBothinspected).HasColumnName("ptas_bothinspected");

                entity.Property(e => e.PtasBuildingcount).HasColumnName("ptas_buildingcount");

                entity.Property(e => e.PtasChangesource).HasColumnName("ptas_changesource");

                entity.Property(e => e.PtasCommarea).HasColumnName("ptas_commarea");

                entity.Property(e => e.PtasCommercialdistrict).HasColumnName("ptas_commercialdistrict");

                entity.Property(e => e.PtasCommsubarea).HasColumnName("ptas_commsubarea");

                entity.Property(e => e.PtasCondocommgridupdated).HasColumnName("ptas_condocommgridupdated");

                entity.Property(e => e.PtasCondocount).HasColumnName("ptas_condocount");

                entity.Property(e => e.PtasCondoresgridupdated).HasColumnName("ptas_condoresgridupdated");

                entity.Property(e => e.PtasCurrentuse).HasColumnName("ptas_currentuse");

                entity.Property(e => e.PtasDelinquenttaxesowed)
                    .HasColumnName("ptas_delinquenttaxesowed")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDelinquenttaxesowedBase)
                    .HasColumnName("ptas_delinquenttaxesowed_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDirectnavigation).HasColumnName("ptas_directnavigation");

                entity.Property(e => e.PtasDirsuffix).HasColumnName("ptas_dirsuffix");

                entity.Property(e => e.PtasDistrict).HasColumnName("ptas_district");

                entity.Property(e => e.PtasDistrictidValue).HasColumnName("_ptas_districtid_value");

                entity.Property(e => e.PtasEconomicunitValue).HasColumnName("_ptas_economicunit_value");

                entity.Property(e => e.PtasEvncode).HasColumnName("ptas_evncode");

                entity.Property(e => e.PtasFloatgridupdated).HasColumnName("ptas_floatgridupdated");

                entity.Property(e => e.PtasFloatmobilecount).HasColumnName("ptas_floatmobilecount");

                entity.Property(e => e.PtasFolio).HasColumnName("ptas_folio");

                entity.Property(e => e.PtasForestfireacres)
                    .HasColumnName("ptas_forestfireacres")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFormhasloaded).HasColumnName("ptas_formhasloaded");

                entity.Property(e => e.PtasGeoarea).HasColumnName("ptas_geoarea");

                entity.Property(e => e.PtasGeoareaidValue).HasColumnName("_ptas_geoareaid_value");

                entity.Property(e => e.PtasGeonbhdidValue).HasColumnName("_ptas_geonbhdid_value");

                entity.Property(e => e.PtasGeoneighborhood).HasColumnName("ptas_geoneighborhood");

                entity.Property(e => e.PtasHistguid).HasColumnName("ptas_histguid");

                entity.Property(e => e.PtasHistoricsite).HasColumnName("ptas_historicsite");

                entity.Property(e => e.PtasHistyear).HasColumnName("ptas_histyear");

                entity.Property(e => e.PtasHoldoutreason).HasColumnName("ptas_holdoutreason");

                entity.Property(e => e.PtasInspectionreason).HasColumnName("ptas_inspectionreason");

                entity.Property(e => e.PtasIsgovernmentowned).HasColumnName("ptas_isgovernmentowned");

                entity.Property(e => e.PtasIslipa).HasColumnName("ptas_islipa");

                entity.Property(e => e.PtasIsmfte).HasColumnName("ptas_ismfte");

                entity.Property(e => e.PtasIstribalowned).HasColumnName("ptas_istribalowned");

                entity.Property(e => e.PtasJurisdictionValue).HasColumnName("_ptas_jurisdiction_value");

                entity.Property(e => e.PtasLandalternatekey).HasColumnName("ptas_landalternatekey");

                entity.Property(e => e.PtasLandidValue).HasColumnName("_ptas_landid_value");

                entity.Property(e => e.PtasLandinspected).HasColumnName("ptas_landinspected");

                entity.Property(e => e.PtasLandinspectedbyidValue).HasColumnName("_ptas_landinspectedbyid_value");

                entity.Property(e => e.PtasLandinspecteddate).HasColumnName("ptas_landinspecteddate");

                entity.Property(e => e.PtasLandtype).HasColumnName("ptas_landtype");

                entity.Property(e => e.PtasLandusecode).HasColumnName("ptas_landusecode");

                entity.Property(e => e.PtasLandusedesc).HasColumnName("ptas_landusedesc");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasLegaldescription).HasColumnName("ptas_legaldescription");

                entity.Property(e => e.PtasLevycode).HasColumnName("ptas_levycode");

                entity.Property(e => e.PtasLevycodeidValue).HasColumnName("_ptas_levycodeid_value");

                entity.Property(e => e.PtasLinktorecordersoffice).HasColumnName("ptas_linktorecordersoffice");

                entity.Property(e => e.PtasLotacreage)
                    .HasColumnName("ptas_lotacreage")
                    .HasColumnType("money");

                entity.Property(e => e.PtasMajor)
                    .HasColumnName("ptas_major")
                    .HasMaxLength(6);

                entity.Property(e => e.PtasMarkfordelete).HasColumnName("ptas_markfordelete");

                entity.Property(e => e.PtasMasterparcelidValue).HasColumnName("_ptas_masterparcelid_value");

                entity.Property(e => e.PtasMediaguid).HasColumnName("ptas_mediaguid");

                entity.Property(e => e.PtasMediatype).HasColumnName("ptas_mediatype");

                entity.Property(e => e.PtasMigrationnote).HasColumnName("ptas_migrationnote");

                entity.Property(e => e.PtasMinor)
                    .HasColumnName("ptas_minor")
                    .HasMaxLength(4);

                entity.Property(e => e.PtasMobilegridupdated).HasColumnName("ptas_mobilegridupdated");

                entity.Property(e => e.PtasName)
                    .HasColumnName("ptas_name")
                    .HasMaxLength(100);

                entity.Property(e => e.PtasNamesonaccount).HasColumnName("ptas_namesonaccount");

                entity.Property(e => e.PtasNbrfraction).HasColumnName("ptas_nbrfraction");

                entity.Property(e => e.PtasNbrlivingunits).HasColumnName("ptas_nbrlivingunits");

                entity.Property(e => e.PtasNeedtorevisit).HasColumnName("ptas_needtorevisit");

                entity.Property(e => e.PtasNeighborhood).HasColumnName("ptas_neighborhood");

                entity.Property(e => e.PtasNeighborhoodidValue).HasColumnName("_ptas_neighborhoodid_value");

                entity.Property(e => e.PtasNewconstrval).HasColumnName("ptas_newconstrval");

                entity.Property(e => e.PtasNotecount).HasColumnName("ptas_notecount");

                entity.Property(e => e.PtasNumberofbuildings).HasColumnName("ptas_numberofbuildings");

                entity.Property(e => e.PtasOtherexemptions).HasColumnName("ptas_otherexemptions");

                entity.Property(e => e.PtasParcelheadername).HasColumnName("ptas_parcelheadername");

                entity.Property(e => e.PtasParcelheadertext).HasColumnName("ptas_parcelheadertext");

                entity.Property(e => e.PtasParcelheadertext2).HasColumnName("ptas_parcelheadertext2");

                entity.Property(e => e.PtasParcelinspected).HasColumnName("ptas_parcelinspected");

                entity.Property(e => e.PtasParcelinspectedbyidValue).HasColumnName("_ptas_parcelinspectedbyid_value");

                entity.Property(e => e.PtasParcelinspecteddate).HasColumnName("ptas_parcelinspecteddate");

                entity.Property(e => e.PtasParcelsnapshotnote).HasColumnName("ptas_parcelsnapshotnote");

                entity.Property(e => e.PtasParceltype).HasColumnName("ptas_parceltype");

                entity.Property(e => e.PtasPermitcount).HasColumnName("ptas_permitcount");

                entity.Property(e => e.PtasPlatblock).HasColumnName("ptas_platblock");

                entity.Property(e => e.PtasPlatlot).HasColumnName("ptas_platlot");

                entity.Property(e => e.PtasPostcardsharepointurl).HasColumnName("ptas_postcardsharepointurl");

                entity.Property(e => e.PtasProjectcount).HasColumnName("ptas_projectcount");

                entity.Property(e => e.PtasPropertyname).HasColumnName("ptas_propertyname");

                entity.Property(e => e.PtasPropertytypeidValue).HasColumnName("_ptas_propertytypeid_value");

                entity.Property(e => e.PtasProptype).HasColumnName("ptas_proptype");

                entity.Property(e => e.PtasQstridValue).HasColumnName("_ptas_qstrid_value");

                entity.Property(e => e.PtasRegion).HasColumnName("ptas_region");

                entity.Property(e => e.PtasResarea).HasColumnName("ptas_resarea");

                entity.Property(e => e.PtasResidentialdistrict).HasColumnName("ptas_residentialdistrict");

                entity.Property(e => e.PtasResponsibilityidValue).HasColumnName("_ptas_responsibilityid_value");

                entity.Property(e => e.PtasRessubarea).HasColumnName("ptas_ressubarea");

                entity.Property(e => e.PtasRpaalternatekey).HasColumnName("ptas_rpaalternatekey");

                entity.Property(e => e.PtasSalecount).HasColumnName("ptas_salecount");

                entity.Property(e => e.PtasSaleidValue).HasColumnName("_ptas_saleid_value");

                entity.Property(e => e.PtasSalesnotecount).HasColumnName("ptas_salesnotecount");

                entity.Property(e => e.PtasSeesenior).HasColumnName("ptas_seesenior");

                entity.Property(e => e.PtasShowallunits).HasColumnName("ptas_showallunits");

                entity.Property(e => e.PtasShowappraisal).HasColumnName("ptas_showappraisal");

                entity.Property(e => e.PtasShowbookmarks).HasColumnName("ptas_showbookmarks");

                entity.Property(e => e.PtasShowcommercialfields).HasColumnName("ptas_showcommercialfields");

                entity.Property(e => e.PtasShowcommercialunits).HasColumnName("ptas_showcommercialunits");

                entity.Property(e => e.PtasShowdetaillist).HasColumnName("ptas_showdetaillist");

                entity.Property(e => e.PtasShowestimate).HasColumnName("ptas_showestimate");

                entity.Property(e => e.PtasShowexemptions).HasColumnName("ptas_showexemptions");

                entity.Property(e => e.PtasShowfloatunits).HasColumnName("ptas_showfloatunits");

                entity.Property(e => e.PtasShowinspectionhistory).HasColumnName("ptas_showinspectionhistory");

                entity.Property(e => e.PtasShowmobileunits).HasColumnName("ptas_showmobileunits");

                entity.Property(e => e.PtasShowprojecthistory).HasColumnName("ptas_showprojecthistory");

                entity.Property(e => e.PtasShowrecordchanges).HasColumnName("ptas_showrecordchanges");

                entity.Property(e => e.PtasShowresidentialfields).HasColumnName("ptas_showresidentialfields");

                entity.Property(e => e.PtasShowresidentialunits).HasColumnName("ptas_showresidentialunits");

                entity.Property(e => e.PtasShowtasks).HasColumnName("ptas_showtasks");

                entity.Property(e => e.PtasShowtaxroll).HasColumnName("ptas_showtaxroll");

                entity.Property(e => e.PtasSnapshotassessmentyear).HasColumnName("ptas_snapshotassessmentyear");

                entity.Property(e => e.PtasSnapshotcount).HasColumnName("ptas_snapshotcount");

                entity.Property(e => e.PtasSnapshotdatetime).HasColumnName("ptas_snapshotdatetime");

                entity.Property(e => e.PtasSnapshoterror).HasColumnName("ptas_snapshoterror");

                entity.Property(e => e.PtasSnapshotprogress).HasColumnName("ptas_snapshotprogress");

                entity.Property(e => e.PtasSnapshottype).HasColumnName("ptas_snapshottype");

                entity.Property(e => e.PtasSpacenumber).HasColumnName("ptas_spacenumber");

                entity.Property(e => e.PtasSpecialtyappraiseridValue).HasColumnName("_ptas_specialtyappraiserid_value");

                entity.Property(e => e.PtasSpecialtyarea).HasColumnName("ptas_specialtyarea");

                entity.Property(e => e.PtasSpecialtyareaidValue).HasColumnName("_ptas_specialtyareaid_value");

                entity.Property(e => e.PtasSpecialtynbhdidValue).HasColumnName("_ptas_specialtynbhdid_value");

                entity.Property(e => e.PtasSpecialtyneighborhood).HasColumnName("ptas_specialtyneighborhood");

                entity.Property(e => e.PtasSplitaccount1idValue).HasColumnName("_ptas_splitaccount1id_value");

                entity.Property(e => e.PtasSplitaccount2idValue).HasColumnName("_ptas_splitaccount2id_value");

                entity.Property(e => e.PtasSplitcode).HasColumnName("ptas_splitcode");

                entity.Property(e => e.PtasSqftlot).HasColumnName("ptas_sqftlot");

                entity.Property(e => e.PtasStreetname).HasColumnName("ptas_streetname");

                entity.Property(e => e.PtasStreetnbr).HasColumnName("ptas_streetnbr");

                entity.Property(e => e.PtasStreettype).HasColumnName("ptas_streettype");

                entity.Property(e => e.PtasSubareaidValue).HasColumnName("_ptas_subareaid_value");

                entity.Property(e => e.PtasSubmarketidValue).HasColumnName("_ptas_submarketid_value");

                entity.Property(e => e.PtasSupergroup).HasColumnName("ptas_supergroup");

                entity.Property(e => e.PtasSupergroupdidValue).HasColumnName("_ptas_supergroupdid_value");

                entity.Property(e => e.PtasTaxaccountidValue).HasColumnName("_ptas_taxaccountid_value");

                entity.Property(e => e.PtasTaxstatus).HasColumnName("ptas_taxstatus");

                entity.Property(e => e.PtasTotalaccessoryvalue)
                    .HasColumnName("ptas_totalaccessoryvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalaccessoryvalueBase)
                    .HasColumnName("ptas_totalaccessoryvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasVacantland).HasColumnName("ptas_vacantland");

                entity.Property(e => e.PtasWhatifsyncdate).HasColumnName("ptas_whatifsyncdate");

                entity.Property(e => e.PtasZipcode).HasColumnName("ptas_zipcode");

                entity.Property(e => e.PtasZoning).HasColumnName("ptas_zoning");

                entity.Property(e => e.PtasZoningdescription).HasColumnName("ptas_zoningdescription");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasParceldetailCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_parceldetail_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasParceldetailCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_parceldetail_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasParceldetailModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_parceldetail_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasParceldetailModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_parceldetail_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasParceldetail)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_parceldetail_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasParceldetailOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_parceldetail_owninguser");

                entity.HasOne(d => d.PtasAbstractparcelresultidValueNavigation)
                    .WithMany(p => p.PtasParceldetail)
                    .HasForeignKey(d => d.PtasAbstractparcelresultidValue)
                    .HasConstraintName("FK_ptas_abstractprojectresultparcel_ptas_parceldetail_ptas_abstractparcelresultid");

                entity.HasOne(d => d.PtasAddr1CityidValueNavigation)
                    .WithMany(p => p.PtasParceldetail)
                    .HasForeignKey(d => d.PtasAddr1CityidValue)
                    .HasConstraintName("FK_ptas_city_ptas_parceldetail_ptas_addr1_cityid");

                entity.HasOne(d => d.PtasAddr1CountryidValueNavigation)
                    .WithMany(p => p.PtasParceldetail)
                    .HasForeignKey(d => d.PtasAddr1CountryidValue)
                    .HasConstraintName("FK_ptas_country_ptas_parceldetail_ptas_addr1_countryid");

                entity.HasOne(d => d.PtasAddr1StateidValueNavigation)
                    .WithMany(p => p.PtasParceldetail)
                    .HasForeignKey(d => d.PtasAddr1StateidValue)
                    .HasConstraintName("FK_ptas_stateorprovince_ptas_parceldetail_ptas_addr1_stateid");

                entity.HasOne(d => d.PtasAddr1StreetnameidValueNavigation)
                    .WithMany(p => p.PtasParceldetail)
                    .HasForeignKey(d => d.PtasAddr1StreetnameidValue)
                    .HasConstraintName("FK_ptas_streetname_ptas_parceldetail_ptas_addr1_streetnameid");

                entity.HasOne(d => d.PtasAddr1StreettypeidValueNavigation)
                    .WithMany(p => p.PtasParceldetail)
                    .HasForeignKey(d => d.PtasAddr1StreettypeidValue)
                    .HasConstraintName("FK_ptas_streettype_ptas_parceldetail_ptas_addr1_streettypeid");

                entity.HasOne(d => d.PtasAddr1ZipcodeidValueNavigation)
                    .WithMany(p => p.PtasParceldetail)
                    .HasForeignKey(d => d.PtasAddr1ZipcodeidValue)
                    .HasConstraintName("FK_ptas_zipcode_ptas_parceldetail_ptas_addr1_zipcodeid");

                entity.HasOne(d => d.PtasAreaidValueNavigation)
                    .WithMany(p => p.PtasParceldetail)
                    .HasForeignKey(d => d.PtasAreaidValue)
                    .HasConstraintName("FK_ptas_area_ptas_parceldetail_ptas_areaid");

                entity.HasOne(d => d.PtasAssignedappraiseridValueNavigation)
                    .WithMany(p => p.PtasParceldetailPtasAssignedappraiseridValueNavigation)
                    .HasForeignKey(d => d.PtasAssignedappraiseridValue)
                    .HasConstraintName("FK_systemuser_ptas_parceldetail_ptas_assignedappraiserid");

                entity.HasOne(d => d.PtasDistrictidValueNavigation)
                    .WithMany(p => p.PtasParceldetail)
                    .HasForeignKey(d => d.PtasDistrictidValue)
                    .HasConstraintName("FK_ptas_district_ptas_parceldetail_ptas_districtid");

                entity.HasOne(d => d.PtasEconomicunitValueNavigation)
                    .WithMany(p => p.PtasParceldetail)
                    .HasForeignKey(d => d.PtasEconomicunitValue)
                    .HasConstraintName("FK_ptas_economicunit_ptas_parceldetail_ptas_economicunit");

                entity.HasOne(d => d.PtasGeoareaidValueNavigation)
                    .WithMany(p => p.PtasParceldetail)
                    .HasForeignKey(d => d.PtasGeoareaidValue)
                    .HasConstraintName("FK_ptas_geoarea_ptas_parceldetail_ptas_geoareaid");

                entity.HasOne(d => d.PtasGeonbhdidValueNavigation)
                    .WithMany(p => p.PtasParceldetail)
                    .HasForeignKey(d => d.PtasGeonbhdidValue)
                    .HasConstraintName("FK_ptas_geoneighborhood_ptas_parceldetail_ptas_geonbhdid");

                entity.HasOne(d => d.PtasJurisdictionValueNavigation)
                    .WithMany(p => p.PtasParceldetail)
                    .HasForeignKey(d => d.PtasJurisdictionValue)
                    .HasConstraintName("FK_ptas_jurisdiction_ptas_parceldetail_ptas_jurisdiction");

                entity.HasOne(d => d.PtasLandidValueNavigation)
                    .WithMany(p => p.PtasParceldetail)
                    .HasForeignKey(d => d.PtasLandidValue)
                    .HasConstraintName("FK_ptas_land_ptas_parceldetail_ptas_landid");

                entity.HasOne(d => d.PtasLandinspectedbyidValueNavigation)
                    .WithMany(p => p.PtasParceldetailPtasLandinspectedbyidValueNavigation)
                    .HasForeignKey(d => d.PtasLandinspectedbyidValue)
                    .HasConstraintName("FK_systemuser_ptas_parceldetail_ptas_landinspectedbyid");

                entity.HasOne(d => d.PtasLevycodeidValueNavigation)
                    .WithMany(p => p.PtasParceldetail)
                    .HasForeignKey(d => d.PtasLevycodeidValue)
                    .HasConstraintName("FK_ptas_levycode_ptas_parceldetail_ptas_levycodeid");

                entity.HasOne(d => d.PtasMasterparcelidValueNavigation)
                    .WithMany(p => p.InversePtasMasterparcelidValueNavigation)
                    .HasForeignKey(d => d.PtasMasterparcelidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_parceldetail_ptas_masterparcelid");

                entity.HasOne(d => d.PtasNeighborhoodidValueNavigation)
                    .WithMany(p => p.PtasParceldetail)
                    .HasForeignKey(d => d.PtasNeighborhoodidValue)
                    .HasConstraintName("FK_ptas_neighborhood_ptas_parceldetail_ptas_neighborhoodid");

                entity.HasOne(d => d.PtasParcelinspectedbyidValueNavigation)
                    .WithMany(p => p.PtasParceldetailPtasParcelinspectedbyidValueNavigation)
                    .HasForeignKey(d => d.PtasParcelinspectedbyidValue)
                    .HasConstraintName("FK_systemuser_ptas_parceldetail_ptas_parcelinspectedbyid");

                entity.HasOne(d => d.PtasPropertytypeidValueNavigation)
                    .WithMany(p => p.PtasParceldetail)
                    .HasForeignKey(d => d.PtasPropertytypeidValue)
                    .HasConstraintName("FK_ptas_propertytype_ptas_parceldetail_ptas_propertytypeid");

                entity.HasOne(d => d.PtasQstridValueNavigation)
                    .WithMany(p => p.PtasParceldetail)
                    .HasForeignKey(d => d.PtasQstridValue)
                    .HasConstraintName("FK_ptas_qstr_ptas_parceldetail_ptas_qstrid");

                entity.HasOne(d => d.PtasResponsibilityidValueNavigation)
                    .WithMany(p => p.PtasParceldetail)
                    .HasForeignKey(d => d.PtasResponsibilityidValue)
                    .HasConstraintName("FK_ptas_responsibility_ptas_parceldetail_ptas_responsibilityid");

                entity.HasOne(d => d.PtasSaleidValueNavigation)
                    .WithMany(p => p.PtasParceldetail)
                    .HasForeignKey(d => d.PtasSaleidValue)
                    .HasConstraintName("FK_ptas_sales_ptas_parceldetail_ptas_saleid");

                entity.HasOne(d => d.PtasSpecialtyappraiseridValueNavigation)
                    .WithMany(p => p.PtasParceldetailPtasSpecialtyappraiseridValueNavigation)
                    .HasForeignKey(d => d.PtasSpecialtyappraiseridValue)
                    .HasConstraintName("FK_systemuser_ptas_parceldetail_ptas_specialtyappraiserid");

                entity.HasOne(d => d.PtasSpecialtyareaidValueNavigation)
                    .WithMany(p => p.PtasParceldetail)
                    .HasForeignKey(d => d.PtasSpecialtyareaidValue)
                    .HasConstraintName("FK_ptas_specialtyarea_ptas_parceldetail_ptas_specialtyareaid");

                entity.HasOne(d => d.PtasSpecialtynbhdidValueNavigation)
                    .WithMany(p => p.PtasParceldetail)
                    .HasForeignKey(d => d.PtasSpecialtynbhdidValue)
                    .HasConstraintName("FK_ptas_specialtyneighborhood_ptas_parceldetail_ptas_specialtynbhdid");

                entity.HasOne(d => d.PtasSplitaccount1idValueNavigation)
                    .WithMany(p => p.PtasParceldetailPtasSplitaccount1idValueNavigation)
                    .HasForeignKey(d => d.PtasSplitaccount1idValue)
                    .HasConstraintName("FK_ptas_taxaccount_ptas_parceldetail_ptas_splitaccount1id");

                entity.HasOne(d => d.PtasSplitaccount2idValueNavigation)
                    .WithMany(p => p.PtasParceldetailPtasSplitaccount2idValueNavigation)
                    .HasForeignKey(d => d.PtasSplitaccount2idValue)
                    .HasConstraintName("FK_ptas_taxaccount_ptas_parceldetail_ptas_splitaccount2id");

                entity.HasOne(d => d.PtasSubareaidValueNavigation)
                    .WithMany(p => p.PtasParceldetail)
                    .HasForeignKey(d => d.PtasSubareaidValue)
                    .HasConstraintName("FK_ptas_subarea_ptas_parceldetail_ptas_subareaid");

                entity.HasOne(d => d.PtasSubmarketidValueNavigation)
                    .WithMany(p => p.PtasParceldetail)
                    .HasForeignKey(d => d.PtasSubmarketidValue)
                    .HasConstraintName("FK_ptas_submarket_ptas_parceldetail_ptas_submarketid");

                entity.HasOne(d => d.PtasSupergroupdidValueNavigation)
                    .WithMany(p => p.PtasParceldetail)
                    .HasForeignKey(d => d.PtasSupergroupdidValue)
                    .HasConstraintName("FK_ptas_supergroup_ptas_parceldetail_ptas_supergroupdid");

                entity.HasOne(d => d.PtasTaxaccountidValueNavigation)
                    .WithMany(p => p.PtasParceldetailPtasTaxaccountidValueNavigation)
                    .HasForeignKey(d => d.PtasTaxaccountidValue)
                    .HasConstraintName("FK_ptas_taxaccount_ptas_parceldetail_ptas_taxaccountid");
            });

            modelBuilder.Entity<PtasParceldetailPtasMediarepository>(entity =>
            {
                entity.ToTable("ptas_parceldetail_ptas_mediarepository", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_parceldetail_ptas_mediarepository_modifiedon");

                entity.Property(e => e.PtasParceldetailPtasMediarepositoryid)
                    .HasColumnName("ptas_parceldetail_ptas_mediarepositoryid")
                    .ValueGeneratedNever();

                entity.Property(e => e.Modifiedon)
                    .HasColumnName("modifiedon")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.PtasMediarepositoryid).HasColumnName("ptas_mediarepositoryid");

                entity.Property(e => e.PtasParceldetailid).HasColumnName("ptas_parceldetailid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasParceldetailSnapshot>(entity =>
            {
                entity.HasKey(e => e.PtasParceldetailid);

                entity.ToTable("ptas_parceldetail_snapshot", "dynamics");

                entity.HasIndex(e => e.PtasMasterparcelidValue)
                    .HasName("idx_MstrParcelId");

                entity.Property(e => e.PtasParceldetailid)
                    .HasColumnName("ptas_parceldetailid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAbstractparcelresultidValue).HasColumnName("_ptas_abstractparcelresultid_value");

                entity.Property(e => e.PtasAccessorycount).HasColumnName("ptas_accessorycount");

                entity.Property(e => e.PtasAccounttype).HasColumnName("ptas_accounttype");

                entity.Property(e => e.PtasAcctnbr).HasColumnName("ptas_acctnbr");

                entity.Property(e => e.PtasAddr1CityidValue).HasColumnName("_ptas_addr1_cityid_value");

                entity.Property(e => e.PtasAddr1Compositeaddress).HasColumnName("ptas_addr1_compositeaddress");

                entity.Property(e => e.PtasAddr1CompositeaddressOneline).HasColumnName("ptas_addr1_compositeaddress_oneline");

                entity.Property(e => e.PtasAddr1CountryidValue).HasColumnName("_ptas_addr1_countryid_value");

                entity.Property(e => e.PtasAddr1Directionprefix).HasColumnName("ptas_addr1_directionprefix");

                entity.Property(e => e.PtasAddr1Directionsuffix).HasColumnName("ptas_addr1_directionsuffix");

                entity.Property(e => e.PtasAddr1Line2).HasColumnName("ptas_addr1_line2");

                entity.Property(e => e.PtasAddr1StateidValue).HasColumnName("_ptas_addr1_stateid_value");

                entity.Property(e => e.PtasAddr1StreetnameidValue).HasColumnName("_ptas_addr1_streetnameid_value");

                entity.Property(e => e.PtasAddr1Streetnumber).HasColumnName("ptas_addr1_streetnumber");

                entity.Property(e => e.PtasAddr1Streetnumberfraction).HasColumnName("ptas_addr1_streetnumberfraction");

                entity.Property(e => e.PtasAddr1StreettypeidValue).HasColumnName("_ptas_addr1_streettypeid_value");

                entity.Property(e => e.PtasAddr1ZipcodeidValue).HasColumnName("_ptas_addr1_zipcodeid_value");

                entity.Property(e => e.PtasAddress).HasColumnName("ptas_address");

                entity.Property(e => e.PtasAlternatekey).HasColumnName("ptas_alternatekey");

                entity.Property(e => e.PtasApplgroup).HasColumnName("ptas_applgroup");

                entity.Property(e => e.PtasAreaidValue).HasColumnName("_ptas_areaid_value");

                entity.Property(e => e.PtasAssignedappraiseridValue).HasColumnName("_ptas_assignedappraiserid_value");

                entity.Property(e => e.PtasBenefitacres)
                    .HasColumnName("ptas_benefitacres")
                    .HasColumnType("money");

                entity.Property(e => e.PtasBldgnbr).HasColumnName("ptas_bldgnbr");

                entity.Property(e => e.PtasBothinspected).HasColumnName("ptas_bothinspected");

                entity.Property(e => e.PtasBuildingcount).HasColumnName("ptas_buildingcount");

                entity.Property(e => e.PtasChangesource).HasColumnName("ptas_changesource");

                entity.Property(e => e.PtasCommarea).HasColumnName("ptas_commarea");

                entity.Property(e => e.PtasCommercialdistrict).HasColumnName("ptas_commercialdistrict");

                entity.Property(e => e.PtasCommsubarea).HasColumnName("ptas_commsubarea");

                entity.Property(e => e.PtasCondocommgridupdated).HasColumnName("ptas_condocommgridupdated");

                entity.Property(e => e.PtasCondocount).HasColumnName("ptas_condocount");

                entity.Property(e => e.PtasCondoresgridupdated).HasColumnName("ptas_condoresgridupdated");

                entity.Property(e => e.PtasCurrentuse).HasColumnName("ptas_currentuse");

                entity.Property(e => e.PtasDelinquenttaxesowed)
                    .HasColumnName("ptas_delinquenttaxesowed")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDelinquenttaxesowedBase)
                    .HasColumnName("ptas_delinquenttaxesowed_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDirectnavigation).HasColumnName("ptas_directnavigation");

                entity.Property(e => e.PtasDirsuffix).HasColumnName("ptas_dirsuffix");

                entity.Property(e => e.PtasDistrict).HasColumnName("ptas_district");

                entity.Property(e => e.PtasDistrictidValue).HasColumnName("_ptas_districtid_value");

                entity.Property(e => e.PtasEconomicunitValue).HasColumnName("_ptas_economicunit_value");

                entity.Property(e => e.PtasEvncode).HasColumnName("ptas_evncode");

                entity.Property(e => e.PtasFloatgridupdated).HasColumnName("ptas_floatgridupdated");

                entity.Property(e => e.PtasFloatmobilecount).HasColumnName("ptas_floatmobilecount");

                entity.Property(e => e.PtasFolio).HasColumnName("ptas_folio");

                entity.Property(e => e.PtasForestfireacres)
                    .HasColumnName("ptas_forestfireacres")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFormhasloaded).HasColumnName("ptas_formhasloaded");

                entity.Property(e => e.PtasGeoarea).HasColumnName("ptas_geoarea");

                entity.Property(e => e.PtasGeoareaidValue).HasColumnName("_ptas_geoareaid_value");

                entity.Property(e => e.PtasGeonbhdidValue).HasColumnName("_ptas_geonbhdid_value");

                entity.Property(e => e.PtasGeoneighborhood).HasColumnName("ptas_geoneighborhood");

                entity.Property(e => e.PtasHistguid).HasColumnName("ptas_histguid");

                entity.Property(e => e.PtasHistoricsite).HasColumnName("ptas_historicsite");

                entity.Property(e => e.PtasHistyear).HasColumnName("ptas_histyear");

                entity.Property(e => e.PtasHoldoutreason).HasColumnName("ptas_holdoutreason");

                entity.Property(e => e.PtasInspectionreason).HasColumnName("ptas_inspectionreason");

                entity.Property(e => e.PtasIsgovernmentowned).HasColumnName("ptas_isgovernmentowned");

                entity.Property(e => e.PtasIslipa).HasColumnName("ptas_islipa");

                entity.Property(e => e.PtasIsmfte).HasColumnName("ptas_ismfte");

                entity.Property(e => e.PtasIstribalowned).HasColumnName("ptas_istribalowned");

                entity.Property(e => e.PtasJurisdictionValue).HasColumnName("_ptas_jurisdiction_value");

                entity.Property(e => e.PtasLandalternatekey).HasColumnName("ptas_landalternatekey");

                entity.Property(e => e.PtasLandidValue).HasColumnName("_ptas_landid_value");

                entity.Property(e => e.PtasLandinspected).HasColumnName("ptas_landinspected");

                entity.Property(e => e.PtasLandinspectedbyidValue).HasColumnName("_ptas_landinspectedbyid_value");

                entity.Property(e => e.PtasLandinspecteddate).HasColumnName("ptas_landinspecteddate");

                entity.Property(e => e.PtasLandtype).HasColumnName("ptas_landtype");

                entity.Property(e => e.PtasLandusecode).HasColumnName("ptas_landusecode");

                entity.Property(e => e.PtasLandusedesc).HasColumnName("ptas_landusedesc");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasLegaldescription).HasColumnName("ptas_legaldescription");

                entity.Property(e => e.PtasLevycode).HasColumnName("ptas_levycode");

                entity.Property(e => e.PtasLevycodeidValue).HasColumnName("_ptas_levycodeid_value");

                entity.Property(e => e.PtasLinktorecordersoffice).HasColumnName("ptas_linktorecordersoffice");

                entity.Property(e => e.PtasLotacreage)
                    .HasColumnName("ptas_lotacreage")
                    .HasColumnType("money");

                entity.Property(e => e.PtasMajor)
                    .HasColumnName("ptas_major")
                    .HasMaxLength(6);

                entity.Property(e => e.PtasMarkfordelete).HasColumnName("ptas_markfordelete");

                entity.Property(e => e.PtasMasterparcelidValue).HasColumnName("_ptas_masterparcelid_value");

                entity.Property(e => e.PtasMediaguid).HasColumnName("ptas_mediaguid");

                entity.Property(e => e.PtasMediatype).HasColumnName("ptas_mediatype");

                entity.Property(e => e.PtasMigrationnote).HasColumnName("ptas_migrationnote");

                entity.Property(e => e.PtasMinor)
                    .HasColumnName("ptas_minor")
                    .HasMaxLength(4);

                entity.Property(e => e.PtasMobilegridupdated).HasColumnName("ptas_mobilegridupdated");

                entity.Property(e => e.PtasName)
                    .HasColumnName("ptas_name")
                    .HasMaxLength(11);

                entity.Property(e => e.PtasNamesonaccount).HasColumnName("ptas_namesonaccount");

                entity.Property(e => e.PtasNbrfraction).HasColumnName("ptas_nbrfraction");

                entity.Property(e => e.PtasNbrlivingunits).HasColumnName("ptas_nbrlivingunits");

                entity.Property(e => e.PtasNeedtorevisit).HasColumnName("ptas_needtorevisit");

                entity.Property(e => e.PtasNeighborhood).HasColumnName("ptas_neighborhood");

                entity.Property(e => e.PtasNeighborhoodidValue).HasColumnName("_ptas_neighborhoodid_value");

                entity.Property(e => e.PtasNewconstrval).HasColumnName("ptas_newconstrval");

                entity.Property(e => e.PtasNotecount).HasColumnName("ptas_notecount");

                entity.Property(e => e.PtasNumberofbuildings).HasColumnName("ptas_numberofbuildings");

                entity.Property(e => e.PtasOtherexemptions).HasColumnName("ptas_otherexemptions");

                entity.Property(e => e.PtasParcelheadername).HasColumnName("ptas_parcelheadername");

                entity.Property(e => e.PtasParcelheadertext).HasColumnName("ptas_parcelheadertext");

                entity.Property(e => e.PtasParcelheadertext2).HasColumnName("ptas_parcelheadertext2");

                entity.Property(e => e.PtasParcelinspected).HasColumnName("ptas_parcelinspected");

                entity.Property(e => e.PtasParcelinspectedbyidValue).HasColumnName("_ptas_parcelinspectedbyid_value");

                entity.Property(e => e.PtasParcelinspecteddate).HasColumnName("ptas_parcelinspecteddate");

                entity.Property(e => e.PtasParcelsnapshotnote).HasColumnName("ptas_parcelsnapshotnote");

                entity.Property(e => e.PtasParceltype).HasColumnName("ptas_parceltype");

                entity.Property(e => e.PtasPermitcount).HasColumnName("ptas_permitcount");

                entity.Property(e => e.PtasPlatblock).HasColumnName("ptas_platblock");

                entity.Property(e => e.PtasPlatlot).HasColumnName("ptas_platlot");

                entity.Property(e => e.PtasPostcardsharepointurl).HasColumnName("ptas_postcardsharepointurl");

                entity.Property(e => e.PtasProjectcount).HasColumnName("ptas_projectcount");

                entity.Property(e => e.PtasPropertyname).HasColumnName("ptas_propertyname");

                entity.Property(e => e.PtasPropertytypeidValue).HasColumnName("_ptas_propertytypeid_value");

                entity.Property(e => e.PtasProptype).HasColumnName("ptas_proptype");

                entity.Property(e => e.PtasQstridValue).HasColumnName("_ptas_qstrid_value");

                entity.Property(e => e.PtasRegion).HasColumnName("ptas_region");

                entity.Property(e => e.PtasResarea).HasColumnName("ptas_resarea");

                entity.Property(e => e.PtasResidentialdistrict).HasColumnName("ptas_residentialdistrict");

                entity.Property(e => e.PtasResponsibilityidValue).HasColumnName("_ptas_responsibilityid_value");

                entity.Property(e => e.PtasRessubarea).HasColumnName("ptas_ressubarea");

                entity.Property(e => e.PtasRpaalternatekey).HasColumnName("ptas_rpaalternatekey");

                entity.Property(e => e.PtasSalecount).HasColumnName("ptas_salecount");

                entity.Property(e => e.PtasSaleidValue).HasColumnName("_ptas_saleid_value");

                entity.Property(e => e.PtasSalesnotecount).HasColumnName("ptas_salesnotecount");

                entity.Property(e => e.PtasSeesenior).HasColumnName("ptas_seesenior");

                entity.Property(e => e.PtasShowallunits).HasColumnName("ptas_showallunits");

                entity.Property(e => e.PtasShowappraisal).HasColumnName("ptas_showappraisal");

                entity.Property(e => e.PtasShowbookmarks).HasColumnName("ptas_showbookmarks");

                entity.Property(e => e.PtasShowcommercialfields).HasColumnName("ptas_showcommercialfields");

                entity.Property(e => e.PtasShowcommercialunits).HasColumnName("ptas_showcommercialunits");

                entity.Property(e => e.PtasShowdetaillist).HasColumnName("ptas_showdetaillist");

                entity.Property(e => e.PtasShowestimate).HasColumnName("ptas_showestimate");

                entity.Property(e => e.PtasShowexemptions).HasColumnName("ptas_showexemptions");

                entity.Property(e => e.PtasShowfloatunits).HasColumnName("ptas_showfloatunits");

                entity.Property(e => e.PtasShowinspectionhistory).HasColumnName("ptas_showinspectionhistory");

                entity.Property(e => e.PtasShowmobileunits).HasColumnName("ptas_showmobileunits");

                entity.Property(e => e.PtasShowprojecthistory).HasColumnName("ptas_showprojecthistory");

                entity.Property(e => e.PtasShowrecordchanges).HasColumnName("ptas_showrecordchanges");

                entity.Property(e => e.PtasShowresidentialfields).HasColumnName("ptas_showresidentialfields");

                entity.Property(e => e.PtasShowresidentialunits).HasColumnName("ptas_showresidentialunits");

                entity.Property(e => e.PtasShowtasks).HasColumnName("ptas_showtasks");

                entity.Property(e => e.PtasShowtaxroll).HasColumnName("ptas_showtaxroll");

                entity.Property(e => e.PtasSnapshotassessmentyear).HasColumnName("ptas_snapshotassessmentyear");

                entity.Property(e => e.PtasSnapshotcount).HasColumnName("ptas_snapshotcount");

                entity.Property(e => e.PtasSnapshotdatetime).HasColumnName("ptas_snapshotdatetime");

                entity.Property(e => e.PtasSnapshoterror).HasColumnName("ptas_snapshoterror");

                entity.Property(e => e.PtasSnapshotprogress).HasColumnName("ptas_snapshotprogress");

                entity.Property(e => e.PtasSnapshottype).HasColumnName("ptas_snapshottype");

                entity.Property(e => e.PtasSpacenumber).HasColumnName("ptas_spacenumber");

                entity.Property(e => e.PtasSpecialtyappraiseridValue).HasColumnName("_ptas_specialtyappraiserid_value");

                entity.Property(e => e.PtasSpecialtyarea).HasColumnName("ptas_specialtyarea");

                entity.Property(e => e.PtasSpecialtyareaidValue).HasColumnName("_ptas_specialtyareaid_value");

                entity.Property(e => e.PtasSpecialtynbhdidValue).HasColumnName("_ptas_specialtynbhdid_value");

                entity.Property(e => e.PtasSpecialtyneighborhood).HasColumnName("ptas_specialtyneighborhood");

                entity.Property(e => e.PtasSplitaccount1idValue).HasColumnName("_ptas_splitaccount1id_value");

                entity.Property(e => e.PtasSplitaccount2idValue).HasColumnName("_ptas_splitaccount2id_value");

                entity.Property(e => e.PtasSplitcode).HasColumnName("ptas_splitcode");

                entity.Property(e => e.PtasSqftlot).HasColumnName("ptas_sqftlot");

                entity.Property(e => e.PtasStreetname).HasColumnName("ptas_streetname");

                entity.Property(e => e.PtasStreetnbr).HasColumnName("ptas_streetnbr");

                entity.Property(e => e.PtasStreettype).HasColumnName("ptas_streettype");

                entity.Property(e => e.PtasSubareaidValue).HasColumnName("_ptas_subareaid_value");

                entity.Property(e => e.PtasSubmarketidValue).HasColumnName("_ptas_submarketid_value");

                entity.Property(e => e.PtasSupergroup).HasColumnName("ptas_supergroup");

                entity.Property(e => e.PtasSupergroupdidValue).HasColumnName("_ptas_supergroupdid_value");

                entity.Property(e => e.PtasTaxaccountidValue).HasColumnName("_ptas_taxaccountid_value");

                entity.Property(e => e.PtasTaxstatus).HasColumnName("ptas_taxstatus");

                entity.Property(e => e.PtasTotalaccessoryvalue)
                    .HasColumnName("ptas_totalaccessoryvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalaccessoryvalueBase)
                    .HasColumnName("ptas_totalaccessoryvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasVacantland).HasColumnName("ptas_vacantland");

                entity.Property(e => e.PtasWhatifsyncdate).HasColumnName("ptas_whatifsyncdate");

                entity.Property(e => e.PtasZipcode).HasColumnName("ptas_zipcode");

                entity.Property(e => e.PtasZoning).HasColumnName("ptas_zoning");

                entity.Property(e => e.PtasZoningdescription).HasColumnName("ptas_zoningdescription");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasParceleconomicunit>(entity =>
            {
                entity.ToTable("ptas_parceleconomicunit", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_parceleconomicunit_modifiedon");

                entity.Property(e => e.PtasParceleconomicunitid)
                    .HasColumnName("ptas_parceleconomicunitid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasEconomicunitidValue).HasColumnName("_ptas_economicunitid_value");

                entity.Property(e => e.PtasEffectiveyearidValue).HasColumnName("_ptas_effectiveyearid_value");

                entity.Property(e => e.PtasGrosssqft).HasColumnName("ptas_grosssqft");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasLegacyrpparceleconomicunitid).HasColumnName("ptas_legacyrpparceleconomicunitid");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNetsqft).HasColumnName("ptas_netsqft");

                entity.Property(e => e.PtasParcelidValue).HasColumnName("_ptas_parcelid_value");

                entity.Property(e => e.PtasType).HasColumnName("ptas_type");

                entity.Property(e => e.PtasYearbuiltidValue).HasColumnName("_ptas_yearbuiltid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasParceleconomicunitCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_parceleconomicunit_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasParceleconomicunitCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_parceleconomicunit_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasParceleconomicunitModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_parceleconomicunit_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasParceleconomicunitModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_parceleconomicunit_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasParceleconomicunit)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_parceleconomicunit_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasParceleconomicunitOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_parceleconomicunit_owninguser");

                entity.HasOne(d => d.PtasEconomicunitidValueNavigation)
                    .WithMany(p => p.PtasParceleconomicunit)
                    .HasForeignKey(d => d.PtasEconomicunitidValue)
                    .HasConstraintName("FK_ptas_economicunit_ptas_parceleconomicunit_ptas_economicunitid");

                entity.HasOne(d => d.PtasEffectiveyearidValueNavigation)
                    .WithMany(p => p.PtasParceleconomicunitPtasEffectiveyearidValueNavigation)
                    .HasForeignKey(d => d.PtasEffectiveyearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_parceleconomicunit_ptas_effectiveyearid");

                entity.HasOne(d => d.PtasParcelidValueNavigation)
                    .WithMany(p => p.PtasParceleconomicunit)
                    .HasForeignKey(d => d.PtasParcelidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_parceleconomicunit_ptas_parcelid");

                entity.HasOne(d => d.PtasYearbuiltidValueNavigation)
                    .WithMany(p => p.PtasParceleconomicunitPtasYearbuiltidValueNavigation)
                    .HasForeignKey(d => d.PtasYearbuiltidValue)
                    .HasConstraintName("FK_ptas_year_ptas_parceleconomicunit_ptas_yearbuiltid");
            });

            modelBuilder.Entity<PtasParcelmetadata>(entity =>
            {
                entity.ToTable("ptas_parcelmetadata", "dynamics");

                entity.Property(e => e.PtasParcelmetadataid)
                    .HasColumnName("ptas_parcelmetadataid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAccessorycount).HasColumnName("ptas_accessorycount");

                entity.Property(e => e.PtasBuildingcount).HasColumnName("ptas_buildingcount");

                entity.Property(e => e.PtasCommercialcondocount).HasColumnName("ptas_commercialcondocount");

                entity.Property(e => e.PtasFloatinghomecount).HasColumnName("ptas_floatinghomecount");

                entity.Property(e => e.PtasHeadertext1).HasColumnName("ptas_headertext1");

                entity.Property(e => e.PtasHeadertext2).HasColumnName("ptas_headertext2");

                entity.Property(e => e.PtasMobilehomecount).HasColumnName("ptas_mobilehomecount");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNotecount).HasColumnName("ptas_notecount");

                entity.Property(e => e.PtasParcelValue).HasColumnName("_ptas_parcel_value");

                entity.Property(e => e.PtasPermitcount).HasColumnName("ptas_permitcount");

                entity.Property(e => e.PtasPersonalpropertycount).HasColumnName("ptas_personalpropertycount");

                entity.Property(e => e.PtasProjectcount).HasColumnName("ptas_projectcount");

                entity.Property(e => e.PtasResidentialcondocount).HasColumnName("ptas_residentialcondocount");

                entity.Property(e => e.PtasReviewcount).HasColumnName("ptas_reviewcount");

                entity.Property(e => e.PtasSalecount).HasColumnName("ptas_salecount");

                entity.Property(e => e.PtasSitusaddress).HasColumnName("ptas_situsaddress");

                entity.Property(e => e.PtasSitusaddressoneline).HasColumnName("ptas_situsaddressoneline");

                entity.Property(e => e.PtasSnapshotcount).HasColumnName("ptas_snapshotcount");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasParcelmetadataCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_parcelmetadata_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasParcelmetadataCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_parcelmetadata_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasParcelmetadataModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_parcelmetadata_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasParcelmetadataModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_parcelmetadata_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasParcelmetadata)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_parcelmetadata_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasParcelmetadataOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_parcelmetadata_owninguser");

                entity.HasOne(d => d.PtasParcelValueNavigation)
                    .WithMany(p => p.PtasParcelmetadata)
                    .HasForeignKey(d => d.PtasParcelValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_parcelmetadata_ptas_parcel");
            });

            modelBuilder.Entity<PtasParkingdistrict>(entity =>
            {
                entity.ToTable("ptas_parkingdistrict", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_parkingdistrict_modifiedon");

                entity.Property(e => e.PtasParkingdistrictid)
                    .HasColumnName("ptas_parkingdistrictid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasCaprate)
                    .HasColumnName("ptas_caprate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDailyrate)
                    .HasColumnName("ptas_dailyrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDailyrateBase)
                    .HasColumnName("ptas_dailyrate_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasMonthlyrate)
                    .HasColumnName("ptas_monthlyrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasMonthlyrateBase)
                    .HasColumnName("ptas_monthlyrate_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasOccupancyrate).HasColumnName("ptas_occupancyrate");

                entity.Property(e => e.PtasOperatingexpenses)
                    .HasColumnName("ptas_operatingexpenses")
                    .HasColumnType("money");

                entity.Property(e => e.PtasOperatingexpensesBase)
                    .HasColumnName("ptas_operatingexpenses_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPercentofmonthlystalls).HasColumnName("ptas_percentofmonthlystalls");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasParkingdistrictCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_parkingdistrict_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasParkingdistrictCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_parkingdistrict_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasParkingdistrictModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_parkingdistrict_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasParkingdistrictModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_parkingdistrict_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasParkingdistrict)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_parkingdistrict_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasParkingdistrictOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_parkingdistrict_owninguser");
            });

            modelBuilder.Entity<PtasPaymentreceipt>(entity =>
            {
                entity.ToTable("ptas_paymentreceipt", "dynamics");

                entity.Property(e => e.PtasPaymentreceiptid)
                    .HasColumnName("ptas_paymentreceiptid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAccountnumber).HasColumnName("ptas_accountnumber");

                entity.Property(e => e.PtasMainframeisn).HasColumnName("ptas_mainframeisn");

                entity.Property(e => e.PtasMainframepeindex).HasColumnName("ptas_mainframepeindex");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasParcelValue).HasColumnName("_ptas_parcel_value");

                entity.Property(e => e.PtasReceiptamount)
                    .HasColumnName("ptas_receiptamount")
                    .HasColumnType("money");

                entity.Property(e => e.PtasReceiptamountBase)
                    .HasColumnName("ptas_receiptamount_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasReceiptdate).HasColumnName("ptas_receiptdate");

                entity.Property(e => e.PtasReceiptnumber).HasColumnName("ptas_receiptnumber");

                entity.Property(e => e.PtasReceivabletype).HasColumnName("ptas_receivabletype");

                entity.Property(e => e.PtasTaxyearValue).HasColumnName("_ptas_taxyear_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasPaymentreceiptCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_paymentreceipt_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPaymentreceiptCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_paymentreceipt_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasPaymentreceiptModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_paymentreceipt_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPaymentreceiptModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_paymentreceipt_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasPaymentreceipt)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_paymentreceipt_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasPaymentreceiptOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_paymentreceipt_owninguser");

                entity.HasOne(d => d.PtasParcelValueNavigation)
                    .WithMany(p => p.PtasPaymentreceipt)
                    .HasForeignKey(d => d.PtasParcelValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_paymentreceipt_ptas_parcel");

                entity.HasOne(d => d.PtasTaxyearValueNavigation)
                    .WithMany(p => p.PtasPaymentreceipt)
                    .HasForeignKey(d => d.PtasTaxyearValue)
                    .HasConstraintName("FK_ptas_year_ptas_paymentreceipt_ptas_taxyear");
            });

            modelBuilder.Entity<PtasPbrspointlevel>(entity =>
            {
                entity.ToTable("ptas_pbrspointlevel", "dynamics");

                entity.Property(e => e.PtasPbrspointlevelid)
                    .HasColumnName("ptas_pbrspointlevelid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasMaximumpoints).HasColumnName("ptas_maximumpoints");

                entity.Property(e => e.PtasMinimumpoints).HasColumnName("ptas_minimumpoints");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasTaxreductionpercentage).HasColumnName("ptas_taxreductionpercentage");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasPbrspointlevelCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_pbrspointlevel_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPbrspointlevelCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_pbrspointlevel_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasPbrspointlevelModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_pbrspointlevel_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPbrspointlevelModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_pbrspointlevel_modifiedonbehalfby");
            });

            modelBuilder.Entity<PtasPbrsresourcetype>(entity =>
            {
                entity.ToTable("ptas_pbrsresourcetype", "dynamics");

                entity.Property(e => e.PtasPbrsresourcetypeid)
                    .HasColumnName("ptas_pbrsresourcetypeid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasCategory).HasColumnName("ptas_category");

                entity.Property(e => e.PtasDefinitionandeligibility).HasColumnName("ptas_definitionandeligibility");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasPointvalue).HasColumnName("ptas_pointvalue");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasPbrsresourcetypeCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_pbrsresourcetype_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPbrsresourcetypeCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_pbrsresourcetype_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasPbrsresourcetypeModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_pbrsresourcetype_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPbrsresourcetypeModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_pbrsresourcetype_modifiedonbehalfby");
            });

            modelBuilder.Entity<PtasPermit>(entity =>
            {
                entity.ToTable("ptas_permit", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_permit_modifiedon");

                entity.HasIndex(e => new { e.PtasPermitvalue, e.PtasParcelidValue, e.Statecode, e.Statuscode })
                    .HasName("idx_StatecodeStatuscodeParcelid_value");

                entity.Property(e => e.PtasPermitid)
                    .HasColumnName("ptas_permitid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAddr1CompositeaddressOneline).HasColumnName("ptas_addr1_compositeaddress_oneline");

                entity.Property(e => e.PtasCondounitidValue).HasColumnName("_ptas_condounitid_value");

                entity.Property(e => e.PtasCurrentjurisdictionValue).HasColumnName("_ptas_currentjurisdiction_value");

                entity.Property(e => e.PtasDeactivatedviastatus).HasColumnName("ptas_deactivatedviastatus");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasErrorreason).HasColumnName("ptas_errorreason");

                entity.Property(e => e.PtasIntegrationsource).HasColumnName("ptas_integrationsource");

                entity.Property(e => e.PtasIssuedateyearidValue).HasColumnName("_ptas_issuedateyearid_value");

                entity.Property(e => e.PtasIssuedbyidValue).HasColumnName("_ptas_issuedbyid_value");

                entity.Property(e => e.PtasIssueddate).HasColumnName("ptas_issueddate");

                entity.Property(e => e.PtasJurisid).HasColumnName("ptas_jurisid");

                entity.Property(e => e.PtasLatestpermitinspectiondate).HasColumnName("ptas_latestpermitinspectiondate");

                entity.Property(e => e.PtasLatestpermitinspectiontype).HasColumnName("ptas_latestpermitinspectiontype");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasLinktopermit).HasColumnName("ptas_linktopermit");

                entity.Property(e => e.PtasMinorifcondounit).HasColumnName("ptas_minorifcondounit");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasParcelheadername).HasColumnName("ptas_parcelheadername");

                entity.Property(e => e.PtasParcelheadertext).HasColumnName("ptas_parcelheadertext");

                entity.Property(e => e.PtasParcelheadertext2).HasColumnName("ptas_parcelheadertext2");

                entity.Property(e => e.PtasParcelidValue).HasColumnName("_ptas_parcelid_value");

                entity.Property(e => e.PtasPercentcomplete).HasColumnName("ptas_percentcomplete");

                entity.Property(e => e.PtasPermitsource).HasColumnName("ptas_permitsource");

                entity.Property(e => e.PtasPermitstatus).HasColumnName("ptas_permitstatus");

                entity.Property(e => e.PtasPermittype).HasColumnName("ptas_permittype");

                entity.Property(e => e.PtasPermitvalue)
                    .HasColumnName("ptas_permitvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPermitvalueBase)
                    .HasColumnName("ptas_permitvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPlanreadydate).HasColumnName("ptas_planreadydate");

                entity.Property(e => e.PtasPlanrequest).HasColumnName("ptas_planrequest");

                entity.Property(e => e.PtasPlanrequestdate).HasColumnName("ptas_planrequestdate");

                entity.Property(e => e.PtasProjectaddress).HasColumnName("ptas_projectaddress");

                entity.Property(e => e.PtasProjectdescriptionshortcut).HasColumnName("ptas_projectdescriptionshortcut");

                entity.Property(e => e.PtasProjectname).HasColumnName("ptas_projectname");

                entity.Property(e => e.PtasQualifiesforhiex).HasColumnName("ptas_qualifiesforhiex");

                entity.Property(e => e.PtasReviewedbyidValue).HasColumnName("_ptas_reviewedbyid_value");

                entity.Property(e => e.PtasRevieweddate).HasColumnName("ptas_revieweddate");

                entity.Property(e => e.PtasShowinspectionhistory).HasColumnName("ptas_showinspectionhistory");

                entity.Property(e => e.PtasStatusdate).HasColumnName("ptas_statusdate");

                entity.Property(e => e.PtasStatusupdatedbyidValue).HasColumnName("_ptas_statusupdatedbyid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasPermitCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_permit_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPermitCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_permit_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasPermitModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_permit_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPermitModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_permit_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasPermit)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_permit_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasPermitOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_permit_owninguser");

                entity.HasOne(d => d.PtasCondounitidValueNavigation)
                    .WithMany(p => p.PtasPermitPtasCondounitidValueNavigation)
                    .HasForeignKey(d => d.PtasCondounitidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_permit_ptas_condounitid");

                entity.HasOne(d => d.PtasCurrentjurisdictionValueNavigation)
                    .WithMany(p => p.PtasPermitPtasCurrentjurisdictionValueNavigation)
                    .HasForeignKey(d => d.PtasCurrentjurisdictionValue)
                    .HasConstraintName("FK_ptas_jurisdiction_ptas_permit_ptas_currentjurisdiction");

                entity.HasOne(d => d.PtasIssuedateyearidValueNavigation)
                    .WithMany(p => p.PtasPermit)
                    .HasForeignKey(d => d.PtasIssuedateyearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_permit_ptas_issuedateyearid");

                entity.HasOne(d => d.PtasIssuedbyidValueNavigation)
                    .WithMany(p => p.PtasPermitPtasIssuedbyidValueNavigation)
                    .HasForeignKey(d => d.PtasIssuedbyidValue)
                    .HasConstraintName("FK_ptas_jurisdiction_ptas_permit_ptas_issuedbyid");

                entity.HasOne(d => d.PtasParcelidValueNavigation)
                    .WithMany(p => p.PtasPermitPtasParcelidValueNavigation)
                    .HasForeignKey(d => d.PtasParcelidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_permit_ptas_parcelid");

                entity.HasOne(d => d.PtasReviewedbyidValueNavigation)
                    .WithMany(p => p.PtasPermitPtasReviewedbyidValueNavigation)
                    .HasForeignKey(d => d.PtasReviewedbyidValue)
                    .HasConstraintName("FK_systemuser_ptas_permit_ptas_reviewedbyid");

                entity.HasOne(d => d.PtasStatusupdatedbyidValueNavigation)
                    .WithMany(p => p.PtasPermitPtasStatusupdatedbyidValueNavigation)
                    .HasForeignKey(d => d.PtasStatusupdatedbyidValue)
                    .HasConstraintName("FK_systemuser_ptas_permit_ptas_statusupdatedbyid");
            });

            modelBuilder.Entity<PtasPermitPtasMediarepository>(entity =>
            {
                entity.ToTable("ptas_permit_ptas_mediarepository", "dynamics");

                entity.Property(e => e.PtasPermitPtasMediarepositoryid)
                    .HasColumnName("ptas_permit_ptas_mediarepositoryid")
                    .ValueGeneratedNever();

                entity.Property(e => e.PtasMediarepositoryid).HasColumnName("ptas_mediarepositoryid");

                entity.Property(e => e.PtasPermitid).HasColumnName("ptas_permitid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasPermitinspectionhistory>(entity =>
            {
                entity.ToTable("ptas_permitinspectionhistory", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_permitinspectionhistory_modifiedon");

                entity.Property(e => e.PtasPermitinspectionhistoryid)
                    .HasColumnName("ptas_permitinspectionhistoryid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAlternatekey).HasColumnName("ptas_alternatekey");

                entity.Property(e => e.PtasInspectiondate).HasColumnName("ptas_inspectiondate");

                entity.Property(e => e.PtasInspectiontype).HasColumnName("ptas_inspectiontype");

                entity.Property(e => e.PtasIntegrationsource).HasColumnName("ptas_integrationsource");

                entity.Property(e => e.PtasJurisid).HasColumnName("ptas_jurisid");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasParcelidValue).HasColumnName("_ptas_parcelid_value");

                entity.Property(e => e.PtasPassorfail).HasColumnName("ptas_passorfail");

                entity.Property(e => e.PtasPermitidValue).HasColumnName("_ptas_permitid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasPermitinspectionhistoryCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_permitinspectionhistory_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPermitinspectionhistoryCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_permitinspectionhistory_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasPermitinspectionhistoryModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_permitinspectionhistory_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPermitinspectionhistoryModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_permitinspectionhistory_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasPermitinspectionhistory)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_permitinspectionhistory_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasPermitinspectionhistoryOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_permitinspectionhistory_owninguser");

                entity.HasOne(d => d.PtasParcelidValueNavigation)
                    .WithMany(p => p.PtasPermitinspectionhistory)
                    .HasForeignKey(d => d.PtasParcelidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_permitinspectionhistory_ptas_parcelid");

                entity.HasOne(d => d.PtasPermitidValueNavigation)
                    .WithMany(p => p.PtasPermitinspectionhistory)
                    .HasForeignKey(d => d.PtasPermitidValue)
                    .HasConstraintName("FK_ptas_permit_ptas_permitinspectionhistory_ptas_permitid");
            });

            modelBuilder.Entity<PtasPermitwebsiteconfig>(entity =>
            {
                entity.ToTable("ptas_permitwebsiteconfig", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_permitwebsiteconfig_modifiedon");

                entity.Property(e => e.PtasPermitwebsiteconfigid)
                    .HasColumnName("ptas_permitwebsiteconfigid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasBuildurl).HasColumnName("ptas_buildurl");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasUrl).HasColumnName("ptas_url");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasPermitwebsiteconfigCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_permitwebsiteconfig_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPermitwebsiteconfigCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_permitwebsiteconfig_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasPermitwebsiteconfigModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_permitwebsiteconfig_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPermitwebsiteconfigModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_permitwebsiteconfig_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasPermitwebsiteconfig)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_permitwebsiteconfig_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasPermitwebsiteconfigOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_permitwebsiteconfig_owninguser");
            });

            modelBuilder.Entity<PtasPersonalproperty>(entity =>
            {
                entity.ToTable("ptas_personalproperty", "dynamics");

                entity.Property(e => e.PtasPersonalpropertyid)
                    .HasColumnName("ptas_personalpropertyid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAccounstatusupdatedon).HasColumnName("ptas_accounstatusupdatedon");

                entity.Property(e => e.PtasAccountcreatedbyidValue).HasColumnName("_ptas_accountcreatedbyid_value");

                entity.Property(e => e.PtasAccountmanageridValue).HasColumnName("_ptas_accountmanagerid_value");

                entity.Property(e => e.PtasAccountnumber).HasColumnName("ptas_accountnumber");

                entity.Property(e => e.PtasAccountstatus).HasColumnName("ptas_accountstatus");

                entity.Property(e => e.PtasAddr1Business).HasColumnName("ptas_addr1_business");

                entity.Property(e => e.PtasAddr1BusinessCityidValue).HasColumnName("_ptas_addr1_business_cityid_value");

                entity.Property(e => e.PtasAddr1BusinessLine2).HasColumnName("ptas_addr1_business_line2");

                entity.Property(e => e.PtasAddr1BusinessStateidValue).HasColumnName("_ptas_addr1_business_stateid_value");

                entity.Property(e => e.PtasAddr1BusinessZipcodeidValue).HasColumnName("_ptas_addr1_business_zipcodeid_value");

                entity.Property(e => e.PtasAddr1Compositeaddress).HasColumnName("ptas_addr1_compositeaddress");

                entity.Property(e => e.PtasAddr1CompositeaddressOneline).HasColumnName("ptas_addr1_compositeaddress_oneline");

                entity.Property(e => e.PtasAddr1Preparer).HasColumnName("ptas_addr1_preparer");

                entity.Property(e => e.PtasAddr1PreparerCityidValue).HasColumnName("_ptas_addr1_preparer_cityid_value");

                entity.Property(e => e.PtasAddr1PreparerLine2).HasColumnName("ptas_addr1_preparer_line2");

                entity.Property(e => e.PtasAddr1PreparerStateidValue).HasColumnName("_ptas_addr1_preparer_stateid_value");

                entity.Property(e => e.PtasAddr1PreparerZipcodeidValue).HasColumnName("_ptas_addr1_preparer_zipcodeid_value");

                entity.Property(e => e.PtasAddr1TaxpayerCityidValue).HasColumnName("_ptas_addr1_taxpayer_cityid_value");

                entity.Property(e => e.PtasAddr1TaxpayerStateidValue).HasColumnName("_ptas_addr1_taxpayer_stateid_value");

                entity.Property(e => e.PtasAddr1TaxpayerZipcodeidValue).HasColumnName("_ptas_addr1_taxpayer_zipcodeid_value");

                entity.Property(e => e.PtasAlternatekey).HasColumnName("ptas_alternatekey");

                entity.Property(e => e.PtasAppealauditstatus).HasColumnName("ptas_appealauditstatus");

                entity.Property(e => e.PtasAssetestimate)
                    .HasColumnName("ptas_assetestimate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAssetestimateBase)
                    .HasColumnName("ptas_assetestimate_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAuditdate).HasColumnName("ptas_auditdate");

                entity.Property(e => e.PtasAuditedbyidValue).HasColumnName("_ptas_auditedbyid_value");

                entity.Property(e => e.PtasBusinessApt).HasColumnName("ptas_business_apt");

                entity.Property(e => e.PtasBusinessCompositeAddress).HasColumnName("ptas_business_composite_address");

                entity.Property(e => e.PtasBusinessCompositeaddressOneline).HasColumnName("ptas_business_compositeaddress_oneline");

                entity.Property(e => e.PtasBusinessHousenumber).HasColumnName("ptas_business_housenumber");

                entity.Property(e => e.PtasBusinessHousenumberdetail).HasColumnName("ptas_business_housenumberdetail");

                entity.Property(e => e.PtasBusinessLitigationpending).HasColumnName("ptas_business_litigationpending");

                entity.Property(e => e.PtasBusinessQuicknotes).HasColumnName("ptas_business_quicknotes");

                entity.Property(e => e.PtasBusinessStreetdetailPostfix).HasColumnName("ptas_business_streetdetail_postfix");

                entity.Property(e => e.PtasBusinessStreetdetailPrefix).HasColumnName("ptas_business_streetdetail_prefix");

                entity.Property(e => e.PtasBusinessStreetnameidValue).HasColumnName("_ptas_business_streetnameid_value");

                entity.Property(e => e.PtasBusinessStreettypeidValue).HasColumnName("_ptas_business_streettypeid_value");

                entity.Property(e => e.PtasBusinessname).HasColumnName("ptas_businessname");

                entity.Property(e => e.PtasCheckvaluechange).HasColumnName("ptas_checkvaluechange");

                entity.Property(e => e.PtasConfirmednotpartofachain).HasColumnName("ptas_confirmednotpartofachain");

                entity.Property(e => e.PtasConfirmedopen).HasColumnName("ptas_confirmedopen");

                entity.Property(e => e.PtasConfirmedopeninperson).HasColumnName("ptas_confirmedopeninperson");

                entity.Property(e => e.PtasConfirmedopenviacurrentyelpreview).HasColumnName("ptas_confirmedopenviacurrentyelpreview");

                entity.Property(e => e.PtasConfirmedopenviaphone).HasColumnName("ptas_confirmedopenviaphone");

                entity.Property(e => e.PtasContactavailable).HasColumnName("ptas_contactavailable");

                entity.Property(e => e.PtasContactemailavailable).HasColumnName("ptas_contactemailavailable");

                entity.Property(e => e.PtasContactphoneavailable).HasColumnName("ptas_contactphoneavailable");

                entity.Property(e => e.PtasCreatedondateyearidValue).HasColumnName("_ptas_createdondateyearid_value");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasDiscovered).HasColumnName("ptas_discovered");

                entity.Property(e => e.PtasDiscoveredbyidValue).HasColumnName("_ptas_discoveredbyid_value");

                entity.Property(e => e.PtasDiscoveryauditbyidValue).HasColumnName("_ptas_discoveryauditbyid_value");

                entity.Property(e => e.PtasDiscoverydate).HasColumnName("ptas_discoverydate");

                entity.Property(e => e.PtasDiscoverydateyearidValue).HasColumnName("_ptas_discoverydateyearid_value");

                entity.Property(e => e.PtasEditedav)
                    .HasColumnName("ptas_editedav")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEditedavBase)
                    .HasColumnName("ptas_editedav_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEditedavsupplies)
                    .HasColumnName("ptas_editedavsupplies")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEditedavsuppliesBase)
                    .HasColumnName("ptas_editedavsupplies_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEditedcost)
                    .HasColumnName("ptas_editedcost")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEditedcostBase)
                    .HasColumnName("ptas_editedcost_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEditedsupplies)
                    .HasColumnName("ptas_editedsupplies")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEditedsuppliesBase)
                    .HasColumnName("ptas_editedsupplies_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasElistingaccesscode).HasColumnName("ptas_elistingaccesscode");

                entity.Property(e => e.PtasElistinginfosent).HasColumnName("ptas_elistinginfosent");

                entity.Property(e => e.PtasElistingurl).HasColumnName("ptas_elistingurl");

                entity.Property(e => e.PtasFarmexemption).HasColumnName("ptas_farmexemption");

                entity.Property(e => e.PtasFieldaudit).HasColumnName("ptas_fieldaudit");

                entity.Property(e => e.PtasFilingdate).HasColumnName("ptas_filingdate");

                entity.Property(e => e.PtasFilingmethod).HasColumnName("ptas_filingmethod");

                entity.Property(e => e.PtasFilingrecevied).HasColumnName("ptas_filingrecevied");

                entity.Property(e => e.PtasHof).HasColumnName("ptas_hof");

                entity.Property(e => e.PtasInhouseauditstatus).HasColumnName("ptas_inhouseauditstatus");

                entity.Property(e => e.PtasInhousediscovery).HasColumnName("ptas_inhousediscovery");

                entity.Property(e => e.PtasLeaseholdimprovementscost)
                    .HasColumnName("ptas_leaseholdimprovementscost")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLeaseholdimprovementscostBase)
                    .HasColumnName("ptas_leaseholdimprovementscost_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasLegalentity).HasColumnName("ptas_legalentity");

                entity.Property(e => e.PtasLetter).HasColumnName("ptas_letter");

                entity.Property(e => e.PtasLevycodeidValue).HasColumnName("_ptas_levycodeid_value");

                entity.Property(e => e.PtasLevyrate)
                    .HasColumnName("ptas_levyrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLhiestimate)
                    .HasColumnName("ptas_lhiestimate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLhiestimateBase)
                    .HasColumnName("ptas_lhiestimate_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLitigationpending).HasColumnName("ptas_litigationpending");

                entity.Property(e => e.PtasMasterpersonalpropertyidValue).HasColumnName("_ptas_masterpersonalpropertyid_value");

                entity.Property(e => e.PtasNaicscodeidValue).HasColumnName("_ptas_naicscodeid_value");

                entity.Property(e => e.PtasNaicsdescription).HasColumnName("ptas_naicsdescription");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNeedtorevisit).HasColumnName("ptas_needtorevisit");

                entity.Property(e => e.PtasNonprofit).HasColumnName("ptas_nonprofit");

                entity.Property(e => e.PtasNotaduplicateinpersprop).HasColumnName("ptas_notaduplicateinpersprop");

                entity.Property(e => e.PtasNotaresidentialaddresss).HasColumnName("ptas_notaresidentialaddresss");

                entity.Property(e => e.PtasNumofomityears).HasColumnName("ptas_numofomityears");

                entity.Property(e => e.PtasOktopostvalue).HasColumnName("ptas_oktopostvalue");

                entity.Property(e => e.PtasParcelheadername).HasColumnName("ptas_parcelheadername");

                entity.Property(e => e.PtasParcelheadertext).HasColumnName("ptas_parcelheadertext");

                entity.Property(e => e.PtasParcelheadertext2).HasColumnName("ptas_parcelheadertext2");

                entity.Property(e => e.PtasParcelidValue).HasColumnName("_ptas_parcelid_value");

                entity.Property(e => e.PtasParentaccountidValue).HasColumnName("_ptas_parentaccountid_value");

                entity.Property(e => e.PtasPercentassessedvalue).HasColumnName("ptas_percentassessedvalue");

                entity.Property(e => e.PtasPosted).HasColumnName("ptas_posted");

                entity.Property(e => e.PtasPostedav)
                    .HasColumnName("ptas_postedav")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPostedavBase)
                    .HasColumnName("ptas_postedav_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPostedavsupplies)
                    .HasColumnName("ptas_postedavsupplies")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPostedavsuppliesBase)
                    .HasColumnName("ptas_postedavsupplies_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPostedcost)
                    .HasColumnName("ptas_postedcost")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPostedcostBase)
                    .HasColumnName("ptas_postedcost_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPostedsupplies)
                    .HasColumnName("ptas_postedsupplies")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPostedsuppliesBase)
                    .HasColumnName("ptas_postedsupplies_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPostedtotalassessedvalue)
                    .HasColumnName("ptas_postedtotalassessedvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPostedtotalassessedvalueBase)
                    .HasColumnName("ptas_postedtotalassessedvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPreparerApt).HasColumnName("ptas_preparer_apt");

                entity.Property(e => e.PtasPreparerAttention).HasColumnName("ptas_preparer_attention");

                entity.Property(e => e.PtasPreparerCellphone1).HasColumnName("ptas_preparer_cellphone1");

                entity.Property(e => e.PtasPreparerCellphone2).HasColumnName("ptas_preparer_cellphone2");

                entity.Property(e => e.PtasPreparerCompositeAddress).HasColumnName("ptas_preparer_composite_address");

                entity.Property(e => e.PtasPreparerCompositeaddressOneline).HasColumnName("ptas_preparer_compositeaddress_oneline");

                entity.Property(e => e.PtasPreparerEmail1).HasColumnName("ptas_preparer_email1");

                entity.Property(e => e.PtasPreparerEmail2).HasColumnName("ptas_preparer_email2");

                entity.Property(e => e.PtasPreparerEmail3).HasColumnName("ptas_preparer_email3");

                entity.Property(e => e.PtasPreparerEmail4).HasColumnName("ptas_preparer_email4");

                entity.Property(e => e.PtasPreparerEmail5).HasColumnName("ptas_preparer_email5");

                entity.Property(e => e.PtasPreparerFax).HasColumnName("ptas_preparer_fax");

                entity.Property(e => e.PtasPreparerHousenbrdetail).HasColumnName("ptas_preparer_housenbrdetail");

                entity.Property(e => e.PtasPreparerHousenumber).HasColumnName("ptas_preparer_housenumber");

                entity.Property(e => e.PtasPreparerStreetdetailPostfix).HasColumnName("ptas_preparer_streetdetail_postfix");

                entity.Property(e => e.PtasPreparerStreetdetailPrefix).HasColumnName("ptas_preparer_streetdetail_prefix");

                entity.Property(e => e.PtasPreparerStreetnameidValue).HasColumnName("_ptas_preparer_streetnameid_value");

                entity.Property(e => e.PtasPreparerStreettypeidValue).HasColumnName("_ptas_preparer_streettypeid_value");

                entity.Property(e => e.PtasPreparerWorkphone1).HasColumnName("ptas_preparer_workphone1");

                entity.Property(e => e.PtasPreparerWorkphone1ext).HasColumnName("ptas_preparer_workphone1ext");

                entity.Property(e => e.PtasPreparerWorkphone2).HasColumnName("ptas_preparer_workphone2");

                entity.Property(e => e.PtasPreparerWorkphone2ext).HasColumnName("ptas_preparer_workphone2ext");

                entity.Property(e => e.PtasPreparercountryidValue).HasColumnName("_ptas_preparercountryid_value");

                entity.Property(e => e.PtasPreparername).HasColumnName("ptas_preparername");

                entity.Property(e => e.PtasPrioryearav)
                    .HasColumnName("ptas_prioryearav")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPrioryearavBase)
                    .HasColumnName("ptas_prioryearav_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPrioryearavsupplies)
                    .HasColumnName("ptas_prioryearavsupplies")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPrioryearavsuppliesBase)
                    .HasColumnName("ptas_prioryearavsupplies_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPrioryearcost)
                    .HasColumnName("ptas_prioryearcost")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPrioryearcostBase)
                    .HasColumnName("ptas_prioryearcost_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPrioryearsupplies)
                    .HasColumnName("ptas_prioryearsupplies")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPrioryearsuppliesBase)
                    .HasColumnName("ptas_prioryearsupplies_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasProcessstatus).HasColumnName("ptas_processstatus");

                entity.Property(e => e.PtasProcessstatusupdatedon).HasColumnName("ptas_processstatusupdatedon");

                entity.Property(e => e.PtasPropertytype).HasColumnName("ptas_propertytype");

                entity.Property(e => e.PtasQuickcollect).HasColumnName("ptas_quickcollect");

                entity.Property(e => e.PtasQuicknotes2).HasColumnName("ptas_quicknotes2");

                entity.Property(e => e.PtasShowdiscoverychecklist).HasColumnName("ptas_showdiscoverychecklist");

                entity.Property(e => e.PtasShowpreparersection).HasColumnName("ptas_showpreparersection");

                entity.Property(e => e.PtasSnapshotdatetime).HasColumnName("ptas_snapshotdatetime");

                entity.Property(e => e.PtasSnapshottype).HasColumnName("ptas_snapshottype");

                entity.Property(e => e.PtasStateincorporatedidValue).HasColumnName("_ptas_stateincorporatedid_value");

                entity.Property(e => e.PtasTaxaccountidValue).HasColumnName("_ptas_taxaccountid_value");

                entity.Property(e => e.PtasTaxpayerApt).HasColumnName("ptas_taxpayer_apt");

                entity.Property(e => e.PtasTaxpayerAttention).HasColumnName("ptas_taxpayer_attention");

                entity.Property(e => e.PtasTaxpayerCellphone1).HasColumnName("ptas_taxpayer_cellphone1");

                entity.Property(e => e.PtasTaxpayerCellphone2).HasColumnName("ptas_taxpayer_cellphone2");

                entity.Property(e => e.PtasTaxpayerCompositeAddress).HasColumnName("ptas_taxpayer_composite_address");

                entity.Property(e => e.PtasTaxpayerCompositeaddressOneline).HasColumnName("ptas_taxpayer_compositeaddress_oneline");

                entity.Property(e => e.PtasTaxpayerEmail1).HasColumnName("ptas_taxpayer_email1");

                entity.Property(e => e.PtasTaxpayerEmail2).HasColumnName("ptas_taxpayer_email2");

                entity.Property(e => e.PtasTaxpayerEmail3).HasColumnName("ptas_taxpayer_email3");

                entity.Property(e => e.PtasTaxpayerEmail4).HasColumnName("ptas_taxpayer_email4");

                entity.Property(e => e.PtasTaxpayerEmail5).HasColumnName("ptas_taxpayer_email5");

                entity.Property(e => e.PtasTaxpayerFax).HasColumnName("ptas_taxpayer_fax");

                entity.Property(e => e.PtasTaxpayerHousenumber).HasColumnName("ptas_taxpayer_housenumber");

                entity.Property(e => e.PtasTaxpayerHousenumberdetail).HasColumnName("ptas_taxpayer_housenumberdetail");

                entity.Property(e => e.PtasTaxpayerStreetdetailPostfix).HasColumnName("ptas_taxpayer_streetdetail_postfix");

                entity.Property(e => e.PtasTaxpayerStreetdetailPrefix).HasColumnName("ptas_taxpayer_streetdetail_prefix");

                entity.Property(e => e.PtasTaxpayerStreetnameidValue).HasColumnName("_ptas_taxpayer_streetnameid_value");

                entity.Property(e => e.PtasTaxpayerStreettypeidValue).HasColumnName("_ptas_taxpayer_streettypeid_value");

                entity.Property(e => e.PtasTaxpayerWorkphone1).HasColumnName("ptas_taxpayer_workphone1");

                entity.Property(e => e.PtasTaxpayerWorkphone1ext).HasColumnName("ptas_taxpayer_workphone1ext");

                entity.Property(e => e.PtasTaxpayerWorkphone2).HasColumnName("ptas_taxpayer_workphone2");

                entity.Property(e => e.PtasTaxpayerWorkphone2ext).HasColumnName("ptas_taxpayer_workphone2ext");

                entity.Property(e => e.PtasTaxpayercountryidValue).HasColumnName("_ptas_taxpayercountryid_value");

                entity.Property(e => e.PtasTaxpayerispreparer).HasColumnName("ptas_taxpayerispreparer");

                entity.Property(e => e.PtasTaxpayername).HasColumnName("ptas_taxpayername");

                entity.Property(e => e.PtasUbi).HasColumnName("ptas_ubi");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_personalproperty_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_personalproperty_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_personalproperty_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_personalproperty_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasPersonalproperty)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_personalproperty_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_personalproperty_owninguser");

                entity.HasOne(d => d.PtasAccountcreatedbyidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyPtasAccountcreatedbyidValueNavigation)
                    .HasForeignKey(d => d.PtasAccountcreatedbyidValue)
                    .HasConstraintName("FK_systemuser_ptas_personalproperty_ptas_accountcreatedbyid");

                entity.HasOne(d => d.PtasAccountmanageridValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyPtasAccountmanageridValueNavigation)
                    .HasForeignKey(d => d.PtasAccountmanageridValue)
                    .HasConstraintName("FK_systemuser_ptas_personalproperty_ptas_accountmanagerid");

                entity.HasOne(d => d.PtasAddr1BusinessCityidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyPtasAddr1BusinessCityidValueNavigation)
                    .HasForeignKey(d => d.PtasAddr1BusinessCityidValue)
                    .HasConstraintName("FK_ptas_city_ptas_personalproperty_ptas_addr1_business_cityid");

                entity.HasOne(d => d.PtasAddr1BusinessStateidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyPtasAddr1BusinessStateidValueNavigation)
                    .HasForeignKey(d => d.PtasAddr1BusinessStateidValue)
                    .HasConstraintName("FK_ptas_stateorprovince_ptas_personalproperty_ptas_addr1_business_stateid");

                entity.HasOne(d => d.PtasAddr1BusinessZipcodeidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyPtasAddr1BusinessZipcodeidValueNavigation)
                    .HasForeignKey(d => d.PtasAddr1BusinessZipcodeidValue)
                    .HasConstraintName("FK_ptas_zipcode_ptas_personalproperty_ptas_addr1_business_zipcodeid");

                entity.HasOne(d => d.PtasAddr1PreparerCityidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyPtasAddr1PreparerCityidValueNavigation)
                    .HasForeignKey(d => d.PtasAddr1PreparerCityidValue)
                    .HasConstraintName("FK_ptas_city_ptas_personalproperty_ptas_addr1_preparer_cityid");

                entity.HasOne(d => d.PtasAddr1PreparerStateidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyPtasAddr1PreparerStateidValueNavigation)
                    .HasForeignKey(d => d.PtasAddr1PreparerStateidValue)
                    .HasConstraintName("FK_ptas_stateorprovince_ptas_personalproperty_ptas_addr1_preparer_stateid");

                entity.HasOne(d => d.PtasAddr1PreparerZipcodeidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyPtasAddr1PreparerZipcodeidValueNavigation)
                    .HasForeignKey(d => d.PtasAddr1PreparerZipcodeidValue)
                    .HasConstraintName("FK_ptas_zipcode_ptas_personalproperty_ptas_addr1_preparer_zipcodeid");

                entity.HasOne(d => d.PtasAddr1TaxpayerCityidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyPtasAddr1TaxpayerCityidValueNavigation)
                    .HasForeignKey(d => d.PtasAddr1TaxpayerCityidValue)
                    .HasConstraintName("FK_ptas_city_ptas_personalproperty_ptas_addr1_taxpayer_cityid");

                entity.HasOne(d => d.PtasAddr1TaxpayerStateidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyPtasAddr1TaxpayerStateidValueNavigation)
                    .HasForeignKey(d => d.PtasAddr1TaxpayerStateidValue)
                    .HasConstraintName("FK_ptas_stateorprovince_ptas_personalproperty_ptas_addr1_taxpayer_stateid");

                entity.HasOne(d => d.PtasAddr1TaxpayerZipcodeidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyPtasAddr1TaxpayerZipcodeidValueNavigation)
                    .HasForeignKey(d => d.PtasAddr1TaxpayerZipcodeidValue)
                    .HasConstraintName("FK_ptas_zipcode_ptas_personalproperty_ptas_addr1_taxpayer_zipcodeid");

                entity.HasOne(d => d.PtasAuditedbyidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyPtasAuditedbyidValueNavigation)
                    .HasForeignKey(d => d.PtasAuditedbyidValue)
                    .HasConstraintName("FK_systemuser_ptas_personalproperty_ptas_auditedbyid");

                entity.HasOne(d => d.PtasBusinessStreetnameidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyPtasBusinessStreetnameidValueNavigation)
                    .HasForeignKey(d => d.PtasBusinessStreetnameidValue)
                    .HasConstraintName("FK_ptas_streetname_ptas_personalproperty_ptas_business_streetnameid");

                entity.HasOne(d => d.PtasBusinessStreettypeidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyPtasBusinessStreettypeidValueNavigation)
                    .HasForeignKey(d => d.PtasBusinessStreettypeidValue)
                    .HasConstraintName("FK_ptas_streettype_ptas_personalproperty_ptas_business_streettypeid");

                entity.HasOne(d => d.PtasCreatedondateyearidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyPtasCreatedondateyearidValueNavigation)
                    .HasForeignKey(d => d.PtasCreatedondateyearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_personalproperty_ptas_createdondateyearid");

                entity.HasOne(d => d.PtasDiscoveredbyidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyPtasDiscoveredbyidValueNavigation)
                    .HasForeignKey(d => d.PtasDiscoveredbyidValue)
                    .HasConstraintName("FK_systemuser_ptas_personalproperty_ptas_discoveredbyid");

                entity.HasOne(d => d.PtasDiscoveryauditbyidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyPtasDiscoveryauditbyidValueNavigation)
                    .HasForeignKey(d => d.PtasDiscoveryauditbyidValue)
                    .HasConstraintName("FK_systemuser_ptas_personalproperty_ptas_discoveryauditbyid");

                entity.HasOne(d => d.PtasDiscoverydateyearidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyPtasDiscoverydateyearidValueNavigation)
                    .HasForeignKey(d => d.PtasDiscoverydateyearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_personalproperty_ptas_discoverydateyearid");

                entity.HasOne(d => d.PtasLevycodeidValueNavigation)
                    .WithMany(p => p.PtasPersonalproperty)
                    .HasForeignKey(d => d.PtasLevycodeidValue)
                    .HasConstraintName("FK_ptas_levycode_ptas_personalproperty_ptas_levycodeid");

                entity.HasOne(d => d.PtasMasterpersonalpropertyidValueNavigation)
                    .WithMany(p => p.InversePtasMasterpersonalpropertyidValueNavigation)
                    .HasForeignKey(d => d.PtasMasterpersonalpropertyidValue)
                    .HasConstraintName("FK_ptas_personalproperty_ptas_personalproperty_ptas_masterpersonalpropertyid");

                entity.HasOne(d => d.PtasNaicscodeidValueNavigation)
                    .WithMany(p => p.PtasPersonalproperty)
                    .HasForeignKey(d => d.PtasNaicscodeidValue)
                    .HasConstraintName("FK_ptas_naicscode_ptas_personalproperty_ptas_naicscodeid");

                entity.HasOne(d => d.PtasParcelidValueNavigation)
                    .WithMany(p => p.PtasPersonalproperty)
                    .HasForeignKey(d => d.PtasParcelidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_personalproperty_ptas_parcelid");

                entity.HasOne(d => d.PtasParentaccountidValueNavigation)
                    .WithMany(p => p.InversePtasParentaccountidValueNavigation)
                    .HasForeignKey(d => d.PtasParentaccountidValue)
                    .HasConstraintName("FK_ptas_personalproperty_ptas_personalproperty_ptas_parentaccountid");

                entity.HasOne(d => d.PtasPreparerStreetnameidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyPtasPreparerStreetnameidValueNavigation)
                    .HasForeignKey(d => d.PtasPreparerStreetnameidValue)
                    .HasConstraintName("FK_ptas_streetname_ptas_personalproperty_ptas_preparer_streetnameid");

                entity.HasOne(d => d.PtasPreparerStreettypeidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyPtasPreparerStreettypeidValueNavigation)
                    .HasForeignKey(d => d.PtasPreparerStreettypeidValue)
                    .HasConstraintName("FK_ptas_streettype_ptas_personalproperty_ptas_preparer_streettypeid");

                entity.HasOne(d => d.PtasPreparercountryidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyPtasPreparercountryidValueNavigation)
                    .HasForeignKey(d => d.PtasPreparercountryidValue)
                    .HasConstraintName("FK_ptas_country_ptas_personalproperty_ptas_preparercountryid");

                entity.HasOne(d => d.PtasStateincorporatedidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyPtasStateincorporatedidValueNavigation)
                    .HasForeignKey(d => d.PtasStateincorporatedidValue)
                    .HasConstraintName("FK_ptas_stateorprovince_ptas_personalproperty_ptas_stateincorporatedid");

                entity.HasOne(d => d.PtasTaxaccountidValueNavigation)
                    .WithMany(p => p.PtasPersonalproperty)
                    .HasForeignKey(d => d.PtasTaxaccountidValue)
                    .HasConstraintName("FK_ptas_taxaccount_ptas_personalproperty_ptas_taxaccountid");

                entity.HasOne(d => d.PtasTaxpayerStreetnameidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyPtasTaxpayerStreetnameidValueNavigation)
                    .HasForeignKey(d => d.PtasTaxpayerStreetnameidValue)
                    .HasConstraintName("FK_ptas_streetname_ptas_personalproperty_ptas_taxpayer_streetnameid");

                entity.HasOne(d => d.PtasTaxpayerStreettypeidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyPtasTaxpayerStreettypeidValueNavigation)
                    .HasForeignKey(d => d.PtasTaxpayerStreettypeidValue)
                    .HasConstraintName("FK_ptas_streettype_ptas_personalproperty_ptas_taxpayer_streettypeid");

                entity.HasOne(d => d.PtasTaxpayercountryidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyPtasTaxpayercountryidValueNavigation)
                    .HasForeignKey(d => d.PtasTaxpayercountryidValue)
                    .HasConstraintName("FK_ptas_country_ptas_personalproperty_ptas_taxpayercountryid");
            });

            modelBuilder.Entity<PtasPersonalpropertyaccountaccess>(entity =>
            {
                entity.ToTable("ptas_personalpropertyaccountaccess", "dynamics");

                entity.Property(e => e.PtasPersonalpropertyaccountaccessid)
                    .HasColumnName("ptas_personalpropertyaccountaccessid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAccesslevel).HasColumnName("ptas_accesslevel");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasPersonalpropertyaccountidValue).HasColumnName("_ptas_personalpropertyaccountid_value");

                entity.Property(e => e.PtasPortalcontactidValue).HasColumnName("_ptas_portalcontactid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasPersonalpropertyaccountstatus>(entity =>
            {
                entity.ToTable("ptas_personalpropertyaccountstatus", "dynamics");

                entity.Property(e => e.PtasPersonalpropertyaccountstatusid)
                    .HasColumnName("ptas_personalpropertyaccountstatusid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasAbbreviation).HasColumnName("ptas_abbreviation");

                entity.Property(e => e.PtasItemid).HasColumnName("ptas_itemid");

                entity.Property(e => e.PtasLongdescription).HasColumnName("ptas_longdescription");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasTypeid).HasColumnName("ptas_typeid");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasPersonalpropertyasset>(entity =>
            {
                entity.ToTable("ptas_personalpropertyasset", "dynamics");

                entity.Property(e => e.PtasPersonalpropertyassetid)
                    .HasColumnName("ptas_personalpropertyassetid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAlternatekey).HasColumnName("ptas_alternatekey");

                entity.Property(e => e.PtasAlternatekeyint).HasColumnName("ptas_alternatekeyint");

                entity.Property(e => e.PtasAssessedvalue)
                    .HasColumnName("ptas_assessedvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAssessedvalueBase)
                    .HasColumnName("ptas_assessedvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAssettype).HasColumnName("ptas_assettype");

                entity.Property(e => e.PtasAvoverride).HasColumnName("ptas_avoverride");

                entity.Property(e => e.PtasCategorycode).HasColumnName("ptas_categorycode");

                entity.Property(e => e.PtasCategorycodeidValue).HasColumnName("_ptas_categorycodeid_value");

                entity.Property(e => e.PtasChangereason).HasColumnName("ptas_changereason");

                entity.Property(e => e.PtasCurrentcost)
                    .HasColumnName("ptas_currentcost")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrentcostBase)
                    .HasColumnName("ptas_currentcost_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDepreciationstartyearidValue).HasColumnName("_ptas_depreciationstartyearid_value");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasKeyapplunitid).HasColumnName("ptas_keyapplunitid");

                entity.Property(e => e.PtasKeyassetguid).HasColumnName("ptas_keyassetguid");

                entity.Property(e => e.PtasKeyimpid).HasColumnName("ptas_keyimpid");

                entity.Property(e => e.PtasKeypropid).HasColumnName("ptas_keypropid");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasMasterpersonalpropertyassetidValue).HasColumnName("_ptas_masterpersonalpropertyassetid_value");

                entity.Property(e => e.PtasMatch).HasColumnName("ptas_match");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasOmitidValue).HasColumnName("_ptas_omitid_value");

                entity.Property(e => e.PtasOriginalcost)
                    .HasColumnName("ptas_originalcost")
                    .HasColumnType("money");

                entity.Property(e => e.PtasOriginalcostBase)
                    .HasColumnName("ptas_originalcost_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPercent).HasColumnName("ptas_percent");

                entity.Property(e => e.PtasPersonalpropertyidValue).HasColumnName("_ptas_personalpropertyid_value");

                entity.Property(e => e.PtasPersonalpropertylistingidValue).HasColumnName("_ptas_personalpropertylistingid_value");

                entity.Property(e => e.PtasPerspropcategory).HasColumnName("ptas_perspropcategory");

                entity.Property(e => e.PtasPpassessmenthistoryidValue).HasColumnName("_ptas_ppassessmenthistoryid_value");

                entity.Property(e => e.PtasReportedcost)
                    .HasColumnName("ptas_reportedcost")
                    .HasColumnType("money");

                entity.Property(e => e.PtasReportedcostBase)
                    .HasColumnName("ptas_reportedcost_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRevisedcost)
                    .HasColumnName("ptas_revisedcost")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRevisedcostBase)
                    .HasColumnName("ptas_revisedcost_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRevisedunits).HasColumnName("ptas_revisedunits");

                entity.Property(e => e.PtasSnapshotdatetime).HasColumnName("ptas_snapshotdatetime");

                entity.Property(e => e.PtasSnapshottype).HasColumnName("ptas_snapshottype");

                entity.Property(e => e.PtasUnits).HasColumnName("ptas_units");

                entity.Property(e => e.PtasYearacquiredidValue).HasColumnName("_ptas_yearacquiredid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyassetCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_personalpropertyasset_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyassetCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_personalpropertyasset_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyassetModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_personalpropertyasset_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyassetModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_personalpropertyasset_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyasset)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_personalpropertyasset_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyassetOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_personalpropertyasset_owninguser");

                entity.HasOne(d => d.PtasCategorycodeidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyasset)
                    .HasForeignKey(d => d.PtasCategorycodeidValue)
                    .HasConstraintName("FK_ptas_personalpropertycategory_ptas_personalpropertyasset_ptas_categorycodeid");

                entity.HasOne(d => d.PtasDepreciationstartyearidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyassetPtasDepreciationstartyearidValueNavigation)
                    .HasForeignKey(d => d.PtasDepreciationstartyearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_personalpropertyasset_ptas_depreciationstartyearid");

                entity.HasOne(d => d.PtasMasterpersonalpropertyassetidValueNavigation)
                    .WithMany(p => p.InversePtasMasterpersonalpropertyassetidValueNavigation)
                    .HasForeignKey(d => d.PtasMasterpersonalpropertyassetidValue)
                    .HasConstraintName("FK_ptas_personalpropertyasset_ptas_personalpropertyasset_ptas_masterpersonalpropertyassetid");

                entity.HasOne(d => d.PtasOmitidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyasset)
                    .HasForeignKey(d => d.PtasOmitidValue)
                    .HasConstraintName("FK_ptas_omit_ptas_personalpropertyasset_ptas_omitid");

                entity.HasOne(d => d.PtasPersonalpropertyidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyasset)
                    .HasForeignKey(d => d.PtasPersonalpropertyidValue)
                    .HasConstraintName("FK_ptas_personalproperty_ptas_personalpropertyasset_ptas_personalpropertyid");

                entity.HasOne(d => d.PtasPersonalpropertylistingidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyasset)
                    .HasForeignKey(d => d.PtasPersonalpropertylistingidValue)
                    .HasConstraintName("FK_ptas_personalpropertylisting_ptas_personalpropertyasset_ptas_personalpropertylistingid");

                entity.HasOne(d => d.PtasPpassessmenthistoryidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyasset)
                    .HasForeignKey(d => d.PtasPpassessmenthistoryidValue)
                    .HasConstraintName("FK_ptas_personalpropertyhistory_ptas_personalpropertyasset_ptas_ppassessmenthistoryid");

                entity.HasOne(d => d.PtasYearacquiredidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyassetPtasYearacquiredidValueNavigation)
                    .HasForeignKey(d => d.PtasYearacquiredidValue)
                    .HasConstraintName("FK_ptas_year_ptas_personalpropertyasset_ptas_yearacquiredid");
            });

            modelBuilder.Entity<PtasPersonalpropertycategory>(entity =>
            {
                entity.ToTable("ptas_personalpropertycategory", "dynamics");

                entity.Property(e => e.PtasPersonalpropertycategoryid)
                    .HasColumnName("ptas_personalpropertycategoryid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAssessmentyearidValue).HasColumnName("_ptas_assessmentyearid_value");

                entity.Property(e => e.PtasCategorycode).HasColumnName("ptas_categorycode");

                entity.Property(e => e.PtasCategorygroup).HasColumnName("ptas_categorygroup");

                entity.Property(e => e.PtasCategorygrouph).HasColumnName("ptas_categorygrouph");

                entity.Property(e => e.PtasCostafteroneyear)
                    .HasColumnName("ptas_costafteroneyear")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCostafteroneyearBase)
                    .HasColumnName("ptas_costafteroneyear_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCostaftertwoyears)
                    .HasColumnName("ptas_costaftertwoyears")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCostaftertwoyearsBase)
                    .HasColumnName("ptas_costaftertwoyears_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDepreciationrate)
                    .HasColumnName("ptas_depreciationrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasExamples).HasColumnName("ptas_examples");

                entity.Property(e => e.PtasLegacycategorycode).HasColumnName("ptas_legacycategorycode");

                entity.Property(e => e.PtasMinpercentgoodfactor)
                    .HasColumnName("ptas_minpercentgoodfactor")
                    .HasColumnType("money");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasPerspropcategory).HasColumnName("ptas_perspropcategory");

                entity.Property(e => e.PtasTrendtable).HasColumnName("ptas_trendtable");

                entity.Property(e => e.PtasYearacquiredcost)
                    .HasColumnName("ptas_yearacquiredcost")
                    .HasColumnType("money");

                entity.Property(e => e.PtasYearacquiredcostBase)
                    .HasColumnName("ptas_yearacquiredcost_base")
                    .HasColumnType("money");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertycategoryCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_personalpropertycategory_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertycategoryCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_personalpropertycategory_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertycategoryModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_personalpropertycategory_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertycategoryModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_personalpropertycategory_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertycategory)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_personalpropertycategory_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertycategoryOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_personalpropertycategory_owninguser");

                entity.HasOne(d => d.PtasAssessmentyearidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertycategory)
                    .HasForeignKey(d => d.PtasAssessmentyearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_personalpropertycategory_ptas_assessmentyearid");
            });

            modelBuilder.Entity<PtasPersonalpropertyhistory>(entity =>
            {
                entity.ToTable("ptas_personalpropertyhistory", "dynamics");

                entity.Property(e => e.PtasPersonalpropertyhistoryid)
                    .HasColumnName("ptas_personalpropertyhistoryid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAccountmanageruseridValue).HasColumnName("_ptas_accountmanageruserid_value");

                entity.Property(e => e.PtasAccountnumber).HasColumnName("ptas_accountnumber");

                entity.Property(e => e.PtasAccountstatus).HasColumnName("ptas_accountstatus");

                entity.Property(e => e.PtasAccountstatusupdatedon).HasColumnName("ptas_accountstatusupdatedon");

                entity.Property(e => e.PtasAlternatekeyint).HasColumnName("ptas_alternatekeyint");

                entity.Property(e => e.PtasAlternatekeystr).HasColumnName("ptas_alternatekeystr");

                entity.Property(e => e.PtasAppealauditstatus).HasColumnName("ptas_appealauditstatus");

                entity.Property(e => e.PtasAssessmentrollcorrection).HasColumnName("ptas_assessmentrollcorrection");

                entity.Property(e => e.PtasAttention).HasColumnName("ptas_attention");

                entity.Property(e => e.PtasAuditdate).HasColumnName("ptas_auditdate");

                entity.Property(e => e.PtasAuditedbyidValue).HasColumnName("_ptas_auditedbyid_value");

                entity.Property(e => e.PtasAuditedbyuseridValue).HasColumnName("_ptas_auditedbyuserid_value");

                entity.Property(e => e.PtasAuditeddate).HasColumnName("ptas_auditeddate");

                entity.Property(e => e.PtasAuditstatus).HasColumnName("ptas_auditstatus");

                entity.Property(e => e.PtasAutovalue).HasColumnName("ptas_autovalue");

                entity.Property(e => e.PtasBusinessCompositeaddress).HasColumnName("ptas_business_compositeaddress");

                entity.Property(e => e.PtasBusinessCompositeaddressOneline).HasColumnName("ptas_business_compositeaddress_oneline");

                entity.Property(e => e.PtasBusinessStreetdetailPostfix).HasColumnName("ptas_business_streetdetail_postfix");

                entity.Property(e => e.PtasBusinessStreetdetailPrefix).HasColumnName("ptas_business_streetdetail_prefix");

                entity.Property(e => e.PtasBusinessStreetnameidValue).HasColumnName("_ptas_business_streetnameid_value");

                entity.Property(e => e.PtasBusinessStreettypeidValue).HasColumnName("_ptas_business_streettypeid_value");

                entity.Property(e => e.PtasBusinesscityidValue).HasColumnName("_ptas_businesscityid_value");

                entity.Property(e => e.PtasBusinessdescription).HasColumnName("ptas_businessdescription");

                entity.Property(e => e.PtasBusinesshousenumber).HasColumnName("ptas_businesshousenumber");

                entity.Property(e => e.PtasBusinesshousenumberdetail).HasColumnName("ptas_businesshousenumberdetail");

                entity.Property(e => e.PtasBusinesslegalentity).HasColumnName("ptas_businesslegalentity");

                entity.Property(e => e.PtasBusinesslitigationpending).HasColumnName("ptas_businesslitigationpending");

                entity.Property(e => e.PtasBusinessnaicscodeidValue).HasColumnName("_ptas_businessnaicscodeid_value");

                entity.Property(e => e.PtasBusinessname).HasColumnName("ptas_businessname");

                entity.Property(e => e.PtasBusinessnameapt).HasColumnName("ptas_businessnameapt");

                entity.Property(e => e.PtasBusinessquicknotes).HasColumnName("ptas_businessquicknotes");

                entity.Property(e => e.PtasBusinessstateincorporatedValue).HasColumnName("_ptas_businessstateincorporated_value");

                entity.Property(e => e.PtasBusinessubi).HasColumnName("ptas_businessubi");

                entity.Property(e => e.PtasBusinesszipidValue).HasColumnName("_ptas_businesszipid_value");

                entity.Property(e => e.PtasBypassminimumav).HasColumnName("ptas_bypassminimumav");

                entity.Property(e => e.PtasCalcsupplies).HasColumnName("ptas_calcsupplies");

                entity.Property(e => e.PtasDiscovered).HasColumnName("ptas_discovered");

                entity.Property(e => e.PtasDiscoveredbyValue).HasColumnName("_ptas_discoveredby_value");

                entity.Property(e => e.PtasDiscoveredbyidValue).HasColumnName("_ptas_discoveredbyid_value");

                entity.Property(e => e.PtasDiscovereddate).HasColumnName("ptas_discovereddate");

                entity.Property(e => e.PtasDiscoverydate).HasColumnName("ptas_discoverydate");

                entity.Property(e => e.PtasEditedav)
                    .HasColumnName("ptas_editedav")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEditedavBase)
                    .HasColumnName("ptas_editedav_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEditedavsupplies)
                    .HasColumnName("ptas_editedavsupplies")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEditedavsuppliesBase)
                    .HasColumnName("ptas_editedavsupplies_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEditedcost)
                    .HasColumnName("ptas_editedcost")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEditedcostBase)
                    .HasColumnName("ptas_editedcost_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEditedsupplies)
                    .HasColumnName("ptas_editedsupplies")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEditedsuppliesBase)
                    .HasColumnName("ptas_editedsupplies_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFarmexemption).HasColumnName("ptas_farmexemption");

                entity.Property(e => e.PtasFieldaudit).HasColumnName("ptas_fieldaudit");

                entity.Property(e => e.PtasFilingdate).HasColumnName("ptas_filingdate");

                entity.Property(e => e.PtasFilingmethod).HasColumnName("ptas_filingmethod");

                entity.Property(e => e.PtasFilingrecevied).HasColumnName("ptas_filingrecevied");

                entity.Property(e => e.PtasHof).HasColumnName("ptas_hof");

                entity.Property(e => e.PtasHousenumber).HasColumnName("ptas_housenumber");

                entity.Property(e => e.PtasInhouseauditstatus).HasColumnName("ptas_inhouseauditstatus");

                entity.Property(e => e.PtasLegacyhistid).HasColumnName("ptas_legacyhistid");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasLevycodeidValue).HasColumnName("_ptas_levycodeid_value");

                entity.Property(e => e.PtasLevyrate)
                    .HasColumnName("ptas_levyrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasNaicsdescription).HasColumnName("ptas_naicsdescription");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNonprofit).HasColumnName("ptas_nonprofit");

                entity.Property(e => e.PtasOriginalppassessmenthistoryidValue).HasColumnName("_ptas_originalppassessmenthistoryid_value");

                entity.Property(e => e.PtasParcelidValue).HasColumnName("_ptas_parcelid_value");

                entity.Property(e => e.PtasParentpersonalpropertyidValue).HasColumnName("_ptas_parentpersonalpropertyid_value");

                entity.Property(e => e.PtasPenalty).HasColumnName("ptas_penalty");

                entity.Property(e => e.PtasPersonalpropertyidValue).HasColumnName("_ptas_personalpropertyid_value");

                entity.Property(e => e.PtasPosted).HasColumnName("ptas_posted");

                entity.Property(e => e.PtasPostedav)
                    .HasColumnName("ptas_postedav")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPostedavBase)
                    .HasColumnName("ptas_postedav_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPostedavsupplies)
                    .HasColumnName("ptas_postedavsupplies")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPostedavsuppliesBase)
                    .HasColumnName("ptas_postedavsupplies_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPostedcost)
                    .HasColumnName("ptas_postedcost")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPostedcostBase)
                    .HasColumnName("ptas_postedcost_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPostedsupplies)
                    .HasColumnName("ptas_postedsupplies")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPostedsuppliesBase)
                    .HasColumnName("ptas_postedsupplies_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPreparerCompositeaddress).HasColumnName("ptas_preparer_compositeaddress");

                entity.Property(e => e.PtasPreparerCompositeaddressOneline).HasColumnName("ptas_preparer_compositeaddress_oneline");

                entity.Property(e => e.PtasPreparerStreetdetailPostfix).HasColumnName("ptas_preparer_streetdetail_postfix");

                entity.Property(e => e.PtasPreparerStreetdetailPrefix).HasColumnName("ptas_preparer_streetdetail_prefix");

                entity.Property(e => e.PtasPreparerStreetnameidValue).HasColumnName("_ptas_preparer_streetnameid_value");

                entity.Property(e => e.PtasPreparerStreettypeidValue).HasColumnName("_ptas_preparer_streettypeid_value");

                entity.Property(e => e.PtasPreparerapt).HasColumnName("ptas_preparerapt");

                entity.Property(e => e.PtasPreparerattention).HasColumnName("ptas_preparerattention");

                entity.Property(e => e.PtasPreparercellphone1).HasColumnName("ptas_preparercellphone1");

                entity.Property(e => e.PtasPreparercellphone2).HasColumnName("ptas_preparercellphone2");

                entity.Property(e => e.PtasPreparercityidValue).HasColumnName("_ptas_preparercityid_value");

                entity.Property(e => e.PtasPreparercountryidValue).HasColumnName("_ptas_preparercountryid_value");

                entity.Property(e => e.PtasPrepareremail1).HasColumnName("ptas_prepareremail1");

                entity.Property(e => e.PtasPrepareremail2).HasColumnName("ptas_prepareremail2");

                entity.Property(e => e.PtasPrepareremail3).HasColumnName("ptas_prepareremail3");

                entity.Property(e => e.PtasPrepareremail4).HasColumnName("ptas_prepareremail4");

                entity.Property(e => e.PtasPrepareremail5).HasColumnName("ptas_prepareremail5");

                entity.Property(e => e.PtasPreparerfax).HasColumnName("ptas_preparerfax");

                entity.Property(e => e.PtasPreparerhousenumber).HasColumnName("ptas_preparerhousenumber");

                entity.Property(e => e.PtasPreparerhousenumberdetail).HasColumnName("ptas_preparerhousenumberdetail");

                entity.Property(e => e.PtasPreparername).HasColumnName("ptas_preparername");

                entity.Property(e => e.PtasPreparerstateidValue).HasColumnName("_ptas_preparerstateid_value");

                entity.Property(e => e.PtasPreparerworkphone1).HasColumnName("ptas_preparerworkphone1");

                entity.Property(e => e.PtasPreparerworkphone1ext).HasColumnName("ptas_preparerworkphone1ext");

                entity.Property(e => e.PtasPreparerworkphone2).HasColumnName("ptas_preparerworkphone2");

                entity.Property(e => e.PtasPreparerworkphone2ext).HasColumnName("ptas_preparerworkphone2ext");

                entity.Property(e => e.PtasPreparerzipidValue).HasColumnName("_ptas_preparerzipid_value");

                entity.Property(e => e.PtasPrioryearav)
                    .HasColumnName("ptas_prioryearav")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPrioryearavBase)
                    .HasColumnName("ptas_prioryearav_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPrioryearavsupplies)
                    .HasColumnName("ptas_prioryearavsupplies")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPrioryearavsuppliesBase)
                    .HasColumnName("ptas_prioryearavsupplies_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPrioryearcost)
                    .HasColumnName("ptas_prioryearcost")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPrioryearcostBase)
                    .HasColumnName("ptas_prioryearcost_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPrioryearsupplies)
                    .HasColumnName("ptas_prioryearsupplies")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPrioryearsuppliesBase)
                    .HasColumnName("ptas_prioryearsupplies_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasProcessstatus).HasColumnName("ptas_processstatus");

                entity.Property(e => e.PtasProcessstatusupdatedon).HasColumnName("ptas_processstatusupdatedon");

                entity.Property(e => e.PtasPropertyType).HasColumnName("ptas_property_type");

                entity.Property(e => e.PtasQuickcollectidValue).HasColumnName("_ptas_quickcollectid_value");

                entity.Property(e => e.PtasTaxaccountidValue).HasColumnName("_ptas_taxaccountid_value");

                entity.Property(e => e.PtasTaxpayerCompositeaddress).HasColumnName("ptas_taxpayer_compositeaddress");

                entity.Property(e => e.PtasTaxpayerCompositeaddressOneline).HasColumnName("ptas_taxpayer_compositeaddress_oneline");

                entity.Property(e => e.PtasTaxpayerStreetdetailPostfix).HasColumnName("ptas_taxpayer_streetdetail_postfix");

                entity.Property(e => e.PtasTaxpayerStreetdetailPrefix).HasColumnName("ptas_taxpayer_streetdetail_prefix");

                entity.Property(e => e.PtasTaxpayerStreetnameidValue).HasColumnName("_ptas_taxpayer_streetnameid_value");

                entity.Property(e => e.PtasTaxpayerStreettypeidValue).HasColumnName("_ptas_taxpayer_streettypeid_value");

                entity.Property(e => e.PtasTaxpayeraccountnumber).HasColumnName("ptas_taxpayeraccountnumber");

                entity.Property(e => e.PtasTaxpayerapt).HasColumnName("ptas_taxpayerapt");

                entity.Property(e => e.PtasTaxpayerattention).HasColumnName("ptas_taxpayerattention");

                entity.Property(e => e.PtasTaxpayercellphone1).HasColumnName("ptas_taxpayercellphone1");

                entity.Property(e => e.PtasTaxpayercellphone2).HasColumnName("ptas_taxpayercellphone2");

                entity.Property(e => e.PtasTaxpayercityidValue).HasColumnName("_ptas_taxpayercityid_value");

                entity.Property(e => e.PtasTaxpayercountryidValue).HasColumnName("_ptas_taxpayercountryid_value");

                entity.Property(e => e.PtasTaxpayeremail1).HasColumnName("ptas_taxpayeremail1");

                entity.Property(e => e.PtasTaxpayeremail2).HasColumnName("ptas_taxpayeremail2");

                entity.Property(e => e.PtasTaxpayeremail3).HasColumnName("ptas_taxpayeremail3");

                entity.Property(e => e.PtasTaxpayeremail4).HasColumnName("ptas_taxpayeremail4");

                entity.Property(e => e.PtasTaxpayeremail5).HasColumnName("ptas_taxpayeremail5");

                entity.Property(e => e.PtasTaxpayerfax).HasColumnName("ptas_taxpayerfax");

                entity.Property(e => e.PtasTaxpayerhousenumber).HasColumnName("ptas_taxpayerhousenumber");

                entity.Property(e => e.PtasTaxpayerhousenumberdetail).HasColumnName("ptas_taxpayerhousenumberdetail");

                entity.Property(e => e.PtasTaxpayerstateidValue).HasColumnName("_ptas_taxpayerstateid_value");

                entity.Property(e => e.PtasTaxpayerworkphone1).HasColumnName("ptas_taxpayerworkphone1");

                entity.Property(e => e.PtasTaxpayerworkphone1ext).HasColumnName("ptas_taxpayerworkphone1ext");

                entity.Property(e => e.PtasTaxpayerworkphone2).HasColumnName("ptas_taxpayerworkphone2");

                entity.Property(e => e.PtasTaxpayerworkphone2ext).HasColumnName("ptas_taxpayerworkphone2ext");

                entity.Property(e => e.PtasTaxpayerzipidValue).HasColumnName("_ptas_taxpayerzipid_value");

                entity.Property(e => e.PtasValidtopost).HasColumnName("ptas_validtopost");

                entity.Property(e => e.PtasYearidValue).HasColumnName("_ptas_yearid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyhistoryCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_personalpropertyhistory_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyhistoryCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_personalpropertyhistory_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyhistoryModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_personalpropertyhistory_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyhistoryModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_personalpropertyhistory_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyhistory)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_personalpropertyhistory_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyhistoryOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_personalpropertyhistory_owninguser");

                entity.HasOne(d => d.PtasAccountmanageruseridValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyhistoryPtasAccountmanageruseridValueNavigation)
                    .HasForeignKey(d => d.PtasAccountmanageruseridValue)
                    .HasConstraintName("FK_systemuser_ptas_personalpropertyhistory_ptas_accountmanageruserid");

                entity.HasOne(d => d.PtasAuditedbyidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyhistoryPtasAuditedbyidValueNavigation)
                    .HasForeignKey(d => d.PtasAuditedbyidValue)
                    .HasConstraintName("FK_systemuser_ptas_personalpropertyhistory_ptas_auditedbyid");

                entity.HasOne(d => d.PtasAuditedbyuseridValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyhistoryPtasAuditedbyuseridValueNavigation)
                    .HasForeignKey(d => d.PtasAuditedbyuseridValue)
                    .HasConstraintName("FK_systemuser_ptas_personalpropertyhistory_ptas_auditedbyuserid");

                entity.HasOne(d => d.PtasBusinessStreetnameidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyhistoryPtasBusinessStreetnameidValueNavigation)
                    .HasForeignKey(d => d.PtasBusinessStreetnameidValue)
                    .HasConstraintName("FK_ptas_streetname_ptas_personalpropertyhistory_ptas_business_streetnameid");

                entity.HasOne(d => d.PtasBusinessStreettypeidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyhistoryPtasBusinessStreettypeidValueNavigation)
                    .HasForeignKey(d => d.PtasBusinessStreettypeidValue)
                    .HasConstraintName("FK_ptas_streettype_ptas_personalpropertyhistory_ptas_business_streettypeid");

                entity.HasOne(d => d.PtasBusinesscityidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyhistoryPtasBusinesscityidValueNavigation)
                    .HasForeignKey(d => d.PtasBusinesscityidValue)
                    .HasConstraintName("FK_ptas_city_ptas_personalpropertyhistory_ptas_businesscityid");

                entity.HasOne(d => d.PtasBusinessnaicscodeidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyhistory)
                    .HasForeignKey(d => d.PtasBusinessnaicscodeidValue)
                    .HasConstraintName("FK_ptas_naicscode_ptas_personalpropertyhistory_ptas_businessnaicscodeid");

                entity.HasOne(d => d.PtasBusinessstateincorporatedValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyhistoryPtasBusinessstateincorporatedValueNavigation)
                    .HasForeignKey(d => d.PtasBusinessstateincorporatedValue)
                    .HasConstraintName("FK_ptas_stateorprovince_ptas_personalpropertyhistory_ptas_businessstateincorporated");

                entity.HasOne(d => d.PtasBusinesszipidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyhistoryPtasBusinesszipidValueNavigation)
                    .HasForeignKey(d => d.PtasBusinesszipidValue)
                    .HasConstraintName("FK_ptas_zipcode_ptas_personalpropertyhistory_ptas_businesszipid");

                entity.HasOne(d => d.PtasDiscoveredbyValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyhistoryPtasDiscoveredbyValueNavigation)
                    .HasForeignKey(d => d.PtasDiscoveredbyValue)
                    .HasConstraintName("FK_systemuser_ptas_personalpropertyhistory_ptas_discoveredby");

                entity.HasOne(d => d.PtasDiscoveredbyidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyhistoryPtasDiscoveredbyidValueNavigation)
                    .HasForeignKey(d => d.PtasDiscoveredbyidValue)
                    .HasConstraintName("FK_systemuser_ptas_personalpropertyhistory_ptas_discoveredbyid");

                entity.HasOne(d => d.PtasLevycodeidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyhistory)
                    .HasForeignKey(d => d.PtasLevycodeidValue)
                    .HasConstraintName("FK_ptas_levycode_ptas_personalpropertyhistory_ptas_levycodeid");

                entity.HasOne(d => d.PtasOriginalppassessmenthistoryidValueNavigation)
                    .WithMany(p => p.InversePtasOriginalppassessmenthistoryidValueNavigation)
                    .HasForeignKey(d => d.PtasOriginalppassessmenthistoryidValue)
                    .HasConstraintName("FK_ptas_personalpropertyhistory_ptas_personalpropertyhistory_ptas_originalppassessmenthistoryid");

                entity.HasOne(d => d.PtasParcelidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyhistory)
                    .HasForeignKey(d => d.PtasParcelidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_personalpropertyhistory_ptas_parcelid");

                entity.HasOne(d => d.PtasParentpersonalpropertyidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyhistoryPtasParentpersonalpropertyidValueNavigation)
                    .HasForeignKey(d => d.PtasParentpersonalpropertyidValue)
                    .HasConstraintName("FK_ptas_personalproperty_ptas_personalpropertyhistory_ptas_parentpersonalpropertyid");

                entity.HasOne(d => d.PtasPersonalpropertyidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyhistoryPtasPersonalpropertyidValueNavigation)
                    .HasForeignKey(d => d.PtasPersonalpropertyidValue)
                    .HasConstraintName("FK_ptas_personalproperty_ptas_personalpropertyhistory_ptas_personalpropertyid");

                entity.HasOne(d => d.PtasPreparerStreetnameidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyhistoryPtasPreparerStreetnameidValueNavigation)
                    .HasForeignKey(d => d.PtasPreparerStreetnameidValue)
                    .HasConstraintName("FK_ptas_streetname_ptas_personalpropertyhistory_ptas_preparer_streetnameid");

                entity.HasOne(d => d.PtasPreparerStreettypeidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyhistoryPtasPreparerStreettypeidValueNavigation)
                    .HasForeignKey(d => d.PtasPreparerStreettypeidValue)
                    .HasConstraintName("FK_ptas_streettype_ptas_personalpropertyhistory_ptas_preparer_streettypeid");

                entity.HasOne(d => d.PtasPreparercityidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyhistoryPtasPreparercityidValueNavigation)
                    .HasForeignKey(d => d.PtasPreparercityidValue)
                    .HasConstraintName("FK_ptas_city_ptas_personalpropertyhistory_ptas_preparercityid");

                entity.HasOne(d => d.PtasPreparercountryidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyhistoryPtasPreparercountryidValueNavigation)
                    .HasForeignKey(d => d.PtasPreparercountryidValue)
                    .HasConstraintName("FK_ptas_country_ptas_personalpropertyhistory_ptas_preparercountryid");

                entity.HasOne(d => d.PtasPreparerstateidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyhistoryPtasPreparerstateidValueNavigation)
                    .HasForeignKey(d => d.PtasPreparerstateidValue)
                    .HasConstraintName("FK_ptas_stateorprovince_ptas_personalpropertyhistory_ptas_preparerstateid");

                entity.HasOne(d => d.PtasPreparerzipidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyhistoryPtasPreparerzipidValueNavigation)
                    .HasForeignKey(d => d.PtasPreparerzipidValue)
                    .HasConstraintName("FK_ptas_zipcode_ptas_personalpropertyhistory_ptas_preparerzipid");

                entity.HasOne(d => d.PtasQuickcollectidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyhistory)
                    .HasForeignKey(d => d.PtasQuickcollectidValue)
                    .HasConstraintName("FK_ptas_quickcollect_ptas_personalpropertyhistory_ptas_quickcollectid");

                entity.HasOne(d => d.PtasTaxaccountidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyhistory)
                    .HasForeignKey(d => d.PtasTaxaccountidValue)
                    .HasConstraintName("FK_ptas_taxaccount_ptas_personalpropertyhistory_ptas_taxaccountid");

                entity.HasOne(d => d.PtasTaxpayerStreetnameidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyhistoryPtasTaxpayerStreetnameidValueNavigation)
                    .HasForeignKey(d => d.PtasTaxpayerStreetnameidValue)
                    .HasConstraintName("FK_ptas_streetname_ptas_personalpropertyhistory_ptas_taxpayer_streetnameid");

                entity.HasOne(d => d.PtasTaxpayerStreettypeidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyhistoryPtasTaxpayerStreettypeidValueNavigation)
                    .HasForeignKey(d => d.PtasTaxpayerStreettypeidValue)
                    .HasConstraintName("FK_ptas_streettype_ptas_personalpropertyhistory_ptas_taxpayer_streettypeid");

                entity.HasOne(d => d.PtasTaxpayercityidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyhistoryPtasTaxpayercityidValueNavigation)
                    .HasForeignKey(d => d.PtasTaxpayercityidValue)
                    .HasConstraintName("FK_ptas_city_ptas_personalpropertyhistory_ptas_taxpayercityid");

                entity.HasOne(d => d.PtasTaxpayercountryidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyhistoryPtasTaxpayercountryidValueNavigation)
                    .HasForeignKey(d => d.PtasTaxpayercountryidValue)
                    .HasConstraintName("FK_ptas_country_ptas_personalpropertyhistory_ptas_taxpayercountryid");

                entity.HasOne(d => d.PtasTaxpayerstateidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyhistoryPtasTaxpayerstateidValueNavigation)
                    .HasForeignKey(d => d.PtasTaxpayerstateidValue)
                    .HasConstraintName("FK_ptas_stateorprovince_ptas_personalpropertyhistory_ptas_taxpayerstateid");

                entity.HasOne(d => d.PtasTaxpayerzipidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyhistoryPtasTaxpayerzipidValueNavigation)
                    .HasForeignKey(d => d.PtasTaxpayerzipidValue)
                    .HasConstraintName("FK_ptas_zipcode_ptas_personalpropertyhistory_ptas_taxpayerzipid");

                entity.HasOne(d => d.PtasYearidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertyhistory)
                    .HasForeignKey(d => d.PtasYearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_personalpropertyhistory_ptas_yearid");
            });

            modelBuilder.Entity<PtasPersonalpropertylisting>(entity =>
            {
                entity.ToTable("ptas_personalpropertylisting", "dynamics");

                entity.Property(e => e.PtasPersonalpropertylistingid)
                    .HasColumnName("ptas_personalpropertylistingid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAutovalue).HasColumnName("ptas_autovalue");

                entity.Property(e => e.PtasBypassminimumav).HasColumnName("ptas_bypassminimumav");

                entity.Property(e => e.PtasEditedav)
                    .HasColumnName("ptas_editedav")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEditedavBase)
                    .HasColumnName("ptas_editedav_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEditedavsupplies)
                    .HasColumnName("ptas_editedavsupplies")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEditedavsuppliesBase)
                    .HasColumnName("ptas_editedavsupplies_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEditedcost)
                    .HasColumnName("ptas_editedcost")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEditedcostBase)
                    .HasColumnName("ptas_editedcost_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEditedsupplies)
                    .HasColumnName("ptas_editedsupplies")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEditedsuppliesBase)
                    .HasColumnName("ptas_editedsupplies_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasListingfiled).HasColumnName("ptas_listingfiled");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasPenalty).HasColumnName("ptas_penalty");

                entity.Property(e => e.PtasPosted).HasColumnName("ptas_posted");

                entity.Property(e => e.PtasPostedav)
                    .HasColumnName("ptas_postedav")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPostedavBase)
                    .HasColumnName("ptas_postedav_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPostedavsupplies)
                    .HasColumnName("ptas_postedavsupplies")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPostedavsuppliesBase)
                    .HasColumnName("ptas_postedavsupplies_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPostedcost)
                    .HasColumnName("ptas_postedcost")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPostedcostBase)
                    .HasColumnName("ptas_postedcost_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPostedsupplies)
                    .HasColumnName("ptas_postedsupplies")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPostedsuppliesBase)
                    .HasColumnName("ptas_postedsupplies_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPrioryearav)
                    .HasColumnName("ptas_prioryearav")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPrioryearavBase)
                    .HasColumnName("ptas_prioryearav_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPrioryearavsupplies)
                    .HasColumnName("ptas_prioryearavsupplies")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPrioryearavsuppliesBase)
                    .HasColumnName("ptas_prioryearavsupplies_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPrioryearcost)
                    .HasColumnName("ptas_prioryearcost")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPrioryearcostBase)
                    .HasColumnName("ptas_prioryearcost_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPrioryearsupplies)
                    .HasColumnName("ptas_prioryearsupplies")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPrioryearsuppliesBase)
                    .HasColumnName("ptas_prioryearsupplies_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRevisedlisting).HasColumnName("ptas_revisedlisting");

                entity.Property(e => e.PtasYearidValue).HasColumnName("_ptas_yearid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertylistingCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_personalpropertylisting_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertylistingCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_personalpropertylisting_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertylistingModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_personalpropertylisting_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertylistingModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_personalpropertylisting_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertylisting)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_personalpropertylisting_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertylistingOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_personalpropertylisting_owninguser");

                entity.HasOne(d => d.PtasYearidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertylisting)
                    .HasForeignKey(d => d.PtasYearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_personalpropertylisting_ptas_yearid");
            });

            modelBuilder.Entity<PtasPersonalpropertynote>(entity =>
            {
                entity.ToTable("ptas_personalpropertynote", "dynamics");

                entity.Property(e => e.PtasPersonalpropertynoteid)
                    .HasColumnName("ptas_personalpropertynoteid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNotetext).HasColumnName("ptas_notetext");

                entity.Property(e => e.PtasNotetype).HasColumnName("ptas_notetype");

                entity.Property(e => e.PtasPersonalpropertyidValue).HasColumnName("_ptas_personalpropertyid_value");

                entity.Property(e => e.PtasPintotop).HasColumnName("ptas_pintotop");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertynoteCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_personalpropertynote_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertynoteCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_personalpropertynote_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertynoteModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_personalpropertynote_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertynoteModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_personalpropertynote_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertynote)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_personalpropertynote_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertynoteOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_personalpropertynote_owninguser");

                entity.HasOne(d => d.PtasPersonalpropertyidValueNavigation)
                    .WithMany(p => p.PtasPersonalpropertynote)
                    .HasForeignKey(d => d.PtasPersonalpropertyidValue)
                    .HasConstraintName("FK_ptas_personalproperty_ptas_personalpropertynote_ptas_personalpropertyid");
            });

            modelBuilder.Entity<PtasPerspropbannerannouncement>(entity =>
            {
                entity.ToTable("ptas_perspropbannerannouncement", "dynamics");

                entity.Property(e => e.PtasPerspropbannerannouncementid)
                    .HasColumnName("ptas_perspropbannerannouncementid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasBannertext).HasColumnName("ptas_bannertext");

                entity.Property(e => e.PtasEnddate).HasColumnName("ptas_enddate");

                entity.Property(e => e.PtasFarming).HasColumnName("ptas_farming");

                entity.Property(e => e.PtasGeneralbusiness).HasColumnName("ptas_generalbusiness");

                entity.Property(e => e.PtasHomeoffice).HasColumnName("ptas_homeoffice");

                entity.Property(e => e.PtasImpsonexemptland).HasColumnName("ptas_impsonexemptland");

                entity.Property(e => e.PtasLeasingcompany).HasColumnName("ptas_leasingcompany");

                entity.Property(e => e.PtasMall).HasColumnName("ptas_mall");

                entity.Property(e => e.PtasMarijuanarelated).HasColumnName("ptas_marijuanarelated");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasOilcompanies).HasColumnName("ptas_oilcompanies");

                entity.Property(e => e.PtasSpecialty).HasColumnName("ptas_specialty");

                entity.Property(e => e.PtasStartdate).HasColumnName("ptas_startdate");

                entity.Property(e => e.PtasTimber).HasColumnName("ptas_timber");

                entity.Property(e => e.PtasUnspecified).HasColumnName("ptas_unspecified");

                entity.Property(e => e.PtasVendingequipment).HasColumnName("ptas_vendingequipment");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasPerspropbannerannouncementCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_perspropbannerannouncement_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPerspropbannerannouncementCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_perspropbannerannouncement_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasPerspropbannerannouncementModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_perspropbannerannouncement_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPerspropbannerannouncementModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_perspropbannerannouncement_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasPerspropbannerannouncement)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_perspropbannerannouncement_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasPerspropbannerannouncementOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_perspropbannerannouncement_owninguser");
            });

            modelBuilder.Entity<PtasPhonenumber>(entity =>
            {
                entity.ToTable("ptas_phonenumber", "dynamics");

                entity.Property(e => e.PtasPhonenumberid)
                    .HasColumnName("ptas_phonenumberid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAcceptstextmessages).HasColumnName("ptas_acceptstextmessages");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasPhonenumber1).HasColumnName("ptas_phonenumber");

                entity.Property(e => e.PtasPhonetype).HasColumnName("ptas_phonetype");

                entity.Property(e => e.PtasPortalcontactValue).HasColumnName("_ptas_portalcontact_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasPhonenumberCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_phonenumber_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPhonenumberCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_phonenumber_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasPhonenumberModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_phonenumber_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPhonenumberModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_phonenumber_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasPhonenumber)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_phonenumber_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasPhonenumberOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_phonenumber_owninguser");

                entity.HasOne(d => d.PtasPortalcontactValueNavigation)
                    .WithMany(p => p.PtasPhonenumber)
                    .HasForeignKey(d => d.PtasPortalcontactValue)
                    .HasConstraintName("FK_ptas_portalcontact_ptas_phonenumber_ptas_portalcontact");
            });

            modelBuilder.Entity<PtasPortaladdress>(entity =>
            {
                entity.ToTable("ptas_portaladdress", "dynamics");

                entity.Property(e => e.PtasPortaladdressid)
                    .HasColumnName("ptas_portaladdressid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAddresstitle).HasColumnName("ptas_addresstitle");

                entity.Property(e => e.PtasApt).HasColumnName("ptas_apt");

                entity.Property(e => e.PtasAttention).HasColumnName("ptas_attention");

                entity.Property(e => e.PtasCityidValue).HasColumnName("_ptas_cityid_value");

                entity.Property(e => e.PtasCountryidValue).HasColumnName("_ptas_countryid_value");

                entity.Property(e => e.PtasHousenumber).HasColumnName("ptas_housenumber");

                entity.Property(e => e.PtasHousenumberdetail).HasColumnName("ptas_housenumberdetail");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasPortalcontactidValue).HasColumnName("_ptas_portalcontactid_value");

                entity.Property(e => e.PtasStateidValue).HasColumnName("_ptas_stateid_value");

                entity.Property(e => e.PtasStreetdetailpostfix).HasColumnName("ptas_streetdetailpostfix");

                entity.Property(e => e.PtasStreetdetailprefix).HasColumnName("ptas_streetdetailprefix");

                entity.Property(e => e.PtasStreetname).HasColumnName("ptas_streetname");

                entity.Property(e => e.PtasStreettype).HasColumnName("ptas_streettype");

                entity.Property(e => e.PtasZipcodeidValue).HasColumnName("_ptas_zipcodeid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasPortalcontact>(entity =>
            {
                entity.ToTable("ptas_portalcontact", "dynamics");

                entity.Property(e => e.PtasPortalcontactid)
                    .HasColumnName("ptas_portalcontactid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasFirstname).HasColumnName("ptas_firstname");

                entity.Property(e => e.PtasLastname).HasColumnName("ptas_lastname");

                entity.Property(e => e.PtasMiddlename).HasColumnName("ptas_middlename");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasSuffix).HasColumnName("ptas_suffix");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasPortalcontactCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_portalcontact_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPortalcontactCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_portalcontact_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasPortalcontactModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_portalcontact_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPortalcontactModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_portalcontact_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasPortalcontact)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_portalcontact_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasPortalcontactOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_portalcontact_owninguser");
            });

            modelBuilder.Entity<PtasPortalcontactPtasParceldetail>(entity =>
            {
                entity.ToTable("ptas_portalcontact_ptas_parceldetail", "dynamics");

                entity.Property(e => e.PtasPortalcontactPtasParceldetailid)
                    .HasColumnName("ptas_portalcontact_ptas_parceldetailid")
                    .ValueGeneratedNever();

                entity.Property(e => e.PtasParceldetailid).HasColumnName("ptas_parceldetailid");

                entity.Property(e => e.PtasPortalcontactid).HasColumnName("ptas_portalcontactid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasPortalemail>(entity =>
            {
                entity.ToTable("ptas_portalemail", "dynamics");

                entity.Property(e => e.PtasPortalemailid)
                    .HasColumnName("ptas_portalemailid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasEmail).HasColumnName("ptas_email");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasPortalcontactValue).HasColumnName("_ptas_portalcontact_value");

                entity.Property(e => e.PtasPrimaryemail).HasColumnName("ptas_primaryemail");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasPortalemailCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_portalemail_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPortalemailCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_portalemail_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasPortalemailModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_portalemail_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPortalemailModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_portalemail_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasPortalemail)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_portalemail_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasPortalemailOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_portalemail_owninguser");

                entity.HasOne(d => d.PtasPortalcontactValueNavigation)
                    .WithMany(p => p.PtasPortalemail)
                    .HasForeignKey(d => d.PtasPortalcontactValue)
                    .HasConstraintName("FK_ptas_portalcontact_ptas_portalemail_ptas_portalcontact");
            });

            modelBuilder.Entity<PtasProjectdock>(entity =>
            {
                entity.ToTable("ptas_projectdock", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_projectdock_modifiedon");

                entity.Property(e => e.PtasProjectdockid)
                    .HasColumnName("ptas_projectdockid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasAlternatekey).HasColumnName("ptas_alternatekey");

                entity.Property(e => e.PtasCondocomplexidValue).HasColumnName("_ptas_condocomplexid_value");

                entity.Property(e => e.PtasGated).HasColumnName("ptas_gated");

                entity.Property(e => e.PtasMasterdockidValue).HasColumnName("_ptas_masterdockid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasSecuritycode).HasColumnName("ptas_securitycode");

                entity.Property(e => e.PtasSnapshotdatetime).HasColumnName("ptas_snapshotdatetime");

                entity.Property(e => e.PtasSnapshottype).HasColumnName("ptas_snapshottype");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasProjectdockCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_projectdock_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasProjectdockCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_projectdock_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasProjectdockModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_projectdock_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasProjectdockModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_projectdock_modifiedonbehalfby");

                entity.HasOne(d => d.PtasCondocomplexidValueNavigation)
                    .WithMany(p => p.PtasProjectdock)
                    .HasForeignKey(d => d.PtasCondocomplexidValue)
                    .HasConstraintName("FK_ptas_condocomplex_ptas_projectdock_ptas_condocomplexid");

                entity.HasOne(d => d.PtasMasterdockidValueNavigation)
                    .WithMany(p => p.InversePtasMasterdockidValueNavigation)
                    .HasForeignKey(d => d.PtasMasterdockidValue)
                    .HasConstraintName("FK_ptas_projectdock_ptas_projectdock_ptas_masterdockid");
            });

            modelBuilder.Entity<PtasProjectdockSnapshot>(entity =>
            {
                entity.HasKey(e => e.PtasProjectdockid);

                entity.ToTable("ptas_projectdock_snapshot", "dynamics");

                entity.Property(e => e.PtasProjectdockid)
                    .HasColumnName("ptas_projectdockid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasAlternatekey).HasColumnName("ptas_alternatekey");

                entity.Property(e => e.PtasCondocomplexidValue).HasColumnName("_ptas_condocomplexid_value");

                entity.Property(e => e.PtasGated).HasColumnName("ptas_gated");

                entity.Property(e => e.PtasMasterdockidValue).HasColumnName("_ptas_masterdockid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasSecuritycode).HasColumnName("ptas_securitycode");

                entity.Property(e => e.PtasSnapshotdatetime).HasColumnName("ptas_snapshotdatetime");

                entity.Property(e => e.PtasSnapshottype).HasColumnName("ptas_snapshottype");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasPropertyreview>(entity =>
            {
                entity.ToTable("ptas_propertyreview", "dynamics");

                entity.Property(e => e.PtasPropertyreviewid)
                    .HasColumnName("ptas_propertyreviewid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAttachment).HasColumnName("ptas_attachment");

                entity.Property(e => e.PtasCallforappointment).HasColumnName("ptas_callforappointment");

                entity.Property(e => e.PtasDaytimephone).HasColumnName("ptas_daytimephone");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasParcelidValue).HasColumnName("_ptas_parcelid_value");

                entity.Property(e => e.PtasPendingboarddecision).HasColumnName("ptas_pendingboarddecision");

                entity.Property(e => e.PtasReason).HasColumnName("ptas_reason");

                entity.Property(e => e.PtasReviewtype).HasColumnName("ptas_reviewtype");

                entity.Property(e => e.PtasSourceofrequest).HasColumnName("ptas_sourceofrequest");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasPropertyreviewCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_propertyreview_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPropertyreviewCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_propertyreview_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasPropertyreviewModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_propertyreview_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPropertyreviewModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_propertyreview_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasPropertyreview)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_propertyreview_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasPropertyreviewOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_propertyreview_owninguser");

                entity.HasOne(d => d.PtasParcelidValueNavigation)
                    .WithMany(p => p.PtasPropertyreview)
                    .HasForeignKey(d => d.PtasParcelidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_propertyreview_ptas_parcelid");
            });

            modelBuilder.Entity<PtasPropertytype>(entity =>
            {
                entity.ToTable("ptas_propertytype", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_propertytype_modifiedon");

                entity.Property(e => e.PtasPropertytypeid)
                    .HasColumnName("ptas_propertytypeid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasPropertytypeCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_propertytype_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPropertytypeCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_propertytype_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasPropertytypeModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_propertytype_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPropertytypeModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_propertytype_modifiedonbehalfby");
            });

            modelBuilder.Entity<PtasPtasBookmarkPtasBookmarktag>(entity =>
            {
                entity.ToTable("ptas_ptas_bookmark_ptas_bookmarktag", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_ptas_bookmark_ptas_bookmarktag_modifiedon");

                entity.Property(e => e.PtasPtasBookmarkPtasBookmarktagid)
                    .HasColumnName("ptas_ptas_bookmark_ptas_bookmarktagid")
                    .ValueGeneratedNever();

                entity.Property(e => e.Modifiedon)
                    .HasColumnName("modifiedon")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.PtasBookmarkid).HasColumnName("ptas_bookmarkid");

                entity.Property(e => e.PtasBookmarktagid).HasColumnName("ptas_bookmarktagid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasPtasCamanotesPtasFileattachmentmetad>(entity =>
            {
                entity.ToTable("ptas_ptas_camanotes_ptas_fileattachmentmetad", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_ptas_camanotes_ptas_fileattachmentmetad_modifiedon");

                entity.Property(e => e.PtasPtasCamanotesPtasFileattachmentmetadid)
                    .HasColumnName("ptas_ptas_camanotes_ptas_fileattachmentmetadid")
                    .ValueGeneratedNever();

                entity.Property(e => e.Modifiedon)
                    .HasColumnName("modifiedon")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.PtasCamanotesid).HasColumnName("ptas_camanotesid");

                entity.Property(e => e.PtasFileattachmentmetadataid).HasColumnName("ptas_fileattachmentmetadataid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasPtasFileattachmentmetadataPtasAddres>(entity =>
            {
                entity.ToTable("ptas_ptas_fileattachmentmetadata_ptas_addres", "dynamics");

                entity.Property(e => e.PtasPtasFileattachmentmetadataPtasAddresid)
                    .HasColumnName("ptas_ptas_fileattachmentmetadata_ptas_addresid")
                    .ValueGeneratedNever();

                entity.Property(e => e.PtasAddresschangehistoryid).HasColumnName("ptas_addresschangehistoryid");

                entity.Property(e => e.PtasFileattachmentmetadataid).HasColumnName("ptas_fileattachmentmetadataid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasPtasHomeimprovementnotesPtasFileatta>(entity =>
            {
                entity.ToTable("ptas_ptas_homeimprovementnotes_ptas_fileatta", "dynamics");

                entity.Property(e => e.PtasPtasHomeimprovementnotesPtasFileattaid)
                    .HasColumnName("ptas_ptas_homeimprovementnotes_ptas_fileattaid")
                    .ValueGeneratedNever();

                entity.Property(e => e.PtasFileattachmentmetadataid).HasColumnName("ptas_fileattachmentmetadataid");

                entity.Property(e => e.PtasHomeimprovementnotesid).HasColumnName("ptas_homeimprovementnotesid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasPtasPermitPtasFileattachmentmetadata>(entity =>
            {
                entity.ToTable("ptas_ptas_permit_ptas_fileattachmentmetadata", "dynamics");

                entity.Property(e => e.PtasPtasPermitPtasFileattachmentmetadataid)
                    .HasColumnName("ptas_ptas_permit_ptas_fileattachmentmetadataid")
                    .ValueGeneratedNever();

                entity.Property(e => e.PtasFileattachmentmetadataid).HasColumnName("ptas_fileattachmentmetadataid");

                entity.Property(e => e.PtasPermitid).HasColumnName("ptas_permitid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasPtasPermitPtasMediarepository>(entity =>
            {
                entity.ToTable("ptas_ptas_permit_ptas_mediarepository", "dynamics");

                entity.Property(e => e.PtasPtasPermitPtasMediarepositoryid)
                    .HasColumnName("ptas_ptas_permit_ptas_mediarepositoryid")
                    .ValueGeneratedNever();

                entity.Property(e => e.Modifiedon)
                    .HasColumnName("modifiedon")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.PtasMediarepositoryid).HasColumnName("ptas_mediarepositoryid");

                entity.Property(e => e.PtasPermitid).HasColumnName("ptas_permitid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasPtasResidentialappraiserteamSystemuse>(entity =>
            {
                entity.ToTable("ptas_ptas_residentialappraiserteam_systemuse", "dynamics");

                entity.Property(e => e.PtasPtasResidentialappraiserteamSystemuseid)
                    .HasColumnName("ptas_ptas_residentialappraiserteam_systemuseid")
                    .ValueGeneratedNever();

                entity.Property(e => e.PtasResidentialappraiserteamid).HasColumnName("ptas_residentialappraiserteamid");

                entity.Property(e => e.Systemuserid).HasColumnName("systemuserid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasPtasSalesPtasFileattachmentmetadata>(entity =>
            {
                entity.ToTable("ptas_ptas_sales_ptas_fileattachmentmetadata", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_ptas_sales_ptas_fileattachmentmetadata_modifiedon");

                entity.Property(e => e.PtasPtasSalesPtasFileattachmentmetadataid)
                    .HasColumnName("ptas_ptas_sales_ptas_fileattachmentmetadataid")
                    .ValueGeneratedNever();

                entity.Property(e => e.Modifiedon)
                    .HasColumnName("modifiedon")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.PtasFileattachmentmetadataid).HasColumnName("ptas_fileattachmentmetadataid");

                entity.Property(e => e.PtasSalesid).HasColumnName("ptas_salesid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasPtasSalesnotePtasFileattachmentmetad>(entity =>
            {
                entity.ToTable("ptas_ptas_salesnote_ptas_fileattachmentmetad", "dynamics");

                entity.Property(e => e.PtasPtasSalesnotePtasFileattachmentmetadid)
                    .HasColumnName("ptas_ptas_salesnote_ptas_fileattachmentmetadid")
                    .ValueGeneratedNever();

                entity.Property(e => e.PtasFileattachmentmetadataid).HasColumnName("ptas_fileattachmentmetadataid");

                entity.Property(e => e.PtasSalesnoteid).HasColumnName("ptas_salesnoteid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasPtasSeappdetailPtasSeapppredefnotes>(entity =>
            {
                entity.ToTable("ptas_ptas_seappdetail_ptas_seapppredefnotes", "dynamics");

                entity.Property(e => e.PtasPtasSeappdetailPtasSeapppredefnotesid)
                    .HasColumnName("ptas_ptas_seappdetail_ptas_seapppredefnotesid")
                    .ValueGeneratedNever();

                entity.Property(e => e.PtasSeappdetailid).HasColumnName("ptas_seappdetailid");

                entity.Property(e => e.PtasSeapppredefnotesid).HasColumnName("ptas_seapppredefnotesid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasPtasSeapplicationPtasSeapppredefnote>(entity =>
            {
                entity.ToTable("ptas_ptas_seapplication_ptas_seapppredefnote", "dynamics");

                entity.Property(e => e.PtasPtasSeapplicationPtasSeapppredefnoteid)
                    .HasColumnName("ptas_ptas_seapplication_ptas_seapppredefnoteid")
                    .ValueGeneratedNever();

                entity.Property(e => e.PtasSeapplicationid).HasColumnName("ptas_seapplicationid");

                entity.Property(e => e.PtasSeapppredefnotesid).HasColumnName("ptas_seapppredefnotesid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasPtasTaskPtasFileattachmentmetadata>(entity =>
            {
                entity.ToTable("ptas_ptas_task_ptas_fileattachmentmetadata", "dynamics");

                entity.Property(e => e.PtasPtasTaskPtasFileattachmentmetadataid)
                    .HasColumnName("ptas_ptas_task_ptas_fileattachmentmetadataid")
                    .ValueGeneratedNever();

                entity.Property(e => e.Modifiedon)
                    .HasColumnName("modifiedon")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.PtasFileattachmentmetadataid).HasColumnName("ptas_fileattachmentmetadataid");

                entity.Property(e => e.PtasTaskid).HasColumnName("ptas_taskid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasPtasTaskPtasParceldetail>(entity =>
            {
                entity.ToTable("ptas_ptas_task_ptas_parceldetail", "dynamics");

                entity.Property(e => e.PtasPtasTaskPtasParceldetailid)
                    .HasColumnName("ptas_ptas_task_ptas_parceldetailid")
                    .ValueGeneratedNever();

                entity.Property(e => e.Modifiedon)
                    .HasColumnName("modifiedon")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.PtasParceldetailid).HasColumnName("ptas_parceldetailid");

                entity.Property(e => e.PtasTaskid).HasColumnName("ptas_taskid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasPtasTaskPtasTaxrollcorrection>(entity =>
            {
                entity.ToTable("ptas_ptas_task_ptas_taxrollcorrection", "dynamics");

                entity.Property(e => e.PtasPtasTaskPtasTaxrollcorrectionid)
                    .HasColumnName("ptas_ptas_task_ptas_taxrollcorrectionid")
                    .ValueGeneratedNever();

                entity.Property(e => e.PtasTaskid).HasColumnName("ptas_taskid");

                entity.Property(e => e.PtasTaxrollcorrectionid).HasColumnName("ptas_taxrollcorrectionid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasPtasTaxaccountPtasFileattachmentmeta>(entity =>
            {
                entity.ToTable("ptas_ptas_taxaccount_ptas_fileattachmentmeta", "dynamics");

                entity.Property(e => e.PtasPtasTaxaccountPtasFileattachmentmetaid)
                    .HasColumnName("ptas_ptas_taxaccount_ptas_fileattachmentmetaid")
                    .ValueGeneratedNever();

                entity.Property(e => e.PtasFileattachmentmetadataid).HasColumnName("ptas_fileattachmentmetadataid");

                entity.Property(e => e.PtasTaxaccountid).HasColumnName("ptas_taxaccountid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasPtasTaxdistrictPtasCounty>(entity =>
            {
                entity.ToTable("ptas_ptas_taxdistrict_ptas_county", "dynamics");

                entity.Property(e => e.PtasPtasTaxdistrictPtasCountyid)
                    .HasColumnName("ptas_ptas_taxdistrict_ptas_countyid")
                    .ValueGeneratedNever();

                entity.Property(e => e.PtasCountyid).HasColumnName("ptas_countyid");

                entity.Property(e => e.PtasTaxdistrictid).HasColumnName("ptas_taxdistrictid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasPtasTaxdistrictPtasTaxdistrict>(entity =>
            {
                entity.ToTable("ptas_ptas_taxdistrict_ptas_taxdistrict", "dynamics");

                entity.Property(e => e.PtasPtasTaxdistrictPtasTaxdistrictid)
                    .HasColumnName("ptas_ptas_taxdistrict_ptas_taxdistrictid")
                    .ValueGeneratedNever();

                entity.Property(e => e.PtasTaxdistrictidone).HasColumnName("ptas_taxdistrictidone");

                entity.Property(e => e.PtasTaxdistrictidtwo).HasColumnName("ptas_taxdistrictidtwo");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasPtasYearSystemuser>(entity =>
            {
                entity.ToTable("ptas_ptas_year_systemuser", "dynamics");

                entity.Property(e => e.PtasPtasYearSystemuserid)
                    .HasColumnName("ptas_ptas_year_systemuserid")
                    .ValueGeneratedNever();

                entity.Property(e => e.PtasYearid).HasColumnName("ptas_yearid");

                entity.Property(e => e.Systemuserid).HasColumnName("systemuserid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasPtasconfiguration>(entity =>
            {
                entity.ToTable("ptas_ptasconfiguration", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_ptasconfiguration_modifiedon");

                entity.Property(e => e.PtasPtasconfigurationid)
                    .HasColumnName("ptas_ptasconfigurationid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasAssessorfirstname).HasColumnName("ptas_assessorfirstname");

                entity.Property(e => e.PtasAssessorlastname).HasColumnName("ptas_assessorlastname");

                entity.Property(e => e.PtasAtc240lastbatchnumber).HasColumnName("ptas_atc240lastbatchnumber");

                entity.Property(e => e.PtasAtc240lastchangenumber).HasColumnName("ptas_atc240lastchangenumber");

                entity.Property(e => e.PtasAtc240lastsenton).HasColumnName("ptas_atc240lastsenton");

                entity.Property(e => e.PtasAtc240sendnotificationemail).HasColumnName("ptas_atc240sendnotificationemail");

                entity.Property(e => e.PtasAzureclientid).HasColumnName("ptas_azureclientid");

                entity.Property(e => e.PtasCustomsearchurl).HasColumnName("ptas_customsearchurl");

                entity.Property(e => e.PtasDefaultsendfromidValue).HasColumnName("_ptas_defaultsendfromid_value");

                entity.Property(e => e.PtasEdmsstorageurl).HasColumnName("ptas_edmsstorageurl");

                entity.Property(e => e.PtasInspectionreporturl).HasColumnName("ptas_inspectionreporturl");

                entity.Property(e => e.PtasMediabloburl).HasColumnName("ptas_mediabloburl");

                entity.Property(e => e.PtasMincleansalepercentage).HasColumnName("ptas_mincleansalepercentage");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasParcelmapurl).HasColumnName("ptas_parcelmapurl");

                entity.Property(e => e.PtasPortallist).HasColumnName("ptas_portallist");

                entity.Property(e => e.PtasPortalmaintenanceend).HasColumnName("ptas_portalmaintenanceend");

                entity.Property(e => e.PtasPortalmaintenancemessage).HasColumnName("ptas_portalmaintenancemessage");

                entity.Property(e => e.PtasPortalurl).HasColumnName("ptas_portalurl");

                entity.Property(e => e.PtasRedactionurl).HasColumnName("ptas_redactionurl");

                entity.Property(e => e.PtasSedefaultwaitindays).HasColumnName("ptas_sedefaultwaitindays");

                entity.Property(e => e.PtasSendsrexemptsyncemail).HasColumnName("ptas_sendsrexemptsyncemail");

                entity.Property(e => e.PtasSendsrexemptsyncemailtoValue).HasColumnName("_ptas_sendsrexemptsyncemailto_value");

                entity.Property(e => e.PtasSketchtoolurl).HasColumnName("ptas_sketchtoolurl");

                entity.Property(e => e.PtasSrexemptsynclog).HasColumnName("ptas_srexemptsynclog");

                entity.Property(e => e.PtasStorageurl).HasColumnName("ptas_storageurl");

                entity.Property(e => e.PtasWebserviceurl).HasColumnName("ptas_webserviceurl");

                entity.Property(e => e.PtasWhatifpeerurl).HasColumnName("ptas_whatifpeerurl");

                entity.Property(e => e.PtasWhatifwebservice).HasColumnName("ptas_whatifwebservice");

                entity.Property(e => e.PtasYearsbeforerenewal).HasColumnName("ptas_yearsbeforerenewal");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasPtasconfigurationCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_ptasconfiguration_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPtasconfigurationCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_ptasconfiguration_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasPtasconfigurationModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_ptasconfiguration_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPtasconfigurationModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_ptasconfiguration_modifiedonbehalfby");

                entity.HasOne(d => d.PtasDefaultsendfromidValueNavigation)
                    .WithMany(p => p.PtasPtasconfigurationPtasDefaultsendfromidValueNavigation)
                    .HasForeignKey(d => d.PtasDefaultsendfromidValue)
                    .HasConstraintName("FK_systemuser_ptas_ptasconfiguration_ptas_defaultsendfromid");

                entity.HasOne(d => d.PtasSendsrexemptsyncemailtoValueNavigation)
                    .WithMany(p => p.PtasPtasconfigurationPtasSendsrexemptsyncemailtoValueNavigation)
                    .HasForeignKey(d => d.PtasSendsrexemptsyncemailtoValue)
                    .HasConstraintName("FK_systemuser_ptas_ptasconfiguration_ptas_sendsrexemptsyncemailto");
            });

            modelBuilder.Entity<PtasPtassetting>(entity =>
            {
                entity.ToTable("ptas_ptassetting", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_ptassetting_modifiedon");

                entity.Property(e => e.PtasPtassettingid)
                    .HasColumnName("ptas_ptassettingid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasKey).HasColumnName("ptas_key");

                entity.Property(e => e.PtasLockfield).HasColumnName("ptas_lockfield");

                entity.Property(e => e.PtasValue).HasColumnName("ptas_value");

                entity.Property(e => e.PtasValueencrypted).HasColumnName("ptas_valueencrypted");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasPtassettingCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_ptassetting_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPtassettingCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_ptassetting_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasPtassettingModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_ptassetting_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasPtassettingModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_ptassetting_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasPtassetting)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_ptassetting_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasPtassettingOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_ptassetting_owninguser");
            });

            modelBuilder.Entity<PtasQstr>(entity =>
            {
                entity.ToTable("ptas_qstr", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_qstr_modifiedon");

                entity.Property(e => e.PtasQstrid)
                    .HasColumnName("ptas_qstrid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasQuartersection).HasColumnName("ptas_quartersection");

                entity.Property(e => e.PtasRange).HasColumnName("ptas_range");

                entity.Property(e => e.PtasSection).HasColumnName("ptas_section");

                entity.Property(e => e.PtasTownship).HasColumnName("ptas_township");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasQstrCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_qstr_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasQstrCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_qstr_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasQstrModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_qstr_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasQstrModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_qstr_modifiedonbehalfby");
            });

            modelBuilder.Entity<PtasQuickcollect>(entity =>
            {
                entity.ToTable("ptas_quickcollect", "dynamics");

                entity.Property(e => e.PtasQuickcollectid)
                    .HasColumnName("ptas_quickcollectid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAccountnumber).HasColumnName("ptas_accountnumber");

                entity.Property(e => e.PtasAssessmentvalue)
                    .HasColumnName("ptas_assessmentvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAssessmentvalueBase)
                    .HasColumnName("ptas_assessmentvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAttention).HasColumnName("ptas_attention");

                entity.Property(e => e.PtasBillofsaleFileattachementmetadataidValue).HasColumnName("_ptas_billofsale_fileattachementmetadataid_value");

                entity.Property(e => e.PtasBusinessname).HasColumnName("ptas_businessname");

                entity.Property(e => e.PtasClosingdate).HasColumnName("ptas_closingdate");

                entity.Property(e => e.PtasDate).HasColumnName("ptas_date");

                entity.Property(e => e.PtasDispositionofassets).HasColumnName("ptas_dispositionofassets");

                entity.Property(e => e.PtasEmail).HasColumnName("ptas_email");

                entity.Property(e => e.PtasEquipment)
                    .HasColumnName("ptas_equipment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEquipmentBase)
                    .HasColumnName("ptas_equipment_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFuturestatus).HasColumnName("ptas_futurestatus");

                entity.Property(e => e.PtasIntangibles)
                    .HasColumnName("ptas_intangibles")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIntangiblesBase)
                    .HasColumnName("ptas_intangibles_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLeaseholdimprovements)
                    .HasColumnName("ptas_leaseholdimprovements")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLeaseholdimprovementsBase)
                    .HasColumnName("ptas_leaseholdimprovements_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLegalentity).HasColumnName("ptas_legalentity");

                entity.Property(e => e.PtasMethodoftransfer).HasColumnName("ptas_methodoftransfer");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNewbusinessname).HasColumnName("ptas_newbusinessname");

                entity.Property(e => e.PtasNewinformationAddrCity).HasColumnName("ptas_newinformation_addr_city");

                entity.Property(e => e.PtasNewinformationAddrLocationcity).HasColumnName("ptas_newinformation_addr_locationcity");

                entity.Property(e => e.PtasNewinformationAddrLocationstateidValue).HasColumnName("_ptas_newinformation_addr_locationstateid_value");

                entity.Property(e => e.PtasNewinformationAddrLocationstreet1).HasColumnName("ptas_newinformation_addr_locationstreet1");

                entity.Property(e => e.PtasNewinformationAddrLocationstreet2).HasColumnName("ptas_newinformation_addr_locationstreet2");

                entity.Property(e => e.PtasNewinformationAddrLocationzip).HasColumnName("ptas_newinformation_addr_locationzip");

                entity.Property(e => e.PtasNewinformationAddrStateidValue).HasColumnName("_ptas_newinformation_addr_stateid_value");

                entity.Property(e => e.PtasNewinformationAddrStreet1).HasColumnName("ptas_newinformation_addr_street1");

                entity.Property(e => e.PtasNewinformationAddrStreet2).HasColumnName("ptas_newinformation_addr_street2");

                entity.Property(e => e.PtasNewinformationAddrZip).HasColumnName("ptas_newinformation_addr_zip");

                entity.Property(e => e.PtasNewowneremail).HasColumnName("ptas_newowneremail");

                entity.Property(e => e.PtasNewownername).HasColumnName("ptas_newownername");

                entity.Property(e => e.PtasOktopost).HasColumnName("ptas_oktopost");

                entity.Property(e => e.PtasOther)
                    .HasColumnName("ptas_other")
                    .HasColumnType("money");

                entity.Property(e => e.PtasOtherBase)
                    .HasColumnName("ptas_other_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasOutofcounty).HasColumnName("ptas_outofcounty");

                entity.Property(e => e.PtasOwnername).HasColumnName("ptas_ownername");

                entity.Property(e => e.PtasPaid).HasColumnName("ptas_paid");

                entity.Property(e => e.PtasPersonalpropertyidValue).HasColumnName("_ptas_personalpropertyid_value");

                entity.Property(e => e.PtasPersonalpropinfoAddrCity).HasColumnName("ptas_personalpropinfo_addr_city");

                entity.Property(e => e.PtasPersonalpropinfoAddrLocationcity).HasColumnName("ptas_personalpropinfo_addr_locationcity");

                entity.Property(e => e.PtasPersonalpropinfoAddrLocationstateidValue).HasColumnName("_ptas_personalpropinfo_addr_locationstateid_value");

                entity.Property(e => e.PtasPersonalpropinfoAddrLocationstreet1).HasColumnName("ptas_personalpropinfo_addr_locationstreet1");

                entity.Property(e => e.PtasPersonalpropinfoAddrLocationstreet2).HasColumnName("ptas_personalpropinfo_addr_locationstreet2");

                entity.Property(e => e.PtasPersonalpropinfoAddrLocationzip).HasColumnName("ptas_personalpropinfo_addr_locationzip");

                entity.Property(e => e.PtasPersonalpropinfoAddrStateidValue).HasColumnName("_ptas_personalpropinfo_addr_stateid_value");

                entity.Property(e => e.PtasPersonalpropinfoAddrStreet1).HasColumnName("ptas_personalpropinfo_addr_street1");

                entity.Property(e => e.PtasPersonalpropinfoAddrStreet2).HasColumnName("ptas_personalpropinfo_addr_street2");

                entity.Property(e => e.PtasPersonalpropinfoAddrZip).HasColumnName("ptas_personalpropinfo_addr_zip");

                entity.Property(e => e.PtasPpassessmenthistoryidValue).HasColumnName("_ptas_ppassessmenthistoryid_value");

                entity.Property(e => e.PtasProcesseduseridValue).HasColumnName("_ptas_processeduserid_value");

                entity.Property(e => e.PtasQuickcollectPersonalpropertyidValue).HasColumnName("_ptas_quickcollect_personalpropertyid_value");

                entity.Property(e => e.PtasQuickcollectnumber).HasColumnName("ptas_quickcollectnumber");

                entity.Property(e => e.PtasReasonforrequest).HasColumnName("ptas_reasonforrequest");

                entity.Property(e => e.PtasRequestorinfoAddrCity).HasColumnName("ptas_requestorinfo_addr_city");

                entity.Property(e => e.PtasRequestorinfoAddrStateidValue).HasColumnName("_ptas_requestorinfo_addr_stateid_value");

                entity.Property(e => e.PtasRequestorinfoAddrStreet1).HasColumnName("ptas_requestorinfo_addr_street1");

                entity.Property(e => e.PtasRequestorinfoAddrStreet2).HasColumnName("ptas_requestorinfo_addr_street2");

                entity.Property(e => e.PtasRequestorinfoAddrTelephone).HasColumnName("ptas_requestorinfo_addr_telephone");

                entity.Property(e => e.PtasRequestorinfoAddrZip).HasColumnName("ptas_requestorinfo_addr_zip");

                entity.Property(e => e.PtasRequestorinfoBusinessname).HasColumnName("ptas_requestorinfo_businessname");

                entity.Property(e => e.PtasTelephone).HasColumnName("ptas_telephone");

                entity.Property(e => e.PtasTotalsalesprice)
                    .HasColumnName("ptas_totalsalesprice")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalsalespriceBase)
                    .HasColumnName("ptas_totalsalesprice_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasUbinumber).HasColumnName("ptas_ubinumber");

                entity.Property(e => e.PtasYearidValue).HasColumnName("_ptas_yearid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasQuickcollectCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_quickcollect_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasQuickcollectCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_quickcollect_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasQuickcollectModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_quickcollect_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasQuickcollectModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_quickcollect_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasQuickcollect)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_quickcollect_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasQuickcollectOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_quickcollect_owninguser");

                entity.HasOne(d => d.PtasBillofsaleFileattachementmetadataidValueNavigation)
                    .WithMany(p => p.PtasQuickcollect)
                    .HasForeignKey(d => d.PtasBillofsaleFileattachementmetadataidValue)
                    .HasConstraintName("FK_ptas_fileattachmentmetadata_ptas_quickcollect_ptas_billofsale_fileattachementmetadataid");

                entity.HasOne(d => d.PtasNewinformationAddrLocationstateidValueNavigation)
                    .WithMany(p => p.PtasQuickcollectPtasNewinformationAddrLocationstateidValueNavigation)
                    .HasForeignKey(d => d.PtasNewinformationAddrLocationstateidValue)
                    .HasConstraintName("FK_ptas_stateorprovince_ptas_quickcollect_ptas_newinformation_addr_locationstateid");

                entity.HasOne(d => d.PtasNewinformationAddrStateidValueNavigation)
                    .WithMany(p => p.PtasQuickcollectPtasNewinformationAddrStateidValueNavigation)
                    .HasForeignKey(d => d.PtasNewinformationAddrStateidValue)
                    .HasConstraintName("FK_ptas_stateorprovince_ptas_quickcollect_ptas_newinformation_addr_stateid");

                entity.HasOne(d => d.PtasPersonalpropertyidValueNavigation)
                    .WithMany(p => p.PtasQuickcollectPtasPersonalpropertyidValueNavigation)
                    .HasForeignKey(d => d.PtasPersonalpropertyidValue)
                    .HasConstraintName("FK_ptas_personalproperty_ptas_quickcollect_ptas_personalpropertyid");

                entity.HasOne(d => d.PtasPersonalpropinfoAddrLocationstateidValueNavigation)
                    .WithMany(p => p.PtasQuickcollectPtasPersonalpropinfoAddrLocationstateidValueNavigation)
                    .HasForeignKey(d => d.PtasPersonalpropinfoAddrLocationstateidValue)
                    .HasConstraintName("FK_ptas_stateorprovince_ptas_quickcollect_ptas_personalpropinfo_addr_locationstateid");

                entity.HasOne(d => d.PtasPersonalpropinfoAddrStateidValueNavigation)
                    .WithMany(p => p.PtasQuickcollectPtasPersonalpropinfoAddrStateidValueNavigation)
                    .HasForeignKey(d => d.PtasPersonalpropinfoAddrStateidValue)
                    .HasConstraintName("FK_ptas_stateorprovince_ptas_quickcollect_ptas_personalpropinfo_addr_stateid");

                entity.HasOne(d => d.PtasPpassessmenthistoryidValueNavigation)
                    .WithMany(p => p.PtasQuickcollect)
                    .HasForeignKey(d => d.PtasPpassessmenthistoryidValue)
                    .HasConstraintName("FK_ptas_personalpropertyhistory_ptas_quickcollect_ptas_ppassessmenthistoryid");

                entity.HasOne(d => d.PtasProcesseduseridValueNavigation)
                    .WithMany(p => p.PtasQuickcollectPtasProcesseduseridValueNavigation)
                    .HasForeignKey(d => d.PtasProcesseduseridValue)
                    .HasConstraintName("FK_systemuser_ptas_quickcollect_ptas_processeduserid");

                entity.HasOne(d => d.PtasQuickcollectPersonalpropertyidValueNavigation)
                    .WithMany(p => p.PtasQuickcollectPtasQuickcollectPersonalpropertyidValueNavigation)
                    .HasForeignKey(d => d.PtasQuickcollectPersonalpropertyidValue)
                    .HasConstraintName("FK_ptas_personalproperty_ptas_quickcollect_ptas_quickcollect_personalpropertyid");

                entity.HasOne(d => d.PtasRequestorinfoAddrStateidValueNavigation)
                    .WithMany(p => p.PtasQuickcollectPtasRequestorinfoAddrStateidValueNavigation)
                    .HasForeignKey(d => d.PtasRequestorinfoAddrStateidValue)
                    .HasConstraintName("FK_ptas_stateorprovince_ptas_quickcollect_ptas_requestorinfo_addr_stateid");

                entity.HasOne(d => d.PtasYearidValueNavigation)
                    .WithMany(p => p.PtasQuickcollect)
                    .HasForeignKey(d => d.PtasYearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_quickcollect_ptas_yearid");
            });

            modelBuilder.Entity<PtasRatesheetdetail>(entity =>
            {
                entity.ToTable("ptas_ratesheetdetail", "dynamics");

                entity.Property(e => e.PtasRatesheetdetailid)
                    .HasColumnName("ptas_ratesheetdetailid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.Ptas100tav)
                    .HasColumnName("ptas_100tav")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas100tavBase)
                    .HasColumnName("ptas_100tav_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasActuallidlift)
                    .HasColumnName("ptas_actuallidlift")
                    .HasColumnType("money");

                entity.Property(e => e.PtasActuallidliftBase)
                    .HasColumnName("ptas_actuallidlift_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAllowablelidlift)
                    .HasColumnName("ptas_allowablelidlift")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAllowablelidliftBase)
                    .HasColumnName("ptas_allowablelidlift_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasBondorcapitalexcesslevyav)
                    .HasColumnName("ptas_bondorcapitalexcesslevyav")
                    .HasColumnType("money");

                entity.Property(e => e.PtasBondorcapitalexcesslevyavBase)
                    .HasColumnName("ptas_bondorcapitalexcesslevyav_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasBondrate)
                    .HasColumnName("ptas_bondrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasBondrequestedamount)
                    .HasColumnName("ptas_bondrequestedamount")
                    .HasColumnType("money");

                entity.Property(e => e.PtasBondrequestedamountBase)
                    .HasColumnName("ptas_bondrequestedamount_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCapitalprojectslevyamount)
                    .HasColumnName("ptas_capitalprojectslevyamount")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCapitalprojectslevyamountBase)
                    .HasColumnName("ptas_capitalprojectslevyamount_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCapitalprojectslevyrate)
                    .HasColumnName("ptas_capitalprojectslevyrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCertified).HasColumnName("ptas_certified");

                entity.Property(e => e.PtasCertifiedactuallidlift)
                    .HasColumnName("ptas_certifiedactuallidlift")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCertifiedactuallidliftBase)
                    .HasColumnName("ptas_certifiedactuallidlift_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCertifiedlidliftorbondrate)
                    .HasColumnName("ptas_certifiedlidliftorbondrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCertifiedtotalrate)
                    .HasColumnName("ptas_certifiedtotalrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasConsolidatedlevy).HasColumnName("ptas_consolidatedlevy");

                entity.Property(e => e.PtasDollarincreaselimitfactor)
                    .HasColumnName("ptas_dollarincreaselimitfactor")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDollarincreaselimitfactorBase)
                    .HasColumnName("ptas_dollarincreaselimitfactor_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasExcesslevyassessedvalue)
                    .HasColumnName("ptas_excesslevyassessedvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasExcesslevyassessedvalueBase)
                    .HasColumnName("ptas_excesslevyassessedvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFirstyear).HasColumnName("ptas_firstyear");

                entity.Property(e => e.PtasFirstyearamt)
                    .HasColumnName("ptas_firstyearamt")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFirstyearamtBase)
                    .HasColumnName("ptas_firstyearamt_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasHalfor80tav)
                    .HasColumnName("ptas_halfor80tav")
                    .HasColumnType("money");

                entity.Property(e => e.PtasHalfor80tavBase)
                    .HasColumnName("ptas_halfor80tav_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLevylidliftbondidValue).HasColumnName("_ptas_levylidliftbondid_value");

                entity.Property(e => e.PtasLevylimitworksheetdetailidValue).HasColumnName("_ptas_levylimitworksheetdetailid_value");

                entity.Property(e => e.PtasLevyordinancerequestidValue).HasColumnName("_ptas_levyordinancerequestid_value");

                entity.Property(e => e.PtasLidliftbondamount)
                    .HasColumnName("ptas_lidliftbondamount")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLidliftbondamountBase)
                    .HasColumnName("ptas_lidliftbondamount_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLidliftorbondrate)
                    .HasColumnName("ptas_lidliftorbondrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLimitfactor)
                    .HasColumnName("ptas_limitfactor")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLocalnewconstruction)
                    .HasColumnName("ptas_localnewconstruction")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLocalnewconstructionBase)
                    .HasColumnName("ptas_localnewconstruction_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasMaxlimitfactor)
                    .HasColumnName("ptas_maxlimitfactor")
                    .HasColumnType("money");

                entity.Property(e => e.PtasMoexcesslevyav)
                    .HasColumnName("ptas_moexcesslevyav")
                    .HasColumnType("money");

                entity.Property(e => e.PtasMoexcesslevyavBase)
                    .HasColumnName("ptas_moexcesslevyav_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasMolevyrate)
                    .HasColumnName("ptas_molevyrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasMolevyrequestedamount)
                    .HasColumnName("ptas_molevyrequestedamount")
                    .HasColumnType("money");

                entity.Property(e => e.PtasMolevyrequestedamountBase)
                    .HasColumnName("ptas_molevyrequestedamount_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNewconstructioneffectonlidlift)
                    .HasColumnName("ptas_newconstructioneffectonlidlift")
                    .HasColumnType("money");

                entity.Property(e => e.PtasNewconstructioneffectonlidliftBase)
                    .HasColumnName("ptas_newconstructioneffectonlidlift_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPrioryearallowable)
                    .HasColumnName("ptas_prioryearallowable")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPrioryearallowableBase)
                    .HasColumnName("ptas_prioryearallowable_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPrioryearallowablewithlimitfactor)
                    .HasColumnName("ptas_prioryearallowablewithlimitfactor")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPrioryearallowablewithlimitfactorBase)
                    .HasColumnName("ptas_prioryearallowablewithlimitfactor_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPrioryearallowablewithmaxlimitfactor)
                    .HasColumnName("ptas_prioryearallowablewithmaxlimitfactor")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPrioryearallowablewithmaxlimitfactorBase)
                    .HasColumnName("ptas_prioryearallowablewithmaxlimitfactor_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPrioryearlidliftorbondrate)
                    .HasColumnName("ptas_prioryearlidliftorbondrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRateoramount).HasColumnName("ptas_rateoramount");

                entity.Property(e => e.PtasRatesheettype).HasColumnName("ptas_ratesheettype");

                entity.Property(e => e.PtasRegularlevyassessedvalue)
                    .HasColumnName("ptas_regularlevyassessedvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRegularlevyassessedvalueBase)
                    .HasColumnName("ptas_regularlevyassessedvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchoolcertified).HasColumnName("ptas_schoolcertified");

                entity.Property(e => e.PtasTaxdistrictidValue).HasColumnName("_ptas_taxdistrictid_value");

                entity.Property(e => e.PtasTotallimitedlidlift)
                    .HasColumnName("ptas_totallimitedlidlift")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotallimitedlidliftBase)
                    .HasColumnName("ptas_totallimitedlidlift_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalrate)
                    .HasColumnName("ptas_totalrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTransportationlevyamount)
                    .HasColumnName("ptas_transportationlevyamount")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTransportationlevyamountBase)
                    .HasColumnName("ptas_transportationlevyamount_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTransportationlevyrate)
                    .HasColumnName("ptas_transportationlevyrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasUtilitynewconstruction)
                    .HasColumnName("ptas_utilitynewconstruction")
                    .HasColumnType("money");

                entity.Property(e => e.PtasUtilitynewconstructionBase)
                    .HasColumnName("ptas_utilitynewconstruction_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasYearidValue).HasColumnName("_ptas_yearid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasRatesheetdetailCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_ratesheetdetail_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasRatesheetdetailCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_ratesheetdetail_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasRatesheetdetailModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_ratesheetdetail_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasRatesheetdetailModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_ratesheetdetail_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasRatesheetdetail)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_ratesheetdetail_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasRatesheetdetailOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_ratesheetdetail_owninguser");

                entity.HasOne(d => d.PtasLevylidliftbondidValueNavigation)
                    .WithMany(p => p.PtasRatesheetdetail)
                    .HasForeignKey(d => d.PtasLevylidliftbondidValue)
                    .HasConstraintName("FK_ptas_levylidliftbond_ptas_ratesheetdetail_ptas_levylidliftbondid");

                entity.HasOne(d => d.PtasLevylimitworksheetdetailidValueNavigation)
                    .WithMany(p => p.PtasRatesheetdetail)
                    .HasForeignKey(d => d.PtasLevylimitworksheetdetailidValue)
                    .HasConstraintName("FK_ptas_levyworksheetdetails_ptas_ratesheetdetail_ptas_levylimitworksheetdetailid");

                entity.HasOne(d => d.PtasLevyordinancerequestidValueNavigation)
                    .WithMany(p => p.PtasRatesheetdetail)
                    .HasForeignKey(d => d.PtasLevyordinancerequestidValue)
                    .HasConstraintName("FK_ptas_levyordinancerequest_ptas_ratesheetdetail_ptas_levyordinancerequestid");

                entity.HasOne(d => d.PtasTaxdistrictidValueNavigation)
                    .WithMany(p => p.PtasRatesheetdetail)
                    .HasForeignKey(d => d.PtasTaxdistrictidValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_ratesheetdetail_ptas_taxdistrictid");

                entity.HasOne(d => d.PtasYearidValueNavigation)
                    .WithMany(p => p.PtasRatesheetdetail)
                    .HasForeignKey(d => d.PtasYearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_ratesheetdetail_ptas_yearid");
            });

            modelBuilder.Entity<PtasRecentparcel>(entity =>
            {
                entity.ToTable("ptas_recentparcel", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_recentparcel_modifiedon");

                entity.Property(e => e.PtasRecentparcelid)
                    .HasColumnName("ptas_recentparcelid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasParcelidValue).HasColumnName("_ptas_parcelid_value");

                entity.Property(e => e.PtasPinned).HasColumnName("ptas_pinned");

                entity.Property(e => e.PtasVisitcount).HasColumnName("ptas_visitcount");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasRecentparcelCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_recentparcel_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasRecentparcelCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_recentparcel_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasRecentparcelModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_recentparcel_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasRecentparcelModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_recentparcel_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasRecentparcel)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_recentparcel_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasRecentparcelOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_recentparcel_owninguser");

                entity.HasOne(d => d.PtasParcelidValueNavigation)
                    .WithMany(p => p.PtasRecentparcel)
                    .HasForeignKey(d => d.PtasParcelidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_recentparcel_ptas_parcelid");
            });

            modelBuilder.Entity<PtasRefundpetition>(entity =>
            {
                entity.ToTable("ptas_refundpetition", "dynamics");

                entity.Property(e => e.PtasRefundpetitionid)
                    .HasColumnName("ptas_refundpetitionid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAccountnumbertxt).HasColumnName("ptas_accountnumbertxt");

                entity.Property(e => e.PtasAdjustedexemptionlevel).HasColumnName("ptas_adjustedexemptionlevel");

                entity.Property(e => e.PtasAdjustedtaxablevalue0accountimp)
                    .HasColumnName("ptas_adjustedtaxablevalue0accountimp")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAdjustedtaxablevalue0accountimpBase)
                    .HasColumnName("ptas_adjustedtaxablevalue0accountimp_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAdjustedtaxablevalue0accountland)
                    .HasColumnName("ptas_adjustedtaxablevalue0accountland")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAdjustedtaxablevalue0accountlandBase)
                    .HasColumnName("ptas_adjustedtaxablevalue0accountland_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAdjustedtaxablevalue0accounttotal)
                    .HasColumnName("ptas_adjustedtaxablevalue0accounttotal")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAdjustedtaxablevalue0accounttotalBase)
                    .HasColumnName("ptas_adjustedtaxablevalue0accounttotal_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAdjustedtaxablevalue8accountimp)
                    .HasColumnName("ptas_adjustedtaxablevalue8accountimp")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAdjustedtaxablevalue8accountimpBase)
                    .HasColumnName("ptas_adjustedtaxablevalue8accountimp_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAdjustedtaxablevalue8accountland)
                    .HasColumnName("ptas_adjustedtaxablevalue8accountland")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAdjustedtaxablevalue8accountlandBase)
                    .HasColumnName("ptas_adjustedtaxablevalue8accountland_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAdjustedtaxablevalue8accounttotal)
                    .HasColumnName("ptas_adjustedtaxablevalue8accounttotal")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAdjustedtaxablevalue8accounttotalBase)
                    .HasColumnName("ptas_adjustedtaxablevalue8accounttotal_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAdjustedtaxamountatregularrate)
                    .HasColumnName("ptas_adjustedtaxamountatregularrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAdjustedtaxamountatregularrateBase)
                    .HasColumnName("ptas_adjustedtaxamountatregularrate_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAdjustedtaxamountatseniorrate)
                    .HasColumnName("ptas_adjustedtaxamountatseniorrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAdjustedtaxamountatseniorrateBase)
                    .HasColumnName("ptas_adjustedtaxamountatseniorrate_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAdjustedtaxtotal)
                    .HasColumnName("ptas_adjustedtaxtotal")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAdjustedtaxtotalBase)
                    .HasColumnName("ptas_adjustedtaxtotal_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAdjustedtotaltaxablevalue)
                    .HasColumnName("ptas_adjustedtotaltaxablevalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAdjustedtotaltaxablevalueBase)
                    .HasColumnName("ptas_adjustedtotaltaxablevalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrentexemptionlevel).HasColumnName("ptas_currentexemptionlevel");

                entity.Property(e => e.PtasCurrenttaxablevalue0accountimp)
                    .HasColumnName("ptas_currenttaxablevalue0accountimp")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrenttaxablevalue0accountimpBase)
                    .HasColumnName("ptas_currenttaxablevalue0accountimp_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrenttaxablevalue0accountland)
                    .HasColumnName("ptas_currenttaxablevalue0accountland")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrenttaxablevalue0accountlandBase)
                    .HasColumnName("ptas_currenttaxablevalue0accountland_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrenttaxablevalue0accounttotal)
                    .HasColumnName("ptas_currenttaxablevalue0accounttotal")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrenttaxablevalue0accounttotalBase)
                    .HasColumnName("ptas_currenttaxablevalue0accounttotal_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrenttaxablevalue8accountimp)
                    .HasColumnName("ptas_currenttaxablevalue8accountimp")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrenttaxablevalue8accountimpBase)
                    .HasColumnName("ptas_currenttaxablevalue8accountimp_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrenttaxablevalue8accountland)
                    .HasColumnName("ptas_currenttaxablevalue8accountland")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrenttaxablevalue8accountlandBase)
                    .HasColumnName("ptas_currenttaxablevalue8accountland_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrenttaxablevalue8accounttotal)
                    .HasColumnName("ptas_currenttaxablevalue8accounttotal")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrenttaxablevalue8accounttotalBase)
                    .HasColumnName("ptas_currenttaxablevalue8accounttotal_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrenttaxamountatregularrate)
                    .HasColumnName("ptas_currenttaxamountatregularrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrenttaxamountatregularrateBase)
                    .HasColumnName("ptas_currenttaxamountatregularrate_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrenttaxamountatseniorrate)
                    .HasColumnName("ptas_currenttaxamountatseniorrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrenttaxamountatseniorrateBase)
                    .HasColumnName("ptas_currenttaxamountatseniorrate_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrenttaxbilled0account)
                    .HasColumnName("ptas_currenttaxbilled0account")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrenttaxbilled0accountBase)
                    .HasColumnName("ptas_currenttaxbilled0account_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrenttaxbilled8account)
                    .HasColumnName("ptas_currenttaxbilled8account")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrenttaxbilled8accountBase)
                    .HasColumnName("ptas_currenttaxbilled8account_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrenttaxbilledtotal)
                    .HasColumnName("ptas_currenttaxbilledtotal")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrenttaxbilledtotalBase)
                    .HasColumnName("ptas_currenttaxbilledtotal_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrenttaxpaid0account)
                    .HasColumnName("ptas_currenttaxpaid0account")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrenttaxpaid0accountBase)
                    .HasColumnName("ptas_currenttaxpaid0account_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrenttaxpaid8account)
                    .HasColumnName("ptas_currenttaxpaid8account")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrenttaxpaid8accountBase)
                    .HasColumnName("ptas_currenttaxpaid8account_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrenttaxpaidtotal)
                    .HasColumnName("ptas_currenttaxpaidtotal")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrenttaxpaidtotalBase)
                    .HasColumnName("ptas_currenttaxpaidtotal_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrenttaxtotal)
                    .HasColumnName("ptas_currenttaxtotal")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrenttaxtotalBase)
                    .HasColumnName("ptas_currenttaxtotal_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrenttotaltaxablevalue)
                    .HasColumnName("ptas_currenttotaltaxablevalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrenttotaltaxablevalueBase)
                    .HasColumnName("ptas_currenttotaltaxablevalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFirsthalfreceiptdate)
                    .HasColumnName("ptas_firsthalfreceiptdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.PtasFirsthalfreceiptnumber).HasColumnName("ptas_firsthalfreceiptnumber");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasParcelidValue).HasColumnName("_ptas_parcelid_value");

                entity.Property(e => e.PtasPayeename).HasColumnName("ptas_payeename");

                entity.Property(e => e.PtasRefundamount)
                    .HasColumnName("ptas_refundamount")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRefundamountBase)
                    .HasColumnName("ptas_refundamount_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRefundlevyidValue).HasColumnName("_ptas_refundlevyid_value");

                entity.Property(e => e.PtasRefundreasoncode).HasColumnName("ptas_refundreasoncode");

                entity.Property(e => e.PtasRegularrate)
                    .HasColumnName("ptas_regularrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSeapplicationidValue).HasColumnName("_ptas_seapplicationid_value");

                entity.Property(e => e.PtasSecondhalfreceiptdate).HasColumnName("ptas_secondhalfreceiptdate");

                entity.Property(e => e.PtasSecondhalfreceiptnumber).HasColumnName("ptas_secondhalfreceiptnumber");

                entity.Property(e => e.PtasSecondhalfrefundamount)
                    .HasColumnName("ptas_secondhalfrefundamount")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSecondhalfrefundamountBase)
                    .HasColumnName("ptas_secondhalfrefundamount_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSeniorrate)
                    .HasColumnName("ptas_seniorrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTaxaccountidValue).HasColumnName("_ptas_taxaccountid_value");

                entity.Property(e => e.PtasTaxrollyearidValue).HasColumnName("_ptas_taxrollyearid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasRefundpetitionCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_refundpetition_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasRefundpetitionCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_refundpetition_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasRefundpetitionModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_refundpetition_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasRefundpetitionModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_refundpetition_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasRefundpetition)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_refundpetition_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasRefundpetitionOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_refundpetition_owninguser");

                entity.HasOne(d => d.PtasParcelidValueNavigation)
                    .WithMany(p => p.PtasRefundpetition)
                    .HasForeignKey(d => d.PtasParcelidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_refundpetition_ptas_parcelid");

                entity.HasOne(d => d.PtasRefundlevyidValueNavigation)
                    .WithMany(p => p.PtasRefundpetition)
                    .HasForeignKey(d => d.PtasRefundlevyidValue)
                    .HasConstraintName("FK_ptas_refundpetitionlevyrate_ptas_refundpetition_ptas_refundlevyid");

                entity.HasOne(d => d.PtasSeapplicationidValueNavigation)
                    .WithMany(p => p.PtasRefundpetition)
                    .HasForeignKey(d => d.PtasSeapplicationidValue)
                    .HasConstraintName("FK_ptas_seapplication_ptas_refundpetition_ptas_seapplicationid");

                entity.HasOne(d => d.PtasTaxaccountidValueNavigation)
                    .WithMany(p => p.PtasRefundpetition)
                    .HasForeignKey(d => d.PtasTaxaccountidValue)
                    .HasConstraintName("FK_ptas_taxaccount_ptas_refundpetition_ptas_taxaccountid");

                entity.HasOne(d => d.PtasTaxrollyearidValueNavigation)
                    .WithMany(p => p.PtasRefundpetition)
                    .HasForeignKey(d => d.PtasTaxrollyearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_refundpetition_ptas_taxrollyearid");
            });

            modelBuilder.Entity<PtasRefundpetitionlevyrate>(entity =>
            {
                entity.ToTable("ptas_refundpetitionlevyrate", "dynamics");

                entity.Property(e => e.PtasRefundpetitionlevyrateid)
                    .HasColumnName("ptas_refundpetitionlevyrateid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasLevycode).HasColumnName("ptas_levycode");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasRegularrate)
                    .HasColumnName("ptas_regularrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSeniorrate)
                    .HasColumnName("ptas_seniorrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasYearidValue).HasColumnName("_ptas_yearid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasRefundpetitionlevyrateCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_refundpetitionlevyrate_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasRefundpetitionlevyrateCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_refundpetitionlevyrate_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasRefundpetitionlevyrateModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_refundpetitionlevyrate_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasRefundpetitionlevyrateModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_refundpetitionlevyrate_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasRefundpetitionlevyrate)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_refundpetitionlevyrate_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasRefundpetitionlevyrateOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_refundpetitionlevyrate_owninguser");

                entity.HasOne(d => d.PtasYearidValueNavigation)
                    .WithMany(p => p.PtasRefundpetitionlevyrate)
                    .HasForeignKey(d => d.PtasYearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_refundpetitionlevyrate_ptas_yearid");
            });

            modelBuilder.Entity<PtasResidentialappraiserteam>(entity =>
            {
                entity.ToTable("ptas_residentialappraiserteam", "dynamics");

                entity.Property(e => e.PtasResidentialappraiserteamid)
                    .HasColumnName("ptas_residentialappraiserteamid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasResidentialappraiserteamCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_residentialappraiserteam_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasResidentialappraiserteamCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_residentialappraiserteam_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasResidentialappraiserteamModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_residentialappraiserteam_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasResidentialappraiserteamModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_residentialappraiserteam_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasResidentialappraiserteam)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_residentialappraiserteam_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasResidentialappraiserteamOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_residentialappraiserteam_owninguser");
            });

            modelBuilder.Entity<PtasResponsibility>(entity =>
            {
                entity.ToTable("ptas_responsibility", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_responsibility_modifiedon");

                entity.Property(e => e.PtasResponsibilityid)
                    .HasColumnName("ptas_responsibilityid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasResponsibilityCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_responsibility_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasResponsibilityCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_responsibility_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasResponsibilityModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_responsibility_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasResponsibilityModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_responsibility_modifiedonbehalfby");
            });

            modelBuilder.Entity<PtasRestrictedrent>(entity =>
            {
                entity.ToTable("ptas_restrictedrent", "dynamics");

                entity.Property(e => e.PtasRestrictedrentid)
                    .HasColumnName("ptas_restrictedrentid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAssessmentyearValue).HasColumnName("_ptas_assessmentyear_value");

                entity.Property(e => e.PtasLowincomehousingprogramValue).HasColumnName("_ptas_lowincomehousingprogram_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasSetaside100pct)
                    .HasColumnName("ptas_setaside_100pct")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSetaside100pctBase)
                    .HasColumnName("ptas_setaside_100pct_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSetaside120pct)
                    .HasColumnName("ptas_setaside_120pct")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSetaside120pctBase)
                    .HasColumnName("ptas_setaside_120pct_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSetaside20pct)
                    .HasColumnName("ptas_setaside_20pct")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSetaside20pctBase)
                    .HasColumnName("ptas_setaside_20pct_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSetaside30pct)
                    .HasColumnName("ptas_setaside_30pct")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSetaside30pctBase)
                    .HasColumnName("ptas_setaside_30pct_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSetaside35pct)
                    .HasColumnName("ptas_setaside_35pct")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSetaside35pctBase)
                    .HasColumnName("ptas_setaside_35pct_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSetaside40pct)
                    .HasColumnName("ptas_setaside_40pct")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSetaside40pctBase)
                    .HasColumnName("ptas_setaside_40pct_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSetaside45pct)
                    .HasColumnName("ptas_setaside_45pct")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSetaside45pctBase)
                    .HasColumnName("ptas_setaside_45pct_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSetaside50pct)
                    .HasColumnName("ptas_setaside_50pct")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSetaside50pctBase)
                    .HasColumnName("ptas_setaside_50pct_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSetaside60pct)
                    .HasColumnName("ptas_setaside_60pct")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSetaside60pctBase)
                    .HasColumnName("ptas_setaside_60pct_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSetaside70pct)
                    .HasColumnName("ptas_setaside_70pct")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSetaside70pctBase)
                    .HasColumnName("ptas_setaside_70pct_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSetaside80pct)
                    .HasColumnName("ptas_setaside_80pct")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSetaside80pctBase)
                    .HasColumnName("ptas_setaside_80pct_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasUnittype).HasColumnName("ptas_unittype");

                entity.Property(e => e.PtasUtilityprogram).HasColumnName("ptas_utilityprogram");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasRestrictedrentCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_restrictedrent_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasRestrictedrentCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_restrictedrent_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasRestrictedrentModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_restrictedrent_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasRestrictedrentModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_restrictedrent_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasRestrictedrent)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_restrictedrent_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasRestrictedrentOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_restrictedrent_owninguser");

                entity.HasOne(d => d.PtasAssessmentyearValueNavigation)
                    .WithMany(p => p.PtasRestrictedrent)
                    .HasForeignKey(d => d.PtasAssessmentyearValue)
                    .HasConstraintName("FK_ptas_year_ptas_restrictedrent_ptas_assessmentyear");

                entity.HasOne(d => d.PtasLowincomehousingprogramValueNavigation)
                    .WithMany(p => p.PtasRestrictedrent)
                    .HasForeignKey(d => d.PtasLowincomehousingprogramValue)
                    .HasConstraintName("FK_ptas_housingprogram_ptas_restrictedrent_ptas_lowincomehousingprogram");
            });

            modelBuilder.Entity<PtasSalepriceadjustment>(entity =>
            {
                entity.ToTable("ptas_salepriceadjustment", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_salepriceadjustment_modifiedon");

                entity.Property(e => e.PtasSalepriceadjustmentid)
                    .HasColumnName("ptas_salepriceadjustmentid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAdjustmenttype).HasColumnName("ptas_adjustmenttype");

                entity.Property(e => e.PtasAlternatekey).HasColumnName("ptas_alternatekey");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasLinenumber).HasColumnName("ptas_linenumber");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasOtherdescription).HasColumnName("ptas_otherdescription");

                entity.Property(e => e.PtasPrice)
                    .HasColumnName("ptas_price")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPriceBase)
                    .HasColumnName("ptas_price_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSaleidValue).HasColumnName("_ptas_saleid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasSalepriceadjustmentCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_salepriceadjustment_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSalepriceadjustmentCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_salepriceadjustment_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasSalepriceadjustmentModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_salepriceadjustment_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSalepriceadjustmentModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_salepriceadjustment_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasSalepriceadjustment)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_salepriceadjustment_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasSalepriceadjustmentOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_salepriceadjustment_owninguser");

                entity.HasOne(d => d.PtasSaleidValueNavigation)
                    .WithMany(p => p.PtasSalepriceadjustment)
                    .HasForeignKey(d => d.PtasSaleidValue)
                    .HasConstraintName("FK_ptas_sales_ptas_salepriceadjustment_ptas_saleid");
            });

            modelBuilder.Entity<PtasSales>(entity =>
            {
                entity.ToTable("ptas_sales", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_sales_modifiedon");

                entity.HasIndex(e => e.PtasPrimaryparcelidValue)
                    .HasName("idx_PriParcelId");

                entity.Property(e => e.PtasSalesid)
                    .HasColumnName("ptas_salesid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAddr1CityidValue).HasColumnName("_ptas_addr1_cityid_value");

                entity.Property(e => e.PtasAddr1Compositeaddress).HasColumnName("ptas_addr1_compositeaddress");

                entity.Property(e => e.PtasAddr1CompositeaddressOneline).HasColumnName("ptas_addr1_compositeaddress_oneline");

                entity.Property(e => e.PtasAddr1CountryidValue).HasColumnName("_ptas_addr1_countryid_value");

                entity.Property(e => e.PtasAddr1Directionprefix).HasColumnName("ptas_addr1_directionprefix");

                entity.Property(e => e.PtasAddr1Directionsuffix).HasColumnName("ptas_addr1_directionsuffix");

                entity.Property(e => e.PtasAddr1Line2).HasColumnName("ptas_addr1_line2");

                entity.Property(e => e.PtasAddr1StateidValue).HasColumnName("_ptas_addr1_stateid_value");

                entity.Property(e => e.PtasAddr1StreetnameidValue).HasColumnName("_ptas_addr1_streetnameid_value");

                entity.Property(e => e.PtasAddr1Streetnumber).HasColumnName("ptas_addr1_streetnumber");

                entity.Property(e => e.PtasAddr1Streetnumberfraction).HasColumnName("ptas_addr1_streetnumberfraction");

                entity.Property(e => e.PtasAddr1StreettypeidValue).HasColumnName("_ptas_addr1_streettypeid_value");

                entity.Property(e => e.PtasAddr1ZipcodeidValue).HasColumnName("_ptas_addr1_zipcodeid_value");

                entity.Property(e => e.PtasAdjustedsaleprice)
                    .HasColumnName("ptas_adjustedsaleprice")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAdjustedsalepriceBase)
                    .HasColumnName("ptas_adjustedsaleprice_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAffidavitpropertytype).HasColumnName("ptas_affidavitpropertytype");

                entity.Property(e => e.PtasAgggrosssqft).HasColumnName("ptas_agggrosssqft");

                entity.Property(e => e.PtasAgglandacres)
                    .HasColumnName("ptas_agglandacres")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAgglandsft).HasColumnName("ptas_agglandsft");

                entity.Property(e => e.PtasAggnetsqft).HasColumnName("ptas_aggnetsqft");

                entity.Property(e => e.PtasAggnumberofunits).HasColumnName("ptas_aggnumberofunits");

                entity.Property(e => e.PtasAggregatebuildingquality).HasColumnName("ptas_aggregatebuildingquality");

                entity.Property(e => e.PtasAggregateconstructionclass).HasColumnName("ptas_aggregateconstructionclass");

                entity.Property(e => e.PtasAggregateeffectiveyear).HasColumnName("ptas_aggregateeffectiveyear");

                entity.Property(e => e.PtasAggregatemaxfloors).HasColumnName("ptas_aggregatemaxfloors");

                entity.Property(e => e.PtasAggregatenumberofbuildings).HasColumnName("ptas_aggregatenumberofbuildings");

                entity.Property(e => e.PtasAggregateyearbuilt).HasColumnName("ptas_aggregateyearbuilt");

                entity.Property(e => e.PtasAllparcelsmatch).HasColumnName("ptas_allparcelsmatch");

                entity.Property(e => e.PtasAppraiseradjustment)
                    .HasColumnName("ptas_appraiseradjustment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAppraiseradjustmentBase)
                    .HasColumnName("ptas_appraiseradjustment_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAppraiseradjustmentdescription).HasColumnName("ptas_appraiseradjustmentdescription");

                entity.Property(e => e.PtasAssociatedmajornumbers).HasColumnName("ptas_associatedmajornumbers");

                entity.Property(e => e.PtasBuyeraddress).HasColumnName("ptas_buyeraddress");

                entity.Property(e => e.PtasBuyercitystatezip).HasColumnName("ptas_buyercitystatezip");

                entity.Property(e => e.PtasConfidentialnotes).HasColumnName("ptas_confidentialnotes");

                entity.Property(e => e.PtasCurrentuse).HasColumnName("ptas_currentuse");

                entity.Property(e => e.PtasDatelettersenttobuyer).HasColumnName("ptas_datelettersenttobuyer");

                entity.Property(e => e.PtasDatelettersenttoseller).HasColumnName("ptas_datelettersenttoseller");

                entity.Property(e => e.PtasDevelopmentrights).HasColumnName("ptas_developmentrights");

                entity.Property(e => e.PtasDocumenttype).HasColumnName("ptas_documenttype");

                entity.Property(e => e.PtasDocumenttypestr).HasColumnName("ptas_documenttypestr");

                entity.Property(e => e.PtasExemptionremark).HasColumnName("ptas_exemptionremark");

                entity.Property(e => e.PtasExemptstatus).HasColumnName("ptas_exemptstatus");

                entity.Property(e => e.PtasForest).HasColumnName("ptas_forest");

                entity.Property(e => e.PtasFrozenseniorcitizenexemption).HasColumnName("ptas_frozenseniorcitizenexemption");

                entity.Property(e => e.PtasFullsitusaddress).HasColumnName("ptas_fullsitusaddress");

                entity.Property(e => e.PtasGranteelastname).HasColumnName("ptas_granteelastname");

                entity.Property(e => e.PtasGrantorlastname).HasColumnName("ptas_grantorlastname");

                entity.Property(e => e.PtasHistoric).HasColumnName("ptas_historic");

                entity.Property(e => e.PtasIdentifiedbydate).HasColumnName("ptas_identifiedbydate");

                entity.Property(e => e.PtasIdentifiedbyidValue).HasColumnName("_ptas_identifiedbyid_value");

                entity.Property(e => e.PtasInstrument).HasColumnName("ptas_instrument");

                entity.Property(e => e.PtasIntegrationsource).HasColumnName("ptas_integrationsource");

                entity.Property(e => e.PtasIsatmarket).HasColumnName("ptas_isatmarket");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasLegaldescription).HasColumnName("ptas_legaldescription");

                entity.Property(e => e.PtasLevelofverification).HasColumnName("ptas_levelofverification");

                entity.Property(e => e.PtasLinktorecordingdocument).HasColumnName("ptas_linktorecordingdocument");

                entity.Property(e => e.PtasLinktoreeta).HasColumnName("ptas_linktoreeta");

                entity.Property(e => e.PtasMigrationnote).HasColumnName("ptas_migrationnote");

                entity.Property(e => e.PtasMultiparcelsale).HasColumnName("ptas_multiparcelsale");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNbrparcels).HasColumnName("ptas_nbrparcels");

                entity.Property(e => e.PtasNonprofit).HasColumnName("ptas_nonprofit");

                entity.Property(e => e.PtasNonrepresentativesale).HasColumnName("ptas_nonrepresentativesale");

                entity.Property(e => e.PtasNonrepresentativesale1idValue).HasColumnName("_ptas_nonrepresentativesale1id_value");

                entity.Property(e => e.PtasNonrepresentativesale2idValue).HasColumnName("_ptas_nonrepresentativesale2id_value");

                entity.Property(e => e.PtasOperatingproperty).HasColumnName("ptas_operatingproperty");

                entity.Property(e => e.PtasParcelheadername).HasColumnName("ptas_parcelheadername");

                entity.Property(e => e.PtasParcelheadertext).HasColumnName("ptas_parcelheadertext");

                entity.Property(e => e.PtasParcelheadertext2).HasColumnName("ptas_parcelheadertext2");

                entity.Property(e => e.PtasParcelseg).HasColumnName("ptas_parcelseg");

                entity.Property(e => e.PtasPartialsaleflag).HasColumnName("ptas_partialsaleflag");

                entity.Property(e => e.PtasPrimarybuildingidValue).HasColumnName("_ptas_primarybuildingid_value");

                entity.Property(e => e.PtasPrimaryparcelidValue).HasColumnName("_ptas_primaryparcelid_value");

                entity.Property(e => e.PtasPropertytypeidValue).HasColumnName("_ptas_propertytypeid_value");

                entity.Property(e => e.PtasReason).HasColumnName("ptas_reason");

                entity.Property(e => e.PtasRecordingnumber).HasColumnName("ptas_recordingnumber");

                entity.Property(e => e.PtasReetachangedate).HasColumnName("ptas_reetachangedate");

                entity.Property(e => e.PtasSalecomplete).HasColumnName("ptas_salecomplete");

                entity.Property(e => e.PtasSaledate).HasColumnName("ptas_saledate");

                entity.Property(e => e.PtasSaleprice)
                    .HasColumnName("ptas_saleprice")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSalepriceBase)
                    .HasColumnName("ptas_saleprice_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSalepropertyclass).HasColumnName("ptas_salepropertyclass");

                entity.Property(e => e.PtasSalesidreviewstatus).HasColumnName("ptas_salesidreviewstatus");

                entity.Property(e => e.PtasSalesprincipleuse).HasColumnName("ptas_salesprincipleuse");

                entity.Property(e => e.PtasSaletype).HasColumnName("ptas_saletype");

                entity.Property(e => e.PtasSelleraddress).HasColumnName("ptas_selleraddress");

                entity.Property(e => e.PtasSellercitystatezip).HasColumnName("ptas_sellercitystatezip");

                entity.Property(e => e.PtasSetprimarybldgparcel).HasColumnName("ptas_setprimarybldgparcel");

                entity.Property(e => e.PtasSqftlotgra)
                    .HasColumnName("ptas_sqftlotgra")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSqftlotnra)
                    .HasColumnName("ptas_sqftlotnra")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSqftlotunit)
                    .HasColumnName("ptas_sqftlotunit")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSyncnameaddress).HasColumnName("ptas_syncnameaddress");

                entity.Property(e => e.PtasTaxablesellingprice)
                    .HasColumnName("ptas_taxablesellingprice")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTaxablesellingpriceBase)
                    .HasColumnName("ptas_taxablesellingprice_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTaxaccountidValue).HasColumnName("_ptas_taxaccountid_value");

                entity.Property(e => e.PtasTaxfirstname).HasColumnName("ptas_taxfirstname");

                entity.Property(e => e.PtasTaxlastname).HasColumnName("ptas_taxlastname");

                entity.Property(e => e.PtasUndividedinterest).HasColumnName("ptas_undividedinterest");

                entity.Property(e => e.PtasUnitidValue).HasColumnName("_ptas_unitid_value");

                entity.Property(e => e.PtasVacantland).HasColumnName("ptas_vacantland");

                entity.Property(e => e.PtasVerifiedbydate).HasColumnName("ptas_verifiedbydate");

                entity.Property(e => e.PtasVerifiedbyidValue).HasColumnName("_ptas_verifiedbyid_value");

                entity.Property(e => e.PtasVspgra)
                    .HasColumnName("ptas_vspgra")
                    .HasColumnType("money");

                entity.Property(e => e.PtasVspgraBase)
                    .HasColumnName("ptas_vspgra_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasVspnra)
                    .HasColumnName("ptas_vspnra")
                    .HasColumnType("money");

                entity.Property(e => e.PtasVspnraBase)
                    .HasColumnName("ptas_vspnra_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasVspsqftlot)
                    .HasColumnName("ptas_vspsqftlot")
                    .HasColumnType("money");

                entity.Property(e => e.PtasVspsqftlotBase)
                    .HasColumnName("ptas_vspsqftlot_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasVspunit)
                    .HasColumnName("ptas_vspunit")
                    .HasColumnType("money");

                entity.Property(e => e.PtasVspunitBase)
                    .HasColumnName("ptas_vspunit_base")
                    .HasColumnType("money");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasSalesParceldetailParcelsinsale>(entity =>
            {
                entity.ToTable("ptas_sales_parceldetail_parcelsinsale", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_sales_parceldetail_parcelsinsale_modifiedon");

                entity.Property(e => e.PtasSalesParceldetailParcelsinsaleid)
                    .HasColumnName("ptas_sales_parceldetail_parcelsinsaleid")
                    .ValueGeneratedNever();

                entity.Property(e => e.Modifiedon)
                    .HasColumnName("modifiedon")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.PtasParceldetailid).HasColumnName("ptas_parceldetailid");

                entity.Property(e => e.PtasSalesid).HasColumnName("ptas_salesid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasSalesPtasMediarepository>(entity =>
            {
                entity.ToTable("ptas_sales_ptas_mediarepository", "dynamics");

                entity.Property(e => e.PtasSalesPtasMediarepositoryid)
                    .HasColumnName("ptas_sales_ptas_mediarepositoryid")
                    .ValueGeneratedNever();

                entity.Property(e => e.Modifiedon)
                    .HasColumnName("modifiedon")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.PtasMediarepositoryid).HasColumnName("ptas_mediarepositoryid");

                entity.Property(e => e.PtasSalesid).HasColumnName("ptas_salesid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasSalesPtasSaleswarningcode>(entity =>
            {
                entity.ToTable("ptas_sales_ptas_saleswarningcode", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_sales_ptas_saleswarningcode_modifiedon");

                entity.Property(e => e.PtasSalesPtasSaleswarningcodeid)
                    .HasColumnName("ptas_sales_ptas_saleswarningcodeid")
                    .ValueGeneratedNever();

                entity.Property(e => e.Modifiedon)
                    .HasColumnName("modifiedon")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.PtasSalesid).HasColumnName("ptas_salesid");

                entity.Property(e => e.PtasSaleswarningcodeid).HasColumnName("ptas_saleswarningcodeid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasSalesaccessory>(entity =>
            {
                entity.ToTable("ptas_salesaccessory", "dynamics");

                entity.Property(e => e.PtasSalesaccessoryid)
                    .HasColumnName("ptas_salesaccessoryid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAccessorydetailidValue).HasColumnName("_ptas_accessorydetailid_value");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasLinenbr).HasColumnName("ptas_linenbr");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasQuantity).HasColumnName("ptas_quantity");

                entity.Property(e => e.PtasSalesbuildingidValue).HasColumnName("_ptas_salesbuildingid_value");

                entity.Property(e => e.PtasSalesidValue).HasColumnName("_ptas_salesid_value");

                entity.Property(e => e.PtasSalesparcelidValue).HasColumnName("_ptas_salesparcelid_value");

                entity.Property(e => e.PtasSize).HasColumnName("ptas_size");

                entity.Property(e => e.PtasType).HasColumnName("ptas_type");

                entity.Property(e => e.PtasUnitnbr).HasColumnName("ptas_unitnbr");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasSalesaccessoryCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_salesaccessory_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSalesaccessoryCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_salesaccessory_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasSalesaccessoryModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_salesaccessory_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSalesaccessoryModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_salesaccessory_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasSalesaccessory)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_salesaccessory_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasSalesaccessoryOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_salesaccessory_owninguser");

                entity.HasOne(d => d.PtasAccessorydetailidValueNavigation)
                    .WithMany(p => p.PtasSalesaccessory)
                    .HasForeignKey(d => d.PtasAccessorydetailidValue)
                    .HasConstraintName("FK_ptas_accessorydetail_ptas_salesaccessory_ptas_accessorydetailid");

                entity.HasOne(d => d.PtasSalesbuildingidValueNavigation)
                    .WithMany(p => p.PtasSalesaccessory)
                    .HasForeignKey(d => d.PtasSalesbuildingidValue)
                    .HasConstraintName("FK_ptas_salesbuilding_ptas_salesaccessory_ptas_salesbuildingid");

                entity.HasOne(d => d.PtasSalesidValueNavigation)
                    .WithMany(p => p.PtasSalesaccessory)
                    .HasForeignKey(d => d.PtasSalesidValue)
                    .HasConstraintName("FK_ptas_sales_ptas_salesaccessory_ptas_salesid");

                entity.HasOne(d => d.PtasSalesparcelidValueNavigation)
                    .WithMany(p => p.PtasSalesaccessory)
                    .HasForeignKey(d => d.PtasSalesparcelidValue)
                    .HasConstraintName("FK_ptas_salesparcel_ptas_salesaccessory_ptas_salesparcelid");
            });

            modelBuilder.Entity<PtasSalesaggregate>(entity =>
            {
                entity.ToTable("ptas_salesaggregate", "dynamics");

                entity.Property(e => e.PtasSalesaggregateid)
                    .HasColumnName("ptas_salesaggregateid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAcres)
                    .HasColumnName("ptas_acres")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAddress).HasColumnName("ptas_address");

                entity.Property(e => e.PtasAvgsqftofunits).HasColumnName("ptas_avgsqftofunits");

                entity.Property(e => e.PtasBuildinggrosssqft).HasColumnName("ptas_buildinggrosssqft");

                entity.Property(e => e.PtasBuildingnetsqft).HasColumnName("ptas_buildingnetsqft");

                entity.Property(e => e.PtasBuildingquality).HasColumnName("ptas_buildingquality");

                entity.Property(e => e.PtasBuildingsectionuseidValue).HasColumnName("_ptas_buildingsectionuseid_value");

                entity.Property(e => e.PtasConstructionclass).HasColumnName("ptas_constructionclass");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasDistrictidValue).HasColumnName("_ptas_districtid_value");

                entity.Property(e => e.PtasFolio).HasColumnName("ptas_folio");

                entity.Property(e => e.PtasGeoareaidValue).HasColumnName("_ptas_geoareaid_value");

                entity.Property(e => e.PtasGeoneighborhoodidValue).HasColumnName("_ptas_geoneighborhoodid_value");

                entity.Property(e => e.PtasLotsizesqft).HasColumnName("ptas_lotsizesqft");

                entity.Property(e => e.PtasMajor).HasColumnName("ptas_major");

                entity.Property(e => e.PtasMaxfloors).HasColumnName("ptas_maxfloors");

                entity.Property(e => e.PtasMinor).HasColumnName("ptas_minor");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNoofunitssold).HasColumnName("ptas_noofunitssold");

                entity.Property(e => e.PtasPercentview)
                    .HasColumnName("ptas_percentview")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPresentuse).HasColumnName("ptas_presentuse");

                entity.Property(e => e.PtasPresentuseidValue).HasColumnName("_ptas_presentuseid_value");

                entity.Property(e => e.PtasPrimarybuilding).HasColumnName("ptas_primarybuilding");

                entity.Property(e => e.PtasPrimarybuildingidValue).HasColumnName("_ptas_primarybuildingid_value");

                entity.Property(e => e.PtasProjectappeal).HasColumnName("ptas_projectappeal");

                entity.Property(e => e.PtasProjectlocation).HasColumnName("ptas_projectlocation");

                entity.Property(e => e.PtasPropertyname).HasColumnName("ptas_propertyname");

                entity.Property(e => e.PtasPropertytypeidValue).HasColumnName("_ptas_propertytypeid_value");

                entity.Property(e => e.PtasQstridValue).HasColumnName("_ptas_qstrid_value");

                entity.Property(e => e.PtasResponsibilityidValue).HasColumnName("_ptas_responsibilityid_value");

                entity.Property(e => e.PtasSaleidValue).HasColumnName("_ptas_saleid_value");

                entity.Property(e => e.PtasSpecialtyareaidValue).HasColumnName("_ptas_specialtyareaid_value");

                entity.Property(e => e.PtasSpecialtyneighborhoodidValue).HasColumnName("_ptas_specialtyneighborhoodid_value");

                entity.Property(e => e.PtasSqftlotgrossbuildingarea)
                    .HasColumnName("ptas_sqftlotgrossbuildingarea")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSqftlotnetbuildingarea)
                    .HasColumnName("ptas_sqftlotnetbuildingarea")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSqftlotunit)
                    .HasColumnName("ptas_sqftlotunit")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalbuildings).HasColumnName("ptas_totalbuildings");

                entity.Property(e => e.PtasVacantland).HasColumnName("ptas_vacantland");

                entity.Property(e => e.PtasVerifiedsalepricesqftlot)
                    .HasColumnName("ptas_verifiedsalepricesqftlot")
                    .HasColumnType("money");

                entity.Property(e => e.PtasViews).HasColumnName("ptas_views");

                entity.Property(e => e.PtasVsppergra)
                    .HasColumnName("ptas_vsppergra")
                    .HasColumnType("money");

                entity.Property(e => e.PtasVsppernra)
                    .HasColumnName("ptas_vsppernra")
                    .HasColumnType("money");

                entity.Property(e => e.PtasVspperunit)
                    .HasColumnName("ptas_vspperunit")
                    .HasColumnType("money");

                entity.Property(e => e.PtasYearbuiltidValue).HasColumnName("_ptas_yearbuiltid_value");

                entity.Property(e => e.PtasYeareffectiveidValue).HasColumnName("_ptas_yeareffectiveid_value");

                entity.Property(e => e.PtasZoning).HasColumnName("ptas_zoning");

                entity.Property(e => e.PtasZoningidValue).HasColumnName("_ptas_zoningid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasSalesaggregateCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_salesaggregate_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSalesaggregateCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_salesaggregate_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasSalesaggregateModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_salesaggregate_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSalesaggregateModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_salesaggregate_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasSalesaggregate)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_salesaggregate_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasSalesaggregateOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_salesaggregate_owninguser");

                entity.HasOne(d => d.PtasBuildingsectionuseidValueNavigation)
                    .WithMany(p => p.PtasSalesaggregate)
                    .HasForeignKey(d => d.PtasBuildingsectionuseidValue)
                    .HasConstraintName("FK_ptas_buildingsectionuse_ptas_salesaggregate_ptas_buildingsectionuseid");

                entity.HasOne(d => d.PtasDistrictidValueNavigation)
                    .WithMany(p => p.PtasSalesaggregate)
                    .HasForeignKey(d => d.PtasDistrictidValue)
                    .HasConstraintName("FK_ptas_district_ptas_salesaggregate_ptas_districtid");

                entity.HasOne(d => d.PtasGeoareaidValueNavigation)
                    .WithMany(p => p.PtasSalesaggregate)
                    .HasForeignKey(d => d.PtasGeoareaidValue)
                    .HasConstraintName("FK_ptas_geoarea_ptas_salesaggregate_ptas_geoareaid");

                entity.HasOne(d => d.PtasGeoneighborhoodidValueNavigation)
                    .WithMany(p => p.PtasSalesaggregate)
                    .HasForeignKey(d => d.PtasGeoneighborhoodidValue)
                    .HasConstraintName("FK_ptas_geoneighborhood_ptas_salesaggregate_ptas_geoneighborhoodid");

                entity.HasOne(d => d.PtasPresentuseidValueNavigation)
                    .WithMany(p => p.PtasSalesaggregate)
                    .HasForeignKey(d => d.PtasPresentuseidValue)
                    .HasConstraintName("FK_ptas_landuse_ptas_salesaggregate_ptas_presentuseid");

                entity.HasOne(d => d.PtasPrimarybuildingidValueNavigation)
                    .WithMany(p => p.PtasSalesaggregate)
                    .HasForeignKey(d => d.PtasPrimarybuildingidValue)
                    .HasConstraintName("FK_ptas_buildingdetail_ptas_salesaggregate_ptas_primarybuildingid");

                entity.HasOne(d => d.PtasPropertytypeidValueNavigation)
                    .WithMany(p => p.PtasSalesaggregate)
                    .HasForeignKey(d => d.PtasPropertytypeidValue)
                    .HasConstraintName("FK_ptas_propertytype_ptas_salesaggregate_ptas_propertytypeid");

                entity.HasOne(d => d.PtasQstridValueNavigation)
                    .WithMany(p => p.PtasSalesaggregate)
                    .HasForeignKey(d => d.PtasQstridValue)
                    .HasConstraintName("FK_ptas_qstr_ptas_salesaggregate_ptas_qstrid");

                entity.HasOne(d => d.PtasResponsibilityidValueNavigation)
                    .WithMany(p => p.PtasSalesaggregate)
                    .HasForeignKey(d => d.PtasResponsibilityidValue)
                    .HasConstraintName("FK_ptas_responsibility_ptas_salesaggregate_ptas_responsibilityid");

                entity.HasOne(d => d.PtasSaleidValueNavigation)
                    .WithMany(p => p.PtasSalesaggregate)
                    .HasForeignKey(d => d.PtasSaleidValue)
                    .HasConstraintName("FK_ptas_sales_ptas_salesaggregate_ptas_saleid");

                entity.HasOne(d => d.PtasSpecialtyareaidValueNavigation)
                    .WithMany(p => p.PtasSalesaggregate)
                    .HasForeignKey(d => d.PtasSpecialtyareaidValue)
                    .HasConstraintName("FK_ptas_specialtyarea_ptas_salesaggregate_ptas_specialtyareaid");

                entity.HasOne(d => d.PtasSpecialtyneighborhoodidValueNavigation)
                    .WithMany(p => p.PtasSalesaggregate)
                    .HasForeignKey(d => d.PtasSpecialtyneighborhoodidValue)
                    .HasConstraintName("FK_ptas_specialtyneighborhood_ptas_salesaggregate_ptas_specialtyneighborhoodid");

                entity.HasOne(d => d.PtasYearbuiltidValueNavigation)
                    .WithMany(p => p.PtasSalesaggregatePtasYearbuiltidValueNavigation)
                    .HasForeignKey(d => d.PtasYearbuiltidValue)
                    .HasConstraintName("FK_ptas_year_ptas_salesaggregate_ptas_yearbuiltid");

                entity.HasOne(d => d.PtasYeareffectiveidValueNavigation)
                    .WithMany(p => p.PtasSalesaggregatePtasYeareffectiveidValueNavigation)
                    .HasForeignKey(d => d.PtasYeareffectiveidValue)
                    .HasConstraintName("FK_ptas_year_ptas_salesaggregate_ptas_yeareffectiveid");

                entity.HasOne(d => d.PtasZoningidValueNavigation)
                    .WithMany(p => p.PtasSalesaggregate)
                    .HasForeignKey(d => d.PtasZoningidValue)
                    .HasConstraintName("FK_ptas_zoning_ptas_salesaggregate_ptas_zoningid");
            });

            modelBuilder.Entity<PtasSalesbuilding>(entity =>
            {
                entity.ToTable("ptas_salesbuilding", "dynamics");

                entity.Property(e => e.PtasSalesbuildingid)
                    .HasColumnName("ptas_salesbuildingid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.Ptas12baths).HasColumnName("ptas_12baths");

                entity.Property(e => e.Ptas1stflrSqft).HasColumnName("ptas_1stflr_sqft");

                entity.Property(e => e.Ptas2ndflrSqft).HasColumnName("ptas_2ndflr_sqft");

                entity.Property(e => e.Ptas34baths).HasColumnName("ptas_34baths");

                entity.Property(e => e.PtasAddlFireplace).HasColumnName("ptas_addl_fireplace");

                entity.Property(e => e.PtasAddlFireplaceCost)
                    .HasColumnName("ptas_addl_fireplace_cost")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAddlFireplaceCostBase)
                    .HasColumnName("ptas_addl_fireplace_cost_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAttachedgarageSqft).HasColumnName("ptas_attachedgarage_sqft");

                entity.Property(e => e.PtasBasementgarageSqft).HasColumnName("ptas_basementgarage_sqft");

                entity.Property(e => e.PtasBasementgrade).HasColumnName("ptas_basementgrade");

                entity.Property(e => e.PtasBedroomnbr).HasColumnName("ptas_bedroomnbr");

                entity.Property(e => e.PtasBrickStone).HasColumnName("ptas_brick_stone");

                entity.Property(e => e.PtasBuilding).HasColumnName("ptas_building");

                entity.Property(e => e.PtasBuildingdetailidValue).HasColumnName("_ptas_buildingdetailid_value");

                entity.Property(e => e.PtasCondition).HasColumnName("ptas_condition");

                entity.Property(e => e.PtasDaylightbasement).HasColumnName("ptas_daylightbasement");

                entity.Property(e => e.PtasDeckSqft).HasColumnName("ptas_deck_sqft");

                entity.Property(e => e.PtasFinbsmtSqft).HasColumnName("ptas_finbsmt_sqft");

                entity.Property(e => e.PtasFrStdFireplace).HasColumnName("ptas_fr_std_fireplace");

                entity.Property(e => e.PtasFullbathnbr).HasColumnName("ptas_fullbathnbr");

                entity.Property(e => e.PtasGrade).HasColumnName("ptas_grade");

                entity.Property(e => e.PtasHalfflrSqft).HasColumnName("ptas_halfflr_sqft");

                entity.Property(e => e.PtasHeatsource).HasColumnName("ptas_heatsource");

                entity.Property(e => e.PtasHeatsystem).HasColumnName("ptas_heatsystem");

                entity.Property(e => e.PtasMultiFireplace).HasColumnName("ptas_multi_fireplace");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNbrfraction).HasColumnName("ptas_nbrfraction");

                entity.Property(e => e.PtasNetcond).HasColumnName("ptas_netcond");

                entity.Property(e => e.PtasObsolescence).HasColumnName("ptas_obsolescence");

                entity.Property(e => e.PtasOpenEnclPorchSqft).HasColumnName("ptas_open_encl_porch_sqft");

                entity.Property(e => e.PtasPercentcond).HasColumnName("ptas_percentcond");

                entity.Property(e => e.PtasSalesaccessorycreated).HasColumnName("ptas_salesaccessorycreated");

                entity.Property(e => e.PtasSalesidValue).HasColumnName("_ptas_salesid_value");

                entity.Property(e => e.PtasSalesparcelidValue).HasColumnName("_ptas_salesparcelid_value");

                entity.Property(e => e.PtasSingleFireplace).HasColumnName("ptas_single_fireplace");

                entity.Property(e => e.PtasStories)
                    .HasColumnName("ptas_stories")
                    .HasColumnType("money");

                entity.Property(e => e.PtasStreet).HasColumnName("ptas_street");

                entity.Property(e => e.PtasStreetnbr).HasColumnName("ptas_streetnbr");

                entity.Property(e => e.PtasTotalbsmtSqft).HasColumnName("ptas_totalbsmt_sqft");

                entity.Property(e => e.PtasTotallivingSqft).HasColumnName("ptas_totalliving_sqft");

                entity.Property(e => e.PtasUnfinishedFullSqft).HasColumnName("ptas_unfinished_full_sqft");

                entity.Property(e => e.PtasUnfinishedHalfSqft).HasColumnName("ptas_unfinished_half_sqft");

                entity.Property(e => e.PtasUnitdescription).HasColumnName("ptas_unitdescription");

                entity.Property(e => e.PtasUnits).HasColumnName("ptas_units");

                entity.Property(e => e.PtasUpperflrSqft).HasColumnName("ptas_upperflr_sqft");

                entity.Property(e => e.PtasVar).HasColumnName("ptas_var");

                entity.Property(e => e.PtasViewutil).HasColumnName("ptas_viewutil");

                entity.Property(e => e.PtasYearbuiltidValue).HasColumnName("_ptas_yearbuiltid_value");

                entity.Property(e => e.PtasYearrenovatedidValue).HasColumnName("_ptas_yearrenovatedid_value");

                entity.Property(e => e.PtasZip).HasColumnName("ptas_zip");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasSalesbuildingCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_salesbuilding_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSalesbuildingCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_salesbuilding_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasSalesbuildingModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_salesbuilding_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSalesbuildingModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_salesbuilding_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasSalesbuilding)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_salesbuilding_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasSalesbuildingOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_salesbuilding_owninguser");

                entity.HasOne(d => d.PtasBuildingdetailidValueNavigation)
                    .WithMany(p => p.PtasSalesbuilding)
                    .HasForeignKey(d => d.PtasBuildingdetailidValue)
                    .HasConstraintName("FK_ptas_buildingdetail_ptas_salesbuilding_ptas_buildingdetailid");

                entity.HasOne(d => d.PtasSalesidValueNavigation)
                    .WithMany(p => p.PtasSalesbuilding)
                    .HasForeignKey(d => d.PtasSalesidValue)
                    .HasConstraintName("FK_ptas_sales_ptas_salesbuilding_ptas_salesid");

                entity.HasOne(d => d.PtasSalesparcelidValueNavigation)
                    .WithMany(p => p.PtasSalesbuilding)
                    .HasForeignKey(d => d.PtasSalesparcelidValue)
                    .HasConstraintName("FK_ptas_salesparcel_ptas_salesbuilding_ptas_salesparcelid");

                entity.HasOne(d => d.PtasYearbuiltidValueNavigation)
                    .WithMany(p => p.PtasSalesbuildingPtasYearbuiltidValueNavigation)
                    .HasForeignKey(d => d.PtasYearbuiltidValue)
                    .HasConstraintName("FK_ptas_year_ptas_salesbuilding_ptas_yearbuiltid");

                entity.HasOne(d => d.PtasYearrenovatedidValueNavigation)
                    .WithMany(p => p.PtasSalesbuildingPtasYearrenovatedidValueNavigation)
                    .HasForeignKey(d => d.PtasYearrenovatedidValue)
                    .HasConstraintName("FK_ptas_year_ptas_salesbuilding_ptas_yearrenovatedid");
            });

            modelBuilder.Entity<PtasSalesnote>(entity =>
            {
                entity.ToTable("ptas_salesnote", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_salesnote_modifiedon");

                entity.Property(e => e.PtasSalesnoteid)
                    .HasColumnName("ptas_salesnoteid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNotetext).HasColumnName("ptas_notetext");

                entity.Property(e => e.PtasSaleidValue).HasColumnName("_ptas_saleid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasSalesnoteCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_salesnote_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSalesnoteCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_salesnote_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasSalesnoteModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_salesnote_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSalesnoteModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_salesnote_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasSalesnote)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_salesnote_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasSalesnoteOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_salesnote_owninguser");

                entity.HasOne(d => d.PtasSaleidValueNavigation)
                    .WithMany(p => p.PtasSalesnote)
                    .HasForeignKey(d => d.PtasSaleidValue)
                    .HasConstraintName("FK_ptas_sales_ptas_salesnote_ptas_saleid");
            });

            modelBuilder.Entity<PtasSalesnotePtasMediarepository>(entity =>
            {
                entity.ToTable("ptas_salesnote_ptas_mediarepository", "dynamics");

                entity.Property(e => e.PtasSalesnotePtasMediarepositoryid)
                    .HasColumnName("ptas_salesnote_ptas_mediarepositoryid")
                    .ValueGeneratedNever();

                entity.Property(e => e.PtasMediarepositoryid).HasColumnName("ptas_mediarepositoryid");

                entity.Property(e => e.PtasSalesnoteid).HasColumnName("ptas_salesnoteid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasSalesparcel>(entity =>
            {
                entity.ToTable("ptas_salesparcel", "dynamics");

                entity.Property(e => e.PtasSalesparcelid)
                    .HasColumnName("ptas_salesparcelid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAcctnbr).HasColumnName("ptas_acctnbr");

                entity.Property(e => e.PtasAddress).HasColumnName("ptas_address");

                entity.Property(e => e.PtasCommarea).HasColumnName("ptas_commarea");

                entity.Property(e => e.PtasCommsubarea).HasColumnName("ptas_commsubarea");

                entity.Property(e => e.PtasDirsuffix).HasColumnName("ptas_dirsuffix");

                entity.Property(e => e.PtasDistrict).HasColumnName("ptas_district");

                entity.Property(e => e.PtasFolio).HasColumnName("ptas_folio");

                entity.Property(e => e.PtasLegaldescription).HasColumnName("ptas_legaldescription");

                entity.Property(e => e.PtasLevycode).HasColumnName("ptas_levycode");

                entity.Property(e => e.PtasMainparcel).HasColumnName("ptas_mainparcel");

                entity.Property(e => e.PtasMajor).HasColumnName("ptas_major");

                entity.Property(e => e.PtasMinor).HasColumnName("ptas_minor");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNamesonaccount).HasColumnName("ptas_namesonaccount");

                entity.Property(e => e.PtasNbrfraction).HasColumnName("ptas_nbrfraction");

                entity.Property(e => e.PtasNeighborhood).HasColumnName("ptas_neighborhood");

                entity.Property(e => e.PtasParceldetailidValue).HasColumnName("_ptas_parceldetailid_value");

                entity.Property(e => e.PtasPlatblock).HasColumnName("ptas_platblock");

                entity.Property(e => e.PtasPlatlot).HasColumnName("ptas_platlot");

                entity.Property(e => e.PtasProptype).HasColumnName("ptas_proptype");

                entity.Property(e => e.PtasResarea).HasColumnName("ptas_resarea");

                entity.Property(e => e.PtasRessubarea).HasColumnName("ptas_ressubarea");

                entity.Property(e => e.PtasSalesaccessorycreated).HasColumnName("ptas_salesaccessorycreated");

                entity.Property(e => e.PtasSalesbuildingcreated).HasColumnName("ptas_salesbuildingcreated");

                entity.Property(e => e.PtasSalesidValue).HasColumnName("_ptas_salesid_value");

                entity.Property(e => e.PtasStreetname).HasColumnName("ptas_streetname");

                entity.Property(e => e.PtasStreetnbr).HasColumnName("ptas_streetnbr");

                entity.Property(e => e.PtasStreettype).HasColumnName("ptas_streettype");

                entity.Property(e => e.PtasZipcode).HasColumnName("ptas_zipcode");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasSalesparcelCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_salesparcel_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSalesparcelCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_salesparcel_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasSalesparcelModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_salesparcel_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSalesparcelModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_salesparcel_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasSalesparcel)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_salesparcel_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasSalesparcelOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_salesparcel_owninguser");

                entity.HasOne(d => d.PtasParceldetailidValueNavigation)
                    .WithMany(p => p.PtasSalesparcel)
                    .HasForeignKey(d => d.PtasParceldetailidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_salesparcel_ptas_parceldetailid");

                entity.HasOne(d => d.PtasSalesidValueNavigation)
                    .WithMany(p => p.PtasSalesparcel)
                    .HasForeignKey(d => d.PtasSalesidValue)
                    .HasConstraintName("FK_ptas_sales_ptas_salesparcel_ptas_salesid");
            });

            modelBuilder.Entity<PtasSaleswarningcode>(entity =>
            {
                entity.ToTable("ptas_saleswarningcode", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_saleswarningcode_modifiedon");

                entity.Property(e => e.PtasSaleswarningcodeid)
                    .HasColumnName("ptas_saleswarningcodeid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasId).HasColumnName("ptas_id");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasRpid).HasColumnName("ptas_rpid");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasSaleswarningcodeCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_saleswarningcode_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSaleswarningcodeCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_saleswarningcode_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasSaleswarningcodeModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_saleswarningcode_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSaleswarningcodeModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_saleswarningcode_modifiedonbehalfby");
            });

            modelBuilder.Entity<PtasScheduledworkflow>(entity =>
            {
                entity.ToTable("ptas_scheduledworkflow", "dynamics");

                entity.Property(e => e.PtasScheduledworkflowid)
                    .HasColumnName("ptas_scheduledworkflowid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasDaystocheck).HasColumnName("ptas_daystocheck");

                entity.Property(e => e.PtasLastrun).HasColumnName("ptas_lastrun");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasSchedule).HasColumnName("ptas_schedule");

                entity.Property(e => e.PtasWorkflowactionname).HasColumnName("ptas_workflowactionname");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasScheduledworkflowCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_scheduledworkflow_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasScheduledworkflowCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_scheduledworkflow_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasScheduledworkflowModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_scheduledworkflow_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasScheduledworkflowModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_scheduledworkflow_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasScheduledworkflow)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_scheduledworkflow_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasScheduledworkflowOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_scheduledworkflow_owninguser");
            });

            modelBuilder.Entity<PtasSeappdetail>(entity =>
            {
                entity.ToTable("ptas_seappdetail", "dynamics");

                entity.Property(e => e.PtasSeappdetailid)
                    .HasColumnName("ptas_seappdetailid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAccountnumber).HasColumnName("ptas_accountnumber");

                entity.Property(e => e.PtasAgeasofdecember31).HasColumnName("ptas_ageasofdecember31");

                entity.Property(e => e.PtasAlternatekey).HasColumnName("ptas_alternatekey");

                entity.Property(e => e.PtasAtcjobidValue).HasColumnName("_ptas_atcjobid_value");

                entity.Property(e => e.PtasCompletedbyidValue).HasColumnName("_ptas_completedbyid_value");

                entity.Property(e => e.PtasContactidValue).HasColumnName("_ptas_contactid_value");

                entity.Property(e => e.PtasDecisionreasonidValue).HasColumnName("_ptas_decisionreasonid_value");

                entity.Property(e => e.PtasDocannuity).HasColumnName("ptas_docannuity");

                entity.Property(e => e.PtasDocbankstatement).HasColumnName("ptas_docbankstatement");

                entity.Property(e => e.PtasDocira).HasColumnName("ptas_docira");

                entity.Property(e => e.PtasDocirs1040).HasColumnName("ptas_docirs1040");

                entity.Property(e => e.PtasDocirs1099).HasColumnName("ptas_docirs1099");

                entity.Property(e => e.PtasDocother).HasColumnName("ptas_docother");

                entity.Property(e => e.PtasDocpension).HasColumnName("ptas_docpension");

                entity.Property(e => e.PtasDocrx).HasColumnName("ptas_docrx");

                entity.Property(e => e.PtasDocsocialsecurity).HasColumnName("ptas_docsocialsecurity");

                entity.Property(e => e.PtasExemptionlevel).HasColumnName("ptas_exemptionlevel");

                entity.Property(e => e.PtasExemptiontype).HasColumnName("ptas_exemptiontype");

                entity.Property(e => e.PtasIncomelevel).HasColumnName("ptas_incomelevel");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasMissingdocumentlist).HasColumnName("ptas_missingdocumentlist");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNettotalincome)
                    .HasColumnName("ptas_nettotalincome")
                    .HasColumnType("money");

                entity.Property(e => e.PtasNettotalincomeBase)
                    .HasColumnName("ptas_nettotalincome_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasOther).HasColumnName("ptas_other");

                entity.Property(e => e.PtasOverrideincomelimiterror).HasColumnName("ptas_overrideincomelimiterror");

                entity.Property(e => e.PtasOverrideincomelimitnote).HasColumnName("ptas_overrideincomelimitnote");

                entity.Property(e => e.PtasOverrideminimumageerror).HasColumnName("ptas_overrideminimumageerror");

                entity.Property(e => e.PtasOverrideminimumagenote).HasColumnName("ptas_overrideminimumagenote");

                entity.Property(e => e.PtasParcelidValue).HasColumnName("_ptas_parcelid_value");

                entity.Property(e => e.PtasRollyearidValue).HasColumnName("_ptas_rollyearid_value");

                entity.Property(e => e.PtasSeapplicationidValue).HasColumnName("_ptas_seapplicationid_value");

                entity.Property(e => e.PtasTotalexpenses)
                    .HasColumnName("ptas_totalexpenses")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalexpensesBase)
                    .HasColumnName("ptas_totalexpenses_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalincome)
                    .HasColumnName("ptas_totalincome")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalincomeBase)
                    .HasColumnName("ptas_totalincome_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasYearidValue).HasColumnName("_ptas_yearid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasSeappdetailCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_seappdetail_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSeappdetailCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_seappdetail_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasSeappdetailModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_seappdetail_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSeappdetailModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_seappdetail_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasSeappdetail)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_seappdetail_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasSeappdetailOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_seappdetail_owninguser");

                entity.HasOne(d => d.PtasAtcjobidValueNavigation)
                    .WithMany(p => p.PtasSeappdetail)
                    .HasForeignKey(d => d.PtasAtcjobidValue)
                    .HasConstraintName("FK_ptas_sefrozenvalue_ptas_seappdetail_ptas_atcjobid");

                entity.HasOne(d => d.PtasCompletedbyidValueNavigation)
                    .WithMany(p => p.PtasSeappdetailPtasCompletedbyidValueNavigation)
                    .HasForeignKey(d => d.PtasCompletedbyidValue)
                    .HasConstraintName("FK_systemuser_ptas_seappdetail_ptas_completedbyid");

                entity.HasOne(d => d.PtasContactidValueNavigation)
                    .WithMany(p => p.PtasSeappdetail)
                    .HasForeignKey(d => d.PtasContactidValue)
                    .HasConstraintName("FK_contact_ptas_seappdetail_ptas_contactid");

                entity.HasOne(d => d.PtasDecisionreasonidValueNavigation)
                    .WithMany(p => p.PtasSeappdetail)
                    .HasForeignKey(d => d.PtasDecisionreasonidValue)
                    .HasConstraintName("FK_ptas_seexemptionreason_ptas_seappdetail_ptas_decisionreasonid");

                entity.HasOne(d => d.PtasParcelidValueNavigation)
                    .WithMany(p => p.PtasSeappdetail)
                    .HasForeignKey(d => d.PtasParcelidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_seappdetail_ptas_parcelid");

                entity.HasOne(d => d.PtasRollyearidValueNavigation)
                    .WithMany(p => p.PtasSeappdetailPtasRollyearidValueNavigation)
                    .HasForeignKey(d => d.PtasRollyearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_seappdetail_ptas_rollyearid");

                entity.HasOne(d => d.PtasSeapplicationidValueNavigation)
                    .WithMany(p => p.PtasSeappdetail)
                    .HasForeignKey(d => d.PtasSeapplicationidValue)
                    .HasConstraintName("FK_ptas_seapplication_ptas_seappdetail_ptas_seapplicationid");

                entity.HasOne(d => d.PtasYearidValueNavigation)
                    .WithMany(p => p.PtasSeappdetailPtasYearidValueNavigation)
                    .HasForeignKey(d => d.PtasYearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_seappdetail_ptas_yearid");
            });

            modelBuilder.Entity<PtasSeapplication>(entity =>
            {
                entity.ToTable("ptas_seapplication", "dynamics");

                entity.Property(e => e.PtasSeapplicationid)
                    .HasColumnName("ptas_seapplicationid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAccountnumber).HasColumnName("ptas_accountnumber");

                entity.Property(e => e.PtasAccounttype).HasColumnName("ptas_accounttype");

                entity.Property(e => e.PtasAddrchange).HasColumnName("ptas_addrchange");

                entity.Property(e => e.PtasAddrcity).HasColumnName("ptas_addrcity");

                entity.Property(e => e.PtasAddrcountryidValue).HasColumnName("_ptas_addrcountryid_value");

                entity.Property(e => e.PtasAddrpostal).HasColumnName("ptas_addrpostal");

                entity.Property(e => e.PtasAddrstate).HasColumnName("ptas_addrstate");

                entity.Property(e => e.PtasAddrstreet1).HasColumnName("ptas_addrstreet1");

                entity.Property(e => e.PtasAgeattimeofdeath).HasColumnName("ptas_ageattimeofdeath");

                entity.Property(e => e.PtasAlternatekey).HasColumnName("ptas_alternatekey");

                entity.Property(e => e.PtasApplicantdateofbirth)
                    .HasColumnName("ptas_applicantdateofbirth")
                    .HasColumnType("datetime");

                entity.Property(e => e.PtasApplicantemailaddress).HasColumnName("ptas_applicantemailaddress");

                entity.Property(e => e.PtasApplicantfirstname).HasColumnName("ptas_applicantfirstname");

                entity.Property(e => e.PtasApplicantlastname).HasColumnName("ptas_applicantlastname");

                entity.Property(e => e.PtasApplicantmiddlename).HasColumnName("ptas_applicantmiddlename");

                entity.Property(e => e.PtasApplicantmobilephone).HasColumnName("ptas_applicantmobilephone");

                entity.Property(e => e.PtasApplicantphonenumber).HasColumnName("ptas_applicantphonenumber");

                entity.Property(e => e.PtasApplicantrecordValue).HasColumnName("_ptas_applicantrecord_value");

                entity.Property(e => e.PtasApplicantsuffix).HasColumnName("ptas_applicantsuffix");

                entity.Property(e => e.PtasApplicationdate).HasColumnName("ptas_applicationdate");

                entity.Property(e => e.PtasApplicationstatuslastchangedon).HasColumnName("ptas_applicationstatuslastchangedon");

                entity.Property(e => e.PtasApplicationtype).HasColumnName("ptas_applicationtype");

                entity.Property(e => e.PtasApprovaltaskcreated).HasColumnName("ptas_approvaltaskcreated");

                entity.Property(e => e.PtasAutogeneratedocuments).HasColumnName("ptas_autogeneratedocuments");

                entity.Property(e => e.PtasBlockautoatc240).HasColumnName("ptas_blockautoatc240");

                entity.Property(e => e.PtasCheckaddresscity).HasColumnName("ptas_checkaddresscity");

                entity.Property(e => e.PtasCheckaddresscountryidValue).HasColumnName("_ptas_checkaddresscountryid_value");

                entity.Property(e => e.PtasCheckaddressname).HasColumnName("ptas_checkaddressname");

                entity.Property(e => e.PtasCheckaddresspostalcode).HasColumnName("ptas_checkaddresspostalcode");

                entity.Property(e => e.PtasCheckaddressstate).HasColumnName("ptas_checkaddressstate");

                entity.Property(e => e.PtasCheckaddressstreet).HasColumnName("ptas_checkaddressstreet");

                entity.Property(e => e.PtasCompletedbyidValue).HasColumnName("_ptas_completedbyid_value");

                entity.Property(e => e.PtasContactidValue).HasColumnName("_ptas_contactid_value");

                entity.Property(e => e.PtasCoopname).HasColumnName("ptas_coopname");

                entity.Property(e => e.PtasCoopownedshares).HasColumnName("ptas_coopownedshares");

                entity.Property(e => e.PtasCoopproperty).HasColumnName("ptas_coopproperty");

                entity.Property(e => e.PtasCooptotalshares).HasColumnName("ptas_cooptotalshares");

                entity.Property(e => e.PtasCooptreasurer).HasColumnName("ptas_cooptreasurer");

                entity.Property(e => e.PtasCooptreasurerphone).HasColumnName("ptas_cooptreasurerphone");

                entity.Property(e => e.PtasCorrespondencename).HasColumnName("ptas_correspondencename");

                entity.Property(e => e.PtasCurrentimprovementsvalue)
                    .HasColumnName("ptas_currentimprovementsvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrentimprovementsvalueBase)
                    .HasColumnName("ptas_currentimprovementsvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrentlandvalue)
                    .HasColumnName("ptas_currentlandvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrentlandvalueBase)
                    .HasColumnName("ptas_currentlandvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCurrentlyownoccupy).HasColumnName("ptas_currentlyownoccupy");

                entity.Property(e => e.PtasDateofdeath)
                    .HasColumnName("ptas_dateofdeath")
                    .HasColumnType("datetime");

                entity.Property(e => e.PtasDateofformerpropertysale)
                    .HasColumnName("ptas_dateofformerpropertysale")
                    .HasColumnType("datetime");

                entity.Property(e => e.PtasDatepropertypurchased)
                    .HasColumnName("ptas_datepropertypurchased")
                    .HasColumnType("datetime");

                entity.Property(e => e.PtasDatepropertysoldin2020)
                    .HasColumnName("ptas_datepropertysoldin2020")
                    .HasColumnType("datetime");

                entity.Property(e => e.PtasDatereceived).HasColumnName("ptas_datereceived");

                entity.Property(e => e.PtasDayslaststatuschange).HasColumnName("ptas_dayslaststatuschange");

                entity.Property(e => e.PtasDeceasedspouseex).HasColumnName("ptas_deceasedspouseex");

                entity.Property(e => e.PtasDecisionreasonidValue).HasColumnName("_ptas_decisionreasonid_value");

                entity.Property(e => e.PtasDenialtaskcreated).HasColumnName("ptas_denialtaskcreated");

                entity.Property(e => e.PtasDifferentcheckaddress).HasColumnName("ptas_differentcheckaddress");

                entity.Property(e => e.PtasDisabled).HasColumnName("ptas_disabled");

                entity.Property(e => e.PtasDivorcedlegallyseparated).HasColumnName("ptas_divorcedlegallyseparated");

                entity.Property(e => e.PtasDocageapplicant).HasColumnName("ptas_docageapplicant");

                entity.Property(e => e.PtasDocapplicant).HasColumnName("ptas_docapplicant");

                entity.Property(e => e.PtasDocbirthcertificate).HasColumnName("ptas_docbirthcertificate");

                entity.Property(e => e.PtasDoccoopshares).HasColumnName("ptas_doccoopshares");

                entity.Property(e => e.PtasDoccotenant).HasColumnName("ptas_doccotenant");

                entity.Property(e => e.PtasDocdisability).HasColumnName("ptas_docdisability");

                entity.Property(e => e.PtasDocdriverslicense).HasColumnName("ptas_docdriverslicense");

                entity.Property(e => e.PtasDocmajorlifechange).HasColumnName("ptas_docmajorlifechange");

                entity.Property(e => e.PtasDocother).HasColumnName("ptas_docother");

                entity.Property(e => e.PtasDocownership).HasColumnName("ptas_docownership");

                entity.Property(e => e.PtasDocpassport).HasColumnName("ptas_docpassport");

                entity.Property(e => e.PtasDocspouse).HasColumnName("ptas_docspouse");

                entity.Property(e => e.PtasDocspouseage).HasColumnName("ptas_docspouseage");

                entity.Property(e => e.PtasEffectivedateofdisability)
                    .HasColumnName("ptas_effectivedateofdisability")
                    .HasColumnType("datetime");

                entity.Property(e => e.PtasExemptionidValue).HasColumnName("_ptas_exemptionid_value");

                entity.Property(e => e.PtasExemptionlevel).HasColumnName("ptas_exemptionlevel");

                entity.Property(e => e.PtasExemptionlevelyear).HasColumnName("ptas_exemptionlevelyear");

                entity.Property(e => e.PtasFinancialsection).HasColumnName("ptas_financialsection");

                entity.Property(e => e.PtasFirstdateprimaryres).HasColumnName("ptas_firstdateprimaryres");

                entity.Property(e => e.PtasFrozenimprovementvalue)
                    .HasColumnName("ptas_frozenimprovementvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFrozenimprovementvalueBase)
                    .HasColumnName("ptas_frozenimprovementvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFrozenlandvalue)
                    .HasColumnName("ptas_frozenlandvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFrozenlandvalueBase)
                    .HasColumnName("ptas_frozenlandvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFrozenyearidValue).HasColumnName("_ptas_frozenyearid_value");

                entity.Property(e => e.PtasHadexinanothercounty).HasColumnName("ptas_hadexinanothercounty");

                entity.Property(e => e.PtasHasspouseorpartner).HasColumnName("ptas_hasspouseorpartner");

                entity.Property(e => e.PtasHousingcoop).HasColumnName("ptas_housingcoop");

                entity.Property(e => e.PtasIsasurvivingspouse).HasColumnName("ptas_isasurvivingspouse");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasLifeestate).HasColumnName("ptas_lifeestate");

                entity.Property(e => e.PtasMajorlifechange).HasColumnName("ptas_majorlifechange");

                entity.Property(e => e.PtasMarried).HasColumnName("ptas_married");

                entity.Property(e => e.PtasMarriedlivingapart).HasColumnName("ptas_marriedlivingapart");

                entity.Property(e => e.PtasMissingdocumentlist).HasColumnName("ptas_missingdocumentlist");

                entity.Property(e => e.PtasMobilehome).HasColumnName("ptas_mobilehome");

                entity.Property(e => e.PtasMobilehomemake).HasColumnName("ptas_mobilehomemake");

                entity.Property(e => e.PtasMobilehomemodel).HasColumnName("ptas_mobilehomemodel");

                entity.Property(e => e.PtasMobilehomeyear).HasColumnName("ptas_mobilehomeyear");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasObituary).HasColumnName("ptas_obituary");

                entity.Property(e => e.PtasObituarycity).HasColumnName("ptas_obituarycity");

                entity.Property(e => e.PtasObituarysource).HasColumnName("ptas_obituarysource");

                entity.Property(e => e.PtasObituarystate).HasColumnName("ptas_obituarystate");

                entity.Property(e => e.PtasOccupieddate).HasColumnName("ptas_occupieddate");

                entity.Property(e => e.PtasOthercountyaddress).HasColumnName("ptas_othercountyaddress");

                entity.Property(e => e.PtasOthercountycity).HasColumnName("ptas_othercountycity");

                entity.Property(e => e.PtasOthercountypostal).HasColumnName("ptas_othercountypostal");

                entity.Property(e => e.PtasOthercountystate).HasColumnName("ptas_othercountystate");

                entity.Property(e => e.PtasOtheroccupants).HasColumnName("ptas_otheroccupants");

                entity.Property(e => e.PtasOtherowners).HasColumnName("ptas_otherowners");

                entity.Property(e => e.PtasOtherparcelnumber).HasColumnName("ptas_otherparcelnumber");

                entity.Property(e => e.PtasOwnmultipleproperties).HasColumnName("ptas_ownmultipleproperties");

                entity.Property(e => e.PtasOwnthroughtrust).HasColumnName("ptas_ownthroughtrust");

                entity.Property(e => e.PtasParcelidValue).HasColumnName("_ptas_parcelid_value");

                entity.Property(e => e.PtasPercentagerentedout)
                    .HasColumnName("ptas_percentagerentedout")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPercentageusedforbusiness)
                    .HasColumnName("ptas_percentageusedforbusiness")
                    .HasColumnType("money");

                entity.Property(e => e.PtasProofofagedocuments).HasColumnName("ptas_proofofagedocuments");

                entity.Property(e => e.PtasProofofagedocumentsspouse).HasColumnName("ptas_proofofagedocumentsspouse");

                entity.Property(e => e.PtasProofofcoopsharesdocuments).HasColumnName("ptas_proofofcoopsharesdocuments");

                entity.Property(e => e.PtasProofofdisabilitydocuments).HasColumnName("ptas_proofofdisabilitydocuments");

                entity.Property(e => e.PtasProofofmajorlifechangedocuments).HasColumnName("ptas_proofofmajorlifechangedocuments");

                entity.Property(e => e.PtasProofofownershipdocuments).HasColumnName("ptas_proofofownershipdocuments");

                entity.Property(e => e.PtasPropertysection).HasColumnName("ptas_propertysection");

                entity.Property(e => e.PtasPropertytaxesdelinquent).HasColumnName("ptas_propertytaxesdelinquent");

                entity.Property(e => e.PtasPropertyusedforbusiness).HasColumnName("ptas_propertyusedforbusiness");

                entity.Property(e => e.PtasReceivedexemptionbefore).HasColumnName("ptas_receivedexemptionbefore");

                entity.Property(e => e.PtasRentoutaportionofproperty).HasColumnName("ptas_rentoutaportionofproperty");

                entity.Property(e => e.PtasRequestouttotaxpayer).HasColumnName("ptas_requestouttotaxpayer");

                entity.Property(e => e.PtasRequiredtofilefederalincometaxreturn).HasColumnName("ptas_requiredtofilefederalincometaxreturn");

                entity.Property(e => e.PtasResidingfor9months).HasColumnName("ptas_residingfor9months");

                entity.Property(e => e.PtasSendreminderadditionalinformation).HasColumnName("ptas_sendreminderadditionalinformation");

                entity.Property(e => e.PtasSignatureconfirmed).HasColumnName("ptas_signatureconfirmed");

                entity.Property(e => e.PtasSignaturedate).HasColumnName("ptas_signaturedate");

                entity.Property(e => e.PtasSignatureline).HasColumnName("ptas_signatureline");

                entity.Property(e => e.PtasSignaturesection).HasColumnName("ptas_signaturesection");

                entity.Property(e => e.PtasSingle).HasColumnName("ptas_single");

                entity.Property(e => e.PtasSinglefamilyresidence).HasColumnName("ptas_singlefamilyresidence");

                entity.Property(e => e.PtasSingleunitofmultidwellingcondoorduplex).HasColumnName("ptas_singleunitofmultidwellingcondoorduplex");

                entity.Property(e => e.PtasSoldformerresidence).HasColumnName("ptas_soldformerresidence");

                entity.Property(e => e.PtasSoldotherpropertyin2020).HasColumnName("ptas_soldotherpropertyin2020");

                entity.Property(e => e.PtasSource).HasColumnName("ptas_source");

                entity.Property(e => e.PtasSplitcode).HasColumnName("ptas_splitcode");

                entity.Property(e => e.PtasSpousedob).HasColumnName("ptas_spousedob");

                entity.Property(e => e.PtasSpousedod).HasColumnName("ptas_spousedod");

                entity.Property(e => e.PtasSpousefirstname).HasColumnName("ptas_spousefirstname");

                entity.Property(e => e.PtasSpouselastname).HasColumnName("ptas_spouselastname");

                entity.Property(e => e.PtasSpousemiddlename).HasColumnName("ptas_spousemiddlename");

                entity.Property(e => e.PtasSpousesuffix).HasColumnName("ptas_spousesuffix");

                entity.Property(e => e.PtasSquarefootagerentedout).HasColumnName("ptas_squarefootagerentedout");

                entity.Property(e => e.PtasSquarefootageusedforbusiness).HasColumnName("ptas_squarefootageusedforbusiness");

                entity.Property(e => e.PtasStatuschangecat).HasColumnName("ptas_statuschangecat");

                entity.Property(e => e.PtasStatuschangedate).HasColumnName("ptas_statuschangedate");

                entity.Property(e => e.PtasSubmittalconfirmationsent).HasColumnName("ptas_submittalconfirmationsent");

                entity.Property(e => e.PtasSurvivingspouseinforeceivedon)
                    .HasColumnName("ptas_survivingspouseinforeceivedon")
                    .HasColumnType("datetime");

                entity.Property(e => e.PtasSurvivingspouseinfosenton)
                    .HasColumnName("ptas_survivingspouseinfosenton")
                    .HasColumnType("datetime");

                entity.Property(e => e.PtasTaxpayerremindersenton).HasColumnName("ptas_taxpayerremindersenton");

                entity.Property(e => e.PtasTaxpayerrequestsenton).HasColumnName("ptas_taxpayerrequestsenton");

                entity.Property(e => e.PtasTaxpayersection).HasColumnName("ptas_taxpayersection");

                entity.Property(e => e.PtasTaxrefundrecipient).HasColumnName("ptas_taxrefundrecipient");

                entity.Property(e => e.PtasTaxyearidValue).HasColumnName("_ptas_taxyearid_value");

                entity.Property(e => e.PtasTotalcurrentvalue)
                    .HasColumnName("ptas_totalcurrentvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalcurrentvalueBase)
                    .HasColumnName("ptas_totalcurrentvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalfrozenvalue)
                    .HasColumnName("ptas_totalfrozenvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalfrozenvalueBase)
                    .HasColumnName("ptas_totalfrozenvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTransferredfrcountyValue).HasColumnName("_ptas_transferredfrcounty_value");

                entity.Property(e => e.PtasUnder61withdisabilitynotice).HasColumnName("ptas_under61withdisabilitynotice");

                entity.Property(e => e.PtasVadisabled).HasColumnName("ptas_vadisabled");

                entity.Property(e => e.PtasVeteran).HasColumnName("ptas_veteran");

                entity.Property(e => e.PtasVeteranwithserviceevaluationordisability).HasColumnName("ptas_veteranwithserviceevaluationordisability");

                entity.Property(e => e.PtasWhenwasthepreviousexemption)
                    .HasColumnName("ptas_whenwasthepreviousexemption")
                    .HasColumnType("datetime");

                entity.Property(e => e.PtasWherepropertywassoldin2020).HasColumnName("ptas_wherepropertywassoldin2020");

                entity.Property(e => e.PtasWherewasthepreviousexemption).HasColumnName("ptas_wherewasthepreviousexemption");

                entity.Property(e => e.PtasWidowed).HasColumnName("ptas_widowed");

                entity.Property(e => e.PtasYearsappliedfor).HasColumnName("ptas_yearsappliedfor");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasSeapplicationCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_seapplication_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSeapplicationCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_seapplication_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasSeapplicationModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_seapplication_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSeapplicationModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_seapplication_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasSeapplication)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_seapplication_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasSeapplicationOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_seapplication_owninguser");

                entity.HasOne(d => d.PtasAddrcountryidValueNavigation)
                    .WithMany(p => p.PtasSeapplicationPtasAddrcountryidValueNavigation)
                    .HasForeignKey(d => d.PtasAddrcountryidValue)
                    .HasConstraintName("FK_ptas_country_ptas_seapplication_ptas_addrcountryid");

                entity.HasOne(d => d.PtasApplicantrecordValueNavigation)
                    .WithMany(p => p.PtasSeapplication)
                    .HasForeignKey(d => d.PtasApplicantrecordValue)
                    .HasConstraintName("FK_ptas_seappoccupant_ptas_seapplication_ptas_applicantrecord");

                entity.HasOne(d => d.PtasCheckaddresscountryidValueNavigation)
                    .WithMany(p => p.PtasSeapplicationPtasCheckaddresscountryidValueNavigation)
                    .HasForeignKey(d => d.PtasCheckaddresscountryidValue)
                    .HasConstraintName("FK_ptas_country_ptas_seapplication_ptas_checkaddresscountryid");

                entity.HasOne(d => d.PtasCompletedbyidValueNavigation)
                    .WithMany(p => p.PtasSeapplicationPtasCompletedbyidValueNavigation)
                    .HasForeignKey(d => d.PtasCompletedbyidValue)
                    .HasConstraintName("FK_systemuser_ptas_seapplication_ptas_completedbyid");

                entity.HasOne(d => d.PtasContactidValueNavigation)
                    .WithMany(p => p.PtasSeapplication)
                    .HasForeignKey(d => d.PtasContactidValue)
                    .HasConstraintName("FK_contact_ptas_seapplication_ptas_contactid");

                entity.HasOne(d => d.PtasDecisionreasonidValueNavigation)
                    .WithMany(p => p.PtasSeapplication)
                    .HasForeignKey(d => d.PtasDecisionreasonidValue)
                    .HasConstraintName("FK_ptas_seexemptionreason_ptas_seapplication_ptas_decisionreasonid");

                entity.HasOne(d => d.PtasExemptionidValueNavigation)
                    .WithMany(p => p.PtasSeapplication)
                    .HasForeignKey(d => d.PtasExemptionidValue)
                    .HasConstraintName("FK_ptas_exemption_ptas_seapplication_ptas_exemptionid");

                entity.HasOne(d => d.PtasFrozenyearidValueNavigation)
                    .WithMany(p => p.PtasSeapplicationPtasFrozenyearidValueNavigation)
                    .HasForeignKey(d => d.PtasFrozenyearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_seapplication_ptas_frozenyearid");

                entity.HasOne(d => d.PtasParcelidValueNavigation)
                    .WithMany(p => p.PtasSeapplication)
                    .HasForeignKey(d => d.PtasParcelidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_seapplication_ptas_parcelid");

                entity.HasOne(d => d.PtasTaxyearidValueNavigation)
                    .WithMany(p => p.PtasSeapplicationPtasTaxyearidValueNavigation)
                    .HasForeignKey(d => d.PtasTaxyearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_seapplication_ptas_taxyearid");

                entity.HasOne(d => d.PtasTransferredfrcountyValueNavigation)
                    .WithMany(p => p.PtasSeapplication)
                    .HasForeignKey(d => d.PtasTransferredfrcountyValue)
                    .HasConstraintName("FK_ptas_county_ptas_seapplication_ptas_transferredfrcounty");
            });

            modelBuilder.Entity<PtasSeapplicationtask>(entity =>
            {
                entity.ToTable("ptas_seapplicationtask", "dynamics");

                entity.Property(e => e.PtasSeapplicationtaskid)
                    .HasColumnName("ptas_seapplicationtaskid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAgeattimeofdeath).HasColumnName("ptas_ageattimeofdeath");

                entity.Property(e => e.PtasContactidValue).HasColumnName("_ptas_contactid_value");

                entity.Property(e => e.PtasDateofdeath)
                    .HasColumnName("ptas_dateofdeath")
                    .HasColumnType("datetime");

                entity.Property(e => e.PtasDeathcertificate).HasColumnName("ptas_deathcertificate");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasDuedate).HasColumnName("ptas_duedate");

                entity.Property(e => e.PtasEmailsent).HasColumnName("ptas_emailsent");

                entity.Property(e => e.PtasEmailtosend).HasColumnName("ptas_emailtosend");

                entity.Property(e => e.PtasExemptionValue).HasColumnName("_ptas_exemption_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasObituary).HasColumnName("ptas_obituary");

                entity.Property(e => e.PtasObituarycity).HasColumnName("ptas_obituarycity");

                entity.Property(e => e.PtasObituarysource).HasColumnName("ptas_obituarysource");

                entity.Property(e => e.PtasObituarystate).HasColumnName("ptas_obituarystate");

                entity.Property(e => e.PtasRenewalcancellation).HasColumnName("ptas_renewalcancellation");

                entity.Property(e => e.PtasRenewalnotice1).HasColumnName("ptas_renewalnotice1");

                entity.Property(e => e.PtasRenewalnotice2).HasColumnName("ptas_renewalnotice2");

                entity.Property(e => e.PtasResolvetask).HasColumnName("ptas_resolvetask");

                entity.Property(e => e.PtasSaleValue).HasColumnName("_ptas_sale_value");

                entity.Property(e => e.PtasSeapplicationidValue).HasColumnName("_ptas_seapplicationid_value");

                entity.Property(e => e.PtasStartdate).HasColumnName("ptas_startdate");

                entity.Property(e => e.PtasSurvivingspouseinforeceivedon).HasColumnName("ptas_survivingspouseinforeceivedon");

                entity.Property(e => e.PtasSurvivingspouseinfosenton).HasColumnName("ptas_survivingspouseinfosenton");

                entity.Property(e => e.PtasTasktype).HasColumnName("ptas_tasktype");

                entity.Property(e => e.PtasVerified).HasColumnName("ptas_verified");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasSeapplicationtaskCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_seapplicationtask_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSeapplicationtaskCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_seapplicationtask_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasSeapplicationtaskModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_seapplicationtask_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSeapplicationtaskModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_seapplicationtask_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasSeapplicationtask)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_seapplicationtask_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasSeapplicationtaskOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_seapplicationtask_owninguser");

                entity.HasOne(d => d.PtasContactidValueNavigation)
                    .WithMany(p => p.PtasSeapplicationtask)
                    .HasForeignKey(d => d.PtasContactidValue)
                    .HasConstraintName("FK_contact_ptas_seapplicationtask_ptas_contactid");

                entity.HasOne(d => d.PtasExemptionValueNavigation)
                    .WithMany(p => p.PtasSeapplicationtask)
                    .HasForeignKey(d => d.PtasExemptionValue)
                    .HasConstraintName("FK_ptas_exemption_ptas_seapplicationtask_ptas_exemption");

                entity.HasOne(d => d.PtasSaleValueNavigation)
                    .WithMany(p => p.PtasSeapplicationtask)
                    .HasForeignKey(d => d.PtasSaleValue)
                    .HasConstraintName("FK_ptas_sales_ptas_seapplicationtask_ptas_sale");

                entity.HasOne(d => d.PtasSeapplicationidValueNavigation)
                    .WithMany(p => p.PtasSeapplicationtask)
                    .HasForeignKey(d => d.PtasSeapplicationidValue)
                    .HasConstraintName("FK_ptas_seapplication_ptas_seapplicationtask_ptas_seapplicationid");
            });

            modelBuilder.Entity<PtasSeappnote>(entity =>
            {
                entity.ToTable("ptas_seappnote", "dynamics");

                entity.Property(e => e.PtasSeappnoteid)
                    .HasColumnName("ptas_seappnoteid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAlternatekey).HasColumnName("ptas_alternatekey");

                entity.Property(e => e.PtasContactidValue).HasColumnName("_ptas_contactid_value");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasParcelidValue).HasColumnName("_ptas_parcelid_value");

                entity.Property(e => e.PtasSeappdetailidValue).HasColumnName("_ptas_seappdetailid_value");

                entity.Property(e => e.PtasSeapplicationidValue).HasColumnName("_ptas_seapplicationid_value");

                entity.Property(e => e.PtasSeapplicationtaskidValue).HasColumnName("_ptas_seapplicationtaskid_value");

                entity.Property(e => e.PtasSeapppredefnoteValue).HasColumnName("_ptas_seapppredefnote_value");

                entity.Property(e => e.PtasShowonportal).HasColumnName("ptas_showonportal");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasSeappnoteCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_seappnote_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSeappnoteCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_seappnote_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasSeappnoteModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_seappnote_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSeappnoteModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_seappnote_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasSeappnote)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_seappnote_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasSeappnoteOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_seappnote_owninguser");

                entity.HasOne(d => d.PtasContactidValueNavigation)
                    .WithMany(p => p.PtasSeappnote)
                    .HasForeignKey(d => d.PtasContactidValue)
                    .HasConstraintName("FK_contact_ptas_seappnote_ptas_contactid");

                entity.HasOne(d => d.PtasParcelidValueNavigation)
                    .WithMany(p => p.PtasSeappnote)
                    .HasForeignKey(d => d.PtasParcelidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_seappnote_ptas_parcelid");

                entity.HasOne(d => d.PtasSeappdetailidValueNavigation)
                    .WithMany(p => p.PtasSeappnote)
                    .HasForeignKey(d => d.PtasSeappdetailidValue)
                    .HasConstraintName("FK_ptas_seappdetail_ptas_seappnote_ptas_seappdetailid");

                entity.HasOne(d => d.PtasSeapplicationidValueNavigation)
                    .WithMany(p => p.PtasSeappnote)
                    .HasForeignKey(d => d.PtasSeapplicationidValue)
                    .HasConstraintName("FK_ptas_seapplication_ptas_seappnote_ptas_seapplicationid");

                entity.HasOne(d => d.PtasSeapplicationtaskidValueNavigation)
                    .WithMany(p => p.PtasSeappnote)
                    .HasForeignKey(d => d.PtasSeapplicationtaskidValue)
                    .HasConstraintName("FK_ptas_seapplicationtask_ptas_seappnote_ptas_seapplicationtaskid");

                entity.HasOne(d => d.PtasSeapppredefnoteValueNavigation)
                    .WithMany(p => p.PtasSeappnote)
                    .HasForeignKey(d => d.PtasSeapppredefnoteValue)
                    .HasConstraintName("FK_ptas_seapppredefnotes_ptas_seappnote_ptas_seapppredefnote");
            });

            modelBuilder.Entity<PtasSeappoccupant>(entity =>
            {
                entity.ToTable("ptas_seappoccupant", "dynamics");

                entity.Property(e => e.PtasSeappoccupantid)
                    .HasColumnName("ptas_seappoccupantid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasIsapplicant).HasColumnName("ptas_isapplicant");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasOccupantfirstname).HasColumnName("ptas_occupantfirstname");

                entity.Property(e => e.PtasOccupantlastname).HasColumnName("ptas_occupantlastname");

                entity.Property(e => e.PtasOccupantmiddlename).HasColumnName("ptas_occupantmiddlename");

                entity.Property(e => e.PtasOccupantsuffix).HasColumnName("ptas_occupantsuffix");

                entity.Property(e => e.PtasOccupanttype).HasColumnName("ptas_occupanttype");

                entity.Property(e => e.PtasOwnershippercentage).HasColumnName("ptas_ownershippercentage");

                entity.Property(e => e.PtasSeapplicationidValue).HasColumnName("_ptas_seapplicationid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasSeappoccupantCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_seappoccupant_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSeappoccupantCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_seappoccupant_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasSeappoccupantModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_seappoccupant_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSeappoccupantModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_seappoccupant_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasSeappoccupant)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_seappoccupant_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasSeappoccupantOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_seappoccupant_owninguser");

                entity.HasOne(d => d.PtasSeapplicationidValueNavigation)
                    .WithMany(p => p.PtasSeappoccupant)
                    .HasForeignKey(d => d.PtasSeapplicationidValue)
                    .HasConstraintName("FK_ptas_seapplication_ptas_seappoccupant_ptas_seapplicationid");
            });

            modelBuilder.Entity<PtasSeappoccupantPtasSefinancialformid>(entity =>
            {
                entity.ToTable("ptas_seappoccupant_ptas_sefinancialformid", "dynamics");

                entity.Property(e => e.PtasSeappoccupantPtasSefinancialformidid)
                    .HasColumnName("ptas_seappoccupant_ptas_sefinancialformidid")
                    .ValueGeneratedNever();

                entity.Property(e => e.PtasSeappoccupantid).HasColumnName("ptas_seappoccupantid");

                entity.Property(e => e.PtasSefinancialformsid).HasColumnName("ptas_sefinancialformsid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasSeappotherprop>(entity =>
            {
                entity.ToTable("ptas_seappotherprop", "dynamics");

                entity.Property(e => e.PtasSeappotherpropid)
                    .HasColumnName("ptas_seappotherpropid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAddress).HasColumnName("ptas_address");

                entity.Property(e => e.PtasCountyname).HasColumnName("ptas_countyname");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasParcelnumbertext).HasColumnName("ptas_parcelnumbertext");

                entity.Property(e => e.PtasPurpose).HasColumnName("ptas_purpose");

                entity.Property(e => e.PtasSeapplicationidValue).HasColumnName("_ptas_seapplicationid_value");

                entity.Property(e => e.PtasStatename).HasColumnName("ptas_statename");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasSeappotherpropCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_seappotherprop_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSeappotherpropCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_seappotherprop_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasSeappotherpropModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_seappotherprop_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSeappotherpropModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_seappotherprop_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasSeappotherprop)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_seappotherprop_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasSeappotherpropOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_seappotherprop_owninguser");

                entity.HasOne(d => d.PtasSeapplicationidValueNavigation)
                    .WithMany(p => p.PtasSeappotherprop)
                    .HasForeignKey(d => d.PtasSeapplicationidValue)
                    .HasConstraintName("FK_ptas_seapplication_ptas_seappotherprop_ptas_seapplicationid");
            });

            modelBuilder.Entity<PtasSeapppredefnotes>(entity =>
            {
                entity.ToTable("ptas_seapppredefnotes", "dynamics");

                entity.Property(e => e.PtasSeapppredefnotesid)
                    .HasColumnName("ptas_seapppredefnotesid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasPortalattachmentlocation).HasColumnName("ptas_portalattachmentlocation");

                entity.Property(e => e.PtasShowonportal).HasColumnName("ptas_showonportal");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasSectionusesqft>(entity =>
            {
                entity.ToTable("ptas_sectionusesqft", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_sectionusesqft_modifiedon");

                entity.Property(e => e.PtasSectionusesqftid)
                    .HasColumnName("ptas_sectionusesqftid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAlternatekey).HasColumnName("ptas_alternatekey");

                entity.Property(e => e.PtasHistyear).HasColumnName("ptas_histyear");

                entity.Property(e => e.PtasMastersectionusesqftidValue).HasColumnName("_ptas_mastersectionusesqftid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasProjectidValue).HasColumnName("_ptas_projectid_value");

                entity.Property(e => e.PtasSectionuseValue).HasColumnName("_ptas_sectionuse_value");

                entity.Property(e => e.PtasSnapshotdatetime).HasColumnName("ptas_snapshotdatetime");

                entity.Property(e => e.PtasSnapshottype).HasColumnName("ptas_snapshottype");

                entity.Property(e => e.PtasTotalsqft).HasColumnName("ptas_totalsqft");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasSectionusesqftCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_sectionusesqft_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSectionusesqftCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_sectionusesqft_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasSectionusesqftModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_sectionusesqft_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSectionusesqftModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_sectionusesqft_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasSectionusesqft)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_sectionusesqft_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasSectionusesqftOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_sectionusesqft_owninguser");

                entity.HasOne(d => d.PtasMastersectionusesqftidValueNavigation)
                    .WithMany(p => p.InversePtasMastersectionusesqftidValueNavigation)
                    .HasForeignKey(d => d.PtasMastersectionusesqftidValue)
                    .HasConstraintName("FK_ptas_sectionusesqft_ptas_sectionusesqft_ptas_mastersectionusesqftid");

                entity.HasOne(d => d.PtasProjectidValueNavigation)
                    .WithMany(p => p.PtasSectionusesqft)
                    .HasForeignKey(d => d.PtasProjectidValue)
                    .HasConstraintName("FK_ptas_condocomplex_ptas_sectionusesqft_ptas_projectid");

                entity.HasOne(d => d.PtasSectionuseValueNavigation)
                    .WithMany(p => p.PtasSectionusesqft)
                    .HasForeignKey(d => d.PtasSectionuseValue)
                    .HasConstraintName("FK_ptas_buildingsectionuse_ptas_sectionusesqft_ptas_sectionuse");
            });

            modelBuilder.Entity<PtasSectionusesqftSnapshot>(entity =>
            {
                entity.HasKey(e => e.PtasSectionusesqftid);

                entity.ToTable("ptas_sectionusesqft_snapshot", "dynamics");

                entity.Property(e => e.PtasSectionusesqftid)
                    .HasColumnName("ptas_sectionusesqftid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAlternatekey).HasColumnName("ptas_alternatekey");

                entity.Property(e => e.PtasHistyear).HasColumnName("ptas_histyear");

                entity.Property(e => e.PtasMastersectionusesqftidValue).HasColumnName("_ptas_mastersectionusesqftid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasProjectidValue).HasColumnName("_ptas_projectid_value");

                entity.Property(e => e.PtasSectionuseValue).HasColumnName("_ptas_sectionuse_value");

                entity.Property(e => e.PtasSnapshotdatetime).HasColumnName("ptas_snapshotdatetime");

                entity.Property(e => e.PtasSnapshottype).HasColumnName("ptas_snapshottype");

                entity.Property(e => e.PtasTotalsqft).HasColumnName("ptas_totalsqft");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasSeeligibility>(entity =>
            {
                entity.ToTable("ptas_seeligibility", "dynamics");

                entity.Property(e => e.PtasSeeligibilityid)
                    .HasColumnName("ptas_seeligibilityid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasDisabilityrating).HasColumnName("ptas_disabilityrating");

                entity.Property(e => e.PtasMinimumage).HasColumnName("ptas_minimumage");

                entity.Property(e => e.PtasMinimumagedisability).HasColumnName("ptas_minimumagedisability");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasYearValue).HasColumnName("_ptas_year_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasSeeligibilityCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_seeligibility_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSeeligibilityCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_seeligibility_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasSeeligibilityModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_seeligibility_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSeeligibilityModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_seeligibility_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasSeeligibility)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_seeligibility_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasSeeligibilityOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_seeligibility_owninguser");

                entity.HasOne(d => d.PtasYearValueNavigation)
                    .WithMany(p => p.PtasSeeligibility)
                    .HasForeignKey(d => d.PtasYearValue)
                    .HasConstraintName("FK_ptas_year_ptas_seeligibility_ptas_year");
            });

            modelBuilder.Entity<PtasSeeligibilitybracket>(entity =>
            {
                entity.ToTable("ptas_seeligibilitybracket", "dynamics");

                entity.Property(e => e.PtasSeeligibilitybracketid)
                    .HasColumnName("ptas_seeligibilitybracketid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasExemptionbracket).HasColumnName("ptas_exemptionbracket");

                entity.Property(e => e.PtasExemptionmaximum)
                    .HasColumnName("ptas_exemptionmaximum")
                    .HasColumnType("money");

                entity.Property(e => e.PtasExemptionmaximumBase)
                    .HasColumnName("ptas_exemptionmaximum_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasExemptionminimum)
                    .HasColumnName("ptas_exemptionminimum")
                    .HasColumnType("money");

                entity.Property(e => e.PtasExemptionminimumBase)
                    .HasColumnName("ptas_exemptionminimum_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasExemptionpercentage).HasColumnName("ptas_exemptionpercentage");

                entity.Property(e => e.PtasMaximumincome)
                    .HasColumnName("ptas_maximumincome")
                    .HasColumnType("money");

                entity.Property(e => e.PtasMaximumincomeBase)
                    .HasColumnName("ptas_maximumincome_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasMinimumincome)
                    .HasColumnName("ptas_minimumincome")
                    .HasColumnType("money");

                entity.Property(e => e.PtasMinimumincomeBase)
                    .HasColumnName("ptas_minimumincome_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasSeniorexemptioneligiblityValue).HasColumnName("_ptas_seniorexemptioneligiblity_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasSeeligibilitybracketCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_seeligibilitybracket_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSeeligibilitybracketCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_seeligibilitybracket_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasSeeligibilitybracketModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_seeligibilitybracket_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSeeligibilitybracketModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_seeligibilitybracket_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasSeeligibilitybracket)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_seeligibilitybracket_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasSeeligibilitybracketOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_seeligibilitybracket_owninguser");

                entity.HasOne(d => d.PtasSeniorexemptioneligiblityValueNavigation)
                    .WithMany(p => p.PtasSeeligibilitybracket)
                    .HasForeignKey(d => d.PtasSeniorexemptioneligiblityValue)
                    .HasConstraintName("FK_ptas_seeligibility_ptas_seeligibilitybracket_ptas_seniorexemptioneligiblity");
            });

            modelBuilder.Entity<PtasSeexemptionreason>(entity =>
            {
                entity.ToTable("ptas_seexemptionreason", "dynamics");

                entity.Property(e => e.PtasSeexemptionreasonid)
                    .HasColumnName("ptas_seexemptionreasonid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasAlternatekey).HasColumnName("ptas_alternatekey");

                entity.Property(e => e.PtasAlternatekeyname).HasColumnName("ptas_alternatekeyname");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasSeexemptionreasonCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_seexemptionreason_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSeexemptionreasonCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_seexemptionreason_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasSeexemptionreasonModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_seexemptionreason_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSeexemptionreasonModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_seexemptionreason_modifiedonbehalfby");
            });

            modelBuilder.Entity<PtasSefinancialforms>(entity =>
            {
                entity.ToTable("ptas_sefinancialforms", "dynamics");

                entity.Property(e => e.PtasSefinancialformsid)
                    .HasColumnName("ptas_sefinancialformsid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.Ptas10402017alimonyrcvd)
                    .HasColumnName("ptas_10402017alimonyrcvd")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402017alimonyrcvdBase)
                    .HasColumnName("ptas_10402017alimonyrcvd_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402017bizincomeorloss)
                    .HasColumnName("ptas_10402017bizincomeorloss")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402017bizincomeorlossBase)
                    .HasColumnName("ptas_10402017bizincomeorloss_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402017capgainloss)
                    .HasColumnName("ptas_10402017capgainloss")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402017capgainlossBase)
                    .HasColumnName("ptas_10402017capgainloss_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402017deductions)
                    .HasColumnName("ptas_10402017deductions")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402017deductionsBase)
                    .HasColumnName("ptas_10402017deductions_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402017dividends)
                    .HasColumnName("ptas_10402017dividends")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402017dividendsBase)
                    .HasColumnName("ptas_10402017dividends_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402017farmincomeloss)
                    .HasColumnName("ptas_10402017farmincomeloss")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402017farmincomelossBase)
                    .HasColumnName("ptas_10402017farmincomeloss_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402017iradisttax)
                    .HasColumnName("ptas_10402017iradisttax")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402017iradisttaxBase)
                    .HasColumnName("ptas_10402017iradisttax_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402017othergainsloss)
                    .HasColumnName("ptas_10402017othergainsloss")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402017othergainslossBase)
                    .HasColumnName("ptas_10402017othergainsloss_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402017otherincome)
                    .HasColumnName("ptas_10402017otherincome")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402017otherincomeBase)
                    .HasColumnName("ptas_10402017otherincome_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402017otherincometype).HasColumnName("ptas_10402017otherincometype");

                entity.Property(e => e.Ptas10402017penannuitiestax)
                    .HasColumnName("ptas_10402017penannuitiestax")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402017penannuitiestaxBase)
                    .HasColumnName("ptas_10402017penannuitiestax_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402017pensionsannuties)
                    .HasColumnName("ptas_10402017pensionsannuties")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402017pensionsannutiesBase)
                    .HasColumnName("ptas_10402017pensionsannuties_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402017royaltiestrustsetc)
                    .HasColumnName("ptas_10402017royaltiestrustsetc")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402017royaltiestrustsetcBase)
                    .HasColumnName("ptas_10402017royaltiestrustsetc_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402017ssbenefits)
                    .HasColumnName("ptas_10402017ssbenefits")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402017ssbenefitsBase)
                    .HasColumnName("ptas_10402017ssbenefits_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402017taxexinterest)
                    .HasColumnName("ptas_10402017taxexinterest")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402017taxexinterestBase)
                    .HasColumnName("ptas_10402017taxexinterest_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402017taxinterest)
                    .HasColumnName("ptas_10402017taxinterest")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402017taxinterestBase)
                    .HasColumnName("ptas_10402017taxinterest_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402017taxrefunds)
                    .HasColumnName("ptas_10402017taxrefunds")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402017taxrefundsBase)
                    .HasColumnName("ptas_10402017taxrefunds_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402017unemployment)
                    .HasColumnName("ptas_10402017unemployment")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402017unemploymentBase)
                    .HasColumnName("ptas_10402017unemployment_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402017wages)
                    .HasColumnName("ptas_10402017wages")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402017wagesBase)
                    .HasColumnName("ptas_10402017wages_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402018adjgrossincome)
                    .HasColumnName("ptas_10402018adjgrossincome")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402018adjgrossincomeBase)
                    .HasColumnName("ptas_10402018adjgrossincome_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402018dividends)
                    .HasColumnName("ptas_10402018dividends")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402018dividendsBase)
                    .HasColumnName("ptas_10402018dividends_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402018irapensions)
                    .HasColumnName("ptas_10402018irapensions")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402018irapensionsBase)
                    .HasColumnName("ptas_10402018irapensions_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402018irapensionstax)
                    .HasColumnName("ptas_10402018irapensionstax")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402018irapensionstaxBase)
                    .HasColumnName("ptas_10402018irapensionstax_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402018ssbenefits)
                    .HasColumnName("ptas_10402018ssbenefits")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402018ssbenefitsBase)
                    .HasColumnName("ptas_10402018ssbenefits_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402018taxexinterest)
                    .HasColumnName("ptas_10402018taxexinterest")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402018taxexinterestBase)
                    .HasColumnName("ptas_10402018taxexinterest_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402018taxinterest)
                    .HasColumnName("ptas_10402018taxinterest")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402018taxinterestBase)
                    .HasColumnName("ptas_10402018taxinterest_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402018totalincome)
                    .HasColumnName("ptas_10402018totalincome")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402018totalincomeBase)
                    .HasColumnName("ptas_10402018totalincome_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402018wages)
                    .HasColumnName("ptas_10402018wages")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas10402018wagesBase)
                    .HasColumnName("ptas_10402018wages_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas1040acapgains)
                    .HasColumnName("ptas_1040acapgains")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas1040acapgainsBase)
                    .HasColumnName("ptas_1040acapgains_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas1040adeductions)
                    .HasColumnName("ptas_1040adeductions")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas1040adeductionsBase)
                    .HasColumnName("ptas_1040adeductions_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas1040airadisttax)
                    .HasColumnName("ptas_1040airadisttax")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas1040airadisttaxBase)
                    .HasColumnName("ptas_1040airadisttax_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas1040aorddividends)
                    .HasColumnName("ptas_1040aorddividends")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas1040aorddividendsBase)
                    .HasColumnName("ptas_1040aorddividends_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas1040apensions)
                    .HasColumnName("ptas_1040apensions")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas1040apensionsBase)
                    .HasColumnName("ptas_1040apensions_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas1040apensionstax)
                    .HasColumnName("ptas_1040apensionstax")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas1040apensionstaxBase)
                    .HasColumnName("ptas_1040apensionstax_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas1040asocialsec)
                    .HasColumnName("ptas_1040asocialsec")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas1040asocialsecBase)
                    .HasColumnName("ptas_1040asocialsec_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas1040ataxexinterest)
                    .HasColumnName("ptas_1040ataxexinterest")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas1040ataxexinterestBase)
                    .HasColumnName("ptas_1040ataxexinterest_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas1040ataxinterest)
                    .HasColumnName("ptas_1040ataxinterest")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas1040ataxinterestBase)
                    .HasColumnName("ptas_1040ataxinterest_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas1040ataxrefunds)
                    .HasColumnName("ptas_1040ataxrefunds")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas1040ataxrefundsBase)
                    .HasColumnName("ptas_1040ataxrefunds_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas1040aunemployment)
                    .HasColumnName("ptas_1040aunemployment")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas1040aunemploymentBase)
                    .HasColumnName("ptas_1040aunemployment_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas1040awages)
                    .HasColumnName("ptas_1040awages")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas1040awagesBase)
                    .HasColumnName("ptas_1040awages_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas1040eztaxinterest)
                    .HasColumnName("ptas_1040eztaxinterest")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas1040eztaxinterestBase)
                    .HasColumnName("ptas_1040eztaxinterest_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas1040ezunemployment)
                    .HasColumnName("ptas_1040ezunemployment")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas1040ezunemploymentBase)
                    .HasColumnName("ptas_1040ezunemployment_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas1040ezwages)
                    .HasColumnName("ptas_1040ezwages")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas1040ezwagesBase)
                    .HasColumnName("ptas_1040ezwages_base")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas8829percentusedforbusiness).HasColumnName("ptas_8829percentusedforbusiness");

                entity.Property(e => e.Ptas8949totalgains)
                    .HasColumnName("ptas_8949totalgains")
                    .HasColumnType("money");

                entity.Property(e => e.Ptas8949totalgainsBase)
                    .HasColumnName("ptas_8949totalgains_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAlternatekey).HasColumnName("ptas_alternatekey");

                entity.Property(e => e.PtasAlternatekey2).HasColumnName("ptas_alternatekey2");

                entity.Property(e => e.PtasContactidValue).HasColumnName("_ptas_contactid_value");

                entity.Property(e => e.PtasExcludefromtotal).HasColumnName("ptas_excludefromtotal");

                entity.Property(e => e.PtasExpenseassistedliving)
                    .HasColumnName("ptas_expenseassistedliving")
                    .HasColumnType("money");

                entity.Property(e => e.PtasExpenseassistedlivingBase)
                    .HasColumnName("ptas_expenseassistedliving_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasExpenseassistedlivingpayee).HasColumnName("ptas_expenseassistedlivingpayee");

                entity.Property(e => e.PtasExpenseinhomepayee).HasColumnName("ptas_expenseinhomepayee");

                entity.Property(e => e.PtasExpensemedicareplan)
                    .HasColumnName("ptas_expensemedicareplan")
                    .HasColumnType("money");

                entity.Property(e => e.PtasExpensemedicareplanBase)
                    .HasColumnName("ptas_expensemedicareplan_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasExpensenursinghome)
                    .HasColumnName("ptas_expensenursinghome")
                    .HasColumnType("money");

                entity.Property(e => e.PtasExpensenursinghomeBase)
                    .HasColumnName("ptas_expensenursinghome_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasExpensenursingpayee).HasColumnName("ptas_expensenursingpayee");

                entity.Property(e => e.PtasExpenseother)
                    .HasColumnName("ptas_expenseother")
                    .HasColumnType("money");

                entity.Property(e => e.PtasExpenseotherBase)
                    .HasColumnName("ptas_expenseother_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasExpensepres)
                    .HasColumnName("ptas_expensepres")
                    .HasColumnType("money");

                entity.Property(e => e.PtasExpensepresBase)
                    .HasColumnName("ptas_expensepres_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasExpensesinhome)
                    .HasColumnName("ptas_expensesinhome")
                    .HasColumnType("money");

                entity.Property(e => e.PtasExpensesinhomeBase)
                    .HasColumnName("ptas_expensesinhome_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFilertype).HasColumnName("ptas_filertype");

                entity.Property(e => e.PtasFinancialformtype).HasColumnName("ptas_financialformtype");

                entity.Property(e => e.PtasIncomealimony)
                    .HasColumnName("ptas_incomealimony")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomealimonyBase)
                    .HasColumnName("ptas_incomealimony_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomebusiness)
                    .HasColumnName("ptas_incomebusiness")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomebusinessBase)
                    .HasColumnName("ptas_incomebusiness_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomecapgains)
                    .HasColumnName("ptas_incomecapgains")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomecapgainsBase)
                    .HasColumnName("ptas_incomecapgains_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomecoowner)
                    .HasColumnName("ptas_incomecoowner")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomecoownerBase)
                    .HasColumnName("ptas_incomecoowner_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomecountries)
                    .HasColumnName("ptas_incomecountries")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomecountriesBase)
                    .HasColumnName("ptas_incomecountries_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomedisability)
                    .HasColumnName("ptas_incomedisability")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomedisabilityBase)
                    .HasColumnName("ptas_incomedisability_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomedisabilitysrc).HasColumnName("ptas_incomedisabilitysrc");

                entity.Property(e => e.PtasIncomedividends)
                    .HasColumnName("ptas_incomedividends")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomedividendsBase)
                    .HasColumnName("ptas_incomedividends_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomedshs)
                    .HasColumnName("ptas_incomedshs")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomedshsBase)
                    .HasColumnName("ptas_incomedshs_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomeexpenses)
                    .HasColumnName("ptas_incomeexpenses")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomeexpensesBase)
                    .HasColumnName("ptas_incomeexpenses_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomegambling)
                    .HasColumnName("ptas_incomegambling")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomegamblingBase)
                    .HasColumnName("ptas_incomegambling_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomegifts)
                    .HasColumnName("ptas_incomegifts")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomegiftsBase)
                    .HasColumnName("ptas_incomegifts_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomeirataxamt)
                    .HasColumnName("ptas_incomeirataxamt")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomeirataxamtBase)
                    .HasColumnName("ptas_incomeirataxamt_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomeother)
                    .HasColumnName("ptas_incomeother")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomeotherBase)
                    .HasColumnName("ptas_incomeother_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomerental)
                    .HasColumnName("ptas_incomerental")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomerentalBase)
                    .HasColumnName("ptas_incomerental_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomeretirement)
                    .HasColumnName("ptas_incomeretirement")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomeretirementBase)
                    .HasColumnName("ptas_incomeretirement_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomeschedeother)
                    .HasColumnName("ptas_incomeschedeother")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomeschedeotherBase)
                    .HasColumnName("ptas_incomeschedeother_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomeservicedisability)
                    .HasColumnName("ptas_incomeservicedisability")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomeservicedisabilityBase)
                    .HasColumnName("ptas_incomeservicedisability_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomesocialsec)
                    .HasColumnName("ptas_incomesocialsec")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomesocialsecBase)
                    .HasColumnName("ptas_incomesocialsec_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomeunemployment)
                    .HasColumnName("ptas_incomeunemployment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomeunemploymentBase)
                    .HasColumnName("ptas_incomeunemployment_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomewages)
                    .HasColumnName("ptas_incomewages")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIncomewagesBase)
                    .HasColumnName("ptas_incomewages_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasMedicareplanidValue).HasColumnName("_ptas_medicareplanid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNettotalincome)
                    .HasColumnName("ptas_nettotalincome")
                    .HasColumnType("money");

                entity.Property(e => e.PtasNettotalincomeBase)
                    .HasColumnName("ptas_nettotalincome_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasParceldetailidValue).HasColumnName("_ptas_parceldetailid_value");

                entity.Property(e => e.PtasReviewedbyidValue).HasColumnName("_ptas_reviewedbyid_value");

                entity.Property(e => e.PtasReviewedon).HasColumnName("ptas_reviewedon");

                entity.Property(e => e.PtasReviewstatus).HasColumnName("ptas_reviewstatus");

                entity.Property(e => e.PtasSchd1alimony)
                    .HasColumnName("ptas_schd1alimony")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchd1alimonyBase)
                    .HasColumnName("ptas_schd1alimony_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchd1businessincomeloss)
                    .HasColumnName("ptas_schd1businessincomeloss")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchd1businessincomelossBase)
                    .HasColumnName("ptas_schd1businessincomeloss_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchd1capgainloss)
                    .HasColumnName("ptas_schd1capgainloss")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchd1capgainlossBase)
                    .HasColumnName("ptas_schd1capgainloss_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchd1farmincomeloss)
                    .HasColumnName("ptas_schd1farmincomeloss")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchd1farmincomelossBase)
                    .HasColumnName("ptas_schd1farmincomeloss_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchd1othergainsloss)
                    .HasColumnName("ptas_schd1othergainsloss")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchd1othergainslossBase)
                    .HasColumnName("ptas_schd1othergainsloss_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchd1otherincomeamt)
                    .HasColumnName("ptas_schd1otherincomeamt")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchd1otherincomeamtBase)
                    .HasColumnName("ptas_schd1otherincomeamt_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchd1otherincometype).HasColumnName("ptas_schd1otherincometype");

                entity.Property(e => e.PtasSchd1rentalrealestate)
                    .HasColumnName("ptas_schd1rentalrealestate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchd1rentalrealestateBase)
                    .HasColumnName("ptas_schd1rentalrealestate_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchd1taxrefunds)
                    .HasColumnName("ptas_schd1taxrefunds")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchd1taxrefundsBase)
                    .HasColumnName("ptas_schd1taxrefunds_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchd1unemployment)
                    .HasColumnName("ptas_schd1unemployment")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchd1unemploymentBase)
                    .HasColumnName("ptas_schd1unemployment_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchdcdepreciation)
                    .HasColumnName("ptas_schdcdepreciation")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchdcdepreciationBase)
                    .HasColumnName("ptas_schdcdepreciation_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchdcexbusinesshome)
                    .HasColumnName("ptas_schdcexbusinesshome")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchdcexbusinesshomeBase)
                    .HasColumnName("ptas_schdcexbusinesshome_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchdcnetprofitloss)
                    .HasColumnName("ptas_schdcnetprofitloss")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchdcnetprofitlossBase)
                    .HasColumnName("ptas_schdcnetprofitloss_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchdcotherincomeamt)
                    .HasColumnName("ptas_schdcotherincomeamt")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchdcotherincomeamtBase)
                    .HasColumnName("ptas_schdcotherincomeamt_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchdcsqftbusiness).HasColumnName("ptas_schdcsqftbusiness");

                entity.Property(e => e.PtasSchdcsqfthome).HasColumnName("ptas_schdcsqfthome");

                entity.Property(e => e.PtasSchddcapgains)
                    .HasColumnName("ptas_schddcapgains")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchddcapgainsBase)
                    .HasColumnName("ptas_schddcapgains_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchddlongtermboxa)
                    .HasColumnName("ptas_schddlongtermboxa")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchddlongtermboxaBase)
                    .HasColumnName("ptas_schddlongtermboxa_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchddlongtermboxb)
                    .HasColumnName("ptas_schddlongtermboxb")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchddlongtermboxbBase)
                    .HasColumnName("ptas_schddlongtermboxb_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchddlongtermboxc)
                    .HasColumnName("ptas_schddlongtermboxc")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchddlongtermboxcBase)
                    .HasColumnName("ptas_schddlongtermboxc_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchddnetshorttermgains)
                    .HasColumnName("ptas_schddnetshorttermgains")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchddnetshorttermgainsBase)
                    .HasColumnName("ptas_schddnetshorttermgains_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchddrequired).HasColumnName("ptas_schddrequired");

                entity.Property(e => e.PtasSchddshortterm6252)
                    .HasColumnName("ptas_schddshortterm6252")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchddshortterm6252Base)
                    .HasColumnName("ptas_schddshortterm6252_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchddshorttermboxa)
                    .HasColumnName("ptas_schddshorttermboxa")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchddshorttermboxaBase)
                    .HasColumnName("ptas_schddshorttermboxa_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchddshorttermboxb)
                    .HasColumnName("ptas_schddshorttermboxb")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchddshorttermboxbBase)
                    .HasColumnName("ptas_schddshorttermboxb_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchddshorttermboxc)
                    .HasColumnName("ptas_schddshorttermboxc")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchddshorttermboxcBase)
                    .HasColumnName("ptas_schddshorttermboxc_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchdedepreciation)
                    .HasColumnName("ptas_schdedepreciation")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchdedepreciationBase)
                    .HasColumnName("ptas_schdedepreciation_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchdephysaddress).HasColumnName("ptas_schdephysaddress");

                entity.Property(e => e.PtasSchdeproptype).HasColumnName("ptas_schdeproptype");

                entity.Property(e => e.PtasSchdfdepreciation)
                    .HasColumnName("ptas_schdfdepreciation")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSchdfdepreciationBase)
                    .HasColumnName("ptas_schdfdepreciation_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasSeappdetailidValue).HasColumnName("_ptas_seappdetailid_value");

                entity.Property(e => e.PtasSeapplicationidValue).HasColumnName("_ptas_seapplicationid_value");

                entity.Property(e => e.PtasSsstatement).HasColumnName("ptas_ssstatement");

                entity.Property(e => e.PtasTaxnontaxbonds)
                    .HasColumnName("ptas_taxnontaxbonds")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTaxnontaxbondsBase)
                    .HasColumnName("ptas_taxnontaxbonds_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalexpenses)
                    .HasColumnName("ptas_totalexpenses")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalexpensesBase)
                    .HasColumnName("ptas_totalexpenses_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalincome)
                    .HasColumnName("ptas_totalincome")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalincomeBase)
                    .HasColumnName("ptas_totalincome_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTrustpartnershipestateincome)
                    .HasColumnName("ptas_trustpartnershipestateincome")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTrustpartnershipestateincomeBase)
                    .HasColumnName("ptas_trustpartnershipestateincome_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasYearidValue).HasColumnName("_ptas_yearid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasSefrozenvalue>(entity =>
            {
                entity.ToTable("ptas_sefrozenvalue", "dynamics");

                entity.Property(e => e.PtasSefrozenvalueid)
                    .HasColumnName("ptas_sefrozenvalueid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAccountnumber).HasColumnName("ptas_accountnumber");

                entity.Property(e => e.PtasAlternatekey).HasColumnName("ptas_alternatekey");

                entity.Property(e => e.PtasAtc001transaction).HasColumnName("ptas_atc001transaction");

                entity.Property(e => e.PtasAtc240transaction).HasColumnName("ptas_atc240transaction");

                entity.Property(e => e.PtasAtcgeneratedlines).HasColumnName("ptas_atcgeneratedlines");

                entity.Property(e => e.PtasAutonumber).HasColumnName("ptas_autonumber");

                entity.Property(e => e.PtasChangereasonidValue).HasColumnName("_ptas_changereasonid_value");

                entity.Property(e => e.PtasCheckdigit2).HasColumnName("ptas_checkdigit2");

                entity.Property(e => e.PtasCity2).HasColumnName("ptas_city2");

                entity.Property(e => e.PtasContactidValue).HasColumnName("_ptas_contactid_value");

                entity.Property(e => e.PtasCountry2).HasColumnName("ptas_country2");

                entity.Property(e => e.PtasCurrentexemptionlevelforatc1).HasColumnName("ptas_currentexemptionlevelforatc1");

                entity.Property(e => e.PtasCurrentexemptionlevelforatc2).HasColumnName("ptas_currentexemptionlevelforatc2");

                entity.Property(e => e.PtasErrordetail).HasColumnName("ptas_errordetail");

                entity.Property(e => e.PtasExemptionremoval1idValue).HasColumnName("_ptas_exemptionremoval1id_value");

                entity.Property(e => e.PtasExemptionremoval2idValue).HasColumnName("_ptas_exemptionremoval2id_value");

                entity.Property(e => e.PtasFromexemptiontype).HasColumnName("ptas_fromexemptiontype");

                entity.Property(e => e.PtasFromimps)
                    .HasColumnName("ptas_fromimps")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFromimpsBase)
                    .HasColumnName("ptas_fromimps_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFromimpvalue1)
                    .HasColumnName("ptas_fromimpvalue1")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFromimpvalue1Base)
                    .HasColumnName("ptas_fromimpvalue1_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFromimpvalue2)
                    .HasColumnName("ptas_fromimpvalue2")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFromimpvalue2Base)
                    .HasColumnName("ptas_fromimpvalue2_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFromland)
                    .HasColumnName("ptas_fromland")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFromlandBase)
                    .HasColumnName("ptas_fromland_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFromlandvalue1)
                    .HasColumnName("ptas_fromlandvalue1")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFromlandvalue1Base)
                    .HasColumnName("ptas_fromlandvalue1_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFromlandvalue2)
                    .HasColumnName("ptas_fromlandvalue2")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFromlandvalue2Base)
                    .HasColumnName("ptas_fromlandvalue2_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFrozenimprovementvalue)
                    .HasColumnName("ptas_frozenimprovementvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFrozenimprovementvalueBase)
                    .HasColumnName("ptas_frozenimprovementvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFrozenlandvalue)
                    .HasColumnName("ptas_frozenlandvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFrozenlandvalueBase)
                    .HasColumnName("ptas_frozenlandvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFrozenyearidValue).HasColumnName("_ptas_frozenyearid_value");

                entity.Property(e => e.PtasIspersonalproperty).HasColumnName("ptas_ispersonalproperty");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNbrfraction2).HasColumnName("ptas_nbrfraction2");

                entity.Property(e => e.PtasNextatc).HasColumnName("ptas_nextatc");

                entity.Property(e => e.PtasOriginationyearValue).HasColumnName("_ptas_originationyear_value");

                entity.Property(e => e.PtasOther).HasColumnName("ptas_other");

                entity.Property(e => e.PtasOverrideerrors).HasColumnName("ptas_overrideerrors");

                entity.Property(e => e.PtasParcel2idValue).HasColumnName("_ptas_parcel2id_value");

                entity.Property(e => e.PtasParcelidValue).HasColumnName("_ptas_parcelid_value");

                entity.Property(e => e.PtasProcessedon).HasColumnName("ptas_processedon");

                entity.Property(e => e.PtasProcessedonMerge).HasColumnName("ptas_processedon_merge");

                entity.Property(e => e.PtasProcessedonSplit).HasColumnName("ptas_processedon_split");

                entity.Property(e => e.PtasProcessedonStatuschange).HasColumnName("ptas_processedon_statuschange");

                entity.Property(e => e.PtasProcessedonValuechange).HasColumnName("ptas_processedon_valuechange");

                entity.Property(e => e.PtasProcessstatus).HasColumnName("ptas_processstatus");

                entity.Property(e => e.PtasRecordqueued).HasColumnName("ptas_recordqueued");

                entity.Property(e => e.PtasReprocessatc).HasColumnName("ptas_reprocessatc");

                entity.Property(e => e.PtasSameaddress).HasColumnName("ptas_sameaddress");

                entity.Property(e => e.PtasSeappdetailidValue).HasColumnName("_ptas_seappdetailid_value");

                entity.Property(e => e.PtasSeapplicationidValue).HasColumnName("_ptas_seapplicationid_value");

                entity.Property(e => e.PtasSplitcode2).HasColumnName("ptas_splitcode2");

                entity.Property(e => e.PtasSplitpercentage).HasColumnName("ptas_splitpercentage");

                entity.Property(e => e.PtasSplitreason).HasColumnName("ptas_splitreason");

                entity.Property(e => e.PtasStateprovince2).HasColumnName("ptas_stateprovince2");

                entity.Property(e => e.PtasStreetdirection2).HasColumnName("ptas_streetdirection2");

                entity.Property(e => e.PtasStreetname2).HasColumnName("ptas_streetname2");

                entity.Property(e => e.PtasStreetnumber2).HasColumnName("ptas_streetnumber2");

                entity.Property(e => e.PtasStreettype2).HasColumnName("ptas_streettype2");

                entity.Property(e => e.PtasSuppresstaxbill1).HasColumnName("ptas_suppresstaxbill1");

                entity.Property(e => e.PtasSuppresstaxbill2).HasColumnName("ptas_suppresstaxbill2");

                entity.Property(e => e.PtasTaxpayer2name).HasColumnName("ptas_taxpayer2name");

                entity.Property(e => e.PtasTerminationdate).HasColumnName("ptas_terminationdate");

                entity.Property(e => e.PtasToexemptiontype).HasColumnName("ptas_toexemptiontype");

                entity.Property(e => e.PtasToimpvalue2)
                    .HasColumnName("ptas_toimpvalue2")
                    .HasColumnType("money");

                entity.Property(e => e.PtasToimpvalue2Base)
                    .HasColumnName("ptas_toimpvalue2_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTolandvalue2)
                    .HasColumnName("ptas_tolandvalue2")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTolandvalue2Base)
                    .HasColumnName("ptas_tolandvalue2_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalfrom)
                    .HasColumnName("ptas_totalfrom")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalfromBase)
                    .HasColumnName("ptas_totalfrom_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalto)
                    .HasColumnName("ptas_totalto")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotaltoBase)
                    .HasColumnName("ptas_totalto_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasZippostal2).HasColumnName("ptas_zippostal2");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasSefrozenvalueCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_sefrozenvalue_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSefrozenvalueCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_sefrozenvalue_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasSefrozenvalueModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_sefrozenvalue_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSefrozenvalueModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_sefrozenvalue_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasSefrozenvalue)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_sefrozenvalue_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasSefrozenvalueOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_sefrozenvalue_owninguser");

                entity.HasOne(d => d.PtasChangereasonidValueNavigation)
                    .WithMany(p => p.PtasSefrozenvalue)
                    .HasForeignKey(d => d.PtasChangereasonidValue)
                    .HasConstraintName("FK_ptas_seexemptionreason_ptas_sefrozenvalue_ptas_changereasonid");

                entity.HasOne(d => d.PtasContactidValueNavigation)
                    .WithMany(p => p.PtasSefrozenvalue)
                    .HasForeignKey(d => d.PtasContactidValue)
                    .HasConstraintName("FK_contact_ptas_sefrozenvalue_ptas_contactid");

                entity.HasOne(d => d.PtasExemptionremoval1idValueNavigation)
                    .WithMany(p => p.InversePtasExemptionremoval1idValueNavigation)
                    .HasForeignKey(d => d.PtasExemptionremoval1idValue)
                    .HasConstraintName("FK_ptas_sefrozenvalue_ptas_sefrozenvalue_ptas_exemptionremoval1id");

                entity.HasOne(d => d.PtasExemptionremoval2idValueNavigation)
                    .WithMany(p => p.InversePtasExemptionremoval2idValueNavigation)
                    .HasForeignKey(d => d.PtasExemptionremoval2idValue)
                    .HasConstraintName("FK_ptas_sefrozenvalue_ptas_sefrozenvalue_ptas_exemptionremoval2id");

                entity.HasOne(d => d.PtasFrozenyearidValueNavigation)
                    .WithMany(p => p.PtasSefrozenvaluePtasFrozenyearidValueNavigation)
                    .HasForeignKey(d => d.PtasFrozenyearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_sefrozenvalue_ptas_frozenyearid");

                entity.HasOne(d => d.PtasOriginationyearValueNavigation)
                    .WithMany(p => p.PtasSefrozenvaluePtasOriginationyearValueNavigation)
                    .HasForeignKey(d => d.PtasOriginationyearValue)
                    .HasConstraintName("FK_ptas_year_ptas_sefrozenvalue_ptas_originationyear");

                entity.HasOne(d => d.PtasParcel2idValueNavigation)
                    .WithMany(p => p.PtasSefrozenvaluePtasParcel2idValueNavigation)
                    .HasForeignKey(d => d.PtasParcel2idValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_sefrozenvalue_ptas_parcel2id");

                entity.HasOne(d => d.PtasParcelidValueNavigation)
                    .WithMany(p => p.PtasSefrozenvaluePtasParcelidValueNavigation)
                    .HasForeignKey(d => d.PtasParcelidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_sefrozenvalue_ptas_parcelid");

                entity.HasOne(d => d.PtasSeappdetailidValueNavigation)
                    .WithMany(p => p.PtasSefrozenvalue)
                    .HasForeignKey(d => d.PtasSeappdetailidValue)
                    .HasConstraintName("FK_ptas_seappdetail_ptas_sefrozenvalue_ptas_seappdetailid");

                entity.HasOne(d => d.PtasSeapplicationidValueNavigation)
                    .WithMany(p => p.PtasSefrozenvalue)
                    .HasForeignKey(d => d.PtasSeapplicationidValue)
                    .HasConstraintName("FK_ptas_seapplication_ptas_sefrozenvalue_ptas_seapplicationid");
            });

            modelBuilder.Entity<PtasSketch>(entity =>
            {
                entity.ToTable("ptas_sketch", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_sketch_modifiedon");

                entity.Property(e => e.PtasSketchid)
                    .HasColumnName("ptas_sketchid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAccessoryidValue).HasColumnName("_ptas_accessoryid_value");

                entity.Property(e => e.PtasBloburi).HasColumnName("ptas_bloburi");

                entity.Property(e => e.PtasBuildingidValue).HasColumnName("_ptas_buildingid_value");

                entity.Property(e => e.PtasDrawauthoridValue).HasColumnName("_ptas_drawauthorid_value");

                entity.Property(e => e.PtasDrawdate).HasColumnName("ptas_drawdate");

                entity.Property(e => e.PtasIscomplete).HasColumnName("ptas_iscomplete");

                entity.Property(e => e.PtasIsofficial).HasColumnName("ptas_isofficial");

                entity.Property(e => e.PtasLocked).HasColumnName("ptas_locked");

                entity.Property(e => e.PtasLockedbyidValue).HasColumnName("_ptas_lockedbyid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasParcelidValue).HasColumnName("_ptas_parcelid_value");

                entity.Property(e => e.PtasTags).HasColumnName("ptas_tags");

                entity.Property(e => e.PtasTemplateidValue).HasColumnName("_ptas_templateid_value");

                entity.Property(e => e.PtasUnitidValue).HasColumnName("_ptas_unitid_value");

                entity.Property(e => e.PtasVersion).HasColumnName("ptas_version");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasSketchCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_sketch_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSketchCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_sketch_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasSketchModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_sketch_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSketchModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_sketch_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasSketch)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_sketch_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasSketchOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_sketch_owninguser");

                entity.HasOne(d => d.PtasAccessoryidValueNavigation)
                    .WithMany(p => p.PtasSketch)
                    .HasForeignKey(d => d.PtasAccessoryidValue)
                    .HasConstraintName("FK_ptas_accessorydetail_ptas_sketch_ptas_accessoryid");

                entity.HasOne(d => d.PtasBuildingidValueNavigation)
                    .WithMany(p => p.PtasSketch)
                    .HasForeignKey(d => d.PtasBuildingidValue)
                    .HasConstraintName("FK_ptas_buildingdetail_ptas_sketch_ptas_buildingid");

                entity.HasOne(d => d.PtasDrawauthoridValueNavigation)
                    .WithMany(p => p.PtasSketchPtasDrawauthoridValueNavigation)
                    .HasForeignKey(d => d.PtasDrawauthoridValue)
                    .HasConstraintName("FK_systemuser_ptas_sketch_ptas_drawauthorid");

                entity.HasOne(d => d.PtasLockedbyidValueNavigation)
                    .WithMany(p => p.PtasSketchPtasLockedbyidValueNavigation)
                    .HasForeignKey(d => d.PtasLockedbyidValue)
                    .HasConstraintName("FK_systemuser_ptas_sketch_ptas_lockedbyid");

                entity.HasOne(d => d.PtasParcelidValueNavigation)
                    .WithMany(p => p.PtasSketch)
                    .HasForeignKey(d => d.PtasParcelidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_sketch_ptas_parcelid");

                entity.HasOne(d => d.PtasTemplateidValueNavigation)
                    .WithMany(p => p.InversePtasTemplateidValueNavigation)
                    .HasForeignKey(d => d.PtasTemplateidValue)
                    .HasConstraintName("FK_ptas_sketch_ptas_sketch_ptas_templateid");

                entity.HasOne(d => d.PtasUnitidValueNavigation)
                    .WithMany(p => p.PtasSketch)
                    .HasForeignKey(d => d.PtasUnitidValue)
                    .HasConstraintName("FK_ptas_condounit_ptas_sketch_ptas_unitid");
            });

            modelBuilder.Entity<PtasSpecialtyarea>(entity =>
            {
                entity.ToTable("ptas_specialtyarea", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_specialtyarea_modifiedon");

                entity.Property(e => e.PtasSpecialtyareaid)
                    .HasColumnName("ptas_specialtyareaid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasAreanumber).HasColumnName("ptas_areanumber");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasSeniorappraiseridValue).HasColumnName("_ptas_seniorappraiserid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasSpecialtyareaCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_specialtyarea_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSpecialtyareaCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_specialtyarea_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasSpecialtyareaModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_specialtyarea_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSpecialtyareaModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_specialtyarea_modifiedonbehalfby");

                entity.HasOne(d => d.PtasSeniorappraiseridValueNavigation)
                    .WithMany(p => p.PtasSpecialtyareaPtasSeniorappraiseridValueNavigation)
                    .HasForeignKey(d => d.PtasSeniorappraiseridValue)
                    .HasConstraintName("FK_systemuser_ptas_specialtyarea_ptas_seniorappraiserid");
            });

            modelBuilder.Entity<PtasSpecialtyneighborhood>(entity =>
            {
                entity.ToTable("ptas_specialtyneighborhood", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_specialtyneighborhood_modifiedon");

                entity.Property(e => e.PtasSpecialtyneighborhoodid)
                    .HasColumnName("ptas_specialtyneighborhoodid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasAppraiseridValue).HasColumnName("_ptas_appraiserid_value");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNbhdnumber).HasColumnName("ptas_nbhdnumber");

                entity.Property(e => e.PtasSpecialtyareaidValue).HasColumnName("_ptas_specialtyareaid_value");

                entity.Property(e => e.PtasSupergroupidValue).HasColumnName("_ptas_supergroupid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasSpecialtyneighborhoodCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_specialtyneighborhood_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSpecialtyneighborhoodCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_specialtyneighborhood_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasSpecialtyneighborhoodModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_specialtyneighborhood_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSpecialtyneighborhoodModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_specialtyneighborhood_modifiedonbehalfby");

                entity.HasOne(d => d.PtasAppraiseridValueNavigation)
                    .WithMany(p => p.PtasSpecialtyneighborhoodPtasAppraiseridValueNavigation)
                    .HasForeignKey(d => d.PtasAppraiseridValue)
                    .HasConstraintName("FK_systemuser_ptas_specialtyneighborhood_ptas_appraiserid");

                entity.HasOne(d => d.PtasSpecialtyareaidValueNavigation)
                    .WithMany(p => p.PtasSpecialtyneighborhood)
                    .HasForeignKey(d => d.PtasSpecialtyareaidValue)
                    .HasConstraintName("FK_ptas_specialtyarea_ptas_specialtyneighborhood_ptas_specialtyareaid");

                entity.HasOne(d => d.PtasSupergroupidValueNavigation)
                    .WithMany(p => p.PtasSpecialtyneighborhood)
                    .HasForeignKey(d => d.PtasSupergroupidValue)
                    .HasConstraintName("FK_ptas_supergroup_ptas_specialtyneighborhood_ptas_supergroupid");
            });

            modelBuilder.Entity<PtasStateorprovince>(entity =>
            {
                entity.ToTable("ptas_stateorprovince", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_stateorprovince_modifiedon");

                entity.Property(e => e.PtasStateorprovinceid)
                    .HasColumnName("ptas_stateorprovinceid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasAbbreviation).HasColumnName("ptas_abbreviation");

                entity.Property(e => e.PtasAlpha3).HasColumnName("ptas_alpha3");

                entity.Property(e => e.PtasCountryidValue).HasColumnName("_ptas_countryid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasUncode).HasColumnName("ptas_uncode");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasStateorprovinceCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_stateorprovince_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasStateorprovinceCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_stateorprovince_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasStateorprovinceModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_stateorprovince_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasStateorprovinceModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_stateorprovince_modifiedonbehalfby");

                entity.HasOne(d => d.PtasCountryidValueNavigation)
                    .WithMany(p => p.PtasStateorprovince)
                    .HasForeignKey(d => d.PtasCountryidValue)
                    .HasConstraintName("FK_ptas_country_ptas_stateorprovince_ptas_countryid");
            });

            modelBuilder.Entity<PtasStateutilityvalue>(entity =>
            {
                entity.ToTable("ptas_stateutilityvalue", "dynamics");

                entity.Property(e => e.PtasStateutilityvalueid)
                    .HasColumnName("ptas_stateutilityvalueid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasCompanyaddressline1).HasColumnName("ptas_companyaddressline1");

                entity.Property(e => e.PtasCompanyaddressline2).HasColumnName("ptas_companyaddressline2");

                entity.Property(e => e.PtasCompanyaddressline3).HasColumnName("ptas_companyaddressline3");

                entity.Property(e => e.PtasCompanydoingbusinessas).HasColumnName("ptas_companydoingbusinessas");

                entity.Property(e => e.PtasCompanyname).HasColumnName("ptas_companyname");

                entity.Property(e => e.PtasCompanynumber).HasColumnName("ptas_companynumber");

                entity.Property(e => e.PtasCompanytype).HasColumnName("ptas_companytype");

                entity.Property(e => e.PtasCompanyzipcode).HasColumnName("ptas_companyzipcode");

                entity.Property(e => e.PtasContact).HasColumnName("ptas_contact");

                entity.Property(e => e.PtasLevycode).HasColumnName("ptas_levycode");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasPersonalequalizedvalue)
                    .HasColumnName("ptas_personalequalizedvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPersonalequalizedvalueBase)
                    .HasColumnName("ptas_personalequalizedvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRealequalizedvalue)
                    .HasColumnName("ptas_realequalizedvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRealequalizedvalueBase)
                    .HasColumnName("ptas_realequalizedvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTcanumber).HasColumnName("ptas_tcanumber");

                entity.Property(e => e.PtasTotalrealpersonalequalizedvalue)
                    .HasColumnName("ptas_totalrealpersonalequalizedvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalrealpersonalequalizedvalueBase)
                    .HasColumnName("ptas_totalrealpersonalequalizedvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasStateutilityvalueCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_stateutilityvalue_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasStateutilityvalueCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_stateutilityvalue_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasStateutilityvalueModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_stateutilityvalue_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasStateutilityvalueModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_stateutilityvalue_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasStateutilityvalue)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_stateutilityvalue_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasStateutilityvalueOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_stateutilityvalue_owninguser");
            });

            modelBuilder.Entity<PtasStreetname>(entity =>
            {
                entity.ToTable("ptas_streetname", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_streetname_modifiedon");

                entity.Property(e => e.PtasStreetnameid)
                    .HasColumnName("ptas_streetnameid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasStreetnameCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_streetname_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasStreetnameCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_streetname_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasStreetnameModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_streetname_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasStreetnameModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_streetname_modifiedonbehalfby");
            });

            modelBuilder.Entity<PtasStreettype>(entity =>
            {
                entity.ToTable("ptas_streettype", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_streettype_modifiedon");

                entity.Property(e => e.PtasStreettypeid)
                    .HasColumnName("ptas_streettypeid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasAlternate1).HasColumnName("ptas_alternate1");

                entity.Property(e => e.PtasAlternate2).HasColumnName("ptas_alternate2");

                entity.Property(e => e.PtasAlternate3).HasColumnName("ptas_alternate3");

                entity.Property(e => e.PtasAlternate4).HasColumnName("ptas_alternate4");

                entity.Property(e => e.PtasAlternate5).HasColumnName("ptas_alternate5");

                entity.Property(e => e.PtasAlternate6).HasColumnName("ptas_alternate6");

                entity.Property(e => e.PtasAlternate7).HasColumnName("ptas_alternate7");

                entity.Property(e => e.PtasAlternate8).HasColumnName("ptas_alternate8");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasStreettypeCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_streettype_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasStreettypeCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_streettype_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasStreettypeModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_streettype_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasStreettypeModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_streettype_modifiedonbehalfby");
            });

            modelBuilder.Entity<PtasSubarea>(entity =>
            {
                entity.ToTable("ptas_subarea", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_subarea_modifiedon");

                entity.Property(e => e.PtasSubareaid)
                    .HasColumnName("ptas_subareaid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasAreaidValue).HasColumnName("_ptas_areaid_value");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasSubareaCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_subarea_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSubareaCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_subarea_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasSubareaModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_subarea_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSubareaModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_subarea_modifiedonbehalfby");

                entity.HasOne(d => d.PtasAreaidValueNavigation)
                    .WithMany(p => p.PtasSubarea)
                    .HasForeignKey(d => d.PtasAreaidValue)
                    .HasConstraintName("FK_ptas_area_ptas_subarea_ptas_areaid");
            });

            modelBuilder.Entity<PtasSubmarket>(entity =>
            {
                entity.ToTable("ptas_submarket", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_submarket_modifiedon");

                entity.Property(e => e.PtasSubmarketid)
                    .HasColumnName("ptas_submarketid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasSubmarketCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_submarket_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSubmarketCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_submarket_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasSubmarketModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_submarket_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSubmarketModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_submarket_modifiedonbehalfby");
            });

            modelBuilder.Entity<PtasSupergroup>(entity =>
            {
                entity.ToTable("ptas_supergroup", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_supergroup_modifiedon");

                entity.Property(e => e.PtasSupergroupid)
                    .HasColumnName("ptas_supergroupid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasSupergroupnumber).HasColumnName("ptas_supergroupnumber");

                entity.Property(e => e.PtasSupergrouptype).HasColumnName("ptas_supergrouptype");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasSupergroupCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_supergroup_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSupergroupCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_supergroup_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasSupergroupModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_supergroup_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasSupergroupModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_supergroup_modifiedonbehalfby");
            });

            modelBuilder.Entity<PtasTask>(entity =>
            {
                entity.ToTable("ptas_task", "dynamics");

                entity.Property(e => e.PtasTaskid)
                    .HasColumnName("ptas_taskid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAccessoriesindestroyedproperty).HasColumnName("ptas_accessoriesindestroyedproperty");

                entity.Property(e => e.PtasAccountingsectionsupervisorValue).HasColumnName("_ptas_accountingsectionsupervisor_value");

                entity.Property(e => e.PtasAnticipatedrepairdates).HasColumnName("ptas_anticipatedrepairdates");

                entity.Property(e => e.PtasAppdeterredinvalAssessedvalImps)
                    .HasColumnName("ptas_appdeterredinval_assessedval_imps")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAppdeterredinvalAssessedvalImpsBase)
                    .HasColumnName("ptas_appdeterredinval_assessedval_imps_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAppdeterredinvalAssessedvalLand)
                    .HasColumnName("ptas_appdeterredinval_assessedval_land")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAppdeterredinvalAssessedvalLandBase)
                    .HasColumnName("ptas_appdeterredinval_assessedval_land_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAppdeterredinvalCalendaryear).HasColumnName("ptas_appdeterredinval_calendaryear");

                entity.Property(e => e.PtasAppdeterredinvalFullmarketvalueImps)
                    .HasColumnName("ptas_appdeterredinval_fullmarketvalue_imps")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAppdeterredinvalFullmarketvalueImpsBase)
                    .HasColumnName("ptas_appdeterredinval_fullmarketvalue_imps_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAppdeterredinvalFullmarketvalueLand)
                    .HasColumnName("ptas_appdeterredinval_fullmarketvalue_land")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAppdeterredinvalFullmarketvalueLandBase)
                    .HasColumnName("ptas_appdeterredinval_fullmarketvalue_land_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAppdeterredinvalTaxrollcollectionfor).HasColumnName("ptas_appdeterredinval_taxrollcollectionfor");

                entity.Property(e => e.PtasAppdeterredinvalTotalamountImps)
                    .HasColumnName("ptas_appdeterredinval_totalamount_imps")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAppdeterredinvalTotalamountImpsBase)
                    .HasColumnName("ptas_appdeterredinval_totalamount_imps_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAppdeterredinvalTotalamountLand)
                    .HasColumnName("ptas_appdeterredinval_totalamount_land")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAppdeterredinvalTotalamountLandBase)
                    .HasColumnName("ptas_appdeterredinval_totalamount_land_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAppraisedimprovementincrease)
                    .HasColumnName("ptas_appraisedimprovementincrease")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAppraisedimprovementincreaseBase)
                    .HasColumnName("ptas_appraisedimprovementincrease_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAppraisedimprovementvalue)
                    .HasColumnName("ptas_appraisedimprovementvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAppraisedimprovementvalueBase)
                    .HasColumnName("ptas_appraisedimprovementvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAppraisedlandvalue)
                    .HasColumnName("ptas_appraisedlandvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAppraisedlandvalueBase)
                    .HasColumnName("ptas_appraisedlandvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAppraisedtotalvalue)
                    .HasColumnName("ptas_appraisedtotalvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAppraisedtotalvalueBase)
                    .HasColumnName("ptas_appraisedtotalvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAppraiserValue).HasColumnName("_ptas_appraiser_value");

                entity.Property(e => e.PtasArea).HasColumnName("ptas_area");

                entity.Property(e => e.PtasAssessedvalueppmhfh)
                    .HasColumnName("ptas_assessedvalueppmhfh")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAssessedvalueppmhfhBase)
                    .HasColumnName("ptas_assessedvalueppmhfh_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasChangereason).HasColumnName("ptas_changereason");

                entity.Property(e => e.PtasCitystatezip).HasColumnName("ptas_citystatezip");

                entity.Property(e => e.PtasClaimdisqualificationreason).HasColumnName("ptas_claimdisqualificationreason");

                entity.Property(e => e.PtasClaimdisqualificationreasonvalue).HasColumnName("ptas_claimdisqualificationreasonvalue");

                entity.Property(e => e.PtasClaimqualificationreason).HasColumnName("ptas_claimqualificationreason");

                entity.Property(e => e.PtasComments).HasColumnName("ptas_comments");

                entity.Property(e => e.PtasCommercialsrappraiserValue).HasColumnName("_ptas_commercialsrappraiser_value");

                entity.Property(e => e.PtasConvertpropertytypefrom).HasColumnName("ptas_convertpropertytypefrom");

                entity.Property(e => e.PtasConvertpropertytypefromidValue).HasColumnName("_ptas_convertpropertytypefromid_value");

                entity.Property(e => e.PtasConvertpropertytypeto).HasColumnName("ptas_convertpropertytypeto");

                entity.Property(e => e.PtasConvertpropertytypetoidValue).HasColumnName("_ptas_convertpropertytypetoid_value");

                entity.Property(e => e.PtasCosttocureImps)
                    .HasColumnName("ptas_costtocure_imps")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCosttocureImpsBase)
                    .HasColumnName("ptas_costtocure_imps_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCosttocureLand)
                    .HasColumnName("ptas_costtocure_land")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCosttocureLandBase)
                    .HasColumnName("ptas_costtocure_land_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasDateofdestruction).HasColumnName("ptas_dateofdestruction");

                entity.Property(e => e.PtasDatesigned).HasColumnName("ptas_datesigned");

                entity.Property(e => e.PtasDayofyear).HasColumnName("ptas_dayofyear");

                entity.Property(e => e.PtasDaysremaining).HasColumnName("ptas_daysremaining");

                entity.Property(e => e.PtasDescriptionofdestroyedproperty).HasColumnName("ptas_descriptionofdestroyedproperty");

                entity.Property(e => e.PtasDestroyedpropertydescription).HasColumnName("ptas_destroyedpropertydescription");

                entity.Property(e => e.PtasDestroyedpropertytasktypecode).HasColumnName("ptas_destroyedpropertytasktypecode");

                entity.Property(e => e.PtasDestructnumber).HasColumnName("ptas_destructnumber");

                entity.Property(e => e.PtasFolionumber).HasColumnName("ptas_folionumber");

                entity.Property(e => e.PtasFullmarketvalueppmhfh)
                    .HasColumnName("ptas_fullmarketvalueppmhfh")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFullmarketvalueppmhfhBase)
                    .HasColumnName("ptas_fullmarketvalueppmhfh_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasHitasktype).HasColumnName("ptas_hitasktype");

                entity.Property(e => e.PtasHomeimprovementidValue).HasColumnName("_ptas_homeimprovementid_value");

                entity.Property(e => e.PtasImprovementvalueloss)
                    .HasColumnName("ptas_improvementvalueloss")
                    .HasColumnType("money");

                entity.Property(e => e.PtasImprovementvaluelossBase)
                    .HasColumnName("ptas_improvementvalueloss_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLandvalueloss)
                    .HasColumnName("ptas_landvalueloss")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLandvaluelossBase)
                    .HasColumnName("ptas_landvalueloss_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLossoccurringasaresultof).HasColumnName("ptas_lossoccurringasaresultof");

                entity.Property(e => e.PtasLossoccurringasaresultofother).HasColumnName("ptas_lossoccurringasaresultofother");

                entity.Property(e => e.PtasLossoccurringasaresultofvalue).HasColumnName("ptas_lossoccurringasaresultofvalue");

                entity.Property(e => e.PtasMailingaddress).HasColumnName("ptas_mailingaddress");

                entity.Property(e => e.PtasMailingcitystatezip).HasColumnName("ptas_mailingcitystatezip");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNetconditiongoodImprovements)
                    .HasColumnName("ptas_netconditiongood_improvements")
                    .HasColumnType("money");

                entity.Property(e => e.PtasOthercomments).HasColumnName("ptas_othercomments");

                entity.Property(e => e.PtasOverrideprorateimprovementcalculation).HasColumnName("ptas_overrideprorateimprovementcalculation");

                entity.Property(e => e.PtasOverrideproratelandvaluecalculation).HasColumnName("ptas_overrideproratelandvaluecalculation");

                entity.Property(e => e.PtasParcelidValue).HasColumnName("_ptas_parcelid_value");

                entity.Property(e => e.PtasParenttaskidValue).HasColumnName("_ptas_parenttaskid_value");

                entity.Property(e => e.PtasPercentyearremaining).HasColumnName("ptas_percentyearremaining");

                entity.Property(e => e.PtasPermitissuedby).HasColumnName("ptas_permitissuedby");

                entity.Property(e => e.PtasPersonalpropertyidValue).HasColumnName("_ptas_personalpropertyid_value");

                entity.Property(e => e.PtasPhonenumber).HasColumnName("ptas_phonenumber");

                entity.Property(e => e.PtasPortalcontactValue).HasColumnName("_ptas_portalcontact_value");

                entity.Property(e => e.PtasPostadditionalrecordtorollyear).HasColumnName("ptas_postadditionalrecordtorollyear");

                entity.Property(e => e.PtasPropertyaddress).HasColumnName("ptas_propertyaddress");

                entity.Property(e => e.PtasProratedlandvalue)
                    .HasColumnName("ptas_proratedlandvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasProratedlandvalueBase)
                    .HasColumnName("ptas_proratedlandvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasProratedlandvalueloss)
                    .HasColumnName("ptas_proratedlandvalueloss")
                    .HasColumnType("money");

                entity.Property(e => e.PtasProratedlandvaluelossBase)
                    .HasColumnName("ptas_proratedlandvalueloss_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasProrateimprovementvalue)
                    .HasColumnName("ptas_prorateimprovementvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasProrateimprovementvalueBase)
                    .HasColumnName("ptas_prorateimprovementvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasProrateimprovementvalueloss)
                    .HasColumnName("ptas_prorateimprovementvalueloss")
                    .HasColumnType("money");

                entity.Property(e => e.PtasProrateimprovementvaluelossBase)
                    .HasColumnName("ptas_prorateimprovementvalueloss_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasQstr).HasColumnName("ptas_qstr");

                entity.Property(e => e.PtasRepairdatesunknownatthistime).HasColumnName("ptas_repairdatesunknownatthistime");

                entity.Property(e => e.PtasResidentialsrappraiserValue).HasColumnName("_ptas_residentialsrappraiser_value");

                entity.Property(e => e.PtasResponsibilityfromValue).HasColumnName("_ptas_responsibilityfrom_value");

                entity.Property(e => e.PtasResponsibilitytoValue).HasColumnName("_ptas_responsibilityto_value");

                entity.Property(e => e.PtasRevaluenoticeflag).HasColumnName("ptas_revaluenoticeflag");

                entity.Property(e => e.PtasReviewedbyacctsectsupervisor).HasColumnName("ptas_reviewedbyacctsectsupervisor");

                entity.Property(e => e.PtasReviewedbycommsrappraiser).HasColumnName("ptas_reviewedbycommsrappraiser");

                entity.Property(e => e.PtasReviewedbyressrappraiser).HasColumnName("ptas_reviewedbyressrappraiser");

                entity.Property(e => e.PtasSalesidValue).HasColumnName("_ptas_salesid_value");

                entity.Property(e => e.PtasSdf).HasColumnName("ptas_sdf");

                entity.Property(e => e.PtasSelectmethod).HasColumnName("ptas_selectmethod");

                entity.Property(e => e.PtasSelectreason).HasColumnName("ptas_selectreason");

                entity.Property(e => e.PtasSignedby).HasColumnName("ptas_signedby");

                entity.Property(e => e.PtasSplitcode).HasColumnName("ptas_splitcode");

                entity.Property(e => e.PtasSubarea).HasColumnName("ptas_subarea");

                entity.Property(e => e.PtasSubmissionsource).HasColumnName("ptas_submissionsource");

                entity.Property(e => e.PtasSubtaskidValue).HasColumnName("_ptas_subtaskid_value");

                entity.Property(e => e.PtasTaskdescription).HasColumnName("ptas_taskdescription");

                entity.Property(e => e.PtasTasknumber).HasColumnName("ptas_tasknumber");

                entity.Property(e => e.PtasTasktype).HasColumnName("ptas_tasktype");

                entity.Property(e => e.PtasTaxableimprovementvalue)
                    .HasColumnName("ptas_taxableimprovementvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTaxableimprovementvalueBase)
                    .HasColumnName("ptas_taxableimprovementvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTaxablelandvalue)
                    .HasColumnName("ptas_taxablelandvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTaxablelandvalueBase)
                    .HasColumnName("ptas_taxablelandvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTaxabletotalvalue)
                    .HasColumnName("ptas_taxabletotalvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTaxabletotalvalueBase)
                    .HasColumnName("ptas_taxabletotalvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTaxaccountcity).HasColumnName("ptas_taxaccountcity");

                entity.Property(e => e.PtasTaxaccountnumberValue).HasColumnName("_ptas_taxaccountnumber_value");

                entity.Property(e => e.PtasTaxaccountstate).HasColumnName("ptas_taxaccountstate");

                entity.Property(e => e.PtasTaxaccountzipcode).HasColumnName("ptas_taxaccountzipcode");

                entity.Property(e => e.PtasTaxpayername).HasColumnName("ptas_taxpayername");

                entity.Property(e => e.PtasTaxrollyear).HasColumnName("ptas_taxrollyear");

                entity.Property(e => e.PtasTaxvaluereason).HasColumnName("ptas_taxvaluereason");

                entity.Property(e => e.PtasTotalamountoflossppmhfh)
                    .HasColumnName("ptas_totalamountoflossppmhfh")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalamountoflossppmhfhBase)
                    .HasColumnName("ptas_totalamountoflossppmhfh_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalvalue)
                    .HasColumnName("ptas_totalvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalvalueBase)
                    .HasColumnName("ptas_totalvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTrueandfairvalueremainingImps)
                    .HasColumnName("ptas_trueandfairvalueremaining_imps")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTrueandfairvalueremainingImpsBase)
                    .HasColumnName("ptas_trueandfairvalueremaining_imps_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTrueandfairvalueremainingLand)
                    .HasColumnName("ptas_trueandfairvalueremaining_land")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTrueandfairvalueremainingLandBase)
                    .HasColumnName("ptas_trueandfairvalueremaining_land_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasUnitidValue).HasColumnName("_ptas_unitid_value");

                entity.Property(e => e.PtasZoning).HasColumnName("ptas_zoning");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasTaskCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_task_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasTaskCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_task_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasTaskModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_task_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasTaskModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_task_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasTask)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_task_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasTaskOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_task_owninguser");

                entity.HasOne(d => d.PtasAccountingsectionsupervisorValueNavigation)
                    .WithMany(p => p.PtasTaskPtasAccountingsectionsupervisorValueNavigation)
                    .HasForeignKey(d => d.PtasAccountingsectionsupervisorValue)
                    .HasConstraintName("FK_systemuser_ptas_task_ptas_accountingsectionsupervisor");

                entity.HasOne(d => d.PtasAppraiserValueNavigation)
                    .WithMany(p => p.PtasTaskPtasAppraiserValueNavigation)
                    .HasForeignKey(d => d.PtasAppraiserValue)
                    .HasConstraintName("FK_systemuser_ptas_task_ptas_appraiser");

                entity.HasOne(d => d.PtasCommercialsrappraiserValueNavigation)
                    .WithMany(p => p.PtasTaskPtasCommercialsrappraiserValueNavigation)
                    .HasForeignKey(d => d.PtasCommercialsrappraiserValue)
                    .HasConstraintName("FK_systemuser_ptas_task_ptas_commercialsrappraiser");

                entity.HasOne(d => d.PtasConvertpropertytypefromidValueNavigation)
                    .WithMany(p => p.PtasTaskPtasConvertpropertytypefromidValueNavigation)
                    .HasForeignKey(d => d.PtasConvertpropertytypefromidValue)
                    .HasConstraintName("FK_ptas_propertytype_ptas_task_ptas_convertpropertytypefromid");

                entity.HasOne(d => d.PtasConvertpropertytypetoidValueNavigation)
                    .WithMany(p => p.PtasTaskPtasConvertpropertytypetoidValueNavigation)
                    .HasForeignKey(d => d.PtasConvertpropertytypetoidValue)
                    .HasConstraintName("FK_ptas_propertytype_ptas_task_ptas_convertpropertytypetoid");

                entity.HasOne(d => d.PtasHomeimprovementidValueNavigation)
                    .WithMany(p => p.PtasTask)
                    .HasForeignKey(d => d.PtasHomeimprovementidValue)
                    .HasConstraintName("FK_ptas_homeimprovement_ptas_task_ptas_homeimprovementid");

                entity.HasOne(d => d.PtasParcelidValueNavigation)
                    .WithMany(p => p.PtasTask)
                    .HasForeignKey(d => d.PtasParcelidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_task_ptas_parcelid");

                entity.HasOne(d => d.PtasParenttaskidValueNavigation)
                    .WithMany(p => p.InversePtasParenttaskidValueNavigation)
                    .HasForeignKey(d => d.PtasParenttaskidValue)
                    .HasConstraintName("FK_ptas_task_ptas_task_ptas_parenttaskid");

                entity.HasOne(d => d.PtasPersonalpropertyidValueNavigation)
                    .WithMany(p => p.PtasTask)
                    .HasForeignKey(d => d.PtasPersonalpropertyidValue)
                    .HasConstraintName("FK_ptas_personalproperty_ptas_task_ptas_personalpropertyid");

                entity.HasOne(d => d.PtasPortalcontactValueNavigation)
                    .WithMany(p => p.PtasTask)
                    .HasForeignKey(d => d.PtasPortalcontactValue)
                    .HasConstraintName("FK_ptas_portalcontact_ptas_task_ptas_portalcontact");

                entity.HasOne(d => d.PtasResidentialsrappraiserValueNavigation)
                    .WithMany(p => p.PtasTaskPtasResidentialsrappraiserValueNavigation)
                    .HasForeignKey(d => d.PtasResidentialsrappraiserValue)
                    .HasConstraintName("FK_systemuser_ptas_task_ptas_residentialsrappraiser");

                entity.HasOne(d => d.PtasResponsibilityfromValueNavigation)
                    .WithMany(p => p.PtasTaskPtasResponsibilityfromValueNavigation)
                    .HasForeignKey(d => d.PtasResponsibilityfromValue)
                    .HasConstraintName("FK_ptas_responsibility_ptas_task_ptas_responsibilityfrom");

                entity.HasOne(d => d.PtasResponsibilitytoValueNavigation)
                    .WithMany(p => p.PtasTaskPtasResponsibilitytoValueNavigation)
                    .HasForeignKey(d => d.PtasResponsibilitytoValue)
                    .HasConstraintName("FK_ptas_responsibility_ptas_task_ptas_responsibilityto");

                entity.HasOne(d => d.PtasSalesidValueNavigation)
                    .WithMany(p => p.PtasTask)
                    .HasForeignKey(d => d.PtasSalesidValue)
                    .HasConstraintName("FK_ptas_sales_ptas_task_ptas_salesid");

                entity.HasOne(d => d.PtasSubtaskidValueNavigation)
                    .WithMany(p => p.InversePtasSubtaskidValueNavigation)
                    .HasForeignKey(d => d.PtasSubtaskidValue)
                    .HasConstraintName("FK_ptas_task_ptas_task_ptas_subtaskid");

                entity.HasOne(d => d.PtasTaxaccountnumberValueNavigation)
                    .WithMany(p => p.PtasTask)
                    .HasForeignKey(d => d.PtasTaxaccountnumberValue)
                    .HasConstraintName("FK_ptas_taxaccount_ptas_task_ptas_taxaccountnumber");

                entity.HasOne(d => d.PtasUnitidValueNavigation)
                    .WithMany(p => p.PtasTask)
                    .HasForeignKey(d => d.PtasUnitidValue)
                    .HasConstraintName("FK_ptas_condounit_ptas_task_ptas_unitid");
            });

            modelBuilder.Entity<PtasTaxaccount>(entity =>
            {
                entity.ToTable("ptas_taxaccount", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_taxaccount_modifiedon");

                entity.Property(e => e.PtasTaxaccountid)
                    .HasColumnName("ptas_taxaccountid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAccountnumber).HasColumnName("ptas_accountnumber");

                entity.Property(e => e.PtasAccounttype).HasColumnName("ptas_accounttype");

                entity.Property(e => e.PtasAccounttypeCalc).HasColumnName("ptas_accounttype_calc");

                entity.Property(e => e.PtasAddr1City).HasColumnName("ptas_addr1_city");

                entity.Property(e => e.PtasAddr1CityidValue).HasColumnName("_ptas_addr1_cityid_value");

                entity.Property(e => e.PtasAddr1Compositeaddress).HasColumnName("ptas_addr1_compositeaddress");

                entity.Property(e => e.PtasAddr1CompositeaddressOneline).HasColumnName("ptas_addr1_compositeaddress_oneline");

                entity.Property(e => e.PtasAddr1CountryidValue).HasColumnName("_ptas_addr1_countryid_value");

                entity.Property(e => e.PtasAddr1IntlPostalcode).HasColumnName("ptas_addr1_intl_postalcode");

                entity.Property(e => e.PtasAddr1IntlStateprovince).HasColumnName("ptas_addr1_intl_stateprovince");

                entity.Property(e => e.PtasAddr1StateidValue).HasColumnName("_ptas_addr1_stateid_value");

                entity.Property(e => e.PtasAddr1StreetIntlAddress).HasColumnName("ptas_addr1_street_intl_address");

                entity.Property(e => e.PtasAddr1ZipcodeidValue).HasColumnName("_ptas_addr1_zipcodeid_value");

                entity.Property(e => e.PtasAddressvalidated).HasColumnName("ptas_addressvalidated");

                entity.Property(e => e.PtasAttentionname).HasColumnName("ptas_attentionname");

                entity.Property(e => e.PtasChangesource).HasColumnName("ptas_changesource");

                entity.Property(e => e.PtasCondounitidValue).HasColumnName("_ptas_condounitid_value");

                entity.Property(e => e.PtasEmail).HasColumnName("ptas_email");

                entity.Property(e => e.PtasForeclosure).HasColumnName("ptas_foreclosure");

                entity.Property(e => e.PtasIsnonusaddress).HasColumnName("ptas_isnonusaddress");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasLegacyrpaccountid).HasColumnName("ptas_legacyrpaccountid");

                entity.Property(e => e.PtasLevycodeCalc).HasColumnName("ptas_levycode_calc");

                entity.Property(e => e.PtasLevycodeidValue).HasColumnName("_ptas_levycodeid_value");

                entity.Property(e => e.PtasLockmailingaddress).HasColumnName("ptas_lockmailingaddress");

                entity.Property(e => e.PtasLotacreageCalc)
                    .HasColumnName("ptas_lotacreage_calc")
                    .HasColumnType("money");

                entity.Property(e => e.PtasMailingaddrfullline).HasColumnName("ptas_mailingaddrfullline");

                entity.Property(e => e.PtasMasspayeridValue).HasColumnName("_ptas_masspayerid_value");

                entity.Property(e => e.PtasMastertaxaccountidValue).HasColumnName("_ptas_mastertaxaccountid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNoxiousweedexempt).HasColumnName("ptas_noxiousweedexempt");

                entity.Property(e => e.PtasNoxiousweedreason).HasColumnName("ptas_noxiousweedreason");

                entity.Property(e => e.PtasPaperless).HasColumnName("ptas_paperless");

                entity.Property(e => e.PtasParcelidValue).HasColumnName("_ptas_parcelid_value");

                entity.Property(e => e.PtasPersonalpropertyidValue).HasColumnName("_ptas_personalpropertyid_value");

                entity.Property(e => e.PtasPhone1).HasColumnName("ptas_phone1");

                entity.Property(e => e.PtasPropertytype).HasColumnName("ptas_propertytype");

                entity.Property(e => e.PtasPropertytypeCalc).HasColumnName("ptas_propertytype_calc");

                entity.Property(e => e.PtasRatetype).HasColumnName("ptas_ratetype");

                entity.Property(e => e.PtasReason).HasColumnName("ptas_reason");

                entity.Property(e => e.PtasSeniorexemption).HasColumnName("ptas_seniorexemption");

                entity.Property(e => e.PtasShowrecordchanges).HasColumnName("ptas_showrecordchanges");

                entity.Property(e => e.PtasSnapshotdatetime).HasColumnName("ptas_snapshotdatetime");

                entity.Property(e => e.PtasSnapshottype).HasColumnName("ptas_snapshottype");

                entity.Property(e => e.PtasSoilfeeexempt).HasColumnName("ptas_soilfeeexempt");

                entity.Property(e => e.PtasSoilfeereason).HasColumnName("ptas_soilfeereason");

                entity.Property(e => e.PtasSplitcodeCalc).HasColumnName("ptas_splitcode_calc");

                entity.Property(e => e.PtasSubjecttoforeclosure).HasColumnName("ptas_subjecttoforeclosure");

                entity.Property(e => e.PtasTaxablestatus).HasColumnName("ptas_taxablestatus");

                entity.Property(e => e.PtasTaxpayername).HasColumnName("ptas_taxpayername");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasTaxaccountCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_taxaccount_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasTaxaccountCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_taxaccount_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasTaxaccountModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_taxaccount_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasTaxaccountModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_taxaccount_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasTaxaccount)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_taxaccount_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasTaxaccountOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_taxaccount_owninguser");

                entity.HasOne(d => d.PtasAddr1CityidValueNavigation)
                    .WithMany(p => p.PtasTaxaccount)
                    .HasForeignKey(d => d.PtasAddr1CityidValue)
                    .HasConstraintName("FK_ptas_city_ptas_taxaccount_ptas_addr1_cityid");

                entity.HasOne(d => d.PtasAddr1CountryidValueNavigation)
                    .WithMany(p => p.PtasTaxaccount)
                    .HasForeignKey(d => d.PtasAddr1CountryidValue)
                    .HasConstraintName("FK_ptas_country_ptas_taxaccount_ptas_addr1_countryid");

                entity.HasOne(d => d.PtasAddr1StateidValueNavigation)
                    .WithMany(p => p.PtasTaxaccount)
                    .HasForeignKey(d => d.PtasAddr1StateidValue)
                    .HasConstraintName("FK_ptas_stateorprovince_ptas_taxaccount_ptas_addr1_stateid");

                entity.HasOne(d => d.PtasAddr1ZipcodeidValueNavigation)
                    .WithMany(p => p.PtasTaxaccount)
                    .HasForeignKey(d => d.PtasAddr1ZipcodeidValue)
                    .HasConstraintName("FK_ptas_zipcode_ptas_taxaccount_ptas_addr1_zipcodeid");

                entity.HasOne(d => d.PtasCondounitidValueNavigation)
                    .WithMany(p => p.PtasTaxaccount)
                    .HasForeignKey(d => d.PtasCondounitidValue)
                    .HasConstraintName("FK_ptas_condounit_ptas_taxaccount_ptas_condounitid");

                entity.HasOne(d => d.PtasLevycodeidValueNavigation)
                    .WithMany(p => p.PtasTaxaccount)
                    .HasForeignKey(d => d.PtasLevycodeidValue)
                    .HasConstraintName("FK_ptas_levycode_ptas_taxaccount_ptas_levycodeid");

                entity.HasOne(d => d.PtasMasspayeridValueNavigation)
                    .WithMany(p => p.PtasTaxaccount)
                    .HasForeignKey(d => d.PtasMasspayeridValue)
                    .HasConstraintName("FK_ptas_masspayer_ptas_taxaccount_ptas_masspayerid");

                entity.HasOne(d => d.PtasMastertaxaccountidValueNavigation)
                    .WithMany(p => p.InversePtasMastertaxaccountidValueNavigation)
                    .HasForeignKey(d => d.PtasMastertaxaccountidValue)
                    .HasConstraintName("FK_ptas_taxaccount_ptas_taxaccount_ptas_mastertaxaccountid");

                entity.HasOne(d => d.PtasParcelidValueNavigation)
                    .WithMany(p => p.PtasTaxaccount)
                    .HasForeignKey(d => d.PtasParcelidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_taxaccount_ptas_parcelid");

                entity.HasOne(d => d.PtasPersonalpropertyidValueNavigation)
                    .WithMany(p => p.PtasTaxaccount)
                    .HasForeignKey(d => d.PtasPersonalpropertyidValue)
                    .HasConstraintName("FK_ptas_personalproperty_ptas_taxaccount_ptas_personalpropertyid");
            });

            modelBuilder.Entity<PtasTaxaccountSnapshot>(entity =>
            {
                entity.HasKey(e => e.PtasTaxaccountid);

                entity.ToTable("ptas_taxaccount_snapshot", "dynamics");

                entity.Property(e => e.PtasTaxaccountid)
                    .HasColumnName("ptas_taxaccountid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAccountnumber).HasColumnName("ptas_accountnumber");

                entity.Property(e => e.PtasAccounttype).HasColumnName("ptas_accounttype");

                entity.Property(e => e.PtasAccounttypeCalc).HasColumnName("ptas_accounttype_calc");

                entity.Property(e => e.PtasAddr1City).HasColumnName("ptas_addr1_city");

                entity.Property(e => e.PtasAddr1CityidValue).HasColumnName("_ptas_addr1_cityid_value");

                entity.Property(e => e.PtasAddr1Compositeaddress).HasColumnName("ptas_addr1_compositeaddress");

                entity.Property(e => e.PtasAddr1CompositeaddressOneline).HasColumnName("ptas_addr1_compositeaddress_oneline");

                entity.Property(e => e.PtasAddr1CountryidValue).HasColumnName("_ptas_addr1_countryid_value");

                entity.Property(e => e.PtasAddr1IntlPostalcode).HasColumnName("ptas_addr1_intl_postalcode");

                entity.Property(e => e.PtasAddr1IntlStateprovince).HasColumnName("ptas_addr1_intl_stateprovince");

                entity.Property(e => e.PtasAddr1StateidValue).HasColumnName("_ptas_addr1_stateid_value");

                entity.Property(e => e.PtasAddr1StreetIntlAddress).HasColumnName("ptas_addr1_street_intl_address");

                entity.Property(e => e.PtasAddr1ZipcodeidValue).HasColumnName("_ptas_addr1_zipcodeid_value");

                entity.Property(e => e.PtasAddressvalidated).HasColumnName("ptas_addressvalidated");

                entity.Property(e => e.PtasAttentionname).HasColumnName("ptas_attentionname");

                entity.Property(e => e.PtasChangesource).HasColumnName("ptas_changesource");

                entity.Property(e => e.PtasCondounitidValue).HasColumnName("_ptas_condounitid_value");

                entity.Property(e => e.PtasEmail).HasColumnName("ptas_email");

                entity.Property(e => e.PtasForeclosure).HasColumnName("ptas_foreclosure");

                entity.Property(e => e.PtasIsnonusaddress).HasColumnName("ptas_isnonusaddress");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasLegacyrpaccountid).HasColumnName("ptas_legacyrpaccountid");

                entity.Property(e => e.PtasLevycodeCalc).HasColumnName("ptas_levycode_calc");

                entity.Property(e => e.PtasLevycodeidValue).HasColumnName("_ptas_levycodeid_value");

                entity.Property(e => e.PtasLockmailingaddress).HasColumnName("ptas_lockmailingaddress");

                entity.Property(e => e.PtasLotacreageCalc)
                    .HasColumnName("ptas_lotacreage_calc")
                    .HasColumnType("money");

                entity.Property(e => e.PtasMailingaddrfullline).HasColumnName("ptas_mailingaddrfullline");

                entity.Property(e => e.PtasMasspayeridValue).HasColumnName("_ptas_masspayerid_value");

                entity.Property(e => e.PtasMastertaxaccountidValue).HasColumnName("_ptas_mastertaxaccountid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNoxiousweedexempt).HasColumnName("ptas_noxiousweedexempt");

                entity.Property(e => e.PtasNoxiousweedreason).HasColumnName("ptas_noxiousweedreason");

                entity.Property(e => e.PtasPaperless).HasColumnName("ptas_paperless");

                entity.Property(e => e.PtasParcelidValue).HasColumnName("_ptas_parcelid_value");

                entity.Property(e => e.PtasPersonalpropertyidValue).HasColumnName("_ptas_personalpropertyid_value");

                entity.Property(e => e.PtasPhone1).HasColumnName("ptas_phone1");

                entity.Property(e => e.PtasPropertytype).HasColumnName("ptas_propertytype");

                entity.Property(e => e.PtasPropertytypeCalc).HasColumnName("ptas_propertytype_calc");

                entity.Property(e => e.PtasRatetype).HasColumnName("ptas_ratetype");

                entity.Property(e => e.PtasReason).HasColumnName("ptas_reason");

                entity.Property(e => e.PtasSeniorexemption).HasColumnName("ptas_seniorexemption");

                entity.Property(e => e.PtasShowrecordchanges).HasColumnName("ptas_showrecordchanges");

                entity.Property(e => e.PtasSnapshotdatetime).HasColumnName("ptas_snapshotdatetime");

                entity.Property(e => e.PtasSnapshottype).HasColumnName("ptas_snapshottype");

                entity.Property(e => e.PtasSoilfeeexempt).HasColumnName("ptas_soilfeeexempt");

                entity.Property(e => e.PtasSoilfeereason).HasColumnName("ptas_soilfeereason");

                entity.Property(e => e.PtasSplitcodeCalc).HasColumnName("ptas_splitcode_calc");

                entity.Property(e => e.PtasSubjecttoforeclosure).HasColumnName("ptas_subjecttoforeclosure");

                entity.Property(e => e.PtasTaxablestatus).HasColumnName("ptas_taxablestatus");

                entity.Property(e => e.PtasTaxpayername).HasColumnName("ptas_taxpayername");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasTaxbill>(entity =>
            {
                entity.ToTable("ptas_taxbill", "dynamics");

                entity.Property(e => e.PtasTaxbillid)
                    .HasColumnName("ptas_taxbillid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAccountnumber).HasColumnName("ptas_accountnumber");

                entity.Property(e => e.PtasInvoiceamount)
                    .HasColumnName("ptas_invoiceamount")
                    .HasColumnType("money");

                entity.Property(e => e.PtasInvoiceamountBase)
                    .HasColumnName("ptas_invoiceamount_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasInvoicedate).HasColumnName("ptas_invoicedate");

                entity.Property(e => e.PtasInvoicenumber).HasColumnName("ptas_invoicenumber");

                entity.Property(e => e.PtasMainframeisn).HasColumnName("ptas_mainframeisn");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasParceldetailidValue).HasColumnName("_ptas_parceldetailid_value");

                entity.Property(e => e.PtasReceivabletype).HasColumnName("ptas_receivabletype");

                entity.Property(e => e.PtasTaxyearidValue).HasColumnName("_ptas_taxyearid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasTaxbillCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_taxbill_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasTaxbillCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_taxbill_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasTaxbillModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_taxbill_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasTaxbillModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_taxbill_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasTaxbill)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_taxbill_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasTaxbillOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_taxbill_owninguser");

                entity.HasOne(d => d.PtasParceldetailidValueNavigation)
                    .WithMany(p => p.PtasTaxbill)
                    .HasForeignKey(d => d.PtasParceldetailidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_taxbill_ptas_parceldetailid");

                entity.HasOne(d => d.PtasTaxyearidValueNavigation)
                    .WithMany(p => p.PtasTaxbill)
                    .HasForeignKey(d => d.PtasTaxyearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_taxbill_ptas_taxyearid");
            });

            modelBuilder.Entity<PtasTaxdistrict>(entity =>
            {
                entity.ToTable("ptas_taxdistrict", "dynamics");

                entity.Property(e => e.PtasTaxdistrictid)
                    .HasColumnName("ptas_taxdistrictid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAnnexedtolibrary).HasColumnName("ptas_annexedtolibrary");

                entity.Property(e => e.PtasCountywidedistrict).HasColumnName("ptas_countywidedistrict");

                entity.Property(e => e.PtasFireannexyearidValue).HasColumnName("_ptas_fireannexyearid_value");

                entity.Property(e => e.PtasFiredistrictidValue).HasColumnName("_ptas_firedistrictid_value");

                entity.Property(e => e.PtasIncludeconstitutionalcheck).HasColumnName("ptas_includeconstitutionalcheck");

                entity.Property(e => e.PtasIncludeincheck).HasColumnName("ptas_includeincheck");

                entity.Property(e => e.PtasLeviedtaxyearidValue).HasColumnName("_ptas_leviedtaxyearid_value");

                entity.Property(e => e.PtasLevycharacteristics).HasColumnName("ptas_levycharacteristics");

                entity.Property(e => e.PtasLevycodeidValue).HasColumnName("_ptas_levycodeid_value");

                entity.Property(e => e.PtasLibraryannexeffectiveyearidValue).HasColumnName("_ptas_libraryannexeffectiveyearid_value");

                entity.Property(e => e.PtasLibrarydistrictidValue).HasColumnName("_ptas_librarydistrictid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasOverridingvotedrate)
                    .HasColumnName("ptas_overridingvotedrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasPopulation10k).HasColumnName("ptas_population10k");

                entity.Property(e => e.PtasSenioreligible).HasColumnName("ptas_senioreligible");

                entity.Property(e => e.PtasSoilfeeexempt).HasColumnName("ptas_soilfeeexempt");

                entity.Property(e => e.PtasStatutorymaxrate)
                    .HasColumnName("ptas_statutorymaxrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTaxdistrictidstring).HasColumnName("ptas_taxdistrictidstring");

                entity.Property(e => e.PtasTaxdistricttype).HasColumnName("ptas_taxdistricttype");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasTaxdistrictCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_taxdistrict_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasTaxdistrictCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_taxdistrict_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasTaxdistrictModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_taxdistrict_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasTaxdistrictModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_taxdistrict_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasTaxdistrict)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_taxdistrict_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasTaxdistrictOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_taxdistrict_owninguser");

                entity.HasOne(d => d.PtasFireannexyearidValueNavigation)
                    .WithMany(p => p.PtasTaxdistrictPtasFireannexyearidValueNavigation)
                    .HasForeignKey(d => d.PtasFireannexyearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_taxdistrict_ptas_fireannexyearid");

                entity.HasOne(d => d.PtasFiredistrictidValueNavigation)
                    .WithMany(p => p.InversePtasFiredistrictidValueNavigation)
                    .HasForeignKey(d => d.PtasFiredistrictidValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_taxdistrict_ptas_firedistrictid");

                entity.HasOne(d => d.PtasLeviedtaxyearidValueNavigation)
                    .WithMany(p => p.PtasTaxdistrictPtasLeviedtaxyearidValueNavigation)
                    .HasForeignKey(d => d.PtasLeviedtaxyearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_taxdistrict_ptas_leviedtaxyearid");

                entity.HasOne(d => d.PtasLevycodeidValueNavigation)
                    .WithMany(p => p.PtasTaxdistrict)
                    .HasForeignKey(d => d.PtasLevycodeidValue)
                    .HasConstraintName("FK_ptas_levycode_ptas_taxdistrict_ptas_levycodeid");

                entity.HasOne(d => d.PtasLibraryannexeffectiveyearidValueNavigation)
                    .WithMany(p => p.PtasTaxdistrictPtasLibraryannexeffectiveyearidValueNavigation)
                    .HasForeignKey(d => d.PtasLibraryannexeffectiveyearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_taxdistrict_ptas_libraryannexeffectiveyearid");

                entity.HasOne(d => d.PtasLibrarydistrictidValueNavigation)
                    .WithMany(p => p.InversePtasLibrarydistrictidValueNavigation)
                    .HasForeignKey(d => d.PtasLibrarydistrictidValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_taxdistrict_ptas_librarydistrictid");
            });

            modelBuilder.Entity<PtasTaxdistrictLevycode>(entity =>
            {
                entity.ToTable("ptas_taxdistrict_levycode", "dynamics");

                entity.Property(e => e.PtasTaxdistrictLevycodeid)
                    .HasColumnName("ptas_taxdistrict_levycodeid")
                    .ValueGeneratedNever();

                entity.Property(e => e.PtasLevycodeid).HasColumnName("ptas_levycodeid");

                entity.Property(e => e.PtasTaxdistrictid).HasColumnName("ptas_taxdistrictid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasTaxdistrictcontacts>(entity =>
            {
                entity.ToTable("ptas_taxdistrictcontacts", "dynamics");

                entity.Property(e => e.PtasTaxdistrictcontactsid)
                    .HasColumnName("ptas_taxdistrictcontactsid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAddress1).HasColumnName("ptas_address1");

                entity.Property(e => e.PtasAddress2).HasColumnName("ptas_address2");

                entity.Property(e => e.PtasCity).HasColumnName("ptas_city");

                entity.Property(e => e.PtasEmailaddress).HasColumnName("ptas_emailaddress");

                entity.Property(e => e.PtasFirstname).HasColumnName("ptas_firstname");

                entity.Property(e => e.PtasJobtitle).HasColumnName("ptas_jobtitle");

                entity.Property(e => e.PtasLastname).HasColumnName("ptas_lastname");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasOther).HasColumnName("ptas_other");

                entity.Property(e => e.PtasPhonenumber).HasColumnName("ptas_phonenumber");

                entity.Property(e => e.PtasPrincipalcontact).HasColumnName("ptas_principalcontact");

                entity.Property(e => e.PtasState).HasColumnName("ptas_state");

                entity.Property(e => e.PtasTaxdistrictidValue).HasColumnName("_ptas_taxdistrictid_value");

                entity.Property(e => e.PtasZipcode).HasColumnName("ptas_zipcode");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasTaxrollcorrection>(entity =>
            {
                entity.ToTable("ptas_taxrollcorrection", "dynamics");

                entity.Property(e => e.PtasTaxrollcorrectionid)
                    .HasColumnName("ptas_taxrollcorrectionid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAreaidValue).HasColumnName("_ptas_areaid_value");

                entity.Property(e => e.PtasChangereason).HasColumnName("ptas_changereason");

                entity.Property(e => e.PtasComments).HasColumnName("ptas_comments");

                entity.Property(e => e.PtasDateoforder)
                    .HasColumnName("ptas_dateoforder")
                    .HasColumnType("datetime");

                entity.Property(e => e.PtasDaterequested).HasColumnName("ptas_daterequested");

                entity.Property(e => e.PtasExtendtonexttaxyear).HasColumnName("ptas_extendtonexttaxyear");

                entity.Property(e => e.PtasLevycodeidValue).HasColumnName("_ptas_levycodeid_value");

                entity.Property(e => e.PtasManifesterror).HasColumnName("ptas_manifesterror");

                entity.Property(e => e.PtasManifesterrordiscoverydate).HasColumnName("ptas_manifesterrordiscoverydate");

                entity.Property(e => e.PtasManifesterrorreason).HasColumnName("ptas_manifesterrorreason");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNumber).HasColumnName("ptas_number");

                entity.Property(e => e.PtasParcelidValue).HasColumnName("_ptas_parcelid_value");

                entity.Property(e => e.PtasPropertyowner).HasColumnName("ptas_propertyowner");

                entity.Property(e => e.PtasPropertytypeidValue).HasColumnName("_ptas_propertytypeid_value");

                entity.Property(e => e.PtasRequestedbyidValue).HasColumnName("_ptas_requestedbyid_value");

                entity.Property(e => e.PtasReviewedbyidValue).HasColumnName("_ptas_reviewedbyid_value");

                entity.Property(e => e.PtasSeniorrevieweridValue).HasColumnName("_ptas_seniorreviewerid_value");

                entity.Property(e => e.PtasStatusdetails).HasColumnName("ptas_statusdetails");

                entity.Property(e => e.PtasSubareaidValue).HasColumnName("_ptas_subareaid_value");

                entity.Property(e => e.PtasTaxaccountidValue).HasColumnName("_ptas_taxaccountid_value");

                entity.Property(e => e.PtasTaxvaluereason).HasColumnName("ptas_taxvaluereason");

                entity.Property(e => e.PtasYearsofcorrection).HasColumnName("ptas_yearsofcorrection");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasTaxrollcorrectionCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_taxrollcorrection_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasTaxrollcorrectionCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_taxrollcorrection_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasTaxrollcorrectionModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_taxrollcorrection_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasTaxrollcorrectionModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_taxrollcorrection_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasTaxrollcorrection)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_taxrollcorrection_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasTaxrollcorrectionOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_taxrollcorrection_owninguser");

                entity.HasOne(d => d.PtasAreaidValueNavigation)
                    .WithMany(p => p.PtasTaxrollcorrection)
                    .HasForeignKey(d => d.PtasAreaidValue)
                    .HasConstraintName("FK_ptas_area_ptas_taxrollcorrection_ptas_areaid");

                entity.HasOne(d => d.PtasLevycodeidValueNavigation)
                    .WithMany(p => p.PtasTaxrollcorrection)
                    .HasForeignKey(d => d.PtasLevycodeidValue)
                    .HasConstraintName("FK_ptas_levycode_ptas_taxrollcorrection_ptas_levycodeid");

                entity.HasOne(d => d.PtasParcelidValueNavigation)
                    .WithMany(p => p.PtasTaxrollcorrection)
                    .HasForeignKey(d => d.PtasParcelidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_taxrollcorrection_ptas_parcelid");

                entity.HasOne(d => d.PtasPropertytypeidValueNavigation)
                    .WithMany(p => p.PtasTaxrollcorrection)
                    .HasForeignKey(d => d.PtasPropertytypeidValue)
                    .HasConstraintName("FK_ptas_propertytype_ptas_taxrollcorrection_ptas_propertytypeid");

                entity.HasOne(d => d.PtasRequestedbyidValueNavigation)
                    .WithMany(p => p.PtasTaxrollcorrectionPtasRequestedbyidValueNavigation)
                    .HasForeignKey(d => d.PtasRequestedbyidValue)
                    .HasConstraintName("FK_systemuser_ptas_taxrollcorrection_ptas_requestedbyid");

                entity.HasOne(d => d.PtasReviewedbyidValueNavigation)
                    .WithMany(p => p.PtasTaxrollcorrectionPtasReviewedbyidValueNavigation)
                    .HasForeignKey(d => d.PtasReviewedbyidValue)
                    .HasConstraintName("FK_systemuser_ptas_taxrollcorrection_ptas_reviewedbyid");

                entity.HasOne(d => d.PtasSeniorrevieweridValueNavigation)
                    .WithMany(p => p.PtasTaxrollcorrectionPtasSeniorrevieweridValueNavigation)
                    .HasForeignKey(d => d.PtasSeniorrevieweridValue)
                    .HasConstraintName("FK_systemuser_ptas_taxrollcorrection_ptas_seniorreviewerid");

                entity.HasOne(d => d.PtasSubareaidValueNavigation)
                    .WithMany(p => p.PtasTaxrollcorrection)
                    .HasForeignKey(d => d.PtasSubareaidValue)
                    .HasConstraintName("FK_ptas_subarea_ptas_taxrollcorrection_ptas_subareaid");

                entity.HasOne(d => d.PtasTaxaccountidValueNavigation)
                    .WithMany(p => p.PtasTaxrollcorrection)
                    .HasForeignKey(d => d.PtasTaxaccountidValue)
                    .HasConstraintName("FK_ptas_taxaccount_ptas_taxrollcorrection_ptas_taxaccountid");
            });

            modelBuilder.Entity<PtasTaxrollcorrectionvalue>(entity =>
            {
                entity.ToTable("ptas_taxrollcorrectionvalue", "dynamics");

                entity.Property(e => e.PtasTaxrollcorrectionvalueid)
                    .HasColumnName("ptas_taxrollcorrectionvalueid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAdjusttaxvalue).HasColumnName("ptas_adjusttaxvalue");

                entity.Property(e => e.PtasAppraisedimpfrom)
                    .HasColumnName("ptas_appraisedimpfrom")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAppraisedimpfromBase)
                    .HasColumnName("ptas_appraisedimpfrom_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAppraisedimpto)
                    .HasColumnName("ptas_appraisedimpto")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAppraisedimptoBase)
                    .HasColumnName("ptas_appraisedimpto_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAppraisedlandfrom)
                    .HasColumnName("ptas_appraisedlandfrom")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAppraisedlandfromBase)
                    .HasColumnName("ptas_appraisedlandfrom_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAppraisedlandto)
                    .HasColumnName("ptas_appraisedlandto")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAppraisedlandtoBase)
                    .HasColumnName("ptas_appraisedlandto_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasLevycodeidValue).HasColumnName("_ptas_levycodeid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasParceldetailidValue).HasColumnName("_ptas_parceldetailid_value");

                entity.Property(e => e.PtasTaxableimpfrom)
                    .HasColumnName("ptas_taxableimpfrom")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTaxableimpfromBase)
                    .HasColumnName("ptas_taxableimpfrom_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTaxableimpto)
                    .HasColumnName("ptas_taxableimpto")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTaxableimptoBase)
                    .HasColumnName("ptas_taxableimpto_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTaxablelandfrom)
                    .HasColumnName("ptas_taxablelandfrom")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTaxablelandfromBase)
                    .HasColumnName("ptas_taxablelandfrom_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTaxablelandto)
                    .HasColumnName("ptas_taxablelandto")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTaxablelandtoBase)
                    .HasColumnName("ptas_taxablelandto_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTaxaccountidValue).HasColumnName("_ptas_taxaccountid_value");

                entity.Property(e => e.PtasTaxrollcorrectionidValue).HasColumnName("_ptas_taxrollcorrectionid_value");

                entity.Property(e => e.PtasTaxrollyearidValue).HasColumnName("_ptas_taxrollyearid_value");

                entity.Property(e => e.PtasTotalappraisedfrom)
                    .HasColumnName("ptas_totalappraisedfrom")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalappraisedfromBase)
                    .HasColumnName("ptas_totalappraisedfrom_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalappraisedto)
                    .HasColumnName("ptas_totalappraisedto")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalappraisedtoBase)
                    .HasColumnName("ptas_totalappraisedto_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotaltaxablefrom)
                    .HasColumnName("ptas_totaltaxablefrom")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotaltaxablefromBase)
                    .HasColumnName("ptas_totaltaxablefrom_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotaltaxableto)
                    .HasColumnName("ptas_totaltaxableto")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotaltaxabletoBase)
                    .HasColumnName("ptas_totaltaxableto_base")
                    .HasColumnType("money");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasTaxrollcorrectionvalueCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_taxrollcorrectionvalue_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasTaxrollcorrectionvalueCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_taxrollcorrectionvalue_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasTaxrollcorrectionvalueModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_taxrollcorrectionvalue_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasTaxrollcorrectionvalueModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_taxrollcorrectionvalue_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasTaxrollcorrectionvalue)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_taxrollcorrectionvalue_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasTaxrollcorrectionvalueOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_taxrollcorrectionvalue_owninguser");

                entity.HasOne(d => d.PtasLevycodeidValueNavigation)
                    .WithMany(p => p.PtasTaxrollcorrectionvalue)
                    .HasForeignKey(d => d.PtasLevycodeidValue)
                    .HasConstraintName("FK_ptas_levycode_ptas_taxrollcorrectionvalue_ptas_levycodeid");

                entity.HasOne(d => d.PtasParceldetailidValueNavigation)
                    .WithMany(p => p.PtasTaxrollcorrectionvalue)
                    .HasForeignKey(d => d.PtasParceldetailidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_taxrollcorrectionvalue_ptas_parceldetailid");

                entity.HasOne(d => d.PtasTaxaccountidValueNavigation)
                    .WithMany(p => p.PtasTaxrollcorrectionvalue)
                    .HasForeignKey(d => d.PtasTaxaccountidValue)
                    .HasConstraintName("FK_ptas_taxaccount_ptas_taxrollcorrectionvalue_ptas_taxaccountid");

                entity.HasOne(d => d.PtasTaxrollcorrectionidValueNavigation)
                    .WithMany(p => p.PtasTaxrollcorrectionvalue)
                    .HasForeignKey(d => d.PtasTaxrollcorrectionidValue)
                    .HasConstraintName("FK_ptas_taxrollcorrection_ptas_taxrollcorrectionvalue_ptas_taxrollcorrectionid");

                entity.HasOne(d => d.PtasTaxrollyearidValueNavigation)
                    .WithMany(p => p.PtasTaxrollcorrectionvalue)
                    .HasForeignKey(d => d.PtasTaxrollyearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_taxrollcorrectionvalue_ptas_taxrollyearid");
            });

            modelBuilder.Entity<PtasTimberusetype>(entity =>
            {
                entity.ToTable("ptas_timberusetype", "dynamics");

                entity.Property(e => e.PtasTimberusetypeid)
                    .HasColumnName("ptas_timberusetypeid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasTaxyearValue).HasColumnName("_ptas_taxyear_value");

                entity.Property(e => e.PtasTimberlandgrade).HasColumnName("ptas_timberlandgrade");

                entity.Property(e => e.PtasTimberoperabilityclass).HasColumnName("ptas_timberoperabilityclass");

                entity.Property(e => e.PtasValueperacre)
                    .HasColumnName("ptas_valueperacre")
                    .HasColumnType("money");

                entity.Property(e => e.PtasValueperacreBase)
                    .HasColumnName("ptas_valueperacre_base")
                    .HasColumnType("money");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasTimberusetypeCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_timberusetype_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasTimberusetypeCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_timberusetype_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasTimberusetypeModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_timberusetype_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasTimberusetypeModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_timberusetype_modifiedonbehalfby");

                entity.HasOne(d => d.PtasTaxyearValueNavigation)
                    .WithMany(p => p.PtasTimberusetype)
                    .HasForeignKey(d => d.PtasTaxyearValue)
                    .HasConstraintName("FK_ptas_year_ptas_timberusetype_ptas_taxyear");
            });

            modelBuilder.Entity<PtasTrendfactor>(entity =>
            {
                entity.ToTable("ptas_trendfactor", "dynamics");

                entity.Property(e => e.PtasTrendfactorid)
                    .HasColumnName("ptas_trendfactorid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAge).HasColumnName("ptas_age");

                entity.Property(e => e.PtasAssessmentyearidValue).HasColumnName("_ptas_assessmentyearid_value");

                entity.Property(e => e.PtasInterestrate)
                    .HasColumnName("ptas_interestrate")
                    .HasColumnType("money");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasPercentgoodfactor)
                    .HasColumnName("ptas_percentgoodfactor")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTrendtable).HasColumnName("ptas_trendtable");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasTrendfactorCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_trendfactor_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasTrendfactorCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_trendfactor_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasTrendfactorModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_trendfactor_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasTrendfactorModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_trendfactor_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasTrendfactor)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_trendfactor_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasTrendfactorOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_trendfactor_owninguser");

                entity.HasOne(d => d.PtasAssessmentyearidValueNavigation)
                    .WithMany(p => p.PtasTrendfactor)
                    .HasForeignKey(d => d.PtasAssessmentyearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_trendfactor_ptas_assessmentyearid");
            });

            modelBuilder.Entity<PtasUnitbreakdown>(entity =>
            {
                entity.ToTable("ptas_unitbreakdown", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_unitbreakdown_modifiedon");

                entity.Property(e => e.PtasUnitbreakdownid)
                    .HasColumnName("ptas_unitbreakdownid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAddr1CompositeaddressOneline).HasColumnName("ptas_addr1_compositeaddress_oneline");

                entity.Property(e => e.PtasBuildingidValue).HasColumnName("_ptas_buildingid_value");

                entity.Property(e => e.PtasCityparcel)
                    .HasColumnName("ptas_cityparcel")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCondocomplexidValue).HasColumnName("_ptas_condocomplexid_value");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasDirectnavigation).HasColumnName("ptas_directnavigation");

                entity.Property(e => e.PtasDnrparcel)
                    .HasColumnName("ptas_dnrparcel")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFloatinghomeValue).HasColumnName("_ptas_floatinghome_value");

                entity.Property(e => e.PtasFurnished).HasColumnName("ptas_furnished");

                entity.Property(e => e.PtasGrosssqft).HasColumnName("ptas_grosssqft");

                entity.Property(e => e.PtasKitchen).HasColumnName("ptas_kitchen");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasLinearft).HasColumnName("ptas_linearft");

                entity.Property(e => e.PtasMasterunitbreakdownidValue).HasColumnName("_ptas_masterunitbreakdownid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNbrofbedrooms)
                    .HasColumnName("ptas_nbrofbedrooms")
                    .HasColumnType("money");

                entity.Property(e => e.PtasNetsqft).HasColumnName("ptas_netsqft");

                entity.Property(e => e.PtasNumberofbathrooms)
                    .HasColumnName("ptas_numberofbathrooms")
                    .HasColumnType("money");

                entity.Property(e => e.PtasNumberofbeds).HasColumnName("ptas_numberofbeds");

                entity.Property(e => e.PtasParcelheadername).HasColumnName("ptas_parcelheadername");

                entity.Property(e => e.PtasParcelheadertext).HasColumnName("ptas_parcelheadertext");

                entity.Property(e => e.PtasParcelheadertext2).HasColumnName("ptas_parcelheadertext2");

                entity.Property(e => e.PtasQuantity).HasColumnName("ptas_quantity");

                entity.Property(e => e.PtasShowrecordchanges).HasColumnName("ptas_showrecordchanges");

                entity.Property(e => e.PtasSlipGrade).HasColumnName("ptas_slip_grade");

                entity.Property(e => e.PtasSnapshotdatetime).HasColumnName("ptas_snapshotdatetime");

                entity.Property(e => e.PtasSnapshottype).HasColumnName("ptas_snapshottype");

                entity.Property(e => e.PtasSquarefootage).HasColumnName("ptas_squarefootage");

                entity.Property(e => e.PtasSubjectparcel)
                    .HasColumnName("ptas_subjectparcel")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTempcontrol).HasColumnName("ptas_tempcontrol");

                entity.Property(e => e.PtasUnitbreakdownroomtype).HasColumnName("ptas_unitbreakdownroomtype");

                entity.Property(e => e.PtasUnitbreakdowntypeidValue).HasColumnName("_ptas_unitbreakdowntypeid_value");

                entity.Property(e => e.PtasWidth).HasColumnName("ptas_width");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasUnitbreakdownCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_unitbreakdown_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasUnitbreakdownCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_unitbreakdown_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasUnitbreakdownModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_unitbreakdown_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasUnitbreakdownModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_unitbreakdown_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasUnitbreakdown)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_unitbreakdown_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasUnitbreakdownOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_unitbreakdown_owninguser");

                entity.HasOne(d => d.PtasBuildingidValueNavigation)
                    .WithMany(p => p.PtasUnitbreakdown)
                    .HasForeignKey(d => d.PtasBuildingidValue)
                    .HasConstraintName("FK_ptas_buildingdetail_ptas_unitbreakdown_ptas_buildingid");

                entity.HasOne(d => d.PtasCondocomplexidValueNavigation)
                    .WithMany(p => p.PtasUnitbreakdown)
                    .HasForeignKey(d => d.PtasCondocomplexidValue)
                    .HasConstraintName("FK_ptas_condocomplex_ptas_unitbreakdown_ptas_condocomplexid");

                entity.HasOne(d => d.PtasFloatinghomeValueNavigation)
                    .WithMany(p => p.PtasUnitbreakdown)
                    .HasForeignKey(d => d.PtasFloatinghomeValue)
                    .HasConstraintName("FK_ptas_condounit_ptas_unitbreakdown_ptas_floatinghome");

                entity.HasOne(d => d.PtasMasterunitbreakdownidValueNavigation)
                    .WithMany(p => p.InversePtasMasterunitbreakdownidValueNavigation)
                    .HasForeignKey(d => d.PtasMasterunitbreakdownidValue)
                    .HasConstraintName("FK_ptas_unitbreakdown_ptas_unitbreakdown_ptas_masterunitbreakdownid");

                entity.HasOne(d => d.PtasUnitbreakdowntypeidValueNavigation)
                    .WithMany(p => p.PtasUnitbreakdown)
                    .HasForeignKey(d => d.PtasUnitbreakdowntypeidValue)
                    .HasConstraintName("FK_ptas_unitbreakdowntype_ptas_unitbreakdown_ptas_unitbreakdowntypeid");
            });

            modelBuilder.Entity<PtasUnitbreakdownSnapshot>(entity =>
            {
                entity.HasKey(e => e.PtasUnitbreakdownid);

                entity.ToTable("ptas_unitbreakdown_snapshot", "dynamics");

                entity.Property(e => e.PtasUnitbreakdownid)
                    .HasColumnName("ptas_unitbreakdownid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAddr1CompositeaddressOneline).HasColumnName("ptas_addr1_compositeaddress_oneline");

                entity.Property(e => e.PtasBuildingidValue).HasColumnName("_ptas_buildingid_value");

                entity.Property(e => e.PtasCityparcel)
                    .HasColumnName("ptas_cityparcel")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCondocomplexidValue).HasColumnName("_ptas_condocomplexid_value");

                entity.Property(e => e.PtasDescription).HasColumnName("ptas_description");

                entity.Property(e => e.PtasDirectnavigation).HasColumnName("ptas_directnavigation");

                entity.Property(e => e.PtasDnrparcel)
                    .HasColumnName("ptas_dnrparcel")
                    .HasColumnType("money");

                entity.Property(e => e.PtasFloatinghomeValue).HasColumnName("_ptas_floatinghome_value");

                entity.Property(e => e.PtasFurnished).HasColumnName("ptas_furnished");

                entity.Property(e => e.PtasGrosssqft).HasColumnName("ptas_grosssqft");

                entity.Property(e => e.PtasKitchen).HasColumnName("ptas_kitchen");

                entity.Property(e => e.PtasLegacycreatedby).HasColumnName("ptas_legacycreatedby");

                entity.Property(e => e.PtasLegacycreatedon).HasColumnName("ptas_legacycreatedon");

                entity.Property(e => e.PtasLegacymodifiedby).HasColumnName("ptas_legacymodifiedby");

                entity.Property(e => e.PtasLegacymodifiedon).HasColumnName("ptas_legacymodifiedon");

                entity.Property(e => e.PtasLinearft).HasColumnName("ptas_linearft");

                entity.Property(e => e.PtasMasterunitbreakdownidValue).HasColumnName("_ptas_masterunitbreakdownid_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasNbrofbedrooms)
                    .HasColumnName("ptas_nbrofbedrooms")
                    .HasColumnType("money");

                entity.Property(e => e.PtasNetsqft).HasColumnName("ptas_netsqft");

                entity.Property(e => e.PtasNumberofbathrooms)
                    .HasColumnName("ptas_numberofbathrooms")
                    .HasColumnType("money");

                entity.Property(e => e.PtasNumberofbeds).HasColumnName("ptas_numberofbeds");

                entity.Property(e => e.PtasParcelheadername).HasColumnName("ptas_parcelheadername");

                entity.Property(e => e.PtasParcelheadertext).HasColumnName("ptas_parcelheadertext");

                entity.Property(e => e.PtasParcelheadertext2).HasColumnName("ptas_parcelheadertext2");

                entity.Property(e => e.PtasQuantity).HasColumnName("ptas_quantity");

                entity.Property(e => e.PtasShowrecordchanges).HasColumnName("ptas_showrecordchanges");

                entity.Property(e => e.PtasSlipGrade).HasColumnName("ptas_slip_grade");

                entity.Property(e => e.PtasSnapshotdatetime).HasColumnName("ptas_snapshotdatetime");

                entity.Property(e => e.PtasSnapshottype).HasColumnName("ptas_snapshottype");

                entity.Property(e => e.PtasSquarefootage).HasColumnName("ptas_squarefootage");

                entity.Property(e => e.PtasSubjectparcel)
                    .HasColumnName("ptas_subjectparcel")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTempcontrol).HasColumnName("ptas_tempcontrol");

                entity.Property(e => e.PtasUnitbreakdownroomtype).HasColumnName("ptas_unitbreakdownroomtype");

                entity.Property(e => e.PtasUnitbreakdowntypeidValue).HasColumnName("_ptas_unitbreakdowntypeid_value");

                entity.Property(e => e.PtasWidth).HasColumnName("ptas_width");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasUnitbreakdowntype>(entity =>
            {
                entity.ToTable("ptas_unitbreakdowntype", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_unitbreakdowntype_modifiedon");

                entity.Property(e => e.PtasUnitbreakdowntypeid)
                    .HasColumnName("ptas_unitbreakdowntypeid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasProjecttype).HasColumnName("ptas_projecttype");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasUnitbreakdowntypeCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_unitbreakdowntype_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasUnitbreakdowntypeCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_unitbreakdowntype_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasUnitbreakdowntypeModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_unitbreakdowntype_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasUnitbreakdowntypeModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_unitbreakdowntype_modifiedonbehalfby");
            });

            modelBuilder.Entity<PtasValuehistory>(entity =>
            {
                entity.ToTable("ptas_valuehistory", "dynamics");

                entity.Property(e => e.PtasValuehistoryid)
                    .HasColumnName("ptas_valuehistoryid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasAccountnumber).HasColumnName("ptas_accountnumber");

                entity.Property(e => e.PtasAddr1CompositeaddressOneline).HasColumnName("ptas_addr1_compositeaddress_oneline");

                entity.Property(e => e.PtasAlternatekey).HasColumnName("ptas_alternatekey");

                entity.Property(e => e.PtasAppraisedimpvalue)
                    .HasColumnName("ptas_appraisedimpvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAppraisedimpvalueBase)
                    .HasColumnName("ptas_appraisedimpvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAppraisedlandvalue)
                    .HasColumnName("ptas_appraisedlandvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAppraisedlandvalueBase)
                    .HasColumnName("ptas_appraisedlandvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasChangereason).HasColumnName("ptas_changereason");

                entity.Property(e => e.PtasDirectnavigation).HasColumnName("ptas_directnavigation");

                entity.Property(e => e.PtasFlag).HasColumnName("ptas_flag");

                entity.Property(e => e.PtasMarketvalue)
                    .HasColumnName("ptas_marketvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasMarketvalueBase)
                    .HasColumnName("ptas_marketvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasParcelheadername).HasColumnName("ptas_parcelheadername");

                entity.Property(e => e.PtasParcelheadertext).HasColumnName("ptas_parcelheadertext");

                entity.Property(e => e.PtasParcelheadertext2).HasColumnName("ptas_parcelheadertext2");

                entity.Property(e => e.PtasParcelidValue).HasColumnName("_ptas_parcelid_value");

                entity.Property(e => e.PtasRecvisn).HasColumnName("ptas_recvisn");

                entity.Property(e => e.PtasTaxableimpvalue)
                    .HasColumnName("ptas_taxableimpvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTaxableimpvalueBase)
                    .HasColumnName("ptas_taxableimpvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTaxablelandvalue)
                    .HasColumnName("ptas_taxablelandvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTaxablelandvalueBase)
                    .HasColumnName("ptas_taxablelandvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTaxstatus).HasColumnName("ptas_taxstatus");

                entity.Property(e => e.PtasTotalappraisedvalue)
                    .HasColumnName("ptas_totalappraisedvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalappraisedvalueBase)
                    .HasColumnName("ptas_totalappraisedvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotaltaxablevalue)
                    .HasColumnName("ptas_totaltaxablevalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotaltaxablevalueBase)
                    .HasColumnName("ptas_totaltaxablevalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasYearidValue).HasColumnName("_ptas_yearid_value");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasValuehistoryCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_valuehistory_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasValuehistoryCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_valuehistory_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasValuehistoryModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_valuehistory_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasValuehistoryModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_valuehistory_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasValuehistory)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_valuehistory_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasValuehistoryOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_valuehistory_owninguser");

                entity.HasOne(d => d.PtasParcelidValueNavigation)
                    .WithMany(p => p.PtasValuehistory)
                    .HasForeignKey(d => d.PtasParcelidValue)
                    .HasConstraintName("FK_ptas_parceldetail_ptas_valuehistory_ptas_parcelid");

                entity.HasOne(d => d.PtasYearidValueNavigation)
                    .WithMany(p => p.PtasValuehistory)
                    .HasForeignKey(d => d.PtasYearidValue)
                    .HasConstraintName("FK_ptas_year_ptas_valuehistory_ptas_yearid");
            });

            modelBuilder.Entity<PtasViewtype>(entity =>
            {
                entity.ToTable("ptas_viewtype", "dynamics");

                entity.Property(e => e.PtasViewtypeid)
                    .HasColumnName("ptas_viewtypeid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasViewtypeCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_viewtype_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasViewtypeCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_viewtype_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasViewtypeModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_viewtype_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasViewtypeModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_viewtype_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasViewtype)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_viewtype_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasViewtypeOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_viewtype_owninguser");
            });

            modelBuilder.Entity<PtasVisitedsketch>(entity =>
            {
                entity.ToTable("ptas_visitedsketch", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_visitedsketch_modifiedon");

                entity.Property(e => e.PtasVisitedsketchid)
                    .HasColumnName("ptas_visitedsketchid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.OwneridValue).HasColumnName("_ownerid_value");

                entity.Property(e => e.OwningbusinessunitValue).HasColumnName("_owningbusinessunit_value");

                entity.Property(e => e.OwningteamValue).HasColumnName("_owningteam_value");

                entity.Property(e => e.OwninguserValue).HasColumnName("_owninguser_value");

                entity.Property(e => e.PtasEdited).HasColumnName("ptas_edited");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasSketchidValue).HasColumnName("_ptas_sketchid_value");

                entity.Property(e => e.PtasVisitedbyidValue).HasColumnName("_ptas_visitedbyid_value");

                entity.Property(e => e.PtasVisiteddate).HasColumnName("ptas_visiteddate");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasVisitedsketchCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_visitedsketch_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasVisitedsketchCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_visitedsketch_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasVisitedsketchModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_visitedsketch_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasVisitedsketchModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_visitedsketch_modifiedonbehalfby");

                entity.HasOne(d => d.OwningteamValueNavigation)
                    .WithMany(p => p.PtasVisitedsketch)
                    .HasForeignKey(d => d.OwningteamValue)
                    .HasConstraintName("FK_team_ptas_visitedsketch_owningteam");

                entity.HasOne(d => d.OwninguserValueNavigation)
                    .WithMany(p => p.PtasVisitedsketchOwninguserValueNavigation)
                    .HasForeignKey(d => d.OwninguserValue)
                    .HasConstraintName("FK_systemuser_ptas_visitedsketch_owninguser");

                entity.HasOne(d => d.PtasSketchidValueNavigation)
                    .WithMany(p => p.PtasVisitedsketch)
                    .HasForeignKey(d => d.PtasSketchidValue)
                    .HasConstraintName("FK_ptas_sketch_ptas_visitedsketch_ptas_sketchid");

                entity.HasOne(d => d.PtasVisitedbyidValueNavigation)
                    .WithMany(p => p.PtasVisitedsketchPtasVisitedbyidValueNavigation)
                    .HasForeignKey(d => d.PtasVisitedbyidValue)
                    .HasConstraintName("FK_systemuser_ptas_visitedsketch_ptas_visitedbyid");
            });

            modelBuilder.Entity<PtasYear>(entity =>
            {
                entity.ToTable("ptas_year", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_year_modifiedon");

                entity.Property(e => e.PtasYearid)
                    .HasColumnName("ptas_yearid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.Ptas1constitutionalcheck)
                    .HasColumnName("ptas_1constitutionalcheck")
                    .HasColumnType("money");

                entity.Property(e => e.PtasAssessmentyearend).HasColumnName("ptas_assessmentyearend");

                entity.Property(e => e.PtasAssessmentyearstart).HasColumnName("ptas_assessmentyearstart");

                entity.Property(e => e.PtasCertified).HasColumnName("ptas_certified");

                entity.Property(e => e.PtasConstitutionalcheck)
                    .HasColumnName("ptas_constitutionalcheck")
                    .HasColumnType("money");

                entity.Property(e => e.PtasConstitutionalcheckBase)
                    .HasColumnName("ptas_constitutionalcheck_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasCostindexadjustmentvalue)
                    .HasColumnName("ptas_costindexadjustmentvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasEmailrecipients).HasColumnName("ptas_emailrecipients");

                entity.Property(e => e.PtasEnddate).HasColumnName("ptas_enddate");

                entity.Property(e => e.PtasImplicitpricedeflator)
                    .HasColumnName("ptas_implicitpricedeflator")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIntegralhomesiteimprovementsvalue)
                    .HasColumnName("ptas_integralhomesiteimprovementsvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIntegralhomesiteimprovementsvalueBase)
                    .HasColumnName("ptas_integralhomesiteimprovementsvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIntegralhomesiteperacrevalue)
                    .HasColumnName("ptas_integralhomesiteperacrevalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIntegralhomesiteperacrevalueBase)
                    .HasColumnName("ptas_integralhomesiteperacrevalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.PtasIscurrentassessmentyear).HasColumnName("ptas_iscurrentassessmentyear");

                entity.Property(e => e.PtasIscurrentcalendaryear).HasColumnName("ptas_iscurrentcalendaryear");

                entity.Property(e => e.PtasIsnextassessmentyear).HasColumnName("ptas_isnextassessmentyear");

                entity.Property(e => e.PtasIspreviousassessmentyear).HasColumnName("ptas_ispreviousassessmentyear");

                entity.Property(e => e.PtasLimitfactor)
                    .HasColumnName("ptas_limitfactor")
                    .HasColumnType("money");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasPersonalpropertyratio)
                    .HasColumnName("ptas_personalpropertyratio")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRealpropertyratio)
                    .HasColumnName("ptas_realpropertyratio")
                    .HasColumnType("money");

                entity.Property(e => e.PtasRollovernotificationidValue).HasColumnName("_ptas_rollovernotificationid_value");

                entity.Property(e => e.PtasStartdate).HasColumnName("ptas_startdate");

                entity.Property(e => e.PtasTotalfarmandagriculturalacres)
                    .HasColumnName("ptas_totalfarmandagriculturalacres")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalfarmandagriculturallandvalue)
                    .HasColumnName("ptas_totalfarmandagriculturallandvalue")
                    .HasColumnType("money");

                entity.Property(e => e.PtasTotalfarmandagriculturallandvalueBase)
                    .HasColumnName("ptas_totalfarmandagriculturallandvalue_base")
                    .HasColumnType("money");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasYearCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_year_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasYearCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_year_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasYearModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_year_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasYearModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_year_modifiedonbehalfby");

                entity.HasOne(d => d.PtasRollovernotificationidValueNavigation)
                    .WithMany(p => p.PtasYearPtasRollovernotificationidValueNavigation)
                    .HasForeignKey(d => d.PtasRollovernotificationidValue)
                    .HasConstraintName("FK_systemuser_ptas_year_ptas_rollovernotificationid");
            });

            modelBuilder.Entity<PtasZipcode>(entity =>
            {
                entity.ToTable("ptas_zipcode", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_zipcode_modifiedon");

                entity.Property(e => e.PtasZipcodeid)
                    .HasColumnName("ptas_zipcodeid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasZipcodeCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_zipcode_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasZipcodeCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_zipcode_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasZipcodeModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_zipcode_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasZipcodeModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_zipcode_modifiedonbehalfby");
            });

            modelBuilder.Entity<PtasZipcodeStateorprovince>(entity =>
            {
                entity.ToTable("ptas_zipcode_stateorprovince", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_zipcode_stateorprovince_modifiedon");

                entity.Property(e => e.PtasZipcodeStateorprovinceid)
                    .HasColumnName("ptas_zipcode_stateorprovinceid")
                    .ValueGeneratedNever();

                entity.Property(e => e.Modifiedon)
                    .HasColumnName("modifiedon")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.PtasStateorprovinceid).HasColumnName("ptas_stateorprovinceid");

                entity.Property(e => e.PtasZipcodeid).HasColumnName("ptas_zipcodeid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<PtasZoning>(entity =>
            {
                entity.ToTable("ptas_zoning", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_ptas_zoning_modifiedon");

                entity.Property(e => e.PtasZoningid)
                    .HasColumnName("ptas_zoningid")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.OrganizationidValue).HasColumnName("_organizationid_value");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.PtasName).HasColumnName("ptas_name");

                entity.Property(e => e.PtasTaxdistrictidValue).HasColumnName("_ptas_taxdistrictid_value");

                entity.Property(e => e.PtasZoneid).HasColumnName("ptas_zoneid");

                entity.Property(e => e.PtasZoningcode).HasColumnName("ptas_zoningcode");

                entity.Property(e => e.PtasZoningdescription).HasColumnName("ptas_zoningdescription");

                entity.Property(e => e.Statecode).HasColumnName("statecode");

                entity.Property(e => e.Statuscode).HasColumnName("statuscode");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.PtasZoningCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_zoning_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasZoningCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_zoning_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.PtasZoningModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_ptas_zoning_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.PtasZoningModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_ptas_zoning_modifiedonbehalfby");

                entity.HasOne(d => d.PtasTaxdistrictidValueNavigation)
                    .WithMany(p => p.PtasZoning)
                    .HasForeignKey(d => d.PtasTaxdistrictidValue)
                    .HasConstraintName("FK_ptas_taxdistrict_ptas_zoning_ptas_taxdistrictid");
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.ToTable("role", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_role_modifiedon");

                entity.Property(e => e.Roleid)
                    .HasColumnName("roleid")
                    .ValueGeneratedNever();

                entity.Property(e => e.BusinessunitidValue).HasColumnName("_businessunitid_value");

                entity.Property(e => e.Canbedeleted).HasColumnName("canbedeleted");

                entity.Property(e => e.Componentstate).HasColumnName("componentstate");

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.Iscustomizable).HasColumnName("iscustomizable");

                entity.Property(e => e.Isinherited).HasColumnName("isinherited");

                entity.Property(e => e.Ismanaged).HasColumnName("ismanaged");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.Organizationid).HasColumnName("organizationid");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.Overwritetime).HasColumnName("overwritetime");

                entity.Property(e => e.ParentroleidValue).HasColumnName("_parentroleid_value");

                entity.Property(e => e.ParentrootroleidValue).HasColumnName("_parentrootroleid_value");

                entity.Property(e => e.Roleidunique).HasColumnName("roleidunique");

                entity.Property(e => e.RoletemplateidValue).HasColumnName("_roletemplateid_value");

                entity.Property(e => e.Solutionid).HasColumnName("solutionid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.RoleCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_role_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.RoleCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_role_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.RoleModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_role_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.RoleModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_role_modifiedonbehalfby");

                entity.HasOne(d => d.ParentroleidValueNavigation)
                    .WithMany(p => p.InverseParentroleidValueNavigation)
                    .HasForeignKey(d => d.ParentroleidValue)
                    .HasConstraintName("FK_role_role_parentroleid");

                entity.HasOne(d => d.ParentrootroleidValueNavigation)
                    .WithMany(p => p.InverseParentrootroleidValueNavigation)
                    .HasForeignKey(d => d.ParentrootroleidValue)
                    .HasConstraintName("FK_role_role_parentrootroleid");
            });

            modelBuilder.Entity<Stringmap>(entity =>
            {
                entity.ToTable("stringmap", "dynamics");

                entity.HasIndex(e => e.Displayorder)
                    .HasName("Idx_displayorder");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_stringmap_modifiedon");

                entity.HasIndex(e => new { e.Attributename, e.Objecttypecode })
                    .HasName("Idx_attributename_objecttypecode");

                entity.Property(e => e.Stringmapid)
                    .HasColumnName("stringmapid")
                    .ValueGeneratedNever();

                entity.Property(e => e.Attributename)
                    .HasColumnName("attributename")
                    .HasMaxLength(1000);

                entity.Property(e => e.Attributevalue).HasColumnName("attributevalue");

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.Langid).HasColumnName("langid");

                entity.Property(e => e.Modifiedon)
                    .HasColumnName("modifiedon")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.Objecttypecode)
                    .HasColumnName("objecttypecode")
                    .HasMaxLength(1000);

                entity.Property(e => e.Organizationid).HasColumnName("organizationid");

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasMaxLength(4000);

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<Systemuser>(entity =>
            {
                entity.ToTable("systemuser", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_systemuser_modifiedon");

                entity.HasIndex(e => new { e.Systemuserid, e.Fullname })
                    .HasName("IX_fullname");

                entity.Property(e => e.Systemuserid)
                    .HasColumnName("systemuserid")
                    .ValueGeneratedNever();

                entity.Property(e => e.Accessmode).HasColumnName("accessmode");

                entity.Property(e => e.Address1Addressid).HasColumnName("address1_addressid");

                entity.Property(e => e.Address1Addresstypecode).HasColumnName("address1_addresstypecode");

                entity.Property(e => e.Address1City).HasColumnName("address1_city");

                entity.Property(e => e.Address1Composite).HasColumnName("address1_composite");

                entity.Property(e => e.Address1Country).HasColumnName("address1_country");

                entity.Property(e => e.Address1County).HasColumnName("address1_county");

                entity.Property(e => e.Address1Fax).HasColumnName("address1_fax");

                entity.Property(e => e.Address1Latitude).HasColumnName("address1_latitude");

                entity.Property(e => e.Address1Line1).HasColumnName("address1_line1");

                entity.Property(e => e.Address1Line2).HasColumnName("address1_line2");

                entity.Property(e => e.Address1Line3).HasColumnName("address1_line3");

                entity.Property(e => e.Address1Longitude).HasColumnName("address1_longitude");

                entity.Property(e => e.Address1Name).HasColumnName("address1_name");

                entity.Property(e => e.Address1Postalcode).HasColumnName("address1_postalcode");

                entity.Property(e => e.Address1Postofficebox).HasColumnName("address1_postofficebox");

                entity.Property(e => e.Address1Shippingmethodcode).HasColumnName("address1_shippingmethodcode");

                entity.Property(e => e.Address1Stateorprovince).HasColumnName("address1_stateorprovince");

                entity.Property(e => e.Address1Telephone1).HasColumnName("address1_telephone1");

                entity.Property(e => e.Address1Telephone2).HasColumnName("address1_telephone2");

                entity.Property(e => e.Address1Telephone3).HasColumnName("address1_telephone3");

                entity.Property(e => e.Address1Upszone).HasColumnName("address1_upszone");

                entity.Property(e => e.Address1Utcoffset).HasColumnName("address1_utcoffset");

                entity.Property(e => e.Address2Addressid).HasColumnName("address2_addressid");

                entity.Property(e => e.Address2Addresstypecode).HasColumnName("address2_addresstypecode");

                entity.Property(e => e.Address2City).HasColumnName("address2_city");

                entity.Property(e => e.Address2Composite).HasColumnName("address2_composite");

                entity.Property(e => e.Address2Country).HasColumnName("address2_country");

                entity.Property(e => e.Address2County).HasColumnName("address2_county");

                entity.Property(e => e.Address2Fax).HasColumnName("address2_fax");

                entity.Property(e => e.Address2Latitude).HasColumnName("address2_latitude");

                entity.Property(e => e.Address2Line1).HasColumnName("address2_line1");

                entity.Property(e => e.Address2Line2).HasColumnName("address2_line2");

                entity.Property(e => e.Address2Line3).HasColumnName("address2_line3");

                entity.Property(e => e.Address2Longitude).HasColumnName("address2_longitude");

                entity.Property(e => e.Address2Name).HasColumnName("address2_name");

                entity.Property(e => e.Address2Postalcode).HasColumnName("address2_postalcode");

                entity.Property(e => e.Address2Postofficebox).HasColumnName("address2_postofficebox");

                entity.Property(e => e.Address2Shippingmethodcode).HasColumnName("address2_shippingmethodcode");

                entity.Property(e => e.Address2Stateorprovince).HasColumnName("address2_stateorprovince");

                entity.Property(e => e.Address2Telephone1).HasColumnName("address2_telephone1");

                entity.Property(e => e.Address2Telephone2).HasColumnName("address2_telephone2");

                entity.Property(e => e.Address2Telephone3).HasColumnName("address2_telephone3");

                entity.Property(e => e.Address2Upszone).HasColumnName("address2_upszone");

                entity.Property(e => e.Address2Utcoffset).HasColumnName("address2_utcoffset");

                entity.Property(e => e.Applicationid).HasColumnName("applicationid");

                entity.Property(e => e.Applicationiduri).HasColumnName("applicationiduri");

                entity.Property(e => e.Azureactivedirectoryobjectid).HasColumnName("azureactivedirectoryobjectid");

                entity.Property(e => e.BusinessunitidValue).HasColumnName("_businessunitid_value");

                entity.Property(e => e.CalendaridValue).HasColumnName("_calendarid_value");

                entity.Property(e => e.Caltype).HasColumnName("caltype");

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Defaultfilterspopulated).HasColumnName("defaultfilterspopulated");

                entity.Property(e => e.DefaultmailboxValue).HasColumnName("_defaultmailbox_value");

                entity.Property(e => e.Defaultodbfoldername).HasColumnName("defaultodbfoldername");

                entity.Property(e => e.Disabledreason).HasColumnName("disabledreason");

                entity.Property(e => e.Displayinserviceviews).HasColumnName("displayinserviceviews");

                entity.Property(e => e.Domainname).HasColumnName("domainname");

                entity.Property(e => e.Emailrouteraccessapproval).HasColumnName("emailrouteraccessapproval");

                entity.Property(e => e.Employeeid).HasColumnName("employeeid");

                entity.Property(e => e.EntityimageTimestamp).HasColumnName("entityimage_timestamp");

                entity.Property(e => e.EntityimageUrl).HasColumnName("entityimage_url");

                entity.Property(e => e.Entityimageid).HasColumnName("entityimageid");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Firstname).HasColumnName("firstname");

                entity.Property(e => e.Fullname)
                    .HasColumnName("fullname")
                    .HasMaxLength(500);

                entity.Property(e => e.Governmentid).HasColumnName("governmentid");

                entity.Property(e => e.Homephone).HasColumnName("homephone");

                entity.Property(e => e.Identityid).HasColumnName("identityid");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.Incomingemaildeliverymethod).HasColumnName("incomingemaildeliverymethod");

                entity.Property(e => e.Internalemailaddress).HasColumnName("internalemailaddress");

                entity.Property(e => e.Invitestatuscode).HasColumnName("invitestatuscode");

                entity.Property(e => e.Isdisabled).HasColumnName("isdisabled");

                entity.Property(e => e.Isemailaddressapprovedbyo365admin).HasColumnName("isemailaddressapprovedbyo365admin");

                entity.Property(e => e.Isintegrationuser).HasColumnName("isintegrationuser");

                entity.Property(e => e.Islicensed).HasColumnName("islicensed");

                entity.Property(e => e.Issyncwithdirectory).HasColumnName("issyncwithdirectory");

                entity.Property(e => e.Jobtitle).HasColumnName("jobtitle");

                entity.Property(e => e.Lastname).HasColumnName("lastname");

                entity.Property(e => e.Middlename).HasColumnName("middlename");

                entity.Property(e => e.Mobilealertemail).HasColumnName("mobilealertemail");

                entity.Property(e => e.MobileofflineprofileidValue).HasColumnName("_mobileofflineprofileid_value");

                entity.Property(e => e.Mobilephone).HasColumnName("mobilephone");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.MsdynGdproptout).HasColumnName("msdyn_gdproptout");

                entity.Property(e => e.Nickname).HasColumnName("nickname");

                entity.Property(e => e.Organizationid).HasColumnName("organizationid");

                entity.Property(e => e.Outgoingemaildeliverymethod).HasColumnName("outgoingemaildeliverymethod");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.ParentsystemuseridValue).HasColumnName("_parentsystemuserid_value");

                entity.Property(e => e.Passporthi).HasColumnName("passporthi");

                entity.Property(e => e.Passportlo).HasColumnName("passportlo");

                entity.Property(e => e.Personalemailaddress).HasColumnName("personalemailaddress");

                entity.Property(e => e.Photourl).HasColumnName("photourl");

                entity.Property(e => e.PositionidValue).HasColumnName("_positionid_value");

                entity.Property(e => e.Preferredaddresscode).HasColumnName("preferredaddresscode");

                entity.Property(e => e.Preferredemailcode).HasColumnName("preferredemailcode");

                entity.Property(e => e.Preferredphonecode).HasColumnName("preferredphonecode");

                entity.Property(e => e.Processid).HasColumnName("processid");

                entity.Property(e => e.PtasLegacyid).HasColumnName("ptas_legacyid");

                entity.Property(e => e.PtasTaskassignmentnotification).HasColumnName("ptas_taskassignmentnotification");

                entity.Property(e => e.PtasTaskstatusnotification).HasColumnName("ptas_taskstatusnotification");

                entity.Property(e => e.QueueidValue).HasColumnName("_queueid_value");

                entity.Property(e => e.Salutation).HasColumnName("salutation");

                entity.Property(e => e.Setupuser).HasColumnName("setupuser");

                entity.Property(e => e.Sharepointemailaddress).HasColumnName("sharepointemailaddress");

                entity.Property(e => e.SiteidValue).HasColumnName("_siteid_value");

                entity.Property(e => e.Skills).HasColumnName("skills");

                entity.Property(e => e.Stageid).HasColumnName("stageid");

                entity.Property(e => e.TerritoryidValue).HasColumnName("_territoryid_value");

                entity.Property(e => e.Timezoneruleversionnumber).HasColumnName("timezoneruleversionnumber");

                entity.Property(e => e.Title).HasColumnName("title");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Traversedpath).HasColumnName("traversedpath");

                entity.Property(e => e.Userlicensetype).HasColumnName("userlicensetype");

                entity.Property(e => e.Userpuid).HasColumnName("userpuid");

                entity.Property(e => e.Utcconversiontimezonecode).HasColumnName("utcconversiontimezonecode");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.Property(e => e.Windowsliveid).HasColumnName("windowsliveid");

                entity.Property(e => e.Yammeremailaddress).HasColumnName("yammeremailaddress");

                entity.Property(e => e.Yammeruserid).HasColumnName("yammeruserid");

                entity.Property(e => e.Yomifirstname).HasColumnName("yomifirstname");

                entity.Property(e => e.Yomifullname).HasColumnName("yomifullname");

                entity.Property(e => e.Yomilastname).HasColumnName("yomilastname");

                entity.Property(e => e.Yomimiddlename).HasColumnName("yomimiddlename");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.InverseCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_systemuser_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.InverseCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_systemuser_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.InverseModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_systemuser_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.InverseModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_systemuser_modifiedonbehalfby");

                entity.HasOne(d => d.ParentsystemuseridValueNavigation)
                    .WithMany(p => p.InverseParentsystemuseridValueNavigation)
                    .HasForeignKey(d => d.ParentsystemuseridValue)
                    .HasConstraintName("FK_systemuser_systemuser_parentsystemuserid");
            });

            modelBuilder.Entity<Systemuserroles>(entity =>
            {
                entity.HasKey(e => e.Systemuserroleid);

                entity.ToTable("systemuserroles", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_systemuserroles_modifiedon");

                entity.Property(e => e.Systemuserroleid)
                    .HasColumnName("systemuserroleid")
                    .ValueGeneratedNever();

                entity.Property(e => e.Modifiedon)
                    .HasColumnName("modifiedon")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.Roleid).HasColumnName("roleid");

                entity.Property(e => e.Systemuserid).HasColumnName("systemuserid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<Team>(entity =>
            {
                entity.ToTable("team", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_team_modifiedon");

                entity.Property(e => e.Teamid)
                    .HasColumnName("teamid")
                    .ValueGeneratedNever();

                entity.Property(e => e.AdministratoridValue).HasColumnName("_administratorid_value");

                entity.Property(e => e.Azureactivedirectoryobjectid).HasColumnName("azureactivedirectoryobjectid");

                entity.Property(e => e.BusinessunitidValue).HasColumnName("_businessunitid_value");

                entity.Property(e => e.CreatedbyValue).HasColumnName("_createdby_value");

                entity.Property(e => e.Createdon).HasColumnName("createdon");

                entity.Property(e => e.CreatedonbehalfbyValue).HasColumnName("_createdonbehalfby_value");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.Emailaddress).HasColumnName("emailaddress");

                entity.Property(e => e.Exchangerate)
                    .HasColumnName("exchangerate")
                    .HasColumnType("money");

                entity.Property(e => e.Importsequencenumber).HasColumnName("importsequencenumber");

                entity.Property(e => e.Isdefault).HasColumnName("isdefault");

                entity.Property(e => e.Membershiptype).HasColumnName("membershiptype");

                entity.Property(e => e.ModifiedbyValue).HasColumnName("_modifiedby_value");

                entity.Property(e => e.Modifiedon).HasColumnName("modifiedon");

                entity.Property(e => e.ModifiedonbehalfbyValue).HasColumnName("_modifiedonbehalfby_value");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.Organizationid).HasColumnName("organizationid");

                entity.Property(e => e.Overriddencreatedon).HasColumnName("overriddencreatedon");

                entity.Property(e => e.Processid).HasColumnName("processid");

                entity.Property(e => e.QueueidValue).HasColumnName("_queueid_value");

                entity.Property(e => e.RegardingobjectidValue).HasColumnName("_regardingobjectid_value");

                entity.Property(e => e.Stageid).HasColumnName("stageid");

                entity.Property(e => e.Systemmanaged).HasColumnName("systemmanaged");

                entity.Property(e => e.TeamtemplateidValue).HasColumnName("_teamtemplateid_value");

                entity.Property(e => e.Teamtype).HasColumnName("teamtype");

                entity.Property(e => e.TransactioncurrencyidValue).HasColumnName("_transactioncurrencyid_value");

                entity.Property(e => e.Traversedpath).HasColumnName("traversedpath");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.Property(e => e.Yominame).HasColumnName("yominame");

                entity.HasOne(d => d.AdministratoridValueNavigation)
                    .WithMany(p => p.TeamAdministratoridValueNavigation)
                    .HasForeignKey(d => d.AdministratoridValue)
                    .HasConstraintName("FK_systemuser_team_administratorid");

                entity.HasOne(d => d.CreatedbyValueNavigation)
                    .WithMany(p => p.TeamCreatedbyValueNavigation)
                    .HasForeignKey(d => d.CreatedbyValue)
                    .HasConstraintName("FK_systemuser_team_createdby");

                entity.HasOne(d => d.CreatedonbehalfbyValueNavigation)
                    .WithMany(p => p.TeamCreatedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.CreatedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_team_createdonbehalfby");

                entity.HasOne(d => d.ModifiedbyValueNavigation)
                    .WithMany(p => p.TeamModifiedbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedbyValue)
                    .HasConstraintName("FK_systemuser_team_modifiedby");

                entity.HasOne(d => d.ModifiedonbehalfbyValueNavigation)
                    .WithMany(p => p.TeamModifiedonbehalfbyValueNavigation)
                    .HasForeignKey(d => d.ModifiedonbehalfbyValue)
                    .HasConstraintName("FK_systemuser_team_modifiedonbehalfby");
            });

            modelBuilder.Entity<Teammembership>(entity =>
            {
                entity.ToTable("teammembership", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_teammembership_modifiedon");

                entity.Property(e => e.Teammembershipid)
                    .HasColumnName("teammembershipid")
                    .ValueGeneratedNever();

                entity.Property(e => e.Modifiedon)
                    .HasColumnName("modifiedon")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.Systemuserid).HasColumnName("systemuserid");

                entity.Property(e => e.Teamid).HasColumnName("teamid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<Teamprofiles>(entity =>
            {
                entity.HasKey(e => e.Teamprofileid);

                entity.ToTable("teamprofiles", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_teamprofiles_modifiedon");

                entity.Property(e => e.Teamprofileid)
                    .HasColumnName("teamprofileid")
                    .ValueGeneratedNever();

                entity.Property(e => e.Fieldsecurityprofileid).HasColumnName("fieldsecurityprofileid");

                entity.Property(e => e.Modifiedon)
                    .HasColumnName("modifiedon")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.Teamid).HasColumnName("teamid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            modelBuilder.Entity<Teamroles>(entity =>
            {
                entity.HasKey(e => e.Teamroleid);

                entity.ToTable("teamroles", "dynamics");

                entity.HasIndex(e => e.Modifiedon)
                    .HasName("Idx_teamroles_modifiedon");

                entity.Property(e => e.Teamroleid)
                    .HasColumnName("teamroleid")
                    .ValueGeneratedNever();

                entity.Property(e => e.Modifiedon)
                    .HasColumnName("modifiedon")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.Roleid).HasColumnName("roleid");

                entity.Property(e => e.Teamid).HasColumnName("teamid");

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");
            });

            this.OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}