namespace CustomSearchesServicesLibrary.CustomSearches.Services.CustomImporters
{
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using CustomSearchesEFLibrary.CustomSearches;
    using CustomSearchesEFLibrary.CustomSearches.Model;
    using CustomSearchesServicesLibrary.CustomSearches.Enumeration;
    using CustomSearchesServicesLibrary.CustomSearches.Model;
    using CustomSearchesServicesLibrary.CustomSearches.Model.CustomImporters;
    using CustomSearchesServicesLibrary.CustomSearches.Model.DatasetPostProcesses;
    using CustomSearchesServicesLibrary.CustomSearches.ProjectBusinessLogic;
    using CustomSearchesServicesLibrary.Exception;
    using CustomSearchesServicesLibrary.ServiceFramework;

    /// <summary>
    /// Base service to imports annual update adjustments post process.
    /// </summary>
    public class ImportAnnualUpdateAdjustmentsPostProcessService : BaseService
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportAnnualUpdateAdjustmentsPostProcessService"/> class.
        /// </summary>
        /// <param name="serviceContext">The service context.</param>
        public ImportAnnualUpdateAdjustmentsPostProcessService(IServiceContext serviceContext)
            : base(serviceContext)
        {
        }

        /// <summary>
        /// Updates the the dataset post process data with the information of the extensions in the custom search expressions.
        /// </summary>
        /// <param name="dataset">The dataset.</param>
        /// <param name="datasetPostProcessData">The dataset post process data to update.</param>
        public void UpdateDatasetPostProcessData(Dataset dataset, DatasetPostProcessData datasetPostProcessData)
        {
            var extensions = datasetPostProcessData.ExceptionPostProcessRules
                ?.Select(r => r.CustomSearchExpressions
                    ?.FirstOrDefault(e => e.ExpressionRole.Trim().ToLower() == CustomSearchExpressionRoleType.FilterExpression.ToString().ToLower()))
                        ?.Select(e => JsonHelper.DeserializeObject<AnnualUpdateAdjustmentsExtensionsData>(JsonHelper.SerializeObject(e.ExpressionExtensions)));

            this.ValidateExtensions(extensions);

            // Gets DatasetPostProcess
            string postprocessNameLower =
                datasetPostProcessData.PostProcessName == null ? string.Empty : datasetPostProcessData.PostProcessName.ToLower();
            string postprocessRoleLower =
                datasetPostProcessData.PostProcessRole == null ? string.Empty : datasetPostProcessData.PostProcessRole.ToLower();
            string postprocessTypeLower =
                DatasetPostProcessType.ExceptionPostProcess.ToString().ToLower();

            DatasetPostProcess datasetPostProcess = dataset.DatasetPostProcess
                .Where(p =>
                    (p.DatasetId == datasetPostProcessData.DatasetId)
                     && ((p.PostProcessName == null ? string.Empty : p.PostProcessName.ToLower()) == postprocessNameLower)
                     && ((p.PostProcessRole == null ? string.Empty : p.PostProcessRole.ToLower()) == postprocessRoleLower)
                     && ((p.PostProcessType == null ? string.Empty : p.PostProcessType.ToLower()) == postprocessTypeLower))
                .FirstOrDefault();

            InputValidationHelper.AssertEntityExists(datasetPostProcess, nameof(DatasetPostProcess), datasetPostProcessData.PostProcessName);

            // Updates dataset post process
            datasetPostProcess.ExceptionPostProcessRule.Clear();
            foreach (var extension in extensions)
            {
                SetupAnnualUpdateAdjustmentsService.AddDefaultAnnualExceptionRule(datasetPostProcess, extension);
            }

            DatasetPostProcessData auxDatasetPostProcessData =
                new DatasetPostProcessData(
                    datasetPostProcess,
                    ModelInitializationType.FullObjectWithDepedendencies,
                    userDetails: null,
                    includeAutoGenerated: true);

            datasetPostProcessData.ExceptionPostProcessRules = auxDatasetPostProcessData.ExceptionPostProcessRules;

            // Keep default values in properties that should not change.
            datasetPostProcessData.TraceEnabledFields = JsonHelper.DeserializeObject(datasetPostProcess.TraceEnabledFields);
            datasetPostProcessData.PostProcessSubType = datasetPostProcess.PostProcessSubType;
            datasetPostProcessData.PostProcessDefinition = datasetPostProcess.PostProcessDefinition;
        }

        /// <summary>
        /// Updates the the dataset post process data with the information of the extensions in the custom search expressions.
        /// </summary>
        /// <param name="extensions">The dataset post process data to update.</param>
        public void ValidateExtensions(IEnumerable<AnnualUpdateAdjustmentsExtensionsData> extensions)
        {
            if (extensions == null || extensions.Count() < SetupAnnualUpdateAdjustmentsService.Categories.Length)
            {
                throw new CustomSearchesRequestBodyException(
                    $"There must be a default custom search expression extension for each category.",
                    innerException: null);
            }

            List<AnnualUpdateAdjustmentsExtensionsData> defaultExtensions = new List<AnnualUpdateAdjustmentsExtensionsData>();
            foreach (var category in SetupAnnualUpdateAdjustmentsService.Categories)
            {
                var extension = extensions.LastOrDefault(e => e.Category?.Trim().ToLower() == category.ToLower());

                if (extension == null)
                {
                    throw new CustomSearchesRequestBodyException(
                        $"There must be a default custom search expression extension for category '{category}'.",
                        innerException: null);
                }

                if (!string.IsNullOrWhiteSpace(extension.UserFilter))
                {
                    throw new CustomSearchesRequestBodyException(
                        $"The {nameof(extension.UserFilter)} extension for category '{category}' should be null.",
                        innerException: null);
                }

                if (extension.MinimumLandValueToFactor != 0)
                {
                    throw new CustomSearchesRequestBodyException(
                        $"The {nameof(extension.MinimumLandValueToFactor)} extension for category '{category}' should be 0.",
                        innerException: null);
                }

                defaultExtensions.Add(extension);
            }

            if (extensions.Count(e => string.IsNullOrWhiteSpace(e.UserFilter)) != SetupAnnualUpdateAdjustmentsService.Categories.Length)
            {
                throw new CustomSearchesRequestBodyException(
                    $"Only default custom search expression extensions can have an empty user filter.",
                    innerException: null);
            }

            var landExtensions = extensions.Where(e => e.Category.Trim().ToLower() == SetupAnnualUpdateAdjustmentsService.LandCategory);
            foreach (var landExtension in landExtensions)
            {
                if (landExtension.ApplyFactorTo.Trim().ToLower() != SetupAnnualUpdateAdjustmentsService.LandFactorName.ToString().ToLower())
                {
                    throw new CustomSearchesRequestBodyException(
                        $"The '{nameof(landExtension.ApplyFactorTo)}' extension" +
                        $" should be '{SetupAnnualUpdateAdjustmentsService.LandFactorName}' for '{landExtension.Category}' category.",
                        innerException: null);
                }
            }
        }

        /// <summary>
        /// Creates and adds the default annual update exception rule to the dataset post process data.
        /// </summary>
        /// <param name="datasetPostProcessId">The dataset post process id.</param>
        /// <param name="columnName">The column name.</param>
        /// <param name="datasetPostProcessData">The dataset post process data.</param>
        public void AddDefaultAnnualUpdateExceptionRule(
        int datasetPostProcessId,
        string columnName,
        DatasetPostProcessData datasetPostProcessData)
        {
            var defaultExceptionPostProcessRule =
                SetupLandModelService.CreateDefaultLandModelExceptionRule(datasetPostProcessId, columnName, datasetPostProcessData.PostProcessRole);

            var defaultExceptionPostProcessRuleData =
                new ExceptionPostProcessRuleData(defaultExceptionPostProcessRule, ModelInitializationType.FullObjectWithDepedendencies, includeAutoGenerated: true);

            var exceptionPostProcessRuleList = new List<ExceptionPostProcessRuleData>();
            if (datasetPostProcessData.ExceptionPostProcessRules?.Length > 0)
            {
                exceptionPostProcessRuleList.AddRange(datasetPostProcessData.ExceptionPostProcessRules);
            }

            exceptionPostProcessRuleList.Add(defaultExceptionPostProcessRuleData);
            datasetPostProcessData.ExceptionPostProcessRules = exceptionPostProcessRuleList.ToArray();
        }

        /// <summary>
        /// Imports and execute the schedule post process.
        /// </summary>
        /// <param name="datasetPostProcessData">The dataset post process data to update.</param>
        /// <param name="dbContext">The database context.</param>
        /// <returns>
        /// The job id.
        /// </returns>
        /// <exception cref="CustomSearchesEntityNotFoundException">Dataset was not found.</exception>
        /// <exception cref="AuthorizationException">Not authorized request.</exception>
        /// <exception cref="CustomSearchesRequestBodyException">Required parameter was not added or parameter has an invalid value.</exception>
        /// <exception cref="CustomExpressionValidationException">Exception in validation of expressions.</exception>
        /// <exception cref="CustomSearchesConflictException">Can't alter the dataset.</exception>
        public async Task<IdResult> ImportAnnualUpdateAdjustmentsPostProcessAsync(
            DatasetPostProcessData datasetPostProcessData,
            CustomSearchesDbContext dbContext)
        {
            var dataset = await DatasetHelper.LoadDatasetWithDependenciesAsync(
                dbContext,
                datasetPostProcessData.DatasetId,
                includeRelatedExpressions: true,
                includeParentFolder: true,
                includeInverseSourceDatasets: false,
                includeUserProject: false,
                includeDatasetUserClientState: false);

            // To avoid dataset post process modifications in database.
            DatasetHelper.DetachDatasetWithDependencies(dbContext, dataset);

            // Updates the dataset post process data using the expression extensions.
            this.UpdateDatasetPostProcessData(dataset, datasetPostProcessData);

            // Imports the exception post process.
            ImportExceptionPostProcessService importService = new ImportExceptionPostProcessService(this.ServiceContext);
            await importService.ImportExceptionPostProcessAsync(datasetPostProcessData, dbContext, validateOnlyFilterExpressions: true);

            // Queues the exception post process.
            ExecuteDatasetPostProcessService executeService = new ExecuteDatasetPostProcessService(this.ServiceContext);

            DatasetPostProcess applyAnnualUpdateAdjustmentsPostProcess = dataset.DatasetPostProcess
                .Where(p =>
                    ((p.PostProcessName == null ? string.Empty : p.PostProcessName.ToLower()) == SetupAnnualUpdateAdjustmentsService.ApplyAnnualUpdateAdjustmentsPostProcessName.ToLower())
                     && ((p.PostProcessRole == null ? string.Empty : p.PostProcessRole.ToLower()) == AnnualUpdateProjectBusinessLogic.ApplyAnnualUpdateAdjustmentsPostProcessRole.ToLower())
                     && ((p.PostProcessType == null ? string.Empty : p.PostProcessType.ToLower()) == DatasetPostProcessType.ExceptionPostProcess.ToString().ToLower()))
                .FirstOrDefault();

            InputValidationHelper.AssertEntityExists(applyAnnualUpdateAdjustmentsPostProcess, nameof(DatasetPostProcess), SetupAnnualUpdateAdjustmentsService.ApplyAnnualUpdateAdjustmentsPostProcessName);

            if (applyAnnualUpdateAdjustmentsPostProcess == null)
            {
                throw new CustomSearchesEntityNotFoundException(
                    $"The dataset should have a exception post process with role '{AnnualUpdateProjectBusinessLogic.ApplyAnnualUpdateAdjustmentsPostProcessRole}'",
                    innerException: null);
            }

            return await executeService.QueueExecuteDatasetPostProcessAsync(
                dataset.DatasetId,
                applyAnnualUpdateAdjustmentsPostProcess.DatasetPostProcessId,
                major: null,
                minor: null,
                parameters: null,
                dataStream: null,
                dbContext);
        }
    }
}
