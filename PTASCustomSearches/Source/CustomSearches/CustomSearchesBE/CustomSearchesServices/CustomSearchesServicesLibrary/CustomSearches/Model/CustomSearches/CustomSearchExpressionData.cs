namespace CustomSearchesServicesLibrary.CustomSearches.Model.CustomSearches
{
    using System;
    using CustomSearchesEFLibrary.CustomSearches.Model;
    using CustomSearchesServicesLibrary.CustomSearches.Enumeration;

    /// <summary>
    /// Model for the data of the custom search expression.
    /// </summary>
    public class CustomSearchExpressionData
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomSearchExpressionData"/> class.
        /// </summary>
        public CustomSearchExpressionData()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomSearchExpressionData"/> class.
        /// </summary>
        /// <param name="expression">The expression.</param>
        /// <param name="initializationType">Type of the initialization.</param>
        public CustomSearchExpressionData(CustomSearchExpression expression, ModelInitializationType initializationType)
        {
            this.CustomSearchExpressionId = expression.CustomSearchExpressionId;
            this.DatasetId = expression.DatasetId;
            this.CustomSearchColumnDefinitionId = expression.CustomSearchColumnDefinitionId;
            this.CustomSearchParameterId = expression.CustomSearchParameterId;
            this.DatasetPostProcessId = expression.DatasetPostProcessId;
            this.DatasetChartId = expression.DatasetChartId;
            this.ProjectTypeId = expression.ProjectTypeId;
            this.RScriptModelId = expression.RscriptModelId;
            this.OwnerType = expression.OwnerType?.Trim();
            this.ExpressionType = expression.ExpressionType?.Trim();
            this.ExpressionRole = expression.ExpressionRole?.Trim();
            this.Script = expression.Script?.Trim();
            this.ColumnName = expression.ColumnName?.Trim();
            this.ExceptionPostProcessRuleId = expression.ExceptionPostProcessRuleId;
            this.Category = expression.Category?.Trim();
            this.Note = expression.Note?.Trim();
            this.ExpressionGroup = expression.ExpressionGroup?.Trim();
            this.IsAutoGenerated = expression.IsAutoGenerated;
            this.ExpressionExtensions = JsonHelper.DeserializeObject(expression.ExpressionExtensions);

            if (initializationType == ModelInitializationType.FullObject ||
                initializationType == ModelInitializationType.FullObjectWithDepedendencies)
            {
            }
        }

        /// <summary>
        /// Gets or sets the custom search expression id.
        /// </summary>
        public int CustomSearchExpressionId { get; set; }

        /// <summary>
        /// Gets or sets the dataset id.
        /// </summary>
        public Guid? DatasetId { get; set; }

        /// <summary>
        /// Gets or sets the custom search column definition id.
        /// </summary>
        public int? CustomSearchColumnDefinitionId { get; set; }

        /// <summary>
        /// Gets or sets the custom search parameter id.
        /// </summary>
        public int? CustomSearchParameterId { get; set; }

        /// <summary>
        /// Gets or sets the dataset post process id.
        /// </summary>
        public int? DatasetPostProcessId { get; set; }

        /// <summary>
        /// Gets or sets the dataset chart id.
        /// </summary>
        public int? DatasetChartId { get; set; }

        /// <summary>
        /// Gets or sets the project type id.
        /// </summary>
        public int? ProjectTypeId { get; set; }

        /// <summary>
        /// Gets or sets the project type id.
        /// </summary>
        public int? RScriptModelId { get; set; }

        /// <summary>
        /// Gets or sets the owner type.
        /// </summary>
        public string OwnerType { get; set; }

        /// <summary>
        /// Gets or sets the expression type.
        /// </summary>
        public string ExpressionType { get; set; }

        /// <summary>
        /// Gets or sets the expression role.
        /// </summary>
        public string ExpressionRole { get; set; }

        /// <summary>
        /// Gets or sets the script.
        /// </summary>
        public string Script { get; set; }

        /// <summary>
        /// Gets or sets the column name.
        /// </summary>
        public string ColumnName { get; set; }

        /// <summary>
        /// Gets or sets the expression category.
        /// </summary>
        public string Category { get; set; }

        /// <summary>
        /// Gets or sets the expression note.
        /// </summary>
        public string Note { get; set; }

        /// <summary>
        /// Gets or sets the expression group name.
        /// </summary>
        public string ExpressionGroup { get; set; }

        /// <summary>
        /// Gets or sets the exception post process rule id.
        /// </summary>
        public int? ExceptionPostProcessRuleId { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the expression is auto generated.
        /// </summary>
        public bool IsAutoGenerated { get; set; }

        /// <summary>
        /// Gets or sets the expression extensions.
        /// </summary>
        public object ExpressionExtensions { get; set; }

        /// <summary>
        /// Converts to an entity framework model.
        /// </summary>
        /// <returns>The entity framework model.</returns>
        public CustomSearchExpression ToEfModel()
        {
            var toReturn = new CustomSearchExpression()
            {
                CustomSearchExpressionId = this.CustomSearchExpressionId,
                DatasetId = this.DatasetId,
                CustomSearchColumnDefinitionId = this.CustomSearchColumnDefinitionId,
                CustomSearchParameterId = this.CustomSearchParameterId,
                DatasetPostProcessId = this.DatasetPostProcessId,
                ExceptionPostProcessRuleId = this.ExceptionPostProcessRuleId,
                DatasetChartId = this.DatasetChartId,
                ProjectTypeId = this.ProjectTypeId,
                RscriptModelId = this.RScriptModelId,
                OwnerType = this.OwnerType?.Trim(),
                ExpressionType = this.ExpressionType?.Trim(),
                ExpressionRole = this.ExpressionRole?.Trim(),
                Script = this.Script?.Trim(),
                ColumnName = this.ColumnName?.Trim(),
                Category = this.Category?.Trim(),
                Note = this.Note?.Trim(),
                IsAutoGenerated = this.IsAutoGenerated,
                ExpressionGroup = this.ExpressionGroup?.Trim(),
            };

            toReturn.ExpressionExtensions = JsonHelper.SerializeObject(this.ExpressionExtensions);

            return toReturn;
        }
    }
}
